"-- ARWIN'S VERSION Bundled by luabundle {\"version\":\"1.7.0\"}\r\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\r\n    local loadingPlaceholder = {[{}] = true}\r\n\r\n    local register\r\n    local modules = {}\r\n\r\n    local require\r\n    local loaded = {}\r\n\r\n    register = function(name, body)\r\n        if not modules[name] then\r\n            modules[name] = body\r\n        end\r\n    end\r\n\r\n    require = function(name)\r\n        local loadedModule = loaded[name]\r\n\r\n        if loadedModule then\r\n            if loadedModule == loadingPlaceholder then\r\n                return nil\r\n            end\r\n        else\r\n            if not modules[name] then\r\n                if not superRequire then\r\n                    local identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\r\n                    error('Tried to require ' .. identifier .. ', but no such module has been registered')\r\n                else\r\n                    return superRequire(name)\r\n                end\r\n            end\r\n\r\n            loaded[name] = loadingPlaceholder\r\n            loadedModule = modules[name](require, loaded, register, modules)\r\n            loaded[name] = loadedModule\r\n        end\r\n\r\n        return loadedModule\r\n    end\r\n\r\n    return require, loaded, register, modules\r\nend)(require)\r\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n    --[[\r\n    The Global script:\r\n    - register the modules,\r\n    - call onLoad (and later onSave) on them.\r\n    - show a UI or use the 'autoLoadedSettings' to set up the modules.\r\n    That's all. When set up, the LeaderSelection module will proceed with the\r\n    next step and finally call TurnControl.startGame to effectively start the\r\n    game.\r\n\r\n    In case you don't know, the source code for this mod is available at:\r\n    https://github.com/Chatanga/DuneImmorality/tree/rakis\r\n]]\r\n\r\n    -- Will be automatically replaced by the build timestamp.\r\n    local BUILD = '04/01/2025 03:12:35 PM'\r\n\r\n    local MOD_NAME = 'Rakis Rising'\r\n\r\n    -- Do not load anything. Appropriate to work on the mod content in TTS without\r\n    -- interference from the scripts.\r\n    local constructionModeEnabled = false\r\n\r\n    -- For test purposes (the secondary table won't disappear as a side effect).\r\n    local autoLoadedSettings = nil\r\n\r\n    --[[\r\nautoLoadedSettings = {\r\n    language = \"en\",\r\n    numberOfPlayers = 4,\r\n    hotSeat = true,\r\n    firstPlayer = \"Red\",\r\n    randomizePlayerPositions = false,\r\n    wormEatsTheCard = true,\r\n    useContracts = true,\r\n    legacy = false,\r\n    merakon = false,\r\n    riseOfIx = false,\r\n    epicMode = false,\r\n    immortality = false,\r\n    goTo11 = false,\r\n    leaderSelection = {\r\n        Red = \"bl_Chani\",\r\n        Green = \"bl_Mohiam\",\r\n        Yellow = \"bl_Liet\",\r\n        Blue = \"bl_Hasimir\",\r\n    },\r\n    horizontalHandLayout = true,\r\n    soundEnabled = true,\r\n    submitGameRankedGame = false,\r\n}\r\n]]\r\n    -- autoLoadedSettings = {\r\n    --     language = \"en\",\r\n    --     numberOfPlayers = 4,\r\n    --     hotSeat = true,\r\n    --     firstPlayer = \"Red\",\r\n    --     randomizePlayerPositions = false,\r\n    --     wormEatsTheCard = true,\r\n    --     useContracts = true,\r\n    --     legacy = false,\r\n    --     merakon = false,\r\n    --     riseOfIx = false,\r\n    --     epicMode = false,\r\n    --     immortality = false,\r\n    --     goTo11 = false,\r\n    --     leaderSelection = {\r\n    --         Red = \"bl_Chani\",\r\n    --         Green = \"bl_Mohiam\",\r\n    --         Yellow = \"bl_Liet\",\r\n    --         Blue = \"bl_Hasimir\",\r\n    --     },\r\n    --     horizontalHandLayout = true,\r\n    --     soundEnabled = true,\r\n    --     submitGameRankedGame = false,\r\n    -- }\r\n\r\n    local Module = require(\"utils.Module\")\r\n    local Helper = require(\"utils.Helper\")\r\n    local XmlUI = require(\"utils.XmlUI\")\r\n    local AcquireCard = require(\"utils.AcquireCard\")\r\n    local I18N = require(\"utils.I18N\")\r\n    local Dialog = require(\"utils.Dialog\")\r\n\r\n    --[[\r\n    Remember that 'require' must have a literal parameter, since it is not a\r\n    real function, but simply a macro for 'luabundler'.\r\n\r\n    Note that \"CardEffect\" is not here since it is always hard required by the\r\n    other modules.\r\n]]\r\n    local allModules = Module.registerModules({\r\n        AcquireCard, -- To take advantage of Module.registerModuleRedirections.\r\n        Action = require(\"Action\"),\r\n        Board = require(\"Board\"),\r\n        ChoamContractMarket = require(\"ChoamContractMarket\"),\r\n        SardaukarSkillMarket = require(\"SardaukarSkillMarket\"),\r\n        Combat = require(\"Combat\"),\r\n        Commander = require(\"Commander\"),\r\n        ConflictCard = require(\"ConflictCard\"),\r\n        ShippingTrack = require(\"ShippingTrack\"),\r\n        Deck = require(\"Deck\"),\r\n        ScoreBoard = require(\"ScoreBoard\"),\r\n        Hagal = require(\"Hagal\"),\r\n        HagalCard = require(\"HagalCard\"),\r\n        ImperiumCard = require(\"ImperiumCard\"),\r\n        ImperiumRow = require(\"ImperiumRow\"),\r\n        InfluenceTrack = require(\"InfluenceTrack\"),\r\n        Intrigue = require(\"Intrigue\"),\r\n        Leader = require(\"Leader\"),\r\n        LeaderSelection = require(\"LeaderSelection\"),\r\n        Locale = require(\"Locale\"),\r\n        MainBoard = require(\"MainBoard\"),\r\n        Music = require(\"Music\"),\r\n        Pdf = require(\"Pdf\"),\r\n        PlayBoard = require(\"PlayBoard\"),\r\n        Reserve = require(\"Reserve\"),\r\n        Resource = require(\"Resource\"),\r\n        Rival = require(\"Rival\"),\r\n        TechMarket = require(\"TechMarket\"),\r\n        TechCard = require(\"TechCard\"),\r\n        TleilaxuResearch = require(\"TleilaxuResearch\"),\r\n        TleilaxuRow = require(\"TleilaxuRow\"),\r\n        ThroneRow = require(\"ThroneRow\"),\r\n        TurnControl = require(\"TurnControl\"),\r\n        Types = require(\"Types\"),\r\n        SubmitGame = require(\"SubmitGame\"),\r\n    })\r\n\r\n    local Controller = {\r\n        -- The view.\r\n        ui = nil,\r\n        -- The model.\r\n        -- A 'xxx_all' member is not a UI field, but defines the options for the\r\n        -- corresponding 'xxx' field.\r\n        fields = {\r\n            language_all = {\r\n                en = \"english\",\r\n                fr = \"french\",\r\n            },\r\n            language = \"en\",\r\n            virtualHotSeat = false,\r\n            virtualHotSeatMode_all = {\r\n                \"onePlayerTwoRivals\",\r\n                \"twoPlayersOneRival\",\r\n                \"threePlayers\",\r\n                \"fourPlayers\",\r\n                \"twoTeams\",\r\n            },\r\n            virtualHotSeatMode = XmlUI.HIDDEN,\r\n            firstPlayer = \"Red\",\r\n            firstPlayer_all = {\r\n                random = \"random\",\r\n                Red = \"Red\",\r\n            },\r\n            randomizePlayerPositions = true,\r\n            wormEatsTheCard = true,\r\n            difficulty_all = allModules.Hagal.getDifficulties(),\r\n            difficulty = XmlUI.HIDDEN,\r\n            autoTurnInSolo = XmlUI.DISABLED,\r\n            imperiumRowChurn = XmlUI.DISABLED,\r\n            streamlinedRivals = XmlUI.DISABLED,\r\n            brutalEscalation = XmlUI.DISABLED,\r\n            expertDeployment = XmlUI.DISABLED,\r\n            smartPolitics = XmlUI.DISABLED,\r\n            useContracts = true,\r\n            legacy = XmlUI.DISABLED,\r\n            merakon = XmlUI.DISABLED,\r\n            riseOfIx = XmlUI.DISABLED,\r\n            epicMode = XmlUI.DISABLED,\r\n            immortality = false,\r\n            goTo11 = XmlUI.DISABLED,\r\n            leaderSelection_all = allModules.LeaderSelection.getSelectionMethods(4),\r\n            leaderSelection = \"reversePick\",\r\n            leaderPoolSize_range = {min = 4, max = 18},\r\n            leaderPoolSize = 9,\r\n            leaderPoolSizeLabel = \"-\",\r\n            tweakLeaderSelection = false,\r\n            horizontalHandLayout = true,\r\n            formalCombatPhase = true,\r\n            soundEnabled = true,\r\n            submitGameRankedGame = true,\r\n        }}\r\n\r\n        -- The game settings, set by the startup menu when pressing the \"Setup\" button\r\n        -- or automatically using the autoLoadedSettings variable.\r\n        local settings\r\n\r\n        --- TTS event handler.\r\n        function onLoad(scriptState)\r\n            log(\"--------< \" .. MOD_NAME .. \" - \" .. BUILD .. \" >--------\")\r\n\r\n            -- All transient objects (mostly anchors, but also some zones) are destroyed\r\n            -- at startup, then recreated in the 'onLoad' functions (and 'staticSetup'\r\n            -- methods in case the game has already been set up).\r\n            Helper.destroyTransientObjects()\r\n\r\n            if constructionModeEnabled then\r\n                -- Edit the player boards in a procedural way.\r\n                if false then\r\n                    allModules.PlayBoard.rebuild()\r\n                end\r\n                -- Regenerate the decks in the localized cached areas.\r\n                if false then\r\n                    allModules.Deck.rebuildPreloadAreas()\r\n                end\r\n                -- Regenerate the boards for each language.\r\n                if false then\r\n                    allModules.Board.rebuildPreloadAreas()\r\n                end\r\n            else\r\n                -- The destroyed objects need one frame to disappear and not interfere\r\n                -- with the mod.\r\n                Helper.onceFramesPassed(1).doAfter(function ()\r\n                    Dialog.loadStaticUI().doAfter(function ()\r\n                        asyncOnLoad(scriptState)\r\n                    end)\r\n                end)\r\n            end\r\n        end\r\n\r\n        ---\r\n        function asyncOnLoad(scriptState)\r\n            local tables = Helper.resolveGUIDs(false, {\r\n                primaryTable = \"2b4b92\",\r\n                secondaryTable = \"662ced\",\r\n            })\r\n            Helper.noPhysicsNorPlay(\r\n                tables.primaryTable,\r\n            tables.secondaryTable)\r\n\r\n            local state = scriptState ~= \"\" and JSON.decode(scriptState) or {}\r\n            settings = state.settings\r\n\r\n            -- Make it available to 'Helper.postError'.\r\n            Global.setVar(\"saveInfo\", {\r\n                modname = MOD_NAME,\r\n                build = BUILD,\r\n                stable = state.stable or \"prime\",\r\n            });\r\n\r\n            -- TODO Detail dependencies? An explicit graph would be useful.\r\n            allModules.ordered = {\r\n                {name = \"Locale\", module = allModules.Locale},\r\n                {name = \"Action\", module = allModules.Action},\r\n                {name = \"Board\", module = allModules.Board},\r\n                {name = \"Pdf\", module = allModules.Pdf},\r\n                {name = \"Music\", module = allModules.Music},\r\n                {name = \"Deck\", module = allModules.Deck},\r\n                {name = \"ScoreBoard\", module = allModules.ScoreBoard},\r\n                {name = \"Hagal\", module = allModules.Hagal},\r\n                {name = \"Commander\", module = allModules.Commander},\r\n                {name = \"PlayBoard\", module = allModules.PlayBoard},\r\n                {name = \"ShippingTrack\", module = allModules.ShippingTrack},\r\n                {name = \"TechMarket\", module = allModules.TechMarket},\r\n                {name = \"MainBoard\", module = allModules.MainBoard},\r\n                {name = \"Combat\", module = allModules.Combat},\r\n                {name = \"ChoamContractMarket\", module = allModules.ChoamContractMarket},\r\n                {name = \"SardaukarSkillMarket\", module = allModules.SardaukarSkillMarket},\r\n                {name = \"InfluenceTrack\", module = allModules.InfluenceTrack},\r\n                {name = \"Intrigue\", module = allModules.Intrigue},\r\n                {name = \"ImperiumRow\", module = allModules.ImperiumRow},\r\n                {name = \"Reserve\", module = allModules.Reserve},\r\n                {name = \"TleilaxuResearch\", module = allModules.TleilaxuResearch},\r\n                {name = \"TleilaxuRow\", module = allModules.TleilaxuRow},\r\n                {name = \"ThroneRow\", module = allModules.ThroneRow},\r\n                {name = \"TurnControl\", module = allModules.TurnControl},\r\n                {name = \"LeaderSelection\", module = allModules.LeaderSelection},\r\n                {name = \"SubmitGame\", module = allModules.SubmitGame},\r\n            }\r\n\r\n            -- We cannot use Module.callOnAllRegisteredModules(\"onLoad\", state),\r\n            -- because the order matter, now that we reload with \"staticSetUp\" (for the\r\n            -- same reason setUp is ordered too).\r\n            for i, moduleInfo in ipairs(allModules.ordered) do\r\n                --Helper.dump(i, \" - Load module\", moduleInfo.name)\r\n                moduleInfo.module.onLoad(state)\r\n                Helper.emitEvent(\"loaded\", moduleInfo.name)\r\n            end\r\n            --Helper.dump(\"Done loading all modules\")\r\n\r\n            -- List the TTS events we want to make available in the modules.\r\n            Module.registerModuleRedirections({\r\n                \"onPlayerChangeColor\",\r\n                \"onPlayerConnect\",\r\n                \"onPlayerDisconnect\",\r\n                \"onObjectEnterZone\",\r\n                \"onObjectLeaveZone\",\r\n                \"onObjectEnterContainer\",\r\n                \"onObjectLeaveContainer\",\r\n                \"onObjectDrop\",\r\n            })\r\n\r\n            local uiAlreadySetUp = false\r\n            if not state.settings then\r\n                if autoLoadedSettings then\r\n                    I18N.setLocale(autoLoadedSettings.language or \"en\")\r\n                    Helper.onceFramesPassed(1).doAfter(function ()\r\n                        setUp(autoLoadedSettings)\r\n                    end)\r\n                else\r\n                    Controller.ui = XmlUI.new(Global, \"setupPane\", Controller.fields)\r\n                    Controller.ui:show()\r\n                    Controller.soloUi = XmlUI.new(Global, \"soloSetupPane\", Controller.fields)\r\n                    I18N.setLocale(Controller.fields.language)\r\n                    Controller.updateLeaderPoolSizeLabel()\r\n                    Controller.updateSetupButton()\r\n                    uiAlreadySetUp = true\r\n                end\r\n            end\r\n            if not uiAlreadySetUp then\r\n                -- Force the translation of the whole UI (not restricted to the \"setupPane\" actually)\r\n                -- since the other panels are also used after the setup.\r\n                XmlUI.new(Global)\r\n            end\r\n        end\r\n\r\n        --- TTS event handler.\r\n        function onSave()\r\n            if constructionModeEnabled then\r\n                return\r\n            end\r\n\r\n            if settings then\r\n                local stable = Helper.isStabilized(true)\r\n\r\n                --[[\r\n            TTS will ignore the ongoing save if:\r\n            - it has the same (serialized) value as the previous,\r\n            - the world hasn't physically changed meanwhile.\r\n            That's why we store the date and \"shake\" the world\r\n            when we detect an unstable save (ie. a save occuring\r\n            while one or more continuations are still alive).\r\n        ]]\r\n\r\n                if not stable then\r\n                    -- Shake the world a bit.\r\n                    Wait.time(function ()\r\n                        local primaryTable = getObjectFromGUID(\"2b4b92\")\r\n                        primaryTable.setName(primaryTable.getName() == \"\" and \"...\" or \"\")\r\n                    end, 0.5, 2)\r\n                end\r\n\r\n                local savedState = {\r\n                    date = os.time(),\r\n                    settings = settings,\r\n                    stable = stable and \"stable\" or \"unstable\",\r\n                }\r\n\r\n                -- FIXME Only call it for the same modules for which \"onLoad\" has been called.\r\n                Module.callOnAllRegisteredModules(\"onSave\", savedState)\r\n                return JSON.encode(savedState)\r\n            else\r\n                -- We do not save anything until the game is set up.\r\n                return ''\r\n            end\r\n        end\r\n\r\n        --- TTS event handler.\r\n        function onObjectDestroy(object)\r\n            if object.getGUID() == \"2b4b92\" then\r\n                Module.unregisterAllModuleRedirections()\r\n                --Helper.destroyTransientObjects()\r\n                Helper.dump(\"Bye!\")\r\n            end\r\n        end\r\n\r\n        --- Set up the game, an irreversible operation.\r\n        function setUp(newSettings)\r\n            assert(newSettings)\r\n\r\n            local continuation = Helper.createContinuation(\"setUp\")\r\n            if newSettings.randomizePlayerPositions then\r\n                Helper.randomizePlayerPositions(Controller.getProperlySeatedPlayers()).doAfter(continuation.run)\r\n            else\r\n                continuation.run()\r\n            end\r\n\r\n            continuation.doAfter(function ()\r\n                -- Not assigned before in order to avoid saving anything.\r\n                settings = newSettings\r\n\r\n                local properlySeatedPlayers = Controller.getProperlySeatedPlayers()\r\n                local activeOpponents = Controller.findActiveOpponents(properlySeatedPlayers, newSettings.numberOfPlayers)\r\n                runSetUp(1, activeOpponents)\r\n            end)\r\n\r\n            -- TurnControl.start() is called by \"LeaderSelection\" asynchronously,\r\n            -- effectively starting the game.\r\n        end\r\n\r\n        --- Set up each module, one by one.\r\n        function runSetUp(index, activeOpponents)\r\n            local moduleInfo = allModules.ordered[index]\r\n            if moduleInfo then\r\n                --Helper.dump(index, \" - Set up module\", moduleInfo.name)\r\n                local nextContinuation = moduleInfo.module.setUp(settings, activeOpponents)\r\n                if not nextContinuation then\r\n                    nextContinuation = Helper.createContinuation(\"runSetUp\")\r\n                    nextContinuation.run()\r\n                end\r\n                nextContinuation.doAfter(Helper.partialApply(runSetUp, index + 1, activeOpponents))\r\n            else\r\n                --Helper.dump(\"Done setting all modules\")\r\n            end\r\n        end\r\n\r\n        --- TTS event handler.\r\n        function onPlayerChangeColor()\r\n            Controller.updateSetupButton()\r\n            Controller.updateSelectionMethods()\r\n        end\r\n\r\n        --- TTS event handler.\r\n        function onPlayerConnect()\r\n            Controller.updateSetupButton()\r\n            Controller.updateSelectionMethods()\r\n        end\r\n\r\n        --- TTS event handler.\r\n        function onPlayerDisconnect()\r\n            Controller.updateSetupButton()\r\n            Controller.updateSelectionMethods()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setLanguage(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            -- The locale is changed in real time by the UI, but not the test mode.\r\n            I18N.setLocale(Controller.fields.language)\r\n            Controller.ui:toUI()\r\n            Controller.updateLeaderPoolSizeLabel()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setFirstPlayer(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setRandomizePlayerPositions(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setWormEatsTheCard(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setVirtualHotSeat(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            if value == \"True\" then\r\n                Controller.fields.virtualHotSeatMode = 1\r\n            else\r\n                Controller.fields.virtualHotSeatMode = XmlUI.HIDDEN\r\n            end\r\n            Controller.applyVirtualHotSeatMode()\r\n            Controller.ui:toUI()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setVirtualHotSeatMode(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            Controller.applyVirtualHotSeatMode()\r\n            Controller.ui:toUI()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setDifficulty(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            if Helper.isElementOf(Controller.fields.difficulty, {\"novice\", \"veteran\"}) then\r\n                Controller.fields.brutalEscalation = false\r\n                Controller.fields.expertDeployment = false\r\n                Controller.fields.smartPolitics = false\r\n            else\r\n                Controller.fields.brutalEscalation = true\r\n                Controller.fields.expertDeployment = true\r\n                Controller.fields.smartPolitics = true\r\n            end\r\n            Controller.ui:toUI()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setAutoTurnInSolo(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setImperiumRowChurn(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setStreamlinedRivals(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setBrutalEscalation(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setExpertDeployment(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setSmartPolitics(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setStreamlinedRivals(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setHotSeat(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            Controller.updateSetupButton()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setUseContracts(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setLegacy(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            if value == \"True\" then\r\n                Controller.fields.merakon = false\r\n            else\r\n                Controller.fields.merakon = XmlUI.DISABLED\r\n            end\r\n            Controller.ui:toUI()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setMerakon(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setRiseOfIx(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            if value == \"True\" then\r\n                Controller.fields.epicMode = false\r\n            else\r\n                Controller.fields.epicMode = XmlUI.DISABLED\r\n            end\r\n            Controller.ui:toUI()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setEpicMode(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setImmortality(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            if value == \"True\" then\r\n                Controller.fields.goTo11 = false\r\n            else\r\n                Controller.fields.goTo11 = XmlUI.DISABLED\r\n            end\r\n            Controller.ui:toUI()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setGoTo11(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setLeaderSelection(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setLeaderPoolSize(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            Controller.updateLeaderPoolSizeLabel()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setTweakLeaderSelection(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setHorizontalHandLayout(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setFormalCombatPhase(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setSoundEnabled(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function submitGameRankedGame(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            --[[\r\n    local seatedPlayers = getSeatedPlayers()\r\n    if #seatedPlayers <= 3 then\r\n        Controller.fields.submitGameRankedGame = false\r\n        broadcastToAll(I18N(\"need4Players\"), Color.fromString(\"White\"))\r\n    end\r\n    Controller.ui:toUI()\r\n    ]]\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function submitGameTournament(player, value, id)\r\n            Controller.ui:fromUI(player, value, id)\r\n            if value == \"True\" then\r\n                Controller.fields.submitGameRankedGame = false\r\n            end\r\n            Controller.ui:toUI()\r\n        end\r\n\r\n        --- UI callback (cf. XML).\r\n        function setUpFromUI()\r\n            if not Controller.ui then\r\n                Helper.dump(\"No UI. Bouncing button?\")\r\n                return\r\n            end\r\n\r\n            Controller.ui:hide()\r\n            Controller.ui = nil\r\n            Controller.soloUi:hide()\r\n            Controller.soloUi = nil\r\n\r\n            local numberOfPlayers = Controller.getNumberOfPlayers(Controller.fields.virtualHotSeatMode)\r\n\r\n            setUp({\r\n                language = Controller.fields.language,\r\n                numberOfPlayers = numberOfPlayers,\r\n                hotSeat = not Controller.isUndefined(Controller.fields.virtualHotSeatMode),\r\n                firstPlayer = Controller.fields.firstPlayer,\r\n                randomizePlayerPositions = Controller.fields.randomizePlayerPositions == true,\r\n                wormEatsTheCard = Controller.fields.wormEatsTheCard == true,\r\n                difficulty = Controller.fields.difficulty,\r\n                autoTurnInSolo = Controller.fields.autoTurnInSolo == true,\r\n                imperiumRowChurn = Controller.fields.imperiumRowChurn == true,\r\n                streamlinedRivals = Controller.fields.streamlinedRivals == true,\r\n                brutalEscalation = Controller.fields.brutalEscalation == true,\r\n                expertDeployment = Controller.fields.expertDeployment == true,\r\n                smartPolitics = Controller.fields.smartPolitics == true,\r\n                useContracts = Controller.fields.useContracts == true or numberOfPlayers == 6,\r\n                legacy = Controller.fields.legacy == true,\r\n                merakon = Controller.fields.merakon == true,\r\n                riseOfIx = Controller.fields.riseOfIx == true,\r\n                epicMode = Controller.fields.epicMode == true,\r\n                immortality = Controller.fields.immortality == true,\r\n                goTo11 = Controller.fields.goTo11 == true,\r\n                leaderSelection = Controller.fields.leaderSelection,\r\n                leaderPoolSize = tonumber(Controller.fields.leaderPoolSize),\r\n                tweakLeaderSelection = Controller.fields.tweakLeaderSelection,\r\n                horizontalHandLayout = Controller.fields.horizontalHandLayout,\r\n                formalCombatPhase = Controller.fields.formalCombatPhase,\r\n                soundEnabled = Controller.fields.soundEnabled,\r\n                submitGameRankedGame = Controller.fields.submitGameRankedGame,\r\n            })\r\n        end\r\n\r\n        --- Return the mapping between (player) colors and opponent types. An opponent\r\n        --- type could be:\r\n        --- - a Player instance,\r\n        --- - the \"rival\" string for an automated rival (or House Hagal in the 1P mode),\r\n        --- - the \"puppet\" string for a playable but unseated color in hotseat mode.\r\n        --- Later, in opponents (not activeOppenents), Player instances and \"puppet\" are\r\n        --- replaced by the \"human\" string.\r\n        function Controller.findActiveOpponents(properlySeatedPlayers, numberOfPlayers)\r\n            local colorsByPreference = {\"Green\", \"Red\", \"Yellow\", \"Blue\", \"Purple\", \"White\"}\r\n\r\n            local activeOpponents = {}\r\n            for i, color in ipairs(properlySeatedPlayers) do\r\n                if i <= numberOfPlayers then\r\n                    activeOpponents[color] = Helper.findPlayerByColor(color)\r\n                else\r\n                    break\r\n                end\r\n            end\r\n\r\n            local remainingCount = math.max(0, 3 - numberOfPlayers)\r\n            local opponentType = \"rival\"\r\n            for _, color in ipairs(colorsByPreference) do\r\n                if remainingCount > 0 then\r\n                    if not activeOpponents[color] then\r\n                        activeOpponents[color] = opponentType\r\n                        remainingCount = remainingCount - 1\r\n                    end\r\n                else\r\n                    break\r\n                end\r\n            end\r\n\r\n            local remainingPuppetCount = math.max(0, numberOfPlayers - #properlySeatedPlayers)\r\n            for _, color in ipairs(colorsByPreference) do\r\n                if remainingPuppetCount > 0 then\r\n                    if not activeOpponents[color] then\r\n                        activeOpponents[color] = \"puppet\"\r\n                        remainingPuppetCount = remainingPuppetCount - 1\r\n                    end\r\n                else\r\n                    break\r\n                end\r\n            end\r\n\r\n            return activeOpponents\r\n        end\r\n\r\n        --- return only the (colors of the) legitimate player depending on the selected\r\n        --- mode (1-4P or 6P).\r\n        function Controller.getProperlySeatedPlayers()\r\n            local seatedPlayers = getSeatedPlayers()\r\n\r\n            local authorizedColors = {\r\n                Green = true,\r\n                Yellow = true,\r\n                Blue = true,\r\n                Red = true,\r\n                Purple = #seatedPlayers == 6 or Controller.fields.virtualHotSeatMode == 5,\r\n                White = #seatedPlayers == 6 or Controller.fields.virtualHotSeatMode == 5,\r\n            }\r\n\r\n            local properlySeatedPlayers = {}\r\n            for _, color in ipairs(seatedPlayers) do\r\n                if authorizedColors[color] then\r\n                    table.insert(properlySeatedPlayers, color)\r\n                end\r\n            end\r\n            return properlySeatedPlayers\r\n        end\r\n\r\n        ---\r\n        function Controller.applyVirtualHotSeatMode()\r\n            local numberOfPlayers = Controller.getNumberOfPlayers(Controller.fields.virtualHotSeatMode)\r\n\r\n            if Controller.isUndefined(Controller.fields.virtualHotSeatMode) or numberOfPlayers > 2 then\r\n                Controller.fields.difficulty = XmlUI.HIDDEN\r\n                Controller.fields.autoTurnInSolo = XmlUI.DISABLED\r\n                Controller.fields.imperiumRowChurn = XmlUI.DISABLED\r\n                Controller.fields.streamlinedRivals = XmlUI.DISABLED\r\n                Controller.fields.brutalEscalation = XmlUI.DISABLED\r\n                Controller.fields.expertDeployment = XmlUI.DISABLED\r\n                Controller.fields.smartPolitics = XmlUI.DISABLED\r\n                Controller.soloUi:hide()\r\n            else\r\n                if numberOfPlayers == 1 then\r\n                    Controller.fields.difficulty = \"novice\"\r\n                    Controller.fields.autoTurnInSolo = false\r\n                    Controller.fields.imperiumRowChurn = true\r\n                    Controller.fields.streamlinedRivals = XmlUI.HIDDEN\r\n                    Controller.fields.brutalEscalation = false\r\n                    Controller.fields.expertDeployment = false\r\n                    Controller.fields.smartPolitics = false\r\n                else\r\n                    Controller.fields.difficulty = XmlUI.HIDDEN\r\n                    Controller.fields.autoTurnInSolo = true\r\n                    Controller.fields.imperiumRowChurn = XmlUI.HIDDEN\r\n                    Controller.fields.streamlinedRivals = true\r\n                    Controller.fields.brutalEscalation = false\r\n                    Controller.fields.expertDeployment = false\r\n                    Controller.fields.smartPolitics = false\r\n                end\r\n                Controller.soloUi:show()\r\n            end\r\n\r\n            Controller.fields.leaderSelection_all = allModules.LeaderSelection.getSelectionMethods(numberOfPlayers)\r\n            if numberOfPlayers == 6 then\r\n                Controller.fields.useContracts = XmlUI.DISABLED\r\n            elseif Controller.isUndefined(Controller.fields.useContracts) then\r\n                Controller.fields.useContracts = true\r\n            end\r\n\r\n            Controller.updateSetupButton()\r\n            Controller.ui:toUI()\r\n        end\r\n\r\n        ---\r\n        function Controller.getNumberOfPlayers(virtualHotSeatMode)\r\n            local numberOfPlayers\r\n            if Controller.isUndefined(virtualHotSeatMode) then\r\n                numberOfPlayers = math.min(6, #Controller.getProperlySeatedPlayers())\r\n            else\r\n                local toNumberOfPlayers = {1, 2, 3, 4, 6}\r\n                numberOfPlayers = toNumberOfPlayers[virtualHotSeatMode]\r\n            end\r\n            return numberOfPlayers\r\n        end\r\n\r\n        ---\r\n        function Controller.updateSelectionMethods()\r\n            if Controller.ui then\r\n                local numberOfPlayers = Controller.getNumberOfPlayers(Controller.fields.virtualHotSeatMode)\r\n                Controller.fields.leaderSelection_all = allModules.LeaderSelection.getSelectionMethods(numberOfPlayers)\r\n\r\n                Controller.ui:toUI()\r\n            end\r\n        end\r\n\r\n        ---\r\n        function Controller.updateSetupButton()\r\n            if Controller.ui then\r\n                local numberOfPlayers = Controller.getNumberOfPlayers(Controller.fields.virtualHotSeatMode)\r\n                Controller.fields.leaderSelection_all = allModules.LeaderSelection.getSelectionMethods(numberOfPlayers)\r\n\r\n                local properlySeatedPlayers = Controller.getProperlySeatedPlayers()\r\n\r\n                local minPlayerCount\r\n                if Controller.isUndefined(Controller.fields.virtualHotSeatMode) then\r\n                    minPlayerCount = 3\r\n                else\r\n                    minPlayerCount = 1\r\n                end\r\n\r\n                if #properlySeatedPlayers < 1 then\r\n                    Controller.fields.submitGameRankedGame = XmlUI.DISABLED\r\n                elseif XmlUI.isDisabled(Controller.fields.submitGameRankedGame) then\r\n                    Controller.fields.submitGameRankedGame = false\r\n                end\r\n\r\n                if #properlySeatedPlayers >= minPlayerCount then\r\n                    Controller.ui:setButtonI18N(\"setUpButton\", \"setup\", true)\r\n                else\r\n                    Controller.ui:setButtonI18N(\"setUpButton\", \"notEnoughPlayers\", false)\r\n                end\r\n\r\n                Controller.ui:toUI()\r\n            end\r\n        end\r\n\r\n        ---\r\n        function Controller.updateLeaderPoolSizeLabel()\r\n            local value = Controller.fields.leaderPoolSize\r\n            Controller.fields.leaderPoolSizeLabel = I18N(\"leaderPoolSizeLabel\", {value = value})\r\n            -- Do not use Controller.ui:toUI() to avoid breaking the current UI operation.\r\n            self.UI.setValue(\"leaderPoolSizeLabel\", Controller.fields.leaderPoolSizeLabel)\r\n        end\r\n\r\n        ---\r\n        function Controller.isUndefined(value)\r\n            return value == nil or type(value) == \"table\"\r\n        end\r\n\r\n    end)\r\n    __bundle_register(\"SubmitGame\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n        local Module = require(\"utils.Module\")\r\n        local Helper = require(\"utils.Helper\")\r\n        local I18N = require(\"utils.I18N\")\r\n\r\n        local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n        local TurnControl = Module.lazyRequire(\"TurnControl\")\r\n\r\n        -- This modified variant disables all communication with the ranked server.\r\n        -- local PRIMARY_URL = \"http://dunerank.servehttp.com:8081\"\r\n        local GOOGLE_DOC_URL = \"https://docs.google.com/forms/u/0/d/e/1FAIpQLSfcXJKf9a0xIrOM_cE9W0qvBASCh7q9qTezeVXd5JG71md2cA\"\r\n\r\n        local SubmitGame = Helper.createClass(nil, {\r\n            fields = {\r\n\r\n                -- Partially set on setup, then completed and sorted on each \"openSubmitScreen\".\r\n                players = {},\r\n\r\n                -- Set on setup from settings.\r\n                numberOfPlayers = 0,\r\n                hotseat = false,\r\n                randomizePlayerPositions = false,\r\n                wormEatsTheCard = false,\r\n                legacy = false,\r\n                useContracts = false,\r\n                riseOfIx = false,\r\n                epicMode = false,\r\n                immortality = false,\r\n                bloodlines = true,\r\n                goTo11 = false,\r\n                leaderSelection = nil,\r\n                leaderPoolSize = 0,\r\n                submitGameRankedGame = false,\r\n                submitGameTournament = false,\r\n\r\n                -- Set on setup.\r\n                startTime = nil,\r\n                token = nil,\r\n\r\n                -- Set on submission.\r\n                firstPlayerColor = nil,\r\n                endTime = nil,\r\n                turn = 0,\r\n                gameSubmitted = false,\r\n            }})\r\n\r\n            function SubmitGame.onLoad(state)\r\n                if state.SubmitGame then\r\n                    SubmitGame.fields = state.SubmitGame.fields\r\n                    if SubmitGame.fields.submitGameRankedGame or SubmitGame.fields.submitGameTournament then\r\n                        SubmitGame._staticSetUp()\r\n                    end\r\n                end\r\n            end\r\n\r\n            function SubmitGame.onSave(state)\r\n                state.SubmitGame = {\r\n                    fields = SubmitGame.fields\r\n                }\r\n            end\r\n\r\n            function SubmitGame.setUp(settings)\r\n                if settings.submitGameRankedGame or settings.submitGameTournament then\r\n\r\n                    SubmitGame.fields.players = {}\r\n                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                        local player = Helper.findPlayerByColor(color)\r\n                        table.insert(SubmitGame.fields.players, {\r\n                            steamId = player.steam_id,\r\n                            name = player.steam_name,\r\n                            color = player.color,\r\n                        })\r\n                    end\r\n                    assert(#SubmitGame.fields.players == 4)\r\n\r\n                    local fieldNames = {\r\n                        \"numberOfPlayers\",\r\n                        \"hotseat\",\r\n                        \"randomizePlayerPositions\",\r\n                        \"wormEatsTheCard\",\r\n                        \"useContracts\",\r\n                        \"legacy\",\r\n                        \"riseOfIx\",\r\n                        \"epicMode\",\r\n                        \"immortality\",\r\n                        \"bloodlines\",\r\n                        \"goTo11\",\r\n                        \"leaderSelection\",\r\n                        \"leaderPoolSize\",\r\n                        \"submitGameRankedGame\",\r\n                        \"submitGameTournament\",\r\n                    }\r\n\r\n                    for _, fieldName in ipairs(fieldNames) do\r\n                        SubmitGame.fields[fieldName] = settings[fieldName]\r\n                    end\r\n\r\n                    SubmitGame.fields.startTime = SubmitGame._currentTimestamp()\r\n\r\n                    SubmitGame._generateToken(SubmitGame.fields.players, function (token)\r\n                        SubmitGame.fields.token = token\r\n                        SubmitGame._staticSetUp(settings)\r\n                    end)\r\n                end\r\n            end\r\n\r\n            function SubmitGame._staticSetUp(settings)\r\n                if SubmitGame.fields.token then\r\n                    Global.setVar(\"openSubmitScreen\", SubmitGame._openSubmitScreen)\r\n                    Global.setVar(\"closeSubmitGameScreen\", SubmitGame._closeSubmitGameScreen)\r\n                    Global.setVar(\"submitGame\", SubmitGame._submitGame)\r\n\r\n                    UI.setAttributes(\"openSubmitScreenPanel\", {active = true})\r\n                end\r\n            end\r\n\r\n            function SubmitGame._closeSubmitGameScreen()\r\n                UI.setAttributes(\"submitScreenPanel\", {active = false})\r\n            end\r\n\r\n            function SubmitGame._openSubmitScreen()\r\n                local playerWith10VP = false\r\n\r\n                SubmitGame.fields.firstPlayerColor = TurnControl.getFirstPlayerOfTheGame()\r\n\r\n                for _, player in ipairs(SubmitGame.fields.players) do\r\n                    local color = player.color\r\n\r\n                    player.score = math.max(0, PlayBoard.getPlayBoard(color):getScore()) -- Why max?\r\n                    player.leader = PlayBoard.getLeaderName(color)\r\n                    player.spice = PlayBoard.getResource(color, \"spice\"):get()\r\n                    player.solari = PlayBoard.getResource(color, \"solari\"):get()\r\n                    player.water = PlayBoard.getResource(color, \"water\"):get()\r\n                    player.firstPlayer = nil\r\n\r\n                    playerWith10VP = playerWith10VP or player.score >= 10\r\n                end\r\n\r\n                SubmitGame._updateSubmitScreenPanel()\r\n\r\n                UI.setAttributes(\"submitScreenPanel\", {active = true})\r\n                UI.setAttributes(\"submitGameConfirm\", {key = \"submitGame\", interactable = playerWith10VP})\r\n            end\r\n\r\n            function SubmitGame._updateSubmitScreenPanel()\r\n\r\n                -- Sort players by score, spice, solari, and water.\r\n                table.sort(SubmitGame.fields.players, function(a, b)\r\n                    if a.score ~= b.score then return a.score > b.score end\r\n                    if a.spice ~= b.spice then return a.spice > b.spice end\r\n                    if a.solari ~= b.solari then return a.solari > b.solari end\r\n                    return a.water > b.water\r\n                end)\r\n\r\n                for i, player in ipairs(SubmitGame.fields.players) do\r\n                    player.placement = i\r\n\r\n                    local attributes = {\r\n                        name = player.name,\r\n                        leader_name = player.leader,\r\n                        victory_points = player.score,\r\n                        spice = player.spice,\r\n                        solaris = player.solari,\r\n                        water = player.water,\r\n                    }\r\n\r\n                    for attribute, value in pairs(attributes) do\r\n                        local placementCellIndex = \"cell_placement_\" .. i\r\n                        UI.setAttributes(placementCellIndex, {color = player.color})\r\n\r\n                        local placementIndex = \"placement_\" .. i .. \"_\" .. attribute\r\n                        UI.setAttribute(placementIndex, \"text\", value)\r\n\r\n                        local cellIndex = \"cell_placement_\" .. i .. \"_\" .. attribute\r\n                        UI.setAttributes(cellIndex, {color = player.color})\r\n                    end\r\n                end\r\n            end\r\n\r\n            function SubmitGame._generateToken(players, tokenSetter)\r\n                tokenSetter(0)\r\n                -- SubmitGame._makeWebRequest(PRIMARY_URL .. \"/generation/v1/token\", \"POST\", players, function (request)\r\n                --     if request.is_error then\r\n                --         Helper.dump(\"Failed to generate a token:\", request.text)\r\n                --         tokenSetter(0)\r\n                --     else\r\n                --         tokenSetter(request.text)\r\n                --     end\r\n                -- end)\r\n            end\r\n\r\n            function SubmitGame._submitGame()\r\n                if SubmitGame.fields.gameSubmitted then\r\n                    broadcastToAll(I18N(\"gameAlreadySubmitted\"), \"Orange\")\r\n                else\r\n                    SubmitGame.firstPlayerColor = TurnControl.getFirstPlayerOfTheGame()\r\n                    SubmitGame.endTime = SubmitGame._currentTimestamp()\r\n                    SubmitGame.turn = TurnControl.getCurrentRound()\r\n\r\n                    SubmitGame._doSubmitGameStats()\r\n                    SubmitGame._doSubmitGame()\r\n\r\n                    UI.setAttributes(\"submitGameConfirm\", {key = \"gameSubmitted\", interactable = false})\r\n                    SubmitGame.fields.gameSubmitted = true\r\n                end\r\n            end\r\n\r\n            function SubmitGame._doSubmitGameStats()\r\n                local fields = SubmitGame.fields\r\n                local body = {\r\n                    [\"entry.4096\"] = fields.startTime,\r\n                    [\"entry.4097\"] = fields.endTime,\r\n                    -- [\"entry.754082197\"] = fields.submitGameRankedGame,\r\n                    -- [\"entry.1220354769\"] = fields.submitGameTournament,\r\n                    [\"entry.4098\"] = fields.turn,\r\n                    [\"entry.4099\"] = fields.firstPlayerColor,\r\n\r\n                    [\"entry.4100\"] = fields.players[1].name,\r\n                    [\"entry.4101\"] = fields.players[1].leader,\r\n                    [\"entry.4102\"] = fields.players[1].steamId,\r\n                    [\"entry.4103\"] = fields.players[1].color,\r\n\r\n                    [\"entry.4104\"] = fields.players[2].name,\r\n                    [\"entry.4105\"] = fields.players[2].leader,\r\n                    [\"entry.4112\"] = fields.players[2].steamId,\r\n                    [\"entry.4113\"] = fields.players[2].color,\r\n\r\n                    [\"entry.4114\"] = fields.players[3].name,\r\n                    [\"entry.4115\"] = fields.players[3].leader,\r\n                    [\"entry.4116\"] = fields.players[3].steamId,\r\n                    [\"entry.4117\"] = fields.players[3].color,\r\n\r\n                    [\"entry.4118\"] = fields.players[4].name,\r\n                    [\"entry.4119\"] = fields.players[4].leader,\r\n                    [\"entry.4120\"] = fields.players[4].steamId,\r\n                    [\"entry.4121\"] = fields.players[4].color,\r\n\r\n                    -- [\"entry.845707618\"] = false,\r\n                    -- [\"entry.2040351705\"] = false,\r\n                    -- [\"entry.744802168\"] = fields.immortality,\r\n                    -- [\"entry.854599203\"] = true,\r\n                    -- [\"entry.419313208\"] = fields.token,\r\n                    -- [\"entry.2086786594\"] = fields.epicMode,\r\n                    -- [\"entry.530174472\"] = fields.goTo11,\r\n                    [\"entry.4128\"] = fields.leaderSelection,\r\n                    [\"entry.4129\"] = fields.leaderPoolSize,\r\n                    [\"entry.4130\"] = fields.numberOfPlayers,\r\n                    [\"entry.4131\"] = true,  -- bloodline\r\n                }\r\n\r\n                local normalizedBody = {}\r\n                for k, v in pairs(body) do\r\n                    normalizedBody[k] = type(v) == \"string\" and v or tostring(v)\r\n                end\r\n\r\n                broadcastToAll(GOOGLE_DOC_URL, \"Red\")\r\n                WebRequest.post(GOOGLE_DOC_URL .. \"/formResponse\", normalizedBody, function (request)\r\n                    broadcastToAll(request.text, \"Red\")\r\n                    if request.is_error then\r\n                        Helper.dump(\"Failed to submit stats:\", request.text)\r\n                    else\r\n                        broadcastToAll(I18N(\"gameSubmitted\"), \"Red\")\r\n                    end\r\n                end)\r\n            end\r\n\r\n            function SubmitGame._doSubmitGame()\r\n                local fields = SubmitGame.fields\r\n                local body = {\r\n                    token = fields.token,\r\n                    firstPlayerColor = fields.firstPlayerColor,\r\n                    numberOfPlayers = fields.numberOfPlayers,\r\n                    useContracts = fields.useContracts,\r\n                    riseOfIx = false,\r\n                    epicMode = fields.epicMode,\r\n                    imperium = false,\r\n                    immortality = fields.immortality,\r\n                    uprising = true,\r\n                    bloodLines = true,\r\n                    goTo11 = fields.goTo11,\r\n                    leaderSelection = fields.leaderSelection,\r\n                    leaderPoolSize = fields.leaderPoolSize,\r\n                    rankedGame = fields.submitGameRankedGame,\r\n                    tournament = fields.submitGameTournament,\r\n                    playerData = fields.players,\r\n                    startTime = fields.startTime,\r\n                    endTime = fields.endTime,\r\n                    turn = fields.turn,\r\n                }\r\n\r\n                -- SubmitGame._makeWebRequest(PRIMARY_URL .. \"/api/games/submit\", \"POST\", body, function (request)\r\n                --     if request.is_error then\r\n                --         Helper.dump(\"Failed to submit game:\", request.text)\r\n                --     else\r\n                --         broadcastToAll(request.text, \"White\")\r\n                --     end\r\n                -- end)\r\n            end\r\n\r\n            function SubmitGame._makeWebRequest(url, method, body, callback)\r\n                local headers = {\r\n                    [\"Content-Type\"] = \"application/json\",\r\n                    Accept = \"application/json\"\r\n                }\r\n\r\n                local jsonString = JSON.encode(body)\r\n\r\n                WebRequest.custom(url, method, true, jsonString, headers, callback)\r\n            end\r\n\r\n            function SubmitGame._currentTimestamp()\r\n                -- Weird: osdateparam != string|osdate...\r\n                return os.date(\"!%m/%d/%Y %H:%M:%S\", os.time(os.date(\"!*t\")))\r\n            end\r\n\r\n            return SubmitGame\r\n\r\n        end)\r\n        __bundle_register(\"utils.I18N\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n            local Helper = require(\"utils.Helper\")\r\n\r\n            local I18N = {\r\n            locales = {}}\r\n\r\n            ---\r\n            function I18N.getLocale()\r\n                return Global.getVar(\"Locale\")\r\n            end\r\n\r\n            ---\r\n            function I18N.setLocale(newLocale)\r\n                assert(I18N.locales[newLocale], (\"The locale %q is unknown\"):format(newLocale))\r\n                Global.setVar(\"Locale\", newLocale)\r\n                Helper.emitEvent(\"locale\", newLocale)\r\n            end\r\n\r\n            ---\r\n            function I18N.agree(quantity, noun)\r\n                if math.abs(quantity) > 1 then\r\n                    return I18N(noun .. \"s\")\r\n                else\r\n                    return I18N(noun)\r\n                end\r\n            end\r\n\r\n            ---\r\n            function I18N.translate(key, args)\r\n                assert(key)\r\n                assert(type(key) == \"string\", type(string))\r\n                local currentLocale = I18N.getLocale()\r\n                if not currentLocale then\r\n                    currentLocale = \"en\"\r\n                end\r\n                local locale = I18N.locales[currentLocale]\r\n                if not locale then\r\n                    error(\"Missing locale: \" .. currentLocale)\r\n                end\r\n\r\n                local content = locale[key]\r\n                assert(not content or type(content) == \"string\", key)\r\n                return content and I18N._parse(content, args) or \"{\" .. key .. \"}\"\r\n            end\r\n\r\n            function I18N._parse(content, args)\r\n                assert(content)\r\n                assert(type(content) == \"string\", type(string))\r\n                local text = \"\"\r\n                local s = 1\r\n                repeat\r\n                    local done = true\r\n                    local i = content:find(\"{\", s, true)\r\n                    if i then\r\n                        local e = content:find(\"}\", i, true)\r\n                        if e then\r\n                            local expression = content:sub(i + 1, e - 1)\r\n                            local v = I18N._evaluate(expression, args)\r\n                            text = text .. content:sub(s, i - 1) .. tostring(v or (\"{\" .. expression .. \"}\"))\r\n                            s = e + 1\r\n                            done = false\r\n                        end\r\n                    end\r\n                until done\r\n                text = text .. content:sub(s)\r\n                return text\r\n            end\r\n\r\n            function I18N._evaluate(expression, args)\r\n                return args[expression]\r\n            end\r\n\r\n            setmetatable(I18N, {__call = function (_, ...) return I18N.translate(...) end})\r\n\r\n            return I18N\r\n\r\n        end)\r\n        __bundle_register(\"utils.Helper\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n            ---@class Vector\r\n            ---@field x number\r\n            ---@field y number\r\n            ---@field z number\r\n\r\n            local Helper = {\r\n                sharedTables = {},\r\n                eventListenersByTopic = {},\r\n                uniqueNamePool = {},\r\n\r\n                MINIMAL_DURATION = 1 / 30,\r\n                AREA_BUTTON_COLOR = {0, 0, 0, 0},\r\n                ERASE = function ()\r\n                    return \"__erase__\"\r\n                end\r\n            }\r\n\r\n            math.randomseed(os.time())\r\n\r\n            -- *** Exception handling ***\r\n\r\n            --[[\r\n    Note: this function won't be able to catch any \"<Unknow Error>\",\r\n    because it happen inside the native code called by Lua.\r\n]]\r\n            ---@param context string\r\n            ---@param callable function\r\n            function Helper.wrapFailable(context, callable, defaultReturnValue)\r\n                return function (...)\r\n                    local ranSuccessfully, returnValue = pcall(callable, ...)\r\n                    if ranSuccessfully then\r\n                        return returnValue\r\n                    else\r\n                        broadcastToAll(\"An error has happened in a script!\", \"Red\")\r\n                        log(\"Error in script (Global): \" .. returnValue)\r\n                        Helper._postError(Helper.functionToString(context, ...), returnValue)\r\n                        return defaultReturnValue\r\n                    end\r\n                end\r\n            end\r\n\r\n            ---\r\n            function Helper._postError(context, error)\r\n\r\n                local saveInfo = Global.getVar(\"saveInfo\")\r\n                if not saveInfo then\r\n                    return\r\n                end\r\n\r\n                local url = \"https://hihan.org/tts-error-log/index.php\"\r\n                local form = {\r\n                    action = \"add\",\r\n                    modname = saveInfo.modname,\r\n                    build = saveInfo.build,\r\n                    stable = saveInfo.stable,\r\n                    context = Helper.toString(context),\r\n                    error = Helper.toString(error),\r\n                }\r\n\r\n                WebRequest.post(url, form, function(request)\r\n                    if request.is_error then\r\n                        Helper.dump(\"Request failed:\", request.error)\r\n                    else\r\n                        local responseData = JSON.decode(request.text)\r\n                        if not responseData.code or responseData.code ~= \"0\" then\r\n                            Helper.dump(\"Response:\", responseData)\r\n                        end\r\n                    end\r\n                end)\r\n            end\r\n\r\n            -- *** Event listeners ***\r\n\r\n            function Helper.registerEventListener(topic, listener)\r\n                return Helper.registerEventListenerWithPriority(topic, 0, listener)\r\n            end\r\n\r\n            --[[\r\n    Register a callback to be synchronously called each time an event of the\r\n    corresponding topic is emitted. Each callback will be called with the same\r\n    parameters used for emitting the event. The provided priority specifies in\r\n    which order a callback is called (higher priority callbacks are called\r\n    first). Note that it is best to rely as little as possible on priorities.\r\n]]\r\n            ---@param topic string\r\n            ---@param priority integer\r\n            ---@param listener function\r\n            ---@return function the provided callback (to register and store it in the same line).\r\n            function Helper.registerEventListenerWithPriority(topic, priority, listener)\r\n                assert(topic)\r\n                assert(priority)\r\n                assert(listener)\r\n\r\n                local listenersWithPriority = Helper.eventListenersByTopic[topic]\r\n                if not listenersWithPriority then\r\n                    listenersWithPriority = {}\r\n                    Helper.eventListenersByTopic[topic] = listenersWithPriority\r\n                end\r\n\r\n                local index\r\n                for i, listenerWithPriority in ipairs(listenersWithPriority) do\r\n                    if listenerWithPriority.priority < priority then\r\n                        index = i\r\n                        break\r\n                    end\r\n                end\r\n                index = index or #listenersWithPriority + 1\r\n\r\n                table.insert(listenersWithPriority, index, {\r\n                    listener = listener,\r\n                    priority = priority,\r\n                })\r\n\r\n                return listener\r\n            end\r\n\r\n            --[[\r\n    Unregister a previously registered callback for a given topic.\r\n]]\r\n            ---@param topic string\r\n            ---@param listener function\r\n            function Helper.unregisterEventListener(topic, listener)\r\n                assert(listener)\r\n                local listenersWithPriority = Helper.eventListenersByTopic[topic]\r\n\r\n                local found = false\r\n                for i, listenerWithPriority in ipairs(listenersWithPriority) do\r\n                    if listenerWithPriority.listener == listener then\r\n                        table.remove(listenersWithPriority, i)\r\n                        found = true\r\n                        break\r\n                    end\r\n                end\r\n                assert(found)\r\n\r\n                if #Helper.getKeys(listenersWithPriority) == 0 then\r\n                    Helper.eventListenersByTopic[topic] = nil\r\n                end\r\n            end\r\n\r\n            --[[\r\n    Emit an event: all listeners registered for the specified topic will\r\n    be called with the following parameters.\r\n]]\r\n            ---@param topic any\r\n            ---@param ... unknown\r\n            function Helper.emitEvent(topic, ...)\r\n                local listenersWithPriority = Helper.eventListenersByTopic[topic]\r\n                if listenersWithPriority then\r\n                    for _, listenerWithPriority in ipairs(Helper.shallowCopy(listenersWithPriority)) do\r\n                        Helper.wrapFailable(\"listener on \" .. tostring(topic), listenerWithPriority.listener)(...)\r\n                    end\r\n                end\r\n            end\r\n\r\n            -- *** GUID helper functions ***\r\n\r\n            ---@param data any\r\n            ---@return boolean\r\n            function Helper._isSomeKindOfObject(data)\r\n                return getmetatable(data) ~= nil\r\n            end\r\n\r\n            --[[\r\n    Return a copy of the provided data where every leaf identified as a\r\n    GUID is replaced by the corresponding object (or nil if it can't be\r\n    resolved).\r\n]]\r\n            ---@param reportUnresolvedGUIDs boolean\r\n            ---@param data any\r\n            ---@return any\r\n            function Helper.resolveGUIDs(reportUnresolvedGUIDs, data)\r\n                local newData = data\r\n                if data == Helper.ERASE then\r\n                    -- NOP\r\n                elseif data then\r\n                    local t = type(data)\r\n                    if t == \"string\" then\r\n                        -- FIXME Doesn't Lua support more elaborate regex?\r\n                        if data:match(\"[a-z0-9][a-z0-9][a-z0-9][a-z0-9][a-z0-9][a-z0-9]\") then\r\n                            newData = getObjectFromGUID(data)\r\n                            if not newData and reportUnresolvedGUIDs then\r\n                                log(\"[resolveGUIDs] Unknow GUID: '\" .. data .. \"'\")\r\n                            end\r\n                        else\r\n                            log(\"[resolveGUIDs] Not a GUID: '\" .. data .. \"'\")\r\n                        end\r\n                    elseif t == \"table\" then\r\n                        -- Avoid digging inside complex object.\r\n                        if not Helper._isSomeKindOfObject(data) then\r\n                            newData = {}\r\n                            for i, v in ipairs(data) do\r\n                                newData[i] = Helper.resolveGUIDs(reportUnresolvedGUIDs, v)\r\n                            end\r\n                            for k, v in pairs(data) do\r\n                                newData[k] = Helper.resolveGUIDs(reportUnresolvedGUIDs, v)\r\n                            end\r\n                        end\r\n                    elseif t == \"number\" then\r\n                        -- NOP\r\n                    else\r\n                        -- Not a problem per se, but still unexpected in our use cases.\r\n                        log(\"[resolveGUIDs] Unknown type: \" .. t)\r\n                        -- NOP\r\n                    end\r\n                end\r\n                return newData\r\n            end\r\n\r\n            --[[\r\n    A rather useless function in appearance. However, calls to this function are\r\n    intended to be patched by a small utility which will replace the provided\r\n    coordinates by those existing in the TTS save file.\r\n\r\n    Why not doing this replacement at runtime you're wondering? Because scripts\r\n    are reloaded on multiple occasions: when loading a mod (which is nothing\r\n    more than a blank save), when restoring a game at any point, but also when\r\n    spawning an object or simply moving an instance out of a bag.\r\n\r\n    In other words, no assumptions can be made on the world state, at least\r\n    regarding any object which can move around. This is especially true for\r\n    inline code running before 'onLoad' which can well be executed before all\r\n    legitimate objects have been created or recreated.\r\n\r\n    As such, things like taking the \"initial\" position of an object is doomed to\r\n    fail, and one shall rely on hardcoded positions or using some kind of anchor\r\n    objects. This function and its small update utility is simply a way to get\r\n    around this problem when developing by recovering a truly stable information.\r\n]]\r\n            ---@param GUID string\r\n            ---@param x number\r\n            ---@param y number\r\n            ---@param z number\r\n            ---@return Vector\r\n            function Helper.getHardcodedPositionFromGUID(GUID, x, y, z)\r\n                return Vector(x, y, z)\r\n            end\r\n\r\n            -- *** Deck manipulations ***\r\n\r\n            --- A synthetic move of an object, combining multiple operations.\r\n            ---@param object table\r\n            ---@param position? Vector\r\n            ---@param rotation? Vector\r\n            ---@param smooth? boolean\r\n            ---@param flipAtTheEnd? boolean\r\n            ---@return Continuation A continuation run once the object is motionless.\r\n            function Helper._moveObject(object, position, rotation, smooth, flipAtTheEnd)\r\n                assert(object)\r\n\r\n                local continuation = Helper.createContinuation(\"Helper._moveObject\")\r\n\r\n                if smooth then\r\n                    object.setPositionSmooth(position)\r\n                else\r\n                    object.setPosition(position)\r\n                end\r\n\r\n                if rotation then\r\n                    if smooth then\r\n                        object.setRotationSmooth(rotation)\r\n                    else\r\n                        object.setRotation(rotation)\r\n                    end\r\n                end\r\n\r\n                Helper.onceMotionless(object).doAfter(function ()\r\n                    if flipAtTheEnd then\r\n                        object.flip()\r\n                    end\r\n                    continuation.run(object)\r\n                end)\r\n\r\n                return continuation\r\n            end\r\n\r\n            --- Prefer the \"deal\" method when possible? Would it prevent the card from being\r\n            --- grabbed by anther player's hand zone?\r\n            ---@param zone table\r\n            ---@param position Vector?\r\n            ---@param rotation Vector?\r\n            ---@param smooth boolean?\r\n            ---@param flipAtTheEnd boolean?\r\n            ---@return Continuation A continuation run once the object is spawned.\r\n            function Helper.moveCardFromZone(zone, position, rotation, smooth, flipAtTheEnd)\r\n                assert(zone.type == \"Scripting\")\r\n                local continuation = Helper.createContinuation(\"Helper.moveCardFromZone\")\r\n                local deckOrCard = Helper.getDeckOrCard(zone)\r\n                if deckOrCard then\r\n                    if deckOrCard.type == \"Deck\" then\r\n                        local parameters = {\r\n                            position = position,\r\n                            flip = flipAtTheEnd and true,\r\n                            smooth = smooth or false,\r\n                            -- It matters that the target position is not directly a deck or card.\r\n                            -- Otherwise, the taken card won't be created and the callback won't be\r\n                            -- called.\r\n                            callback_function = continuation.run\r\n                        }\r\n                        if rotation then\r\n                            parameters.rotation = rotation\r\n                        end\r\n                        deckOrCard.takeObject(parameters)\r\n                    elseif deckOrCard.type == \"Card\" then\r\n                        local safePosition = position + Vector(0, 1, 0)\r\n                        Helper._moveObject(deckOrCard, safePosition, rotation, smooth, flipAtTheEnd).doAfter(continuation.run)\r\n                    else\r\n                        error(\"Unexpected type: \" .. deckOrCard.type)\r\n                    end\r\n                else\r\n                    continuation.run(nil)\r\n                end\r\n                return continuation\r\n            end\r\n\r\n            --[[\r\n    Return a list of cards (not spawned in general) from the returned value of\r\n    'Helper.getDeckOrCard(zone)'. If there is none, an empty list is returned.\r\n]]\r\n            ---@param deckOrCard table?\r\n            ---@return table\r\n            function Helper.getCards(deckOrCard)\r\n                if deckOrCard then\r\n                    if deckOrCard.type == \"Deck\" then\r\n                        return deckOrCard.getObjects()\r\n                    elseif deckOrCard.type == \"Card\" then\r\n                        return {deckOrCard}\r\n                    else\r\n                        error(\"Unexpected type: \" .. deckOrCard.type)\r\n                    end\r\n                else\r\n                    return {}\r\n                end\r\n            end\r\n\r\n            --[[\r\n    Return the number of cards from the returned value of 'Helper.getDeckOrCard(zone)'.\r\n]]\r\n            ---@param deckOrCard table?\r\n            ---@return integer\r\n            function Helper.getCardCount(deckOrCard)\r\n                if not deckOrCard then\r\n                    return 0\r\n                elseif deckOrCard.type == \"Card\" then\r\n                    return 1\r\n                elseif deckOrCard.type == \"Deck\" then\r\n                    return deckOrCard.getQuantity()\r\n                else\r\n                    return 0\r\n                end\r\n            end\r\n\r\n            --[[\r\n    Return the first deck or card found in the provide zone. Deck and card hold\r\n    by a player are ignored.\r\n]]\r\n            ---@param zone table\r\n            ---@return table?\r\n            function Helper.getDeckOrCard(zone)\r\n                assert(zone)\r\n                assert(type(zone) ~= 'string', tostring(zone) .. ' looks like a GUID, not a zone')\r\n                -- It is pairs, not ipairs!\r\n                for _, object in pairs(zone.getObjects()) do\r\n                    if object.type and not object.held_by_color and (object.type == \"Card\" or object.type == \"Deck\") then\r\n                        return object\r\n                    end\r\n                end\r\n                return nil\r\n            end\r\n\r\n            ---@deprecated Use Helper.getDeckOrCard and deal with real life.\r\n            function Helper.getDeck(zone)\r\n                assert(zone)\r\n                assert(type(zone) ~= 'string', tostring(zone) .. ' looks like a GUID, not a zone')\r\n                for _, object in ipairs(zone.getObjects()) do\r\n                    if not object.held_by_color and object.type == \"Deck\" then return object end\r\n                end\r\n                return nil\r\n            end\r\n\r\n            ---@deprecated Use Helper.getDeckOrCard and deal with real life.\r\n            function Helper.getCard(zone)\r\n                assert(zone)\r\n                assert(type(zone) ~= 'string', tostring(zone) .. ' looks like a GUID, not a zone')\r\n                for _, object in ipairs(zone.getObjects()) do\r\n                    if not object.held_by_color and object.type == \"Card\" then return object end\r\n                end\r\n                return nil\r\n            end\r\n\r\n            -- *** Anchors ***\r\n\r\n            --[[\r\n    The created anchor will be saved but could be automatically destroyed at\r\n    reload using Helper.destroyTransientObjects().\r\n]]\r\n            ---@param nickname string?\r\n            ---@param position Vector\r\n            ---@return Continuation A continuation run once the anchor is spawned.\r\n            function Helper.createTransientAnchor(nickname, position)\r\n                local continuation = Helper.createContinuation(\"Helper.createTransientAnchor\")\r\n\r\n                local data = {\r\n                    Name = \"Custom_Model\",\r\n                    Transform = {\r\n                        posX = 0,\r\n                        posY = 0,\r\n                        posZ = 0,\r\n                        rotX = 0,\r\n                        rotY = 180,\r\n                        rotZ = 0,\r\n                        scaleX = 1,\r\n                        scaleY = 1,\r\n                        scaleZ = 1\r\n                    },\r\n                    Nickname = nickname,\r\n                    Description = \"Generated transient anchor.\",\r\n                    GMNotes = \"\",\r\n                    AltLookAngle = {\r\n                        x = 0,\r\n                        y = 0,\r\n                        z = 0\r\n                    },\r\n                    ColorDiffuse = {\r\n                        r = 1.0,\r\n                        g = 0.0,\r\n                        b = 1.0\r\n                    },\r\n                    LayoutGroupSortIndex = 0,\r\n                    Value = 0,\r\n                    Locked = true,\r\n                    Grid = false,\r\n                    Snap = false,\r\n                    IgnoreFoW = false,\r\n                    MeasureMovement = false,\r\n                    DragSelectable = true,\r\n                    Autoraise = true,\r\n                    Sticky = false,\r\n                    Tooltip = true,\r\n                    GridProjection = false,\r\n                    HideWhenFaceDown = false,\r\n                    Hands = false,\r\n                    CustomMesh = {\r\n                        MeshURL = \"https://steamusercontent-a.akamaihd.net/ugc/2042984592862608679/0383C231514AACEB52B88A2E503A90945A4E8143/\",\r\n                        DiffuseURL = \"\",\r\n                        NormalURL = \"\",\r\n                        ColliderURL = \"\",\r\n                        Convex = true,\r\n                        MaterialIndex = 0,\r\n                        TypeIndex = 4,\r\n                        CustomShader = {\r\n                            SpecularColor = {\r\n                                r = 0,\r\n                                g = 0,\r\n                                b = 0\r\n                            },\r\n                            SpecularIntensity = 0.0,\r\n                            SpecularSharpness = 7.0,\r\n                            FresnelStrength = 0.4\r\n                        },\r\n                        CastShadows = false\r\n                    },\r\n                    LuaScript = \"\",\r\n                    LuaScriptState = \"\",\r\n                    XmlUI = \"\"\r\n                }\r\n\r\n                spawnObjectData({\r\n                    data = data,\r\n                    position = position,\r\n                    callback_function = function (anchor)\r\n                        Helper.markAsTransient(anchor)\r\n                        anchor.interactable = false\r\n                        continuation.run(anchor)\r\n                    end})\r\n\r\n                    return continuation\r\n                end\r\n\r\n                ---\r\n                function Helper.markAsTransient(object)\r\n                    -- Tagging is not usable on a zone without filtering its content.\r\n                    object.setGMNotes(\"Transient\")\r\n                    return object\r\n                end\r\n\r\n                ---\r\n                function Helper._isTransient(object)\r\n                    return object.getGMNotes() == \"Transient\"\r\n                end\r\n\r\n                ---\r\n                function Helper.destroyTransientObjects()\r\n                    local count = 0\r\n                    for _, object in ipairs(Global.getObjects()) do\r\n                        if Helper._isTransient(object) then\r\n                            --log(\"Destroy \" .. object.getName())\r\n                            object.destruct()\r\n                            count = count + 1\r\n                        end\r\n                    end\r\n                    --log(\"Destroyed \" .. tostring(count) .. \" anchors.\")\r\n                end\r\n\r\n                -- *** Snappoints and anchored buttons ***\r\n\r\n                --[[\r\n    Create a snapPoint relative to a parent centered on the provided zone, but\r\n    at the height of the parent.\r\n]]\r\n                ---\r\n                function Helper.createRelativeSnapPointFromZone(parent, zone, rotationSnap, tags)\r\n                    return Helper.createRelativeSnapPoint(parent, zone.getPosition(), rotationSnap, tags)\r\n                end\r\n\r\n                function Helper.createRelativeSnapPoint(parent, position, rotationSnap, tags)\r\n                    local p = Vector(position.x, parent.getPosition().y, position.z)\r\n                    local snapPoint = {\r\n                        position = parent.positionToLocal(p) + Vector(0, 0.25, 0),\r\n                        rotation_snap = rotationSnap,\r\n                        tags = tags\r\n                    }\r\n                    return snapPoint\r\n                end\r\n\r\n                ---\r\n                function Helper.createAnchoredAreaButton(zone, ground, aboveGround, tooltip, callback)\r\n                    assert(zone)\r\n                    assert(aboveGround)\r\n                    local p = zone.getPosition()\r\n                    local anchorPosition = Vector(p.x, ground - 0.5, p.z)\r\n                    Helper.createTransientAnchor(nil, anchorPosition).doAfter(function (anchor)\r\n                        Helper.createAreaButton(zone, anchor, ground + aboveGround, tooltip, callback)\r\n                    end)\r\n                end\r\n\r\n                ---\r\n                function Helper.createAreaButton(zone, anchor, altitude, tooltip, callback)\r\n                    assert(zone)\r\n                    assert(anchor)\r\n                    assert(altitude)\r\n\r\n                    local zoneScale = zone.getScale()\r\n                    local sizeFactor = 500 -- 350\r\n\r\n                    local width = zoneScale.x * sizeFactor\r\n                    local height = zoneScale.z * sizeFactor\r\n\r\n                    return Helper.createSizedAreaButton(width, height, anchor, altitude, tooltip, callback)\r\n                end\r\n\r\n                ---\r\n                function Helper.createExperimentalAreaButton(zone, anchor, altitude, tooltip, callback)\r\n                    assert(zone)\r\n                    assert(anchor)\r\n                    assert(altitude)\r\n\r\n                    local zoneScale = zone.getScale()\r\n\r\n                    local width = zoneScale.x * 450\r\n                    local height = zoneScale.z * 200\r\n\r\n                    return Helper.createSizedAreaButton(width, height, anchor, altitude, tooltip, callback)\r\n                end\r\n\r\n                ---\r\n                function Helper.createSizedAreaButton(width, height, anchor, altitude, tooltip, callback)\r\n                    assert(anchor)\r\n\r\n                    local anchorPosition = anchor.getPosition()\r\n\r\n                    local parameters = {\r\n                        click_function = Helper.registerGlobalCallback(callback),\r\n                        position = Vector(anchorPosition.x, altitude, anchorPosition.z),\r\n                        width = width,\r\n                        height = height,\r\n                        color = Helper.AREA_BUTTON_COLOR,\r\n                        hover_color = {0.7, 0.7, 0.7, 0.7},\r\n                        press_color = {0.5, 1, 0.5, 0.4},\r\n                        font_color = {1, 1, 1, 100},\r\n                        tooltip = tooltip,\r\n                    }\r\n\r\n                    -- 0.75 | 10 ?\r\n                    Helper.createAbsoluteButtonWithRoundness(anchor, 0.75, parameters)\r\n\r\n                    return parameters.click_function\r\n                end\r\n\r\n                ---\r\n                function Helper.createButton(object, parameters)\r\n                    return Helper._createWidget(\"Button\", object, parameters)\r\n                end\r\n\r\n                ---\r\n                function Helper.createInput(object, parameters)\r\n                    return Helper._createWidget(\"Input\", object, parameters)\r\n                end\r\n\r\n                ---\r\n                function Helper._createWidget(name, object, parameters)\r\n                    assert(object)\r\n                    local createWidget = object[\"create\" .. name]\r\n                    assert(createWidget)\r\n                    local getWidgets = object[\"get\" .. name .. \"s\"]\r\n                    assert(getWidgets)\r\n\r\n                    local isOldIndexes = {}\r\n                    Helper.forEach(getWidgets() or {}, function (k, v)\r\n                        assert(v.index)\r\n                        isOldIndexes[v.index] = true\r\n                    end)\r\n\r\n                    createWidget(parameters)\r\n\r\n                    local newIndexes = {}\r\n                    Helper.forEach(getWidgets() or {}, function (k, v)\r\n                        if not isOldIndexes[v.index] then\r\n                            table.insert(newIndexes, v.index)\r\n                        end\r\n                    end)\r\n\r\n                    --assert(#newIndexes == 1)\r\n                    assert(#newIndexes <= 1)\r\n                    return newIndexes[1]\r\n                end\r\n\r\n                --[[\r\n    Indirect call to createButton adjusting the provided parameters to\r\n    counteract the position, scale and rotation of the parent object.\r\n    TTS does offer a positionToLocal method, but which only accounts for\r\n    the position and (partly to the) scale, not the rotation. The\r\n    convention for the world coordinates is a bit twisted here since the\r\n    X coordinate is inverted.\r\n]]\r\n                ---\r\n                function Helper._createAbsoluteButton(object, parameters)\r\n                    return Helper.createAbsoluteButtonWithRoundness(object, 0.25, parameters)\r\n                end\r\n\r\n                ---\r\n                function Helper.createAbsoluteButtonWithRoundness(object, roundness, parameters)\r\n                    return Helper.createButton(object, Helper._createAbsoluteWidgetWithRoundnessParameters(object, roundness, parameters))\r\n                end\r\n\r\n                ---\r\n                function Helper._createAbsoluteInputWithRoundness(object, roundness, parameters)\r\n                    return Helper.createInput(object, Helper._createAbsoluteWidgetWithRoundnessParameters(object, roundness, parameters))\r\n                end\r\n\r\n                ---\r\n                function Helper._createAbsoluteWidgetWithRoundnessParameters(object, roundness, parameters)\r\n                    assert(object)\r\n                    assert(roundness >= 0, \"Zero or negative roundness won't work as intended.\")\r\n                    assert(roundness <= 10, \"Roundness beyond 10 won't work as intended.\")\r\n                    if parameters.color and parameters.font_color then\r\n                        --[[\r\n            The opacity of a button color is applied to its content, including the label.\r\n            Thus, to achieve a transparent button with a visible lablel, the alpha of the\r\n            \"font_color\" needs to be pushed beyond 1. In fact, in this situation, the\r\n            alpha seems to be interpreted as a percentage (100% being full opaque).\r\n        ]]\r\n                        assert(parameters.color[4] > 0 or parameters.font_color[4] > 1, \"Unproper label opacity!\")\r\n                    end\r\n\r\n                    --[[\r\n        Scale is a problem here. We change it to artificially adjust the roundness, but\r\n        we also needs to ajust the font height, which is capped and more or less blurry\r\n        depending on it...\r\n    ]]\r\n\r\n                    local scale = object.getScale()\r\n                    local invScale = Vector(1 / scale.x, 1 / scale.y, 1 / scale.z)\r\n\r\n                    -- Only to counteract the absolute roundness of the background.\r\n                    local rescale = 1 / roundness\r\n\r\n                    local p = parameters['position']\r\n                    if p then\r\n                        p = Helper.toVector(p)\r\n                        -- Inverting the X coordinate comes from our global 180?? rotation around Y.\r\n                        p = Vector(p.x, p.y, p.z)\r\n\r\n                        p = p - object.getPosition()\r\n                        p = Vector(-p.x, p.y, p.z)\r\n\r\n                        p:scale(invScale)\r\n\r\n                        -- Proper order?\r\n                        local r = object.getRotation()\r\n                        p:rotateOver('x', -r.x)\r\n                        p:rotateOver('y', -r.y)\r\n                        p:rotateOver('z', -r.z)\r\n\r\n                        parameters['position'] = p\r\n                    end\r\n\r\n                    local s = parameters['scale']\r\n                    if not s then\r\n                        s = Vector(1, 1, 1)\r\n                    else\r\n                        s = Helper.toVector(s)\r\n                    end\r\n                    s = s * invScale * (1 / rescale)\r\n                    parameters['scale'] = s\r\n\r\n                    local w = parameters['width']\r\n                    if not w then\r\n                        w = 1\r\n                    end\r\n                    w = w * rescale\r\n                    parameters['width'] = w\r\n\r\n                    local h = parameters['height']\r\n                    if not h then\r\n                        h = 1\r\n                    end\r\n                    h = h * rescale\r\n                    parameters['height'] = h\r\n\r\n                    local font_size = parameters['font_size']\r\n                    if not font_size then\r\n                        font_size = 1\r\n                    end\r\n                    font_size = font_size * rescale\r\n                    assert(font_size <= 720, \"You hit the max font size of 720.\")\r\n                    parameters['font_size'] = font_size\r\n\r\n                    return parameters\r\n                end\r\n\r\n                ---\r\n                function Helper.collectSnapPoints(object, net)\r\n                    if not object then\r\n                        return\r\n                    end\r\n                    local snapPoints = object.getSnapPoints()\r\n                    for _, snapPoint in ipairs(snapPoints) do\r\n                        if snapPoint.tags then\r\n                            for _, tag in ipairs(snapPoint.tags) do\r\n                                for prefix, collector in pairs(net) do\r\n                                    if Helper.startsWith(tag, prefix) then\r\n                                        local name = tag:sub(prefix:len() + 1):gsub(\"^%u\", string.lower)\r\n                                        collector(name, object.positionToWorld(snapPoint.position))\r\n                                    end\r\n                                end\r\n                            end\r\n                        else\r\n                            Helper.dump(\"Unexpected snap tags:\", snapPoint.tags)\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- *** Dynamic (button) callbacks ***\r\n\r\n                ---\r\n                function Helper.registerGlobalCallback(callback)\r\n                    local GLOBAL_COUNTER_NAME = \"generatedCallbackNextIndex\"\r\n                    if callback then\r\n                        assert(type(callback) == \"function\", \"Expected a function, got a \" .. type(callback))\r\n                        local uniqueName\r\n                        if #Helper.uniqueNamePool > 0 then\r\n                            uniqueName = Helper.uniqueNamePool[1]\r\n                            table.remove(Helper.uniqueNamePool, 1)\r\n                        else\r\n                            local nextIndex = Global.getVar(GLOBAL_COUNTER_NAME) or 1\r\n                            if nextIndex >= 300 then\r\n                                Helper.dump(\"Alarming dynamic global callback count:\", nextIndex)\r\n                            end\r\n                            Global.setVar(GLOBAL_COUNTER_NAME, nextIndex + 1)\r\n                            uniqueName = \"generatedCallback\" .. tostring(nextIndex)\r\n                        end\r\n                        Global.setVar(uniqueName, Helper.wrapFailable(uniqueName, callback))\r\n                        return uniqueName\r\n                    else\r\n                        return Helper._getNopCallback()\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.unregisterGlobalCallback(uniqueName)\r\n                    if uniqueName ~= \"generatedCallback0\" then\r\n                        local callback = Global.getVar(uniqueName)\r\n                        --assert(callback, \"Unknown global callback: \" .. uniqueName)\r\n                        if callback then\r\n                            Global.setVar(uniqueName, function ()\r\n                                Helper.dump(\"Dead callback called:\", uniqueName)\r\n                            end)\r\n                            table.insert(Helper.uniqueNamePool, uniqueName)\r\n                        else\r\n                            Helper.dump(\"Unknown global callback: \" .. uniqueName)\r\n                        end\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.clearButtons(object)\r\n                    local buttons = object.getButtons()\r\n                    if buttons then\r\n                        for _, button in ipairs(buttons) do\r\n                            local callback = button.click_function\r\n                            if callback then\r\n                                assert(Helper.startsWith(callback, \"generatedCallback\"), \"Not a generated callback: \" .. callback)\r\n                                Helper.unregisterGlobalCallback(callback)\r\n                            end\r\n                        end\r\n                        object.clearButtons()\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper._getButton(object, index)\r\n                    local buttons = object.getButtons()\r\n                    assert(buttons)\r\n                    for _, button in ipairs(buttons) do\r\n                        if button.index == index then\r\n                            return button\r\n                        end\r\n                    end\r\n                    return nil\r\n                end\r\n\r\n                ---\r\n                function Helper._removeButton(object, index)\r\n                    local button = Helper._getButton(object, index)\r\n                    assert(button, \"No button with index: \" .. tostring(index))\r\n                    local callback = button.click_function\r\n                    if callback then\r\n                        assert(Helper.startsWith(callback, \"generatedCallback\"), \"Not a generated callback: \" .. callback)\r\n                        Helper.unregisterGlobalCallback(callback)\r\n                    end\r\n                    object.removeButton(index)\r\n                end\r\n\r\n                ---\r\n                function Helper.removeButtons(object, indexes)\r\n                    local orderedIndexes = indexes\r\n                    table.sort(orderedIndexes, function (a, b) return a > b end)\r\n                    local previousIndex\r\n                    for _, index in ipairs(indexes) do\r\n                        assert(not previousIndex or previousIndex > index)\r\n                        Helper._removeButton(object, index)\r\n                        previousIndex = index\r\n                    end\r\n                end\r\n\r\n                -- *** Continuations ***\r\n\r\n                ---@param name string?\r\n                ---@return Continuation\r\n                function Helper.createContinuation(name)\r\n                    assert(name)\r\n\r\n                    if not Helper.pendingContinuations then\r\n                        Helper.pendingContinuations = {}\r\n                    end\r\n\r\n                    ---@class Continuation\r\n                    ---@field name string\r\n                    ---@field what function\r\n                    ---@field tick function\r\n                    ---@field doAfter function\r\n                    ---@field next function\r\n                    ---@field finish function\r\n                    ---@field run function\r\n                    ---@field cancel function\r\n                    ---@field forget function\r\n\r\n                    local continuation = {\r\n                        name = name,\r\n                        start = Time.time,\r\n                        canceled = false,\r\n                        done = false,\r\n                        actions = {},\r\n                        what = function ()\r\n                            return \"continuation\"\r\n                        end\r\n                    }\r\n\r\n                    continuation.tick = function (toBeNotified)\r\n                        local duration = Time.time - continuation.start\r\n                        if toBeNotified and duration > 10 then\r\n                            toBeNotified()\r\n                        else\r\n                            assert(duration < 10, \"Roting continuation: \" .. (continuation.name or \"<nil>\"))\r\n                        end\r\n                    end\r\n\r\n                    continuation.doAfter = function (action)\r\n                        assert(type(action) == 'function')\r\n                        if continuation.done then\r\n                            if not continuation.canceled then\r\n                                local wrappedAction = Helper.wrapFailable(\"sync after \" .. tostring(continuation.name), action)\r\n                                wrappedAction(table.unpack(continuation.parameters, 1, continuation.parameters.n))\r\n                            end\r\n                        else\r\n                            table.insert(continuation.actions, action)\r\n                        end\r\n                    end\r\n\r\n                    continuation.next = function (...)\r\n                        continuation.parameters = table.pack(...)\r\n                        for _, action in ipairs(continuation.actions) do\r\n                            local wrappedAction = Helper.wrapFailable(\"async after \" .. tostring(continuation.name), action)\r\n                            wrappedAction(...)\r\n                        end\r\n                    end\r\n\r\n                    continuation.finish = function ()\r\n                        Helper.pendingContinuations[continuation] = nil\r\n                        continuation.done = true\r\n                    end\r\n\r\n                    continuation.run = function (...)\r\n                        continuation.next(...)\r\n                        continuation.finish()\r\n                    end\r\n\r\n                    continuation.cancel = function ()\r\n                        continuation.canceled = true\r\n                        continuation.finish()\r\n                    end\r\n\r\n                    continuation.forget = function ()\r\n                        Helper.pendingContinuations[continuation] = nil\r\n                    end\r\n\r\n                    Helper.pendingContinuations[continuation] = true\r\n\r\n                    return continuation\r\n                end\r\n\r\n                ---@return Continuation\r\n                function Helper.fakeContinuation(...)\r\n                    local fakeContinuation = Helper.createContinuation(\"Helper.alwaysContinuation\")\r\n                    fakeContinuation.run(...)\r\n                    return fakeContinuation\r\n                end\r\n\r\n                ---@param timeout number?\r\n                ---@return Continuation\r\n                function Helper.onceStabilized(timeout)\r\n                    local continuation = Helper.createContinuation(\"Helper.onceStabilized\")\r\n                    continuation.forget()\r\n\r\n                    local start = os.time()\r\n                    local delayed = false\r\n                    local success = false\r\n\r\n                    Wait.condition(function ()\r\n                        continuation.run(success)\r\n                    end, function ()\r\n                        local duration = os.time() - start\r\n                        success = Helper.isStabilized(delayed or duration <= 5)\r\n                        if not success then\r\n                            if not delayed and duration > 5 then\r\n                                delayed = true\r\n                                broadcastToAll(\"Delaying transition (see system log)...\")\r\n                            end\r\n                            if duration > (timeout or 10) then\r\n                                return true\r\n                            end\r\n                        end\r\n                        return success\r\n                    end)\r\n\r\n                    return continuation\r\n                end\r\n\r\n                ---@return boolean\r\n                function Helper.isStabilized(beQuiet)\r\n                    local count = 0\r\n                    if Helper.pendingContinuations then\r\n                        for continuation, _ in pairs(Helper.pendingContinuations) do\r\n                            if continuation then\r\n                                if not beQuiet then\r\n                                    log(\"Pending continuation: \" .. continuation.name)\r\n                                    continuation.tick(function ()\r\n                                        log(\"Forgetting the pending continuation on timeout\")\r\n                                        continuation.forget()\r\n                                    end)\r\n                                end\r\n                                count = count + 1\r\n                            end\r\n                        end\r\n                    end\r\n                    return count == 0\r\n                end\r\n\r\n                ---@return Continuation\r\n                function Helper.onceMotionless(object)\r\n                    local guid = object.getGUID()\r\n                    local continuation = Helper.createContinuation(\"Helper.onceMotionless\")\r\n                    -- Wait 1 frame for the movement to start.\r\n                    Wait.time(function ()\r\n                        Wait.condition(function ()\r\n                            Wait.time(function ()\r\n                                continuation.run(object)\r\n                            end, Helper.MINIMAL_DURATION)\r\n                        end, function ()\r\n                            continuation.tick()\r\n                            --- Deal with a card/object being swallowed up in a deck/bag at the end of its move.\r\n                            local objectHasDisappeared = getObjectFromGUID(guid) == nil\r\n                            return objectHasDisappeared or object.resting\r\n                        end)\r\n                    end, Helper.MINIMAL_DURATION)\r\n                    return continuation\r\n                end\r\n\r\n                ---@return Continuation\r\n                function Helper.onceSwallowedUp(object)\r\n                    local guid = object.getGUID()\r\n                    local continuation = Helper.createContinuation(\"Helper.onceSwallowedUp\")\r\n                    -- Wait 1 frame for the movement to start.\r\n                    Wait.time(function ()\r\n                        Wait.condition(function ()\r\n                            Wait.time(function ()\r\n                                continuation.run(object)\r\n                            end, Helper.MINIMAL_DURATION)\r\n                        end, function ()\r\n                            continuation.tick()\r\n                            local objectHasDisappeared = getObjectFromGUID(guid) == nil\r\n                            return objectHasDisappeared\r\n                        end)\r\n                    end, Helper.MINIMAL_DURATION)\r\n                    return continuation\r\n                end\r\n\r\n                ---@return Continuation\r\n                function Helper.onceShuffled(container)\r\n                    local continuation = Helper.createContinuation(\"Helper.onceShuffled\")\r\n                    -- TODO Is there a better way?\r\n                    Wait.time(function ()\r\n                        continuation.run(container)\r\n                    end, 2)\r\n                    return continuation\r\n                end\r\n\r\n                ---@param delay number\r\n                ---@param count integer?\r\n                ---@return Continuation\r\n                function Helper.onceTimeElapsed(delay, count)\r\n                    local continuation = Helper.createContinuation(\"Helper.onceTimeElapsed\")\r\n                    local countdown = count or 1\r\n                    Wait.time(function ()\r\n                        countdown = countdown - 1\r\n                        continuation.next()\r\n                        if countdown == 0 then\r\n                            continuation.finish()\r\n                        end\r\n                    end, delay, count)\r\n                    return continuation\r\n                end\r\n\r\n                ---@param count integer\r\n                ---@return Continuation\r\n                function Helper.onceFramesPassed(count)\r\n                    local continuation = Helper.createContinuation(\"Helper.onceFramesPassed\")\r\n                    -- Wait.frames is unreliable with players with high FPS configurations.\r\n                    Wait.time(function ()\r\n                        continuation.run()\r\n                    end, count * Helper.MINIMAL_DURATION)\r\n                    return continuation\r\n                end\r\n\r\n                ---@return Continuation\r\n                function Helper.onceOneDeck(zone)\r\n                    local continuation = Helper.createContinuation(\"Helper.onceOneDeck\")\r\n\r\n                    local getDecksOrCards = function ()\r\n                        return Helper.filter(zone.getObjects(), function (object)\r\n                            return object.type == \"Card\" or object.type == \"Deck\"\r\n                        end)\r\n                    end\r\n\r\n                    local maxCardCount = 0\r\n                    for _, deckOrCard in ipairs(getDecksOrCards()) do\r\n                        maxCardCount = math.max(maxCardCount, Helper.getCardCount(deckOrCard))\r\n                    end\r\n\r\n                    Wait.condition(function ()\r\n                        continuation.run(Helper.getDeck(zone))\r\n                    end, function ()\r\n                        local deckOrCards = getDecksOrCards()\r\n                        if #deckOrCards == 1 then\r\n                            local deckOrCard = deckOrCards[1]\r\n                            local cardCound = Helper.getCardCount(deckOrCard)\r\n                            if cardCound > maxCardCount and deckOrCard.resting then\r\n                                return true\r\n                            end\r\n                        end\r\n                        continuation.tick()\r\n                        return false\r\n                    end)\r\n                    return continuation\r\n                end\r\n\r\n                ---@return Continuation\r\n                function Helper.repeatChainedAction(count, action)\r\n                    local continuation = Helper.createContinuation(\"Helper.repeatChainedAction\")\r\n                    if count > 0 then\r\n                        local innerContinuation = action()\r\n                        assert(innerContinuation and innerContinuation.doAfter, \"Provided action must return a continuation!\")\r\n                        innerContinuation.doAfter(function ()\r\n                            Helper.repeatChainedAction(count - 1, action).doAfter(function ()\r\n                                continuation.run(count)\r\n                            end)\r\n                        end)\r\n                    else\r\n                        continuation.run(count)\r\n                    end\r\n                    return continuation\r\n                end\r\n\r\n                ---@param actions table\r\n                ---@return Continuation\r\n                function Helper.chainActions(actions)\r\n                    return Helper._chainActions(1, actions)\r\n                end\r\n\r\n                ---@param actions table\r\n                ---@return Continuation\r\n                function Helper._chainActions(i, actions)\r\n                    local continuation = Helper.createContinuation(\"Helper._chainActions\")\r\n                    if i <= #actions then\r\n                        local innerContinuation = actions[i]()\r\n                        assert(innerContinuation and innerContinuation.doAfter, \"Provided action must return a continuation!\")\r\n                        innerContinuation.doAfter(function ()\r\n                            Helper._chainActions(i + 1, actions).doAfter(continuation.run)\r\n                        end)\r\n                    else\r\n                        continuation.run()\r\n                    end\r\n                    return continuation\r\n                end\r\n\r\n                ---@return Continuation\r\n                function Helper.repeatMovingAction(object, count, action)\r\n                    local continuation = Helper.createContinuation(\"Helper.repeatMovingAction\")\r\n                    if count > 0 then\r\n                        action()\r\n                        Helper.onceMotionless(object).doAfter(function ()\r\n                            Helper.repeatMovingAction(object, count - 1, action).doAfter(function (_)\r\n                                continuation.run(object)\r\n                            end)\r\n                        end)\r\n                    else\r\n                        Helper.onceMotionless(object).doAfter(function ()\r\n                            continuation.run(object)\r\n                        end)\r\n                    end\r\n                    return continuation\r\n                end\r\n\r\n                -- *** Basic OOP ***\r\n\r\n                ---\r\n                function Helper.createClass(superclass, data)\r\n                    --  We can't make this test unfortunately, since it superclasses typically come through lazyRequire.\r\n                    --assert(not superclass or superclass.__index, \"Superclass doesn't look like a class itself.\")\r\n                    local class = data or {}\r\n                    class.__index = class\r\n                    class.what = function ()\r\n                        return \"class\"\r\n                    end\r\n                    if superclass then\r\n                        setmetatable(class, superclass)\r\n                    end\r\n                    return class\r\n                end\r\n\r\n                ---\r\n                function Helper.createClassInstance(class, data)\r\n                    assert(class)\r\n                    assert(class.__index, \"Provided class doesn't look like a class actually.\")\r\n                    local instance = data or {}\r\n                    instance.what = function ()\r\n                        return \"instance\"\r\n                    end\r\n                    setmetatable(instance, class)\r\n                    return instance\r\n                end\r\n\r\n                ---\r\n                function Helper.getClass(instance)\r\n                    assert(instance.what() == \"instance\")\r\n                    local class = getmetatable(instance)\r\n                    assert(class and class.what() == \"class\")\r\n                    return class\r\n                end\r\n\r\n                ---\r\n                function Helper._getNopCallback()\r\n                    local uniqueName = \"generatedCallback0\"\r\n                    local nopCallback = Global.getVar(uniqueName)\r\n                    if not nopCallback then\r\n                        Global.setVar(uniqueName, function ()\r\n                            -- NOP\r\n                        end)\r\n                    end\r\n                    return uniqueName\r\n                end\r\n\r\n                -- *** player color support ***\r\n\r\n                ---\r\n                function Helper.findPlayerByColor(color)\r\n                    return Player[color]\r\n                end\r\n\r\n                --- Colour shuffler script, developed by markimus on steam.\r\n                function Helper.randomizePlayerPositions(colors)\r\n                    local continuation = Helper.createContinuation(\"Helper.randomizePlayerPositions\")\r\n\r\n                    if #colors <= 1 then\r\n                        printToAll(\"There must be more than one player for shuffling to work.\", \"Red\")\r\n                        continuation.run()\r\n                        return continuation\r\n                    end\r\n                    if Player[\"Black\"].seated then\r\n                        printToAll(\"Please remove Player Black for shuffling to work.\", \"Red\")\r\n                        continuation.run()\r\n                        return continuation\r\n                    end\r\n\r\n                    local randomColours = {}\r\n\r\n                    -- Insert the colours.\r\n\r\n                    for _, v in pairs(colors) do\r\n                        table.insert(randomColours, v)\r\n                    end\r\n\r\n                    Helper.shuffle(randomColours)\r\n\r\n                    local seatedPlayers = {}\r\n                    for i, v in pairs(colors) do\r\n                        seatedPlayers[v] = {}\r\n                        seatedPlayers[v].target = randomColours[i]\r\n                        seatedPlayers[v].myColour = v\r\n                        --printToAll(Player[v].steam_name .. \"(\".. v ..\") -> \".. ranColours[i], {1, 1, 1})\r\n                        if seatedPlayers[v].target == v then\r\n                            seatedPlayers[v].prevMoved = true\r\n                            seatedPlayers[v].moved = true\r\n                        else\r\n                            seatedPlayers[v].prevMoved = false\r\n                            seatedPlayers[v].moved = false\r\n                        end\r\n                    end\r\n\r\n                    -- Start shuffling players.\r\n\r\n                    local coroutineHolder = {}\r\n                    coroutineHolder.registeredCallback = Helper.registerGlobalCallback(function ()\r\n                        Helper.unregisterGlobalCallback(coroutineHolder.registeredCallback)\r\n\r\n                        for timeout = 1, 50 do\r\n\r\n                            -- Go through seated players. if they haven't moved, check if they can be moved.\r\n                            for i, v in pairs(seatedPlayers) do\r\n                                --print(\"Test\")\r\n                                if v.moved == false then\r\n                                    if not Player[v.target].seated then\r\n                                        local myC = v.myColour\r\n                                        if Player[myC].seated then\r\n                                            --print(\"Moving player \".. myC)\r\n                                            Player[myC]:changeColor(v.target)\r\n                                            while Player[myC].seated and not Player[v.target].seated do\r\n                                                coroutine.yield(0)\r\n                                            end\r\n                                            v.myColour = v.target\r\n                                            v.moved = true\r\n                                        else\r\n                                            table.remove(seatedPlayers, i)\r\n                                        end\r\n                                    end\r\n                                end\r\n                            end\r\n\r\n                            local checkIfSame = true\r\n                            for _, v in pairs(seatedPlayers) do\r\n                                if v.prevMoved ~= v.moved then\r\n                                    checkIfSame = false\r\n                                    break\r\n                                end\r\n                            end\r\n\r\n                            if checkIfSame then\r\n                                --print(\"Is same.\")\r\n                                local allNonMovedPlayers = {}\r\n                                for i, v in pairs(seatedPlayers) do\r\n                                    if not v.moved then\r\n                                        table.insert(allNonMovedPlayers, v)\r\n                                    end\r\n                                end\r\n\r\n                                if #allNonMovedPlayers ~= 0 then\r\n                                    local lastPlayer = allNonMovedPlayers[#allNonMovedPlayers]\r\n                                    Player[lastPlayer.myColour]:changeColor(\"Black\")\r\n                                    lastPlayer.myColour = \"Black\"\r\n                                    while not Player[\"Black\"].seated do\r\n                                        coroutine.yield(0)\r\n                                    end\r\n                                end\r\n                            end\r\n\r\n                            local count1, count2 = 0, 0\r\n                            for _, v in pairs(seatedPlayers) do\r\n                                count1 = count1 + 1\r\n                                if v.moved then\r\n                                    count2 = count2 + 1\r\n                                end\r\n                            end\r\n\r\n                            if count1 == count2 then\r\n                                break\r\n                            end\r\n\r\n                            for _, v in pairs(seatedPlayers) do\r\n                                v.prevMoved = v.moved\r\n                            end\r\n\r\n                            coroutine.yield(0)\r\n                        end\r\n\r\n                        Helper.sleep(2)\r\n                        continuation.run()\r\n\r\n                        return 1\r\n                    end)\r\n                    startLuaCoroutine(Global, coroutineHolder.registeredCallback)\r\n\r\n                    return continuation\r\n                end\r\n\r\n                ---\r\n                function Helper.changePlayerColorInCoroutine(player, newColor)\r\n                    local neutralColor = \"Black\"\r\n\r\n                    local function seatPlayer(sourceColor, targetColor)\r\n                        Player[sourceColor]:changeColor(targetColor)\r\n                        while Player[sourceColor].seated and not Player[targetColor].seated do\r\n                            coroutine.yield(0)\r\n                        end\r\n                    end\r\n\r\n                    local oldColor = Helper._getPlayerColor(player)\r\n                    if oldColor ~= newColor then\r\n                        local otherPlayer = Helper.findPlayerByColor(newColor)\r\n                        if not Helper.findPlayerByColor(neutralColor) then\r\n                            if otherPlayer then\r\n                                seatPlayer(otherPlayer, neutralColor)\r\n                            end\r\n                            seatPlayer(player, newColor)\r\n                        else\r\n                            log(\"Black player is seated! Skipping player color change.\")\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- *** Specialized queues ***\r\n\r\n                ---\r\n                function Helper.createTemporalQueue(delay)\r\n                    local tq = {\r\n                        delay = delay or 0.25,\r\n                        actions = {},\r\n                    }\r\n\r\n                    function tq.submit(action)\r\n                        assert(action)\r\n                        table.insert(tq.actions, action)\r\n                        if #tq.actions == 1 then\r\n                            tq.activateLater()\r\n                        end\r\n                    end\r\n\r\n                    function tq.activateLater()\r\n                        Helper.onceTimeElapsed(tq.delay).doAfter(function ()\r\n                            local action = tq.actions[1]\r\n                            table.remove(tq.actions, 1)\r\n                            if #tq.actions > 0 then\r\n                                tq.activateLater()\r\n                            end\r\n                            action()\r\n                        end)\r\n                    end\r\n\r\n                    return tq\r\n                end\r\n\r\n                ---\r\n                function Helper.createSpaceQueue()\r\n                    local sq = {\r\n                        distance = 0,\r\n                    }\r\n\r\n                    function sq.submit(action)\r\n                        assert(action)\r\n                        action(sq.distance)\r\n                        if sq.distance == 0 then\r\n                            sq.updater = Wait.time(sq._reduce, 1)\r\n                        end\r\n                        sq.distance = sq.distance + 1\r\n                    end\r\n\r\n                    function sq._reduce()\r\n                        sq.distance = sq.distance - 1\r\n                        if sq.distance > 0 then\r\n                            Wait.time(sq._reduce, 1)\r\n                        end\r\n                    end\r\n\r\n                    return sq\r\n                end\r\n\r\n                ---\r\n                function Helper.createCoalescentQueue(name, separationDelay, coalesce, handle)\r\n                    local cq = {\r\n                        separationDelay = separationDelay or 1,\r\n                    }\r\n\r\n                    function cq.handleLater()\r\n                        assert(cq.lastEvent)\r\n                        if cq.delayedHandler then\r\n                            Wait.stop(cq.delayedHandler)\r\n                            cq.delayedHandler = nil\r\n                            cq.continuation.cancel()\r\n                        end\r\n                        cq.continuation = Helper.createContinuation(\"Helper.createCoalescentQueue/\" .. name)\r\n                        cq.continuation.doAfter(function ()\r\n                            assert(cq.lastEvent)\r\n                            cq.delayedHandler = nil\r\n                            local event = cq.lastEvent\r\n                            cq.lastEvent = nil\r\n                            handle(event)\r\n                        end)\r\n                        cq.delayedHandler = Wait.time(cq.continuation.run, cq.separationDelay)\r\n                    end\r\n\r\n                    function cq.submit(event)\r\n                        assert(event)\r\n                        if cq.lastEvent then\r\n                            local newEvent = coalesce(event, cq.lastEvent)\r\n                            if newEvent then\r\n                                cq.lastEvent = newEvent\r\n                            else\r\n                                local oldEvent = cq.lastEvent\r\n                                cq.lastEvent = event\r\n                                handle(oldEvent)\r\n                            end\r\n                        else\r\n                            cq.lastEvent = event\r\n                        end\r\n                        cq.handleLater()\r\n                    end\r\n\r\n                    function cq.flush()\r\n                        if cq.delayedHandler then\r\n                            assert(cq.lastEvent)\r\n                            Wait.stop(cq.delayedHandler)\r\n                            cq.delayedHandler = nil\r\n                            cq.continuation.cancel()\r\n                            local event = cq.lastEvent\r\n                            cq.lastEvent = nil\r\n                            handle(event)\r\n                        end\r\n                    end\r\n\r\n                    return cq\r\n                end\r\n\r\n                -- *** TTS miscellaneous ***\r\n\r\n                ---@deprecated Relic of an old age.\r\n                function Helper.setSharedTable(tableName, table)\r\n                    --Global.setTable(tableName, table)\r\n                    Helper.sharedTables[tableName] = table\r\n                end\r\n\r\n                ---@deprecated Relic of an old age.\r\n                function Helper.getSharedTable(tableName)\r\n                    --return Global.getTable(tableName)\r\n                    return Helper.sharedTables[tableName]\r\n                end\r\n\r\n                --- Intended to be called from a coroutine.\r\n                function Helper.sleep(durationInSeconds)\r\n                    local Time = os.clock() + durationInSeconds\r\n                    while os.clock() < Time do\r\n                        coroutine.yield(0)\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.getID(object)\r\n                    assert(object)\r\n                    if object.getGMNotes then\r\n                        return object.getGMNotes()\r\n                    else\r\n                        return object.gm_notes\r\n                    end\r\n                end\r\n\r\n                ---@param deck any\r\n                function Helper.shuffleDeck(deck)\r\n                    assert(deck)\r\n                    if true then\r\n                        deck.shuffle()\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.hasAllTags(object, tags)\r\n                    for _, tag in ipairs(tags) do\r\n                        if not object.hasTag(tag) then\r\n                            return false\r\n                        end\r\n                    end\r\n                    return true\r\n                end\r\n\r\n                ---\r\n                function Helper.hasAnyTag(object, tags)\r\n                    for _, tag in ipairs(tags) do\r\n                        if object.hasTag(tag) then\r\n                            return true\r\n                        end\r\n                    end\r\n                    return false\r\n                end\r\n\r\n                ---\r\n                function Helper.noPhysics(...)\r\n                    for _, object in pairs({...}) do\r\n                        object.setLock(true)\r\n                        object.interactable = true\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.noPlay(...)\r\n                    for _, object in pairs({...}) do\r\n                        object.setLock(false)\r\n                        object.interactable = false\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.noPhysicsNorPlay(...)\r\n                    for _, object in pairs({...}) do\r\n                        object.setLock(true)\r\n                        object.interactable = false\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.physicsAndPlay(...)\r\n                    for _, object in pairs({...}) do\r\n                        object.setLock(false)\r\n                        object.interactable = true\r\n                    end\r\n                end\r\n\r\n                -- *** Lua miscellaneous ***\r\n\r\n                ---\r\n                function Helper.isEmpty(table)\r\n                    return #table == 0 and #Helper.getKeys(table) == 0\r\n                end\r\n\r\n                ---\r\n                function Helper.toCamelCase(...)\r\n                    local camelString\r\n                    for i, str in ipairs({...}) do\r\n                        if i > 1 then\r\n                            camelString = camelString .. str:gsub(\"^%l\", string.upper)\r\n                        else\r\n                            camelString = str:gsub(\"^%u\", string.lower)\r\n                        end\r\n                    end\r\n                    return camelString\r\n                end\r\n\r\n                ---\r\n                function Helper.toPascalCase(...)\r\n                    local pascalString\r\n                    for i, str in ipairs({...}) do\r\n                        if i > 1 then\r\n                            pascalString = pascalString .. str:gsub(\"^%l\", string.upper)\r\n                        else\r\n                            pascalString = str:gsub(\"^%l\", string.upper)\r\n                        end\r\n                    end\r\n                    return pascalString\r\n                end\r\n\r\n                ---\r\n                function Helper._createTable(root, ...)\r\n                    local parent = root\r\n                    for _, str in ipairs({...}) do\r\n                        if not parent[str] then\r\n                            parent[str] = {}\r\n                        end\r\n                        parent = parent[str]\r\n                        assert(type(parent) == \"table\")\r\n                    end\r\n                    return parent\r\n                end\r\n\r\n                ---\r\n                function Helper.toVector(data)\r\n                    if not data then\r\n                        log(\"nothing to vectorize\")\r\n                        return Vector(0, 0, 0)\r\n                    elseif type(data) ~= \"table\" then\r\n                        error(\"Can't vectorize back a \" .. type(data) .. \" (\" .. tostring(data) .. \")\")\r\n                    elseif Helper._isSomeKindOfObject(data) then\r\n                        return data\r\n                    elseif #data > 0 then\r\n                        return Vector(data[1], data[2], data[3])\r\n                    else\r\n                        return Vector(data.x, data.y, data.z)\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.addAll(objects, otherObjects)\r\n                    assert(objects)\r\n                    assert(otherObjects)\r\n                    for _, object in ipairs(otherObjects) do\r\n                        assert(object)\r\n                        table.insert(objects, object)\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.trace(name, data)\r\n                    log(name .. \": \" .. tostring(data))\r\n                    return data\r\n                end\r\n\r\n                ---\r\n                function Helper.append(parent, set)\r\n                    for name, value in pairs(set) do\r\n                        parent[name] = value\r\n                    end\r\n                    return parent\r\n                end\r\n\r\n                ---\r\n                function Helper.contains(zone, object)\r\n                    assert(zone)\r\n                    assert(object)\r\n                    for _, containedObject in ipairs(zone.getObjects()) do\r\n                        if containedObject == object then\r\n                            return true\r\n                        end\r\n                    end\r\n                    return false\r\n                end\r\n\r\n                --- Fisher-Yates shuffle, in-place ??? for each position, pick an element from those not yet picked.\r\n                function Helper.shuffle(table)\r\n                    assert(table)\r\n                    assert(#table > 0 or #Helper.getKeys(table) == 0, \"Not an indexed table\")\r\n                    if true then\r\n                        for i = #table, 2, -1 do\r\n                            local j = math.random(i)\r\n                            table[i], table[j] = table[j], table[i]\r\n                        end\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.pickAny(table)\r\n                    return table[math.random(#table)]\r\n                end\r\n\r\n                ---\r\n                function Helper.pickAnyKey(set)\r\n                    local keys = Helper.getKeys(set)\r\n                    return keys[math.random(#keys)]\r\n                end\r\n\r\n                ---\r\n                function Helper.signum(n)\r\n                    if n > 0 then\r\n                        return 1\r\n                    elseif n < 0 then\r\n                        return - 1\r\n                    else\r\n                        return 0\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.getCenter(positions)\r\n                    assert(positions)\r\n                    assert(#positions > 0)\r\n                    local p = Vector(0, 0, 0)\r\n                    for _, position in ipairs(positions) do\r\n                        p = p + position\r\n                    end\r\n                    p:scale(1 / #positions)\r\n                    return p\r\n                end\r\n\r\n                ---\r\n                function Helper.tableContains(table, element)\r\n                    for _, containedElement in ipairs(table) do\r\n                        if containedElement == element then\r\n                            return true\r\n                        end\r\n                    end\r\n                    return false\r\n                end\r\n\r\n                ---\r\n                function Helper.isElementOf(element, elements)\r\n                    return Helper.tableContains(elements, element)\r\n                end\r\n\r\n                ---\r\n                function Helper.stringConcat(elements)\r\n                    local str = \"\"\r\n                    for _, element in ipairs(elements) do\r\n                        str = str .. tostring(element)\r\n                    end\r\n                    return str\r\n                end\r\n\r\n                ---\r\n                function Helper.dump(...)\r\n                    local str = \"\"\r\n                    local args = table.pack(...)\r\n                    for i = 1, args.n do\r\n                        if i > 1 then\r\n                            str = str .. \" \"\r\n                        end\r\n                        str = str .. Helper.toString(args[i])\r\n                    end\r\n                    Helper._log(str)\r\n                end\r\n\r\n                ---\r\n                function Helper.dumpFunction(...)\r\n                    Helper._log(Helper.functionToString(...))\r\n                end\r\n\r\n                ---\r\n                function Helper.functionToString(...)\r\n                    local args = table.pack(...)\r\n                    local str\r\n                    for i = 1, args.n do\r\n                        local arg = args[i]\r\n\r\n                        if i == 1 then\r\n                            assert(type(arg) == \"string\")\r\n                            str = arg .. \"(\"\r\n                        else\r\n                            str = str .. Helper.toString(args[i], true)\r\n                        end\r\n\r\n                        if i == args.n then\r\n                            str = str .. \")\"\r\n                        elseif i > 1 then\r\n                            str = str .. \", \"\r\n                        end\r\n                    end\r\n                    return str\r\n                end\r\n\r\n                ---\r\n                function Helper._log(str)\r\n                    if Helper.lastMessage ~= str then\r\n                        if Helper.lastMessage then\r\n                            if Helper.lastMessageCount > 1 then\r\n                                log(\"[x\" .. tostring(Helper.lastMessageCount) .. \"] \" .. Helper.lastMessage)\r\n                            elseif Helper.lastMessageCount > 0 then\r\n                                log(Helper.lastMessage)\r\n                            end\r\n                        end\r\n                        log(str)\r\n                        Helper.lastMessage = str\r\n                        Helper.lastMessageCount = 0\r\n                    else\r\n                        Helper.lastMessageCount = Helper.lastMessageCount + 1\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.toString(object, quoted)\r\n                    if object ~= nil then\r\n                        local objectType = type(object)\r\n                        if objectType == \"table\" then\r\n                            local str\r\n                            if #object > 0 then\r\n                                str = \"[\"\r\n                                for i, element in ipairs(object) do\r\n                                    if i > 1 then\r\n                                        str = str .. \", \"\r\n                                    end\r\n                                    str = str .. Helper.toString(element, quoted)\r\n                                end\r\n                                str = str .. \"]\"\r\n                            else\r\n                                str = \"{\"\r\n                                local i = 0\r\n                                for key, value in pairs(object) do\r\n                                    i = i + 1\r\n                                    if i > 1 then\r\n                                        str = str .. \", \"\r\n                                    end\r\n                                    str = str .. Helper.toString(key, quoted) .. \" -> \" .. Helper.toString(value, quoted)\r\n                                end\r\n                                str = str .. \"}\"\r\n                            end\r\n                            return str\r\n                        elseif objectType == \"function\" then\r\n                            return \"<function>\"\r\n                        elseif objectType == \"string\" then\r\n                            return quoted and '\"' .. object .. '\"' or object\r\n                        elseif objectType == \"userdata\" then\r\n                            return tostring(object) .. \"/\" .. tostring(Helper.getID(object))\r\n                        else\r\n                            return tostring(object)\r\n                        end\r\n                    else\r\n                        return \"<nil>\"\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.concatTables(...)\r\n                    local result = {}\r\n                    for _, t in ipairs({...}) do\r\n                        for _, element in ipairs(t) do\r\n                            table.insert(result, element)\r\n                        end\r\n                    end\r\n                    return result\r\n                end\r\n\r\n                ---\r\n                function Helper.mergeSets(...)\r\n                    local result = {}\r\n                    for _, s in ipairs({...}) do\r\n                        for key, value in pairs(s) do\r\n                            result[key] = value\r\n                        end\r\n                    end\r\n                    return result\r\n                end\r\n\r\n                ---\r\n                function Helper.shallowCopy(elements)\r\n                    local copy = {}\r\n                    for k, v in pairs(elements) do\r\n                        copy[k] = v\r\n                    end\r\n                    return copy\r\n                end\r\n\r\n                ---\r\n                function Helper.deepCopy(something)\r\n                    local t = type(something)\r\n                    if Helper._isBasicType(t) then\r\n                        if t == \"table\" then\r\n                            local copy = {}\r\n                            for k, v in pairs(something) do\r\n                                copy[k] = Helper.deepCopy(v)\r\n                            end\r\n                            return copy\r\n                        else\r\n                            return something\r\n                        end\r\n                    else\r\n                        error(\"Unexpected type: \" .. t)\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper._isBasicType(t)\r\n                    return t == \"nil\"\r\n                    or t == \"boolean\"\r\n                    or t == \"number\"\r\n                    or t == \"string\"\r\n                    or t == \"userdata\"\r\n                    or t == \"function\"\r\n                    or t == \"thread\"\r\n                    or t == \"table\"\r\n                end\r\n\r\n                ---\r\n                function Helper.getKeys(elements)\r\n                    local keys = {}\r\n                    for k, _ in pairs(elements) do\r\n                        table.insert(keys, k)\r\n                    end\r\n                    return keys\r\n                end\r\n\r\n                ---\r\n                function Helper.getValues(elements)\r\n                    local values = {}\r\n                    for _, v in pairs(elements) do\r\n                        table.insert(values, v)\r\n                    end\r\n                    return values\r\n                end\r\n\r\n                ---\r\n                function Helper._getSubSet(set, keys)\r\n                    local subSet = {}\r\n                    for _, k in ipairs(keys) do\r\n                        local value = set[k]\r\n                        if type(k) == \"number\" then\r\n                            subSet[k] = value\r\n                        else\r\n                            table.insert(subSet, value)\r\n                        end\r\n                    end\r\n                    return subSet\r\n                end\r\n\r\n                ---\r\n                function Helper.indexOf(table, element)\r\n                    assert(table)\r\n                    assert(element)\r\n                    for i, existingElement in ipairs(table) do\r\n                        if existingElement == element then\r\n                            return i\r\n                        end\r\n                    end\r\n                    return 0\r\n                end\r\n\r\n                ---\r\n                function Helper.swap(elements, i, j)\r\n                    assert(elements)\r\n                    if i ~= j then\r\n                        local tmp = elements[i]\r\n                        elements[i] = elements[j]\r\n                        elements[j] = tmp\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.reverse(elements)\r\n                    assert(elements)\r\n                    local count = #elements\r\n                    for i = 1, count do\r\n                        local j = count + 1 - i\r\n                        if i < j then\r\n                            Helper.swap(elements, i, j)\r\n                        else\r\n                            break\r\n                        end\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.cycle(elements)\r\n                    assert(elements)\r\n                    local count = #elements\r\n                    local first = elements[1]\r\n                    for i = 1, count do\r\n                        elements[i] = i < count and elements[i + 1] or first\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper._cons(head, tail)\r\n                    local list = {head}\r\n                    for _, element in pairs(tail) do\r\n                        table.insert(list, element)\r\n                    end\r\n                    return list\r\n                end\r\n\r\n                ---\r\n                function Helper.filter(elements, p)\r\n                    assert(elements)\r\n                    local filteredElements = {}\r\n                    for _, element in ipairs(elements) do\r\n                        if p(element) then\r\n                            table.insert(filteredElements, element)\r\n                        end\r\n                    end\r\n                    return filteredElements\r\n                end\r\n\r\n                ---\r\n                function Helper.count(elements, p)\r\n                    assert(elements)\r\n                    local count = 0\r\n                    for k, v in pairs(elements) do\r\n                        if p(k, v) then\r\n                            count = count + 1\r\n                        end\r\n                    end\r\n                    return count\r\n                end\r\n\r\n                ---\r\n                function Helper.map(elements, f)\r\n                    assert(elements)\r\n                    local newElements = {}\r\n                    for k, v in pairs(elements) do\r\n                        newElements[k] = f(k, v)\r\n                    end\r\n                    return newElements\r\n                end\r\n\r\n                ---\r\n                function Helper.mapValues(elements, f)\r\n                    assert(elements)\r\n                    local newElements = {}\r\n                    for k, v in pairs(elements) do\r\n                        newElements[k] = f(v)\r\n                    end\r\n                    return newElements\r\n                end\r\n\r\n                ---\r\n                function Helper.forEach(elements, f)\r\n                    assert(elements)\r\n                    assert(f)\r\n                    for k, v in pairs(elements) do\r\n                        f(k, v)\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.forEachValue(elements, f)\r\n                    assert(elements)\r\n                    assert(f)\r\n                    for _, v in ipairs(elements) do\r\n                        f(v)\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.forEachRecursively(elements, f)\r\n                    assert(elements)\r\n                    assert(f)\r\n                    for k, v in pairs(elements) do\r\n                        if type(v) == \"table\" and not Helper._isSomeKindOfObject(v) then\r\n                            Helper.forEachRecursively(v, f)\r\n                        else\r\n                            f(k, v)\r\n                        end\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper._clearTable(table)\r\n                    for k, _ in pairs(table) do\r\n                        table[k] = nil\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.mutateTable(table, newTable)\r\n                    Helper._clearTable(table)\r\n                    for k, v in pairs(newTable) do\r\n                        table[k] = v\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.partialApply(f, ...)\r\n                    assert(f)\r\n                    local args = table.pack(...)\r\n                    return function (...)\r\n                        local appendedArgs = table.pack(...)\r\n                        for i = 1, appendedArgs.n do\r\n                            table.insert(args, appendedArgs[i])\r\n                        end\r\n                        args.n = args.n + appendedArgs.n\r\n                        return f(table.unpack(args, 1, args.n))\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.field(name)\r\n                    return function (object)\r\n                        return object[name]\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.negate(predicate)\r\n                    return function (...)\r\n                        return not predicate(...)\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.equal(value)\r\n                    return function (object)\r\n                        return object == value\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.never()\r\n                    return function ()\r\n                        return false\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Helper.always()\r\n                    return function ()\r\n                        return true\r\n                    end\r\n                end\r\n\r\n                --- http://lua-users.org/wiki/StringRecipes\r\n                function Helper.startsWith(str, start)\r\n                    return str:sub(1, #start) == start\r\n                end\r\n\r\n                --- http://lua-users.org/wiki/StringRecipes\r\n                function Helper.endsWith(str, ending)\r\n                    return ending == \"\" or str:sub(-#ending) == ending\r\n                end\r\n\r\n                ---\r\n                function Helper.splitString(str, sep)\r\n                    local tokens = {}\r\n                    for token in string.gmatch(str, \"([^\" .. (sep or \"%s\") .. \"]+)\") do\r\n                        table.insert(tokens, token)\r\n                    end\r\n                    return tokens\r\n                end\r\n\r\n                ---\r\n                function Helper.chopName(name, n)\r\n                    local choppedName = \"\"\r\n                    local i = 0\r\n                    for _, token in ipairs(Helper.splitString(name, \" \")) do\r\n                        if token:len() > 2 then\r\n                            i = i + 1\r\n                        end\r\n                        if i <= n then\r\n                            if choppedName:len() > 0 then\r\n                                choppedName = choppedName .. \" \"\r\n                            end\r\n                            choppedName = choppedName .. token\r\n                        else\r\n                            break\r\n                        end\r\n                    end\r\n                    return choppedName\r\n                end\r\n\r\n                return Helper\r\n\r\n            end)\r\n            __bundle_register(\"utils.Module\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                local Module = {\r\n                    modulesByName = {},\r\n                    registeredModuleRedirections = {},\r\n                }\r\n\r\n                ---\r\n                function Module.registerModules(modulesByName)\r\n                    Module.modulesByName = Module._registerModules(\"\", modulesByName)\r\n                    return Module._lazyRequireAll(\"\", modulesByName)\r\n                end\r\n\r\n                ---\r\n                function Module._registerModules(path, modulesByName)\r\n                    local modules = {}\r\n\r\n                    for name, node in pairs(modulesByName) do\r\n                        -- Can???t work! Find a way to distinguish between a node and a module.\r\n                        if type(node) == \"table\" and false then\r\n                            modules[name] = Module._registerModules(path .. name .. \".\", node)\r\n                        else\r\n                            modules[name] = node\r\n                        end\r\n                    end\r\n\r\n                    return modules\r\n                end\r\n\r\n                ---\r\n                function Module._lazyRequireAll(path, modulesByName)\r\n                    local modules = {}\r\n\r\n                    for name, node in pairs(modulesByName) do\r\n                        -- FIXME Can???t work! Find a way to distinguish between a node and a module.\r\n                        if type(node) == \"table\" and false then\r\n                            modules[name] = Module._lazyRequireAll(path .. name .. \".\", node)\r\n                        else\r\n                            modules[name] = Module.lazyRequire(name)\r\n                        end\r\n                    end\r\n\r\n                    return modules\r\n                end\r\n\r\n                ---\r\n                function Module.lazyRequire(name)\r\n                    local lazyModule = {}\r\n\r\n                    local meta = {\r\n                        module = nil\r\n                    }\r\n                    meta.__index = function (_, key)\r\n                        if not meta.module then\r\n                            meta.module = Module._resolveModule(name)\r\n                        end\r\n                        if meta.module then\r\n                            local item = meta.module[key]\r\n                            if item then\r\n                                if type(item) ~= \"function\" then\r\n                                    if key ~= \"__loaded\" then\r\n                                        log(\"Accessing inner field: \" .. name .. \".\" .. key .. \" (\" .. type(item) .. \")\")\r\n                                    end\r\n                                elseif key == \"onLoad\" then\r\n                                    meta.module.__loaded = true\r\n                                elseif key:sub(1, 1) == \"_\" then\r\n                                    log(\"Accessing private function: \" .. name .. \".\" .. key)\r\n                                elseif not meta.module.__loaded and meta.module['onLoad'] ~= nil then\r\n                                    log(\"Accessing unloaded module: \" .. name .. \".\" .. key)\r\n                                end\r\n                            end\r\n                            return item\r\n                        else\r\n                            log(\"Unresolvable module: \" .. name .. \" (while accessing: \" .. key .. \")\")\r\n                            return nil\r\n                        end\r\n                    end\r\n\r\n                    -- Necessary redirection when used as a class.\r\n                    lazyModule.__index = lazyModule\r\n\r\n                    setmetatable(lazyModule, meta)\r\n\r\n                    return lazyModule\r\n                end\r\n\r\n                ---\r\n                function Module._resolveModule(name)\r\n                    local node = Module.modulesByName\r\n\r\n                    local selector = name\r\n                    while true do\r\n                        local nextSelector = nil\r\n                        local dotIndex = selector:find(\".\", 1, true)\r\n                        if dotIndex then\r\n                            selector = selector:sub(1, dotIndex - 1)\r\n                            nextSelector = selector:sub(dotIndex + 1)\r\n                        end\r\n                        node = node[selector]\r\n                        if node then\r\n                            if not nextSelector then\r\n                                return node\r\n                            else\r\n                                selector = nextSelector\r\n                            end\r\n                        else\r\n                            return nil\r\n                        end\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Module.registerModuleRedirections(functionNames)\r\n                    for _, functionName in ipairs(functionNames) do\r\n                        local originalGlobalFunction = Global.getVar(functionName)\r\n                        local globalFunction = function (...)\r\n                            if originalGlobalFunction then\r\n                                originalGlobalFunction(...)\r\n                            end\r\n                            for _, module in pairs(Module.modulesByName) do\r\n                                if module[functionName] then\r\n                                    module[functionName](...)\r\n                                end\r\n                            end\r\n                        end\r\n                        local safeGlobalFunction = function (...)\r\n                            local ran, ret = pcall(globalFunction, ...)\r\n                            if not ran then\r\n                                log(tostring(ret) .. \"(error in redirection '\" .. functionName .. \"')\")\r\n                            end\r\n                            return ret\r\n                        end\r\n                        Module.registeredModuleRedirections[functionName] = safeGlobalFunction\r\n                        Global.setVar(functionName, safeGlobalFunction)\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Module.callOnAllRegisteredModules(functionName, ...)\r\n                    for _, module in pairs(Module.modulesByName) do\r\n                        if module[functionName] then\r\n                            module[functionName](...)\r\n                        end\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function Module.unregisterAllModuleRedirections()\r\n                    for functionName, _ in pairs(Module.registeredModuleRedirections) do\r\n                        Global.setVar(functionName, nil)\r\n                    end\r\n                end\r\n\r\n                return Module\r\n\r\n            end)\r\n            __bundle_register(\"Types\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                ---@alias PlayerColor\r\n                ---| 'Green'\r\n                ---| 'Purple'\r\n                ---| 'Yellow'\r\n                ---| 'Blue'\r\n                ---| 'White'\r\n                ---| 'Red'\r\n\r\n                ---@alias Faction\r\n                ---| 'greatHouses'\r\n                ---| 'emperor'\r\n                ---| 'spacingGuild'\r\n                ---| 'beneGesserit'\r\n                ---| 'fremen'\r\n                ---| 'fringeWorlds'\r\n\r\n                ---@alias TroopLocation\r\n                ---| 'supply'\r\n                ---| 'garrison'\r\n                ---| 'combat'\r\n                ---| 'negotiation'\r\n                ---| 'tanks'\r\n                ---| 'memory'\r\n\r\n                ---@alias DreadnoughtLocation\r\n                ---| 'supply'\r\n                ---| 'garrison'\r\n                ---| 'combat'\r\n                ---| 'carthag'\r\n                ---| 'arrakeen'\r\n                ---| 'imperialBassin'\r\n\r\n                -- bloodlines sardaukar commanders\r\n                ---@alias SardaukarCommanderLocation\r\n                ---| 'supply'\r\n                ---| 'garrison'\r\n                ---| 'combat'\r\n\r\n                ---@alias ResourceName\r\n                ---| 'spice'\r\n                ---| 'water'\r\n                ---| 'solari'\r\n                ---| 'persuasion'\r\n                ---| 'strength'\r\n\r\n                local Types = {}\r\n\r\n                ---\r\n                function Types.isTroop(object, color)\r\n                    return object.hasTag(\"Troop\") and (not color or object.hasTag(color))\r\n                end\r\n\r\n                ---\r\n                function Types.isDreadnought(object, color)\r\n                    return object.hasTag(\"Dreadnought\") and (not color or object.hasTag(color))\r\n                end\r\n\r\n                ---\r\n                function Types.isSandworm(object, color)\r\n                    return object.hasTag(\"Sandworm\") and (not color or object.hasTag(color))\r\n                end\r\n\r\n                ---\r\n                -- bloodlines sardaukar commanders\r\n                function Types.isSardaukarCommander(object, color)\r\n                    return object.hasTag(\"SardaukarCommander\") and (not color or object.hasTag(color))\r\n                end\r\n\r\n                ---\r\n                -- bloodlines sardaukar commanders and agent\r\n                function Types.isUnit(object, color)\r\n                    return Types.isTroop(object, color) or Types.isDreadnought(object, color) or Types.isSandworm(object, color) or Types.isAgent(object, color) or Types.isSardaukarCommander(object, color)\r\n                end\r\n\r\n                ---\r\n                function Types.isControlMarker(object, color)\r\n                    return object.hasTag(\"Flag\") and (not color or object.hasTag(color))\r\n                end\r\n\r\n                ---\r\n                function Types.isAgent(object, color)\r\n                    return object.hasTag(\"Agent\") and (not color or object.hasTag(color))\r\n                end\r\n\r\n                ---\r\n                function Types.isSpy(object, color)\r\n                    return object.hasTag(\"Spy\") and (not color or object.hasTag(color))\r\n                end\r\n\r\n                ---\r\n                function Types.isVoiceToken(object)\r\n                    return object.hasTag(\"VoiceToken\")\r\n                end\r\n\r\n                ---\r\n                function Types.isVictoryPointToken(object)\r\n                    return object.hasTag(\"VictoryPointToken\")\r\n                end\r\n\r\n                ---\r\n                function Types.isObjectiveToken(object)\r\n                    for _, prefix in ipairs({\"MuadDib\", \"Ornithopter\", \"Crysknife\", \"Joker\"}) do\r\n                        if object.hasTag(prefix .. \"ObjectiveToken\") then\r\n                            return true\r\n                        end\r\n                    end\r\n                    return false\r\n                end\r\n\r\n                ---\r\n                function Types.isImperiumCard(object)\r\n                    return object.hasTag(\"Imperium\")\r\n                end\r\n\r\n                ---\r\n                function Types.isIntrigueCard(object)\r\n                    return object.hasTag(\"Intrigue\")\r\n                end\r\n\r\n                ---\r\n                function Types.isTech(object)\r\n                    return object.hasTag(\"Tech\")\r\n                end\r\n\r\n                ---\r\n                function Types.isContract(object)\r\n                    return object.hasTag(\"Contract\")\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsPlayerColor(color)\r\n                    assert(color == \"Green\"\r\n                        or color == \"Purple\"\r\n                        or color == \"Yellow\"\r\n                        or color == \"Blue\"\r\n                        or color == \"White\"\r\n                        or color == \"Red\",\r\n                    \"Not a player color: \" .. tostring(color))\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsFaction(faction)\r\n                    assert(faction == \"greatHouses\"\r\n                        or faction == \"emperor\"\r\n                        or faction == \"spacingGuild\"\r\n                        or faction == \"beneGesserit\"\r\n                        or faction == \"fremen\"\r\n                        or faction == \"fringeWorlds\",\r\n                    \"Not a faction: \" .. tostring(faction))\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsTroopLocation(location)\r\n                    assert(location == \"supply\" -- when lost or recalled\r\n                        or location == \"garrison\" -- when recruited\r\n                        or location == \"combat\" -- when deployed\r\n                        or location == \"negotiation\" -- when sent as negotiator\r\n                        or location == \"tanks\", -- when sent as specimen\r\n                    \"Not a troop location: \" .. tostring(location))\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsDreadnoughtLocation(location)\r\n                    assert(location == \"supply\" -- when lost or recalled\r\n                        or location == \"garrison\" -- when recruited\r\n                        or location == \"combat\" -- when deployed\r\n                        or location == \"carthag\" -- when occupying the place\r\n                        or location == \"arrakeen\" -- when occupying the place\r\n                        or location == \"imperialBassin\", -- when occupying the place\r\n                    \"Not a dreadnought location: \" .. tostring(location))\r\n                end\r\n\r\n                ---\r\n                -- bloodlines sardaukar commanders\r\n                function Types.assertIsSardaukarCommanderLocation(location)\r\n                    assert(location == \"supply\" -- when lost or recalled\r\n                        or location == \"garrison\" -- when recruited\r\n                        or location == \"combat\", -- when deployed\r\n                    \"Not a sardaukar commander location: \" .. tostring(location))\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsResourceName(resourceName)\r\n                    assert(resourceName == \"spice\"\r\n                        or resourceName == \"water\"\r\n                        or resourceName == \"solari\"\r\n                        or resourceName == \"persuasion\"\r\n                        or resourceName == \"strength\",\r\n                    \"Not a resource name: \" .. tostring(resourceName))\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsString(str)\r\n                    assert(type(str) == \"string\", \"Not a string: \" .. tostring(str))\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsBoolean(b)\r\n                    assert(type(b) == \"boolean\", \"Not a boolean: \" .. tostring(b))\r\n                end\r\n\r\n                ---\r\n                function Types.isInteger(n)\r\n                    return type(n) == \"number\" and math.floor(n) == n\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsInteger(n)\r\n                    assert(Types.isInteger(n), \"Not an integer: \" .. tostring(n))\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsPositiveInteger(n)\r\n                    assert(Types.isInteger(n) and n >= 0, \"Not a positive integer: \" .. tostring(n))\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsStrictlyPositive(n)\r\n                    assert(Types.isInteger(n) and n > 0, \"Not a strictly positive integer: \" .. tostring(n))\r\n                end\r\n\r\n                ---\r\n                function Types.assertIsInRange(min, max, n)\r\n                    assert(Types.isInteger(min))\r\n                    assert(Types.isInteger(max))\r\n                    assert(Types.isInteger(n), \"Not an integer: \" .. tostring(n))\r\n                    assert(min <= n and n <= max, \"Not in range [\" .. tostring(min) .. \", \" .. tostring(max) .. \"]: \" .. tostring(n))\r\n                end\r\n\r\n                return Types\r\n\r\n            end)\r\n            __bundle_register(\"TurnControl\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                --[[\r\n    Reify the turn sequence in interaction with the PlayBoard module (as well\r\n    as Hagal and Commander for the more specialized game modes), emitting events\r\n    along the way to offer a mean to other modules to activate when needed.\r\n]]\r\n\r\n                local Module = require(\"utils.Module\")\r\n                local Helper = require(\"utils.Helper\")\r\n                local I18N = require(\"utils.I18N\")\r\n\r\n                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                local Commander = Module.lazyRequire(\"Commander\")\r\n                local Hagal = Module.lazyRequire(\"Hagal\")\r\n                local Deck = Module.lazyRequire(\"Deck\")\r\n                local Combat = Module.lazyRequire(\"Combat\")\r\n\r\n                local TurnControl = {\r\n                    hotSeat = false,\r\n                    players = {},\r\n                    firstPlayerLuaIndex = nil,\r\n                    firstPlayerOfTheGame = nil,\r\n                    counterClockWise = false,\r\n                    currentRound = 0,\r\n                    currentPhase = nil,\r\n                    currentPlayerLuaIndex = nil,\r\n                    customTurnSequence = nil,\r\n                }\r\n\r\n                function TurnControl.onLoad(state)\r\n                    if state.settings then\r\n                        if state.TurnControl then\r\n                            TurnControl.hotSeat = state.TurnControl.hotSeat\r\n                            TurnControl.players = state.TurnControl.players\r\n                            TurnControl.scoreGoal = state.TurnControl.scoreGoal\r\n                            TurnControl.firstPlayerLuaIndex = state.TurnControl.firstPlayerLuaIndex\r\n                            TurnControl.firstPlayerOfTheGame = state.TurnControl.firstPlayerOfTheGame\r\n                            TurnControl.counterClockWise = state.TurnControl.counterClockWise\r\n                            TurnControl.currentRound = state.TurnControl.currentRound\r\n                            TurnControl.currentPhase = state.TurnControl.currentPhase\r\n                            TurnControl.currentPlayerLuaIndex = state.TurnControl.currentPlayerLuaIndex\r\n                            TurnControl.customTurnSequence = state.TurnControl.customTurnSequence\r\n\r\n                            if TurnControl.currentPlayerLuaIndex then\r\n                                Helper.onceTimeElapsed(2).doAfter(Helper.partialApply(TurnControl._notifyPlayerTurn, true))\r\n                            else\r\n                                TurnControl._createReclaimRewardsButton()\r\n                            end\r\n                        end\r\n                    end\r\n\r\n                    Helper.registerEventListener(\"phaseEnd\", function (phase)\r\n                        if TurnControl.currentPhase == \"combat\" then\r\n                            TurnControl._createReclaimRewardsButton()\r\n                        elseif TurnControl.currentPhase == \"combatEnd\" and TurnControl._endgameGoalReached() and TurnControl.currentRound < 10 then\r\n                            TurnControl._createNextRoundButton()\r\n                        end\r\n                    end)\r\n                end\r\n\r\n                function TurnControl.onSave(state)\r\n                    state.TurnControl = {\r\n                        hotSeat = TurnControl.hotSeat,\r\n                        players = TurnControl.players,\r\n                        scoreGoal = TurnControl.scoreGoal,\r\n                        firstPlayerLuaIndex = TurnControl.firstPlayerLuaIndex,\r\n                        firstPlayerOfTheGame = TurnControl.firstPlayerOfTheGame,\r\n                        counterClockWise = TurnControl.counterClockWise,\r\n                        currentRound = TurnControl.currentRound,\r\n                        currentPhase = TurnControl.currentPhase,\r\n                        currentPlayerLuaIndex = TurnControl.currentPlayerLuaIndex,\r\n                        customTurnSequence = TurnControl.customTurnSequence,\r\n                    }\r\n                end\r\n\r\n                --- Initialize the turn system with the provided players (or all the seated\r\n                --- players) and start a new round.\r\n                function TurnControl.setUp(settings, activeOpponents)\r\n                    TurnControl.hotSeat = settings.hotSeat\r\n                    TurnControl.players = TurnControl.toCanonicallyOrderedPlayerList(activeOpponents)\r\n                    TurnControl.scoreGoal = settings.epicMode and 12 or 10\r\n\r\n                    if settings.numberOfPlayers == 2 then\r\n                        for i, player in ipairs(TurnControl.players) do\r\n                            if PlayBoard.isRival(player) then\r\n                                TurnControl.firstPlayerLuaIndex = TurnControl._getNextPlayer(i, math.random() > 0)\r\n                                break\r\n                            end\r\n                        end\r\n                        assert(TurnControl.firstPlayerLuaIndex)\r\n                    else\r\n                        if settings.firstPlayer == \"random\" then\r\n                            local firstPlayer\r\n                            repeat\r\n                                TurnControl.firstPlayerLuaIndex = math.random(#TurnControl.players)\r\n                                firstPlayer = TurnControl.players[TurnControl.firstPlayerLuaIndex]\r\n                            until not Commander.isCommander(firstPlayer)\r\n                        else\r\n                            TurnControl.firstPlayerLuaIndex = 1\r\n                            while TurnControl.firstPlayerLuaIndex < #TurnControl.players and TurnControl.players[TurnControl.firstPlayerLuaIndex] ~= settings.firstPlayer do\r\n                                TurnControl.firstPlayerLuaIndex = TurnControl.firstPlayerLuaIndex + 1\r\n                            end\r\n                        end\r\n                    end\r\n\r\n                    if not TurnControl.firstPlayerOfTheGame then\r\n                        TurnControl.firstPlayerOfTheGame = TurnControl.players[TurnControl.firstPlayerLuaIndex]\r\n                    end\r\n\r\n                    TurnControl._assignObjectives()\r\n                end\r\n\r\n                --- Return the (colors of the) active opponents in the mod canonical order,\r\n                --- starting from Green and progressing clockwise.\r\n                function TurnControl.toCanonicallyOrderedPlayerList(activeOpponents)\r\n                    local orderedColors = {\"Green\", \"Purple\", \"Yellow\", \"Blue\", \"White\", \"Red\"}\r\n\r\n                    local players = {}\r\n                    for _, color in ipairs(orderedColors) do\r\n                        if activeOpponents[color] then\r\n                            table.insert(players, color)\r\n                        end\r\n                    end\r\n\r\n                    return players\r\n                end\r\n\r\n                --- Generate an objective deck and randomly deal a card to each player within\r\n                --- two constraints: preserving the current first player (already choosen) and\r\n                --- not giving the same card to two allies (6P mode).\r\n                --- Note: it would be possible to designate the first player in this function,\r\n                --- but the two have been kept separated for historical reasons.\r\n                --- FIXME Way too convoluted!\r\n                function TurnControl._assignObjectives()\r\n                    local objectiveCards = {}\r\n\r\n                    local cardNames = {\"crysknife\"}\r\n                    if #TurnControl.players == 3 then\r\n                        local rivals = Helper.filter(TurnControl.players, PlayBoard.isRival)\r\n                        if #rivals == 1 then\r\n                            objectiveCards[rivals[1]] = \"ornithopter1to3p\"\r\n                        else\r\n                            table.insert(cardNames, \"ornithopter1to3p\")\r\n                        end\r\n                    elseif #TurnControl.players >= 4 then\r\n                        table.insert(cardNames, \"muadDib4to6p\")\r\n                        table.insert(cardNames, \"crysknife4to6p\")\r\n                    else\r\n                        error(\"Unexpected number of players: \" .. tostring(#TurnControl.players))\r\n                    end\r\n                    Helper.shuffle(cardNames)\r\n\r\n                    for i, color in ipairs(TurnControl.players) do\r\n                        if not Commander.isCommander(color) then\r\n                            if i == TurnControl.firstPlayerLuaIndex then\r\n                                objectiveCards[color] = \"muadDibFirstPlayer\"\r\n                            elseif not objectiveCards[color] then\r\n                                objectiveCards[color] = cardNames[1]\r\n                                table.remove(cardNames, 1)\r\n                            end\r\n                        end\r\n                    end\r\n\r\n                    local getCategory = function (cardName)\r\n                        for _, category in ipairs({\"ornithopter\", \"crysknife\", \"muadDib\"}) do\r\n                            if Helper.startsWith(cardName, category) then\r\n                                return category\r\n                            end\r\n                        end\r\n                        assert(false)\r\n                    end\r\n\r\n                    if #TurnControl.players == 6 and getCategory(objectiveCards.Green) == getCategory(objectiveCards.Yellow) then\r\n                        if objectiveCards.Green == \"muadDibFirstPlayer\" or objectiveCards.Red == \"muadDibFirstPlayer\" then\r\n                            local tmp = objectiveCards.Yellow\r\n                            objectiveCards.Yellow = objectiveCards.Blue\r\n                            objectiveCards.Blue = tmp\r\n                        else\r\n                            local tmp = objectiveCards.Green\r\n                            objectiveCards.Green = objectiveCards.Red\r\n                            objectiveCards.Red = tmp\r\n                        end\r\n                    end\r\n\r\n                    cardNames = {}\r\n                    for _, color in ipairs(TurnControl.players) do\r\n                        if not Commander.isCommander(color) then\r\n                            -- TODO Check ordering guarantees.\r\n                            cardNames[objectiveCards[color]] = 1\r\n                        end\r\n                    end\r\n\r\n                    local someUntaggedZone = Combat.getCombatCenterZone()\r\n                    assert(someUntaggedZone)\r\n                    Deck.generateObjectiveDeck(someUntaggedZone, cardNames).doAfter(function (deck)\r\n                        assert(Helper.getDeckOrCard(someUntaggedZone) == deck)\r\n                        local reversedPlayers = Helper.shallowCopy(TurnControl.players)\r\n                        Helper.reverse(reversedPlayers)\r\n                        for _, color in ipairs(reversedPlayers) do\r\n                            if not Commander.isCommander(color) then\r\n                                PlayBoard.giveObjectiveCardFromZone(color, someUntaggedZone)\r\n                            end\r\n                        end\r\n                    end)\r\n                end\r\n\r\n                ---\r\n                function TurnControl.getPhaseTurnSequence()\r\n                    local turnSequence = {}\r\n                    local playerLuaIndex = TurnControl.firstPlayerLuaIndex\r\n                    repeat\r\n                        table.insert(turnSequence, TurnControl.players[playerLuaIndex])\r\n                        playerLuaIndex = TurnControl._getNextPlayer(playerLuaIndex, TurnControl.counterClockWise)\r\n                    until playerLuaIndex == TurnControl.firstPlayerLuaIndex\r\n                    return turnSequence\r\n                end\r\n\r\n                ---\r\n                function TurnControl.overridePhaseTurnSequence(turnSequence)\r\n                    TurnControl.customTurnSequence = {}\r\n                    for _, color in ipairs(turnSequence) do\r\n                        for playerLuaIndex, otherColor in ipairs(TurnControl.players) do\r\n                            if otherColor == color then\r\n                                table.insert(TurnControl.customTurnSequence, playerLuaIndex)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function TurnControl.start()\r\n                    assert(TurnControl.firstPlayerLuaIndex, \"A setup failure is highly probable!\")\r\n                    TurnControl._startPhase(\"leaderSelection\")\r\n                end\r\n\r\n                ---\r\n                function TurnControl._startPhase(phase)\r\n                    assert(phase)\r\n                    TurnControl.lastTransition = os.time()\r\n\r\n                    local getNextPlayer = function ()\r\n                        return TurnControl._getNextPlayer(TurnControl.firstPlayerLuaIndex, TurnControl.counterClockWise)\r\n                    end\r\n\r\n                    if phase == \"roundStart\" then\r\n                        TurnControl.currentRound = TurnControl.currentRound + 1\r\n                        if TurnControl.currentRound > 1 then\r\n                            TurnControl.firstPlayerLuaIndex = getNextPlayer()\r\n                            -- Skip House Hagal which always play second.\r\n                            if Hagal.getRivalCount() == 1 and PlayBoard.isRival(TurnControl.players[TurnControl.firstPlayerLuaIndex]) then\r\n                                TurnControl.firstPlayerLuaIndex = getNextPlayer()\r\n                            end\r\n                        end\r\n                        -- Reverse turn sequence to have House Hagal second.\r\n                        if Hagal.getRivalCount() == 1 and not PlayBoard.isRival(TurnControl.players[getNextPlayer()]) then\r\n                            TurnControl.counterClockWise = not TurnControl.counterClockWise\r\n                        end\r\n                    end\r\n\r\n                    TurnControl.currentPhase = phase\r\n                    TurnControl.customTurnSequence = nil\r\n                    if phase == \"leaderSelection\" and TurnControl.counterClockWise then\r\n                        TurnControl.currentPlayerLuaIndex = getNextPlayer()\r\n                    else\r\n                        TurnControl.currentPlayerLuaIndex = TurnControl.firstPlayerLuaIndex\r\n                    end\r\n\r\n                    local firstPlayer = TurnControl.players[TurnControl.firstPlayerLuaIndex]\r\n                    Helper.dump(\"> Round:\", TurnControl.getCurrentRound(), \"- Phase:\", phase)\r\n                    broadcastToAll(I18N(Helper.toCamelCase(\"phase\", phase), {round = TurnControl.currentRound}), Color.fromString(\"Pink\"))\r\n                    Helper.emitEvent(\"phaseStart\", TurnControl.currentPhase, firstPlayer)\r\n\r\n                    Helper.onceFramesPassed(1).doAfter(function ()\r\n                        if TurnControl.customTurnSequence then\r\n                            if #TurnControl.customTurnSequence > 0 then\r\n                                TurnControl._next(TurnControl.customTurnSequence[1])\r\n                            else\r\n                                TurnControl.endOfPhase()\r\n                            end\r\n                        else\r\n                            TurnControl._next(TurnControl.currentPlayerLuaIndex)\r\n                        end\r\n                    end)\r\n                end\r\n\r\n                ---\r\n                function TurnControl.endOfTurn()\r\n                    Helper.onceStabilized().doAfter(function ()\r\n                        TurnControl._next(TurnControl._getNextPlayer(TurnControl.currentPlayerLuaIndex, TurnControl.counterClockWise))\r\n                    end)\r\n                end\r\n\r\n                ---\r\n                function TurnControl.endOfPhase(haltAfter)\r\n                    local bestTrigger\r\n                    local heavyPhases = {\"recall\"}\r\n                    if TurnControl.getPlayerCount() < 3 then\r\n                        table.insert(heavyPhases, \"combat\")\r\n                    end\r\n                    if Helper.isElementOf(TurnControl.currentPhase, heavyPhases) then\r\n                        bestTrigger = Helper.onceTimeElapsed(2)\r\n                    else\r\n                        bestTrigger = Helper.onceStabilized()\r\n                    end\r\n\r\n                    -- Current phase could change meanwhile (not great though).\r\n                    local phase = TurnControl.currentPhase\r\n\r\n                    bestTrigger.doAfter(function ()\r\n                        if phase ~= TurnControl.currentPhase then\r\n                            Helper.dump(phase, \"=/=\", TurnControl.currentPhase)\r\n                        end\r\n                        if phase then\r\n                            Helper.emitEvent(\"phaseEnd\", phase)\r\n                        end\r\n                        if not haltAfter then\r\n                            TurnControl._nextPhase()\r\n                        end\r\n                    end)\r\n                end\r\n\r\n                ---\r\n                function TurnControl._nextPhase()\r\n                    local nextPhase = TurnControl._getNextPhase(TurnControl.currentPhase)\r\n                    if nextPhase then\r\n                        TurnControl._startPhase(nextPhase)\r\n                    else\r\n                        TurnControl.currentPhase = nil\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function TurnControl._next(startPlayerLuaIndex)\r\n                    TurnControl.currentPlayerLuaIndex = TurnControl._findActivePlayer(startPlayerLuaIndex)\r\n                    if TurnControl.currentPlayerLuaIndex then\r\n                        TurnControl._notifyPlayerTurn()\r\n                    else\r\n                        if TurnControl.currentPhase == \"combat\" then\r\n                            TurnControl.endOfPhase(true)\r\n                        elseif TurnControl.currentPhase == \"combatEnd\" and TurnControl._endgameGoalReached() and TurnControl.currentRound < 10 then\r\n                            TurnControl.endOfPhase(true)\r\n                        else\r\n                            TurnControl.endOfPhase()\r\n                        end\r\n                    end\r\n                end\r\n\r\n                function TurnControl._getButtonAnchor()\r\n                    local primaryTable = getObjectFromGUID(\"2b4b92\")\r\n\r\n                    local continuation = Helper.createContinuation(\"TurnControl._createReclaimRewardsButton\")\r\n                    if not TurnControl.buttonAnchor then\r\n                        Helper.createTransientAnchor(\"AgentPark\", primaryTable.getPosition() + Vector(3.5, 1.3, -15.8)).doAfter(function (anchor)\r\n                            TurnControl.buttonAnchor = anchor\r\n                            continuation.run(TurnControl.buttonAnchor)\r\n                        end)\r\n                    else\r\n                        continuation.run(TurnControl.buttonAnchor)\r\n                    end\r\n\r\n                    return continuation\r\n                end\r\n\r\n                function TurnControl._createReclaimRewardsButton()\r\n                    local fromIntRGB = function (r, g, b)\r\n                        return Color(r / 255, g / 255, b / 255)\r\n                    end\r\n\r\n                    Turns.order = {}\r\n                    Turns.enable = false\r\n\r\n                    TurnControl._getButtonAnchor().doAfter(function (anchor)\r\n                        Helper.createAbsoluteButtonWithRoundness(anchor, 1, {\r\n                            click_function = Helper.registerGlobalCallback(function ()\r\n                                anchor.clearButtons()\r\n                                TurnControl._nextPhase()\r\n                            end),\r\n                            label = I18N(\"reclaimRewards\"),\r\n                            position = anchor.getPosition() + Vector(0, 0.5, 0),\r\n                            width = 3500,\r\n                            height = 420,\r\n                            font_size = 300,\r\n                            color = fromIntRGB(128, 77, 0),\r\n                            font_color = fromIntRGB(204, 153, 0),\r\n                        })\r\n                    end)\r\n                end\r\n\r\n                function TurnControl._createNextRoundButton()\r\n                    local fromIntRGB = function (r, g, b)\r\n                        return Color(r / 255, g / 255, b / 255)\r\n                    end\r\n\r\n                    Turns.order = {}\r\n                    Turns.enable = false\r\n\r\n                    TurnControl._getButtonAnchor().doAfter(function (anchor)\r\n                        Helper.createAbsoluteButtonWithRoundness(anchor, 1, {\r\n                            click_function = Helper.registerGlobalCallback(function ()\r\n                                anchor.clearButtons()\r\n                                TurnControl._nextPhase()\r\n                            end),\r\n                            label = I18N(\"doYouWantAnotherRound\"),\r\n                            position = anchor.getPosition() + Vector(0, 0.5, 0),\r\n                            width = 3500,\r\n                            height = 420,\r\n                            font_size = 300,\r\n                            color = fromIntRGB(128, 77, 0),\r\n                            font_color = fromIntRGB(204, 153, 0),\r\n                        })\r\n                    end)\r\n                end\r\n\r\n                ---\r\n                function TurnControl._notifyPlayerTurn(refreshing)\r\n                    local playerColor = TurnControl.players[TurnControl.currentPlayerLuaIndex]\r\n                    local player = Helper.findPlayerByColor(playerColor)\r\n                    if player then\r\n                        if not player.seated and\r\n                            (not PlayBoard.isRival(playerColor) or TurnControl.currentPhase == \"leaderSelection\") and\r\n                            not TurnControl.assumeDirectControl(playerColor)\r\n                            then\r\n                            broadcastToAll(I18N(\"noSeatedPlayer\", {color = I18N(playerColor)}), Color.fromString(\"Pink\"))\r\n                        end\r\n                        Helper.onceFramesPassed(1).doAfter(function ()\r\n                            Turns.turn_color = playerColor\r\n                            Turns.order = {playerColor}\r\n                            if not Turns.enable and not TurnControl.hotSeat then\r\n                                Turns.enable = #Turns.order > 0\r\n                            end\r\n                            Helper.dump(\">> Turn:\", playerColor)\r\n                            Helper.emitEvent(\"playerTurn\", TurnControl.currentPhase, playerColor, refreshing)\r\n                        end)\r\n                    end\r\n                end\r\n\r\n                function TurnControl.assumeDirectControl(color)\r\n                    local legitimatePlayers = TurnControl.getLegitimatePlayers(color)\r\n                    if not Helper.isEmpty(legitimatePlayers) then\r\n                        legitimatePlayers[1].changeColor(color)\r\n                        return true\r\n                    else\r\n                        return false\r\n                    end\r\n                end\r\n\r\n                function TurnControl.getLegitimatePlayers(color)\r\n\r\n                    local legitimatePlayers = {}\r\n\r\n                    -- In 6P we add any seated player of the same team.\r\n                    if TurnControl.getPlayerCount() == 6 then\r\n                        for _, player in ipairs(Player.getPlayers()) do\r\n                            if player.seated and Commander.inSameTeam(color, player.color) then\r\n                                table.insert(legitimatePlayers, player)\r\n                            end\r\n                        end\r\n                    end\r\n\r\n                    -- Failing to find at least one, we take the host player.\r\n                    if Helper.isEmpty(legitimatePlayers) then\r\n                        for _, player in ipairs(Player.getPlayers()) do\r\n                            if player.host then\r\n                                table.insert(legitimatePlayers, player)\r\n                            end\r\n                        end\r\n                    end\r\n\r\n                    return legitimatePlayers\r\n                end\r\n\r\n                ---\r\n                function TurnControl._findActivePlayer(startPlayerLuaIndex)\r\n                    assert(startPlayerLuaIndex)\r\n                    local playerLuaIndex = startPlayerLuaIndex\r\n                    local n = TurnControl.getPlayerCount()\r\n                    for _ = 1, n do\r\n                        if TurnControl._isPlayerActive(playerLuaIndex) then\r\n                            return playerLuaIndex\r\n                        end\r\n                        playerLuaIndex = TurnControl._getNextPlayer(playerLuaIndex, TurnControl.counterClockWise)\r\n                    end\r\n                    return nil\r\n                end\r\n\r\n                ---\r\n                function TurnControl._getNextPlayer(playerLuaIndex, counterClockWise)\r\n                    assert(playerLuaIndex)\r\n                    if TurnControl.customTurnSequence then\r\n                        for i, otherPlayerLuaIndex in ipairs(TurnControl.customTurnSequence) do\r\n                            if otherPlayerLuaIndex == playerLuaIndex then\r\n                                local nextPlayerLuaIndex = TurnControl.customTurnSequence[(i % #TurnControl.customTurnSequence) + 1]\r\n                                return nextPlayerLuaIndex\r\n                            end\r\n                        end\r\n                        error(\"Incorrect custom turn sequence\")\r\n                    else\r\n                        local n = TurnControl.getPlayerCount()\r\n                        local nextPlayerLuaIndex\r\n                        if counterClockWise then\r\n                            nextPlayerLuaIndex = ((playerLuaIndex + n - 2) % n) + 1\r\n                        else\r\n                            nextPlayerLuaIndex = (playerLuaIndex % n) + 1\r\n                        end\r\n                        assert(nextPlayerLuaIndex)\r\n                        return nextPlayerLuaIndex\r\n                    end\r\n                end\r\n\r\n                ---\r\n                function TurnControl._getNextPhase(phase)\r\n                    if phase == 'leaderSelection' then\r\n                        return 'gameStart'\r\n                    elseif phase == 'gameStart' then\r\n                        return 'roundStart'\r\n                    elseif phase == 'roundStart' then\r\n                        return 'playerTurns'\r\n                    elseif phase == 'playerTurns' then\r\n                        return 'combat'\r\n                    elseif phase == 'combat' then\r\n                        return 'combatEnd'\r\n                    elseif phase == 'combatEnd' then\r\n                        return 'makers'\r\n                    elseif phase == 'makers' then\r\n                        return 'recall'\r\n                    elseif phase == 'recall' then\r\n                        if TurnControl._endgameGoalReached() then\r\n                            broadcastToAll(I18N(\"endgameReached\"), Color.fromString(\"Pink\"))\r\n                        end\r\n                        return TurnControl._endgameGoalReached(true) and 'endgame' or 'roundStart'\r\n                    elseif phase == 'endgame' then\r\n                        return nil\r\n                    else\r\n                        error(\"Unknown phase: \" .. tostring(phase))\r\n                    end\r\n                end\r\n\r\n                ---@param hardLimit boolean?\r\n                ---@return boolean\r\n                function TurnControl._endgameGoalReached(hardLimit)\r\n                    if TurnControl.currentRound == 10 then\r\n                        return true\r\n                    elseif hardLimit then\r\n                        return false\r\n                    end\r\n\r\n                    local bestScore = 0\r\n                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                        bestScore = math.max(bestScore, PlayBoard.getPlayBoard(color):getScore())\r\n                    end\r\n                    return bestScore >= TurnControl.scoreGoal\r\n                end\r\n\r\n                ---\r\n                function TurnControl._isPlayerActive(playerLuaIndex)\r\n                    assert(playerLuaIndex)\r\n                    local phase = TurnControl.currentPhase\r\n                    local color = TurnControl.players[playerLuaIndex]\r\n                    return PlayBoard.acceptTurn(phase, color)\r\n                end\r\n\r\n                ---\r\n                function TurnControl.isCombat()\r\n                    return TurnControl.currentPhase == \"combat\"\r\n                    or TurnControl.currentPhase == \"combatEnd\"\r\n                end\r\n\r\n                ---\r\n                function TurnControl.getCurrentPlayer()\r\n                    return TurnControl.players[TurnControl.currentPlayerLuaIndex]\r\n                end\r\n\r\n                ---\r\n                function TurnControl.getPlayerCount()\r\n                    return #TurnControl.players\r\n                end\r\n\r\n                ---\r\n                function TurnControl.getPlayers()\r\n                    return TurnControl.players\r\n                end\r\n\r\n                ---\r\n                function TurnControl.getFirstPlayer()\r\n                    return TurnControl.players[TurnControl.firstPlayerLuaIndex]\r\n                end\r\n\r\n                ---\r\n                function TurnControl.getFirstPlayerOfTheGame()\r\n                    return TurnControl.firstPlayerOfTheGame\r\n                end\r\n\r\n                ---\r\n                function TurnControl.getCurrentRound()\r\n                    return TurnControl.currentRound\r\n                end\r\n\r\n                ---\r\n                function TurnControl.getCurrentPhase()\r\n                    return TurnControl.currentPhase\r\n                end\r\n\r\n                ---\r\n                function TurnControl.isHotSeatEnabled()\r\n                    return TurnControl.hotSeat\r\n                end\r\n\r\n                return TurnControl\r\n\r\n            end)\r\n            __bundle_register(\"ThroneRow\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                local Module = require(\"utils.Module\")\r\n                local Helper = require(\"utils.Helper\")\r\n                local AcquireCard = require(\"utils.AcquireCard\")\r\n                local I18N = require(\"utils.I18N\")\r\n                local Dialog = require(\"utils.Dialog\")\r\n\r\n                local Deck = Module.lazyRequire(\"Deck\")\r\n                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                local Commander = Module.lazyRequire(\"Commander\")\r\n                local ImperiumCard = Module.lazyRequire(\"ImperiumCard\")\r\n\r\n                local ThroneRow = {}\r\n\r\n                ---\r\n                function ThroneRow.onLoad(state)\r\n                    Helper.append(ThroneRow, Helper.resolveGUIDs(false, {\r\n                        slotZones = {\r\n                            '7cceb1',\r\n                            '3b00e1',\r\n                            'f03bec',\r\n                            '46e26a',\r\n                        }}))\r\n\r\n                        if state.settings and state.settings.numberOfPlayers == 6 then\r\n                            ThroneRow._transientSetUp()\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function ThroneRow.setUp(settings)\r\n                        if settings.numberOfPlayers == 6 then\r\n                            ThroneRow._transientSetUp()\r\n                        else\r\n                            ThroneRow._tearDown()\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function ThroneRow._transientSetUp()\r\n                        ThroneRow.acquireCards = {}\r\n                        for i, zone in ipairs(ThroneRow.slotZones) do\r\n                            local acquireCard = AcquireCard.new(zone, \"Imperium\", PlayBoard.withLeader(function (_, color)\r\n                                if Commander.isTeamShaddam(color) then\r\n                                    PlayBoard.getLeader(color).acquireThroneCard(color, i)\r\n                                else\r\n                                    Dialog.broadcastToColor(I18N('notShaddamTeam'), color, \"Purple\")\r\n                                end\r\n                            end), Deck.getAcquireCardDecalUrl(\"corrino\"))\r\n                            table.insert(ThroneRow.acquireCards, acquireCard)\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function ThroneRow.onObjectEnterZone(zone, object)\r\n                        if ThroneRow.acquireCards then\r\n                            for _, acquireCard in ipairs(ThroneRow.acquireCards) do\r\n                                if acquireCard.zone == zone then\r\n                                    if object.type == \"Card\" then\r\n                                        if ImperiumCard.isFactionCard(object, \"fremen\") then\r\n                                            broadcastToAll(I18N('notFremenCard'), \"White\")\r\n                                        end\r\n                                    end\r\n                                end\r\n                            end\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function ThroneRow._tearDown()\r\n                        for _, slotZone in ipairs(ThroneRow.slotZones) do\r\n                            slotZone.destruct()\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function ThroneRow.acquireThroneCard(color, indexInRow)\r\n                        local acquireCard = ThroneRow.acquireCards[indexInRow]\r\n                        PlayBoard.giveCardFromZone(color, acquireCard.zone)\r\n                        return true\r\n                    end\r\n\r\n                    return ThroneRow\r\n\r\n                end)\r\n                __bundle_register(\"utils.Dialog\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                    local Helper = require(\"utils.Helper\")\r\n                    local I18N = require(\"utils.I18N\")\r\n\r\n                    local Dialog = {\r\n                        nativeDialogUsed = false,\r\n                        staticDialogUsed = false,\r\n                    }\r\n\r\n                    ---\r\n                    function Dialog.loadStaticUI()\r\n                        local xmlRoots = UI.getXmlTable()\r\n                        local options = {}\r\n                        for i = 1, 5 do\r\n                            table.insert(options, \"option\" .. tostring(i))\r\n                            local ui = Dialog._generateDialogUI(nil, nil, options, nil)\r\n                            table.insert(xmlRoots, ui)\r\n                        end\r\n                        UI.setXmlTable(xmlRoots)\r\n                        Dialog.staticDialogUsed = true\r\n                        -- 10 instead of just 1, better be safe than sorry.\r\n                        return Helper.onceFramesPassed(10)\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog.showInfoDialog(color, title)\r\n                        if Dialog.nativeDialogUsed then\r\n                            Player[color].showInfoDialog(title)\r\n                        else\r\n                            local options = {\r\n                                I18N(\"ok\"),\r\n                            }\r\n                            Dialog._showOptionsAndCancelDialog(color, title, options, function (_) end)\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog.showConfirmDialog(color, title, callback)\r\n                        if Dialog.nativeDialogUsed then\r\n                            Player[color].showConfirmDialog(title, function ()\r\n                                callback()\r\n                            end)\r\n                        else\r\n                            local options = {\r\n                                I18N(\"ok\"),\r\n                                I18N(\"cancel\"),\r\n                            }\r\n                            Dialog._showOptionsAndCancelDialog(color, title, options, function (index)\r\n                                if index == 1 then\r\n                                    callback()\r\n                                end\r\n                            end)\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog.showConfirmOrCancelDialog(color, title, linkedContinuation, callback)\r\n                        if Dialog.nativeDialogUsed then\r\n                            if linkedContinuation then\r\n                                linkedContinuation.forget()\r\n                            end\r\n                            Player[color].showConfirmDialog(title, function ()\r\n                                callback(true)\r\n                            end)\r\n                        else\r\n                            local options = {\r\n                                I18N(\"ok\"),\r\n                                I18N(\"cancel\"),\r\n                            }\r\n                            Dialog._showOptionsAndCancelDialog(color, title, options, function (index)\r\n                                callback(index == 1)\r\n                            end)\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog.showYesOrNoDialog(color, title, linkedContinuation, callback)\r\n                        if Dialog.nativeDialogUsed then\r\n                            if linkedContinuation then\r\n                                linkedContinuation.forget()\r\n                            end\r\n                            Player[color].showConfirmDialog(title, function ()\r\n                                callback(true)\r\n                            end)\r\n                        else\r\n                            local options = {\r\n                                I18N(\"yes\"),\r\n                                I18N(\"no\"),\r\n                            }\r\n                            Dialog._showOptionsAndCancelDialog(color, title, options, function (index)\r\n                                callback(index == 1)\r\n                            end)\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog.showOptionsDialog(color, title, options, linkedContinuation, callback)\r\n                        assert(options)\r\n                        assert(#options > 0)\r\n                        if Dialog.nativeDialogUsed then\r\n                            if linkedContinuation then\r\n                                linkedContinuation.forget()\r\n                            end\r\n                            Player[color].showOptionsDialog(title, options, 1, function (_, index, _)\r\n                                callback(index)\r\n                            end)\r\n                        else\r\n                            Dialog._showOptionsAndCancelDialog(color, title, options, function (index)\r\n                                if index > 0 then\r\n                                    callback(index)\r\n                                end\r\n                            end)\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog.showOptionsAndCancelDialog(color, title, options, linkedContinuation, callback)\r\n                        assert(options)\r\n                        assert(#options > 0)\r\n                        if Dialog.nativeDialogUsed then\r\n                            if linkedContinuation then\r\n                                linkedContinuation.forget()\r\n                            end\r\n                            Player[color].showOptionsDialog(title, options, 1, function (_, index, _)\r\n                                callback(index)\r\n                            end)\r\n                        else\r\n                            Dialog._showOptionsAndCancelDialog(color, title, options, callback)\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog._showOptionsAndCancelDialog(color, title, options, callback)\r\n                        if Dialog.staticDialogUsed and Dialog._checkExistence(options) then\r\n                            Dialog._bindStaticUI(color, title, options, callback)\r\n                        else\r\n                            local ui = Dialog._generateDialogUI(color, title, options, callback)\r\n                            UI.setXmlTable({ui})\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog._bindStaticUI(color, title, options, callback)\r\n                        local dialogId = Dialog._dialogId(options)\r\n\r\n                        UI.setAttribute(dialogId, \"active\", true)\r\n                        UI.setAttribute(dialogId, \"visibility\", color)\r\n                        UI.setValue(Dialog._titleId(options), title)\r\n\r\n                        local closingCallback = Dialog._createClosingCallback(options, function (...)\r\n                            UI.setAttribute(dialogId, \"active\", false)\r\n                            callback(...)\r\n                        end)\r\n\r\n                        local cancelButtonId = Dialog._cancelButtonId(options)\r\n                        UI.setAttribute(cancelButtonId, \"onClick\", Helper.registerGlobalCallback(function (player)\r\n                            closingCallback(0)\r\n                        end))\r\n\r\n                        for i, option in ipairs(options) do\r\n                            local optionButtonId = Dialog._optionButtonId(options, i)\r\n                            -- Using the \"text\" attribute instead of the value is necessary here (that's weird).\r\n                            UI.setAttribute(optionButtonId, \"text\", option)\r\n                            UI.setAttribute(optionButtonId, \"onClick\", Helper.registerGlobalCallback(function (player)\r\n                                closingCallback(i)\r\n                            end))\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog._checkExistence(options)\r\n                        local dialogId = Dialog._dialogId(options)\r\n                        local color = UI.getAttribute(dialogId, \"color\")\r\n                        return color and type(color) == \"string\" and color:len() > 0\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog._dialogId(options)\r\n                        return \"dialogWith\" .. tostring(#options) .. \"Options\"\r\n                    end\r\n                    ---\r\n                    function Dialog._titleId(options)\r\n                        return Dialog._dialogId(options) .. \"Title\"\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog._cancelButtonId(options)\r\n                        return Dialog._dialogId(options) .. \"CancelButton\"\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog._optionButtonId(options, index)\r\n                        return Dialog._dialogId(options) .. \"OptionButton\" .. tostring(index)\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog._createClosingCallback(options, callback)\r\n                        return function (index)\r\n                            local cancelButtonId = Dialog._cancelButtonId(options)\r\n                            Helper.unregisterGlobalCallback(UI.getAttribute(cancelButtonId, \"onClick\"))\r\n                            for i, _ in ipairs(options) do\r\n                                local optionButtonId = Dialog._optionButtonId(options, i)\r\n                                Helper.unregisterGlobalCallback(UI.getAttribute(optionButtonId, \"onClick\"))\r\n                            end\r\n                            callback(index)\r\n                        end\r\n                    end\r\n\r\n                    ---\r\n                    function Dialog._generateDialogUI(color, title, options, callback)\r\n\r\n                        local closingCallback\r\n                        if callback then\r\n                            closingCallback = Dialog._createClosingCallback(options, function (...)\r\n                                UI.setXmlTable({{}})\r\n                                callback(...)\r\n                            end)\r\n                        end\r\n\r\n                        local cancelButton = Dialog._createCancelButton(options, closingCallback)\r\n\r\n                        local optionButtons = {}\r\n                        for i, label in ipairs(options) do\r\n                            table.insert(optionButtons, Dialog._createOptionButton(options, i, label, closingCallback))\r\n                        end\r\n\r\n                        local height = 95 + 50 * #optionButtons + 35\r\n\r\n                        local ui = {\r\n                            tag = \"Panel\",\r\n                            attributes = {\r\n                                visibility = color,\r\n                                position = 0,\r\n                                width = 440,\r\n                                height = height,\r\n                                color = \"#30281f\",\r\n                                id = Dialog._dialogId(options),\r\n                                outline = \"#8c794b\",\r\n                                outlineSize = 1,\r\n                                active = closingCallback ~= nil,\r\n                                allowDragging = true,\r\n                                returnToOriginalPositionWhenReleased = false,\r\n                            },\r\n                            children = {\r\n                                {\r\n                                    tag = \"VerticalLayout\",\r\n                                    children = {\r\n                                        {\r\n                                            tag = \"Image\",\r\n                                            attributes = {\r\n                                                ignoreLayout = \"True\",\r\n                                                height = \"120\",\r\n                                                position = \"0 \" .. tostring((height - 120) / 2 - 20),\r\n                                                color = \"#544a33\",\r\n                                                preserveAspect = true,\r\n                                                raycastTarget = true,\r\n                                            },\r\n                                        },\r\n                                        {\r\n                                            tag = \"HorizontalLayout\",\r\n                                            children = {\r\n                                                {\r\n                                                    tag = \"Text\",\r\n                                                    attributes = {\r\n                                                        preferredWidth = 400,\r\n                                                    },\r\n                                                },\r\n                                                cancelButton,\r\n                                                {\r\n                                                    tag = \"Text\",\r\n                                                    attributes = {\r\n                                                        preferredWidth = 10,\r\n                                                    },\r\n                                                }}},\r\n                                                {\r\n                                                    tag = \"VerticalLayout\",\r\n                                                    attributes = {\r\n                                                        padding = \"10 10 10 10\",\r\n                                                    },\r\n                                                    children = {\r\n                                                        {\r\n                                                            tag = \"Text\",\r\n                                                            attributes = {\r\n                                                                id = Dialog._titleId(options),\r\n                                                                preferredWidth = 415,\r\n                                                                preferredHeight = 40,\r\n                                                                color = \"#deaf00\",\r\n                                                                resizeTextForBestFit = true,\r\n                                                                resizeTextMaxSize = \"24\",\r\n                                                            },\r\n                                                            value = title,\r\n                                                        },\r\n                                                        {\r\n                                                            tag = \"VerticalLayout\",\r\n                                                            attributes = {\r\n                                                                childAlignment = \"MiddleCenter\",\r\n                                                                padding = \"10 10 10 10\",\r\n                                                                spacing = \"10\",\r\n                                                            },\r\n                                                            children = optionButtons\r\n                                                        }}}}}}}\r\n\r\n                                                        return ui\r\n                                                    end\r\n\r\n                                                    ---\r\n                                                    function Dialog._createCancelButton(options, closingCallback)\r\n                                                        local button = {\r\n                                                            tag = \"Button\",\r\n                                                            attributes = {\r\n                                                                id = Dialog._cancelButtonId(options),\r\n                                                                fontSize = \"12\",\r\n                                                                fontStyle = \"Bold\",\r\n                                                                outlineSize = \"1 1\",\r\n                                                                preferredWidth = 35,\r\n                                                                preferredHeight = 15,\r\n                                                                color = \"#8c794b\",\r\n                                                            },\r\n                                                            value = \"X\",\r\n                                                        }\r\n\r\n                                                        if closingCallback then\r\n                                                            button.attributes.onClick = Helper.registerGlobalCallback(function (player)\r\n                                                                closingCallback(0)\r\n                                                            end)\r\n                                                        end\r\n\r\n                                                        return button\r\n                                                    end\r\n\r\n                                                    ---\r\n                                                    function Dialog._createOptionButton(options, index, label, closingCallback)\r\n                                                        assert(index > 0)\r\n\r\n                                                        local button = {\r\n                                                            tag = \"Button\",\r\n                                                            attributes = {\r\n                                                                id = Dialog._optionButtonId(options, index),\r\n                                                                color = \"#8c794b\",\r\n                                                                padding = \"5 5 5 5\",\r\n                                                                resizeTextForBestFit = true,\r\n                                                                resizeTextMaxSize = \"18\",\r\n                                                            },\r\n                                                            -- Using the \"text\" attribute would work as well.\r\n                                                            value = label,\r\n                                                        }\r\n\r\n                                                        if closingCallback then\r\n                                                            button.attributes.onClick = Helper.registerGlobalCallback(function (player)\r\n                                                                closingCallback(index)\r\n                                                            end)\r\n                                                        end\r\n\r\n                                                        return button\r\n                                                    end\r\n\r\n                                                    ---\r\n                                                    function Dialog.broadcastToColor(message, playerColor, messageColor)\r\n                                                        assert(message)\r\n                                                        assert(playerColor)\r\n                                                        local player = Helper.findPlayerByColor(playerColor)\r\n                                                        if player and player.seated then\r\n                                                            broadcastToColor(message, playerColor, messageColor)\r\n                                                        else\r\n                                                            broadcastToAll(I18N(\"forwardMessage\", {color = I18N(playerColor), message = message}), messageColor)\r\n                                                        end\r\n                                                    end\r\n\r\n                                                    return Dialog\r\n\r\n                                                end)\r\n                                                __bundle_register(\"utils.AcquireCard\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                    local Helper = require(\"utils.Helper\")\r\n                                                    local I18N = require(\"utils.I18N\")\r\n\r\n                                                    local AcquireCard = Helper.createClass(nil, {\r\n                                                        UPDATE_EVENT_NAME = \"AcquireCard/objectEnterOrLeaveScriptingZone\",\r\n                                                    })\r\n\r\n                                                    ---\r\n                                                    function AcquireCard.new(zone, tag, acquire, decalUrl)\r\n                                                        local acquireCard = Helper.createClassInstance(AcquireCard, {\r\n                                                            zone = zone,\r\n                                                            groundHeight = 1.65,\r\n                                                            cardHeight = 0.01,\r\n                                                            anchor = nil,\r\n                                                            cardCount = -1,\r\n                                                            acquire = acquire,\r\n                                                        })\r\n\r\n                                                        zone.addTag(tag)\r\n\r\n                                                        local position = zone.getPosition() - Vector(0, 0.5, 0)\r\n                                                        Helper.createTransientAnchor(\"AcquireCard\", position).doAfter(function (anchor)\r\n                                                            acquireCard.anchor = anchor\r\n\r\n                                                            local snapPoint = Helper.createRelativeSnapPointFromZone(anchor, zone, true, {tag})\r\n                                                            anchor.setSnapPoints({snapPoint})\r\n\r\n                                                            if acquire then\r\n                                                                acquireCard:_updateButton()\r\n\r\n                                                                Helper.registerEventListener(\"locale\", function ()\r\n                                                                    acquireCard:_updateButton()\r\n                                                                end)\r\n\r\n                                                                Helper.registerEventListener(AcquireCard.UPDATE_EVENT_NAME, function (otherZone)\r\n                                                                    if otherZone == zone then\r\n                                                                        acquireCard:_updateButton()\r\n                                                                    end\r\n                                                                end)\r\n                                                            end\r\n\r\n                                                            if decalUrl then\r\n                                                                acquireCard:_setDecal(decalUrl)\r\n                                                            end\r\n                                                        end)\r\n                                                        return acquireCard\r\n                                                    end\r\n\r\n                                                    ---\r\n                                                    function AcquireCard:_updateButton()\r\n                                                        if false then\r\n                                                            if not self.updateCoalescentQueue then\r\n\r\n                                                                local function coalesce(_, _)\r\n                                                                    return true\r\n                                                                end\r\n\r\n                                                                local function handle(_)\r\n                                                                    self:_createButton()\r\n                                                                end\r\n\r\n                                                                self.updateCoalescentQueue = Helper.createCoalescentQueue(\"acquire\", 0.5, coalesce, handle)\r\n                                                            end\r\n                                                            self.updateCoalescentQueue.submit(true)\r\n                                                        else\r\n                                                            self:_createButton()\r\n                                                        end\r\n                                                    end\r\n\r\n                                                    ---\r\n                                                    function AcquireCard:_setDecal(decalUrl)\r\n                                                        local scale = self.zone.getScale()\r\n                                                        self.anchor.setDecals({\r\n                                                            {\r\n                                                                name = \"AcquireCard\",\r\n                                                                url = decalUrl,\r\n                                                                position = Vector(0, 0.1, 0),\r\n                                                                rotation = {90, 180, 0},\r\n                                                                scale = Vector.scale(Vector(scale.x, scale.z, scale.y), 1.1),\r\n                                                            }})\r\n                                                        end\r\n\r\n                                                        ---\r\n                                                        function AcquireCard.onObjectEnterZone(...)\r\n                                                            Helper.emitEvent(AcquireCard.UPDATE_EVENT_NAME, ...)\r\n                                                        end\r\n\r\n                                                        ---\r\n                                                        function AcquireCard.onObjectLeaveZone(...)\r\n                                                            Helper.emitEvent(AcquireCard.UPDATE_EVENT_NAME, ...)\r\n                                                        end\r\n\r\n                                                        function AcquireCard:_createButton()\r\n                                                            local count = 0\r\n                                                            for _, object in ipairs(self.zone.getObjects()) do\r\n                                                                local cardCount = Helper.getCardCount(object)\r\n                                                                count = count + math.max(1, cardCount)\r\n                                                            end\r\n\r\n                                                            if self.cardCount ~= count then\r\n                                                                Helper.clearButtons(self.anchor)\r\n                                                                self.cardCount = count\r\n                                                                if count > 0 then\r\n                                                                    local height = self.groundHeight + count * self.cardHeight\r\n                                                                    local label = I18N(\"acquireButton\") .. \" (\" .. tostring(count) .. \")\"\r\n                                                                    Helper.createExperimentalAreaButton(self.zone, self.anchor, height, label, function (_, color)\r\n                                                                        if not self.disabled then\r\n                                                                            local continuation = self.acquire(self, color)\r\n                                                                            if continuation then\r\n                                                                                self.disabled = true\r\n                                                                                continuation.doAfter(function ()\r\n                                                                                    self.disabled = false\r\n                                                                                end)\r\n                                                                            end\r\n                                                                            -- The acquisition may not involve a smooth move.\r\n                                                                            self:_updateButton()\r\n                                                                        end\r\n                                                                    end)\r\n                                                                end\r\n                                                            end\r\n                                                        end\r\n\r\n                                                        return AcquireCard\r\n\r\n                                                    end)\r\n                                                    __bundle_register(\"TleilaxuRow\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                        local Module = require(\"utils.Module\")\r\n                                                        local Helper = require(\"utils.Helper\")\r\n                                                        local AcquireCard = require(\"utils.AcquireCard\")\r\n                                                        local I18N = require(\"utils.I18N\")\r\n                                                        local Dialog = require(\"utils.Dialog\")\r\n\r\n                                                        local Deck = Module.lazyRequire(\"Deck\")\r\n                                                        local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                        local TleilaxuResearch = Module.lazyRequire(\"TleilaxuResearch\")\r\n                                                        local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                        local ImperiumCard = Module.lazyRequire(\"ImperiumCard\")\r\n                                                        local Commander = Module.lazyRequire(\"Commander\")\r\n\r\n                                                        local TleilaxuRow = {}\r\n\r\n                                                        ---\r\n                                                        function TleilaxuRow.onLoad(state)\r\n                                                            Helper.append(TleilaxuRow, Helper.resolveGUIDs(false, {\r\n                                                                deckZone = \"14b2ca\",\r\n                                                                slotZones = {\r\n                                                                    'e5ba35',\r\n                                                                    '1e5a32',\r\n                                                                    '965fea',\r\n                                                                }}))\r\n\r\n                                                                if state.settings and state.settings.immortality then\r\n                                                                    TleilaxuRow._transientSetUp()\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuRow.setUp(settings)\r\n                                                                local continuation = Helper.createContinuation(\"TleilaxuRow.setUp\")\r\n                                                                if settings.immortality then\r\n                                                                    Deck.generateSpecialDeck(TleilaxuRow.slotZones[3], \"immortality\", \"reclaimedForces\")\r\n                                                                    Deck.generateTleilaxuDeck(TleilaxuRow.deckZone).doAfter(function (deck)\r\n                                                                        assert(deck, \"No Tleilaxu deck!\")\r\n                                                                        Helper.shuffleDeck(deck)\r\n                                                                        Helper.onceShuffled(deck).doAfter(function ()\r\n                                                                            for i = 1, 2 do\r\n                                                                                local zone = TleilaxuRow.slotZones[i]\r\n                                                                                Helper.moveCardFromZone(TleilaxuRow.deckZone, zone.getPosition(), Vector(0, 180, 0))\r\n                                                                            end\r\n                                                                        end)\r\n                                                                        TleilaxuRow._transientSetUp()\r\n                                                                        continuation.run()\r\n                                                                    end)\r\n                                                                else\r\n                                                                    TleilaxuRow._tearDown()\r\n                                                                    continuation.run()\r\n                                                                end\r\n                                                                return continuation\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuRow._transientSetUp()\r\n                                                                TleilaxuRow.acquireCards = {}\r\n                                                                for i, zone in ipairs(TleilaxuRow.slotZones) do\r\n                                                                    local acquireCard = AcquireCard.new(zone, \"Imperium\", PlayBoard.withLeader(function (_, color)\r\n                                                                        PlayBoard.getLeader(color).acquireTleilaxuCard(color, i)\r\n                                                                    end), Deck.getAcquireCardDecalUrl(\"generic\"))\r\n                                                                    table.insert(TleilaxuRow.acquireCards, acquireCard)\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuRow._tearDown()\r\n                                                                TleilaxuRow.deckZone.destruct()\r\n                                                                for _, slotZone in ipairs(TleilaxuRow.slotZones) do\r\n                                                                    slotZone.destruct()\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuRow.acquireTleilaxuCard(indexInRow, color)\r\n                                                                local acquireCard = TleilaxuRow.acquireCards[indexInRow]\r\n                                                                local card = Helper.getCard(acquireCard.zone)\r\n                                                                assert(card)\r\n                                                                local price = ImperiumCard.getTleilaxuCardCost(card)\r\n                                                                local cardName = Helper.getID(card)\r\n                                                                assert(price, \"Unknown tleilaxu card: \" .. tostring(cardName))\r\n                                                                assert((cardName == \"reclaimedForces\") == (indexInRow == 3))\r\n\r\n                                                                local specimenSupplierColor = color\r\n                                                                if Commander.isCommander(color) then\r\n                                                                    specimenSupplierColor = Commander.getActivatedAlly(color)\r\n                                                                end\r\n\r\n                                                                if TleilaxuResearch.getSpecimenCount(specimenSupplierColor) >= price then\r\n                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                    if cardName == \"reclaimedForces\" then\r\n                                                                        local options = {\r\n                                                                            I18N(\"troops\"),\r\n                                                                            I18N(\"beetle\"),\r\n                                                                        }\r\n                                                                        Dialog.showOptionsDialog(color, I18N(\"reclaimedForces\"), options, nil, function (index)\r\n                                                                            if index == 1 then\r\n                                                                                leader.troops(color, \"tanks\", \"supply\", price)\r\n                                                                                leader.troops(color, \"supply\", \"garrison\", 2)\r\n                                                                            elseif index == 2 then\r\n                                                                                leader.troops(color, \"tanks\", \"supply\", price)\r\n                                                                                leader.beetle(color, 1)\r\n                                                                            end\r\n                                                                        end)\r\n                                                                    else\r\n                                                                        leader.troops(color, \"tanks\", \"supply\", price)\r\n\r\n                                                                        PlayBoard.giveCard(color, card, true)\r\n\r\n                                                                        -- Replenish the slot in the row.\r\n                                                                        Helper.moveCardFromZone(TleilaxuRow.deckZone, acquireCard.zone.getPosition(), Vector(0, 180, 0))\r\n                                                                    end\r\n\r\n                                                                    return true\r\n                                                                else\r\n                                                                    Dialog.broadcastToColor(I18N(\"noEnoughSpecimen\"), color, \"Purple\")\r\n                                                                    return false\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuRow.trash(indexInRow)\r\n                                                                local acquireCard = TleilaxuRow.acquireCards[indexInRow]\r\n                                                                local card = Helper.getCard(acquireCard.zone)\r\n                                                                assert(card)\r\n                                                                local price = ImperiumCard.getTleilaxuCardCost(card)\r\n                                                                local cardName = Helper.getID(card)\r\n                                                                assert(price, \"Unknown tleilaxu card: \" .. tostring(cardName))\r\n                                                                assert((cardName == \"reclaimedForces\") == (indexInRow == 3))\r\n\r\n                                                                MainBoard.trash(card)\r\n\r\n                                                                -- Replenish the slot in the row.\r\n                                                                Helper.moveCardFromZone(TleilaxuRow.deckZone, acquireCard.zone.getPosition(), Vector(0, 180, 0))\r\n                                                            end\r\n\r\n                                                            return TleilaxuRow\r\n\r\n                                                        end)\r\n                                                        __bundle_register(\"TleilaxuResearch\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                            local Module = require(\"utils.Module\")\r\n                                                            local Helper = require(\"utils.Helper\")\r\n                                                            local Park = require(\"utils.Park\")\r\n                                                            local I18N = require(\"utils.I18N\")\r\n                                                            local Dialog = require(\"utils.Dialog\")\r\n\r\n                                                            local Resource = Module.lazyRequire(\"Resource\")\r\n                                                            local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                            local Commander = Module.lazyRequire(\"Commander\")\r\n\r\n                                                            local TleilaxuResearch = {\r\n                                                                --[[\r\n        Research path for each player in a discrete 2D space (we use the usual X-Z\r\n        coordinates from the Vector class for simpliciy). It abstracts us away from\r\n        the board layout.\r\n    ]]\r\n                                                                researchCellBenefits = {\r\n                                                                    [Vector(1, 0, 0)] = {specimen = true},\r\n                                                                    [Vector(2, 0, 1)] = {specimen = true},\r\n                                                                    [Vector(2, 0, -1)] = {beetle = true},\r\n                                                                    [Vector(3, 0, 2)] = {research = true},\r\n                                                                    [Vector(3, 0, 0)] = {trashImperiumCard = true, specimen = true},\r\n                                                                    [Vector(3, 0, -2)] = {beetle = true, specimen = true},\r\n                                                                    [Vector(4, 0, 1)] = {beetle = true},\r\n                                                                    [Vector(4, 0, -1)] = {specimen = true},\r\n                                                                    [Vector(4, 0, -3)] = {research = true},\r\n                                                                    [Vector(5, 0, 2)] = {research = true},\r\n                                                                    [Vector(5, 0, 0)] = {specimen = true},\r\n                                                                    [Vector(5, 0, -2)] = {solari = 1},\r\n                                                                    [Vector(6, 0, 1)] = {spice = 1},\r\n                                                                    [Vector(6, 0, -1)] = {beetle = true},\r\n                                                                    [Vector(6, 0, -3)] = {influence = 1},\r\n                                                                    [Vector(7, 0, 2)] = {beetle = true},\r\n                                                                    [Vector(7, 0, 0)] = {trashIntrigueTodrawImperiumAndIntrigueCards = true},\r\n                                                                    [Vector(7, 0, -2)] = {trashImperiumCard = true, specimen = true},\r\n                                                                    [Vector(8, 0, 1)] = {spice = 2},\r\n                                                                    [Vector(8, 0, -1)] = {beetle = true},\r\n                                                                [Vector(8, 0, -3)] = {solariToBeetle = true}},\r\n                                                                tleilaxLevelBenefits = {\r\n                                                                    {},\r\n                                                                    {},\r\n                                                                    {intrigue = true},\r\n                                                                    {},\r\n                                                                    {victoryToken = true, spiceBonus = true},\r\n                                                                    {},\r\n                                                                    {intrigue = true},\r\n                                                                {victoryToken = true}},\r\n                                                                tanksParks = {},\r\n                                                            }\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch.onLoad(state)\r\n                                                                Helper.append(TleilaxuResearch, Helper.resolveGUIDs(false, {\r\n                                                                    board = \"d5c2db\",\r\n                                                                    TanksZone = \"f5de09\",\r\n                                                                    tleilaxSpiceBonusToken = \"46cd6b\",\r\n                                                                    tleilaxuLevelZones = {\r\n                                                                        \"b3137b\",\r\n                                                                        \"a4181a\",\r\n                                                                        \"2a16a4\",\r\n                                                                        \"cef27c\",\r\n                                                                        \"ed5509\",\r\n                                                                        \"2bfdb0\",\r\n                                                                        \"33c0fd\",\r\n                                                                        \"cab3eb\"\r\n                                                                    },\r\n                                                                    oneHelixZone = \"53e9ac\",\r\n                                                                    twoHelicesZone = \"03e529\"\r\n                                                                }))\r\n\r\n                                                                if TleilaxuResearch.board then\r\n                                                                    Helper.noPhysicsNorPlay(TleilaxuResearch.board)\r\n\r\n                                                                    local value = (state and state.TleilaxuResearch and state.TleilaxuResearch.tleilaxSpiceBonusToken) or 2\r\n                                                                    TleilaxuResearch.spiceBonus = Resource.new(TleilaxuResearch.tleilaxSpiceBonusToken, nil, \"spice\", value)\r\n                                                                end\r\n\r\n                                                                if state.settings and state.settings.immortality then\r\n                                                                    TleilaxuResearch._transientSetUp()\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch.onSave(state)\r\n                                                                if TleilaxuResearch.board then\r\n                                                                    state.TleilaxuResearch = {\r\n                                                                        spiceBonus = TleilaxuResearch.spiceBonus:get(),\r\n                                                                    }\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch.setUp(settings)\r\n                                                                if settings.immortality then\r\n                                                                    TleilaxuResearch._transientSetUp()\r\n                                                                else\r\n                                                                    TleilaxuResearch._tearDown()\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._transientSetUp()\r\n\r\n                                                                TleilaxuResearch.researchTokenOrigin = TleilaxuResearch._getAveragePosition(\"researchTokenInitalPosition\")\r\n                                                                TleilaxuResearch._generateResearchButtons()\r\n\r\n                                                                TleilaxuResearch.tleilaxTokenOrigin = TleilaxuResearch._getAveragePosition(\"tleilaxTokenInitalPosition\")\r\n                                                                TleilaxuResearch._generateTleilaxButtons()\r\n\r\n                                                                for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                    if not Commander.isCommander(color) then\r\n                                                                        TleilaxuResearch.tanksParks[color] = TleilaxuResearch._createTanksPark(color)\r\n                                                                    end\r\n                                                                end\r\n                                                                TleilaxuResearch._createTanksButton()\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._tearDown()\r\n                                                                TleilaxuResearch.TanksZone.destruct()\r\n                                                                TleilaxuResearch.board.destruct()\r\n                                                                TleilaxuResearch.tleilaxSpiceBonusToken.destruct()\r\n                                                                for _, zone in ipairs(TleilaxuResearch.tleilaxuLevelZones) do\r\n                                                                    zone.destruct()\r\n                                                                end\r\n                                                                TleilaxuResearch.oneHelixZone.destruct()\r\n                                                                TleilaxuResearch.twoHelicesZone.destruct()\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch.getSpecimenCount(color)\r\n                                                                return #Park.getObjects(TleilaxuResearch.tanksParks[color])\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._researchSpaceToWorldPosition(positionInResearchSpace)\r\n                                                                local offset = Vector(\r\n                                                                    positionInResearchSpace.x * 1.225 - 0.07,\r\n                                                                    1.27,\r\n                                                                positionInResearchSpace.z * 0.7)\r\n                                                                local positionInWorldSpace = TleilaxuResearch.researchTokenOrigin + offset\r\n                                                                return positionInWorldSpace\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._worlPositionToResearchSpace(positionInWorldSpace)\r\n                                                                local offset = positionInWorldSpace - TleilaxuResearch.researchTokenOrigin\r\n                                                                local x = math.floor((offset.x + 0.07) / 1.225 + 0.5)\r\n                                                                local z = x == 0 and 0 or math.floor((offset.z) / 0.7)\r\n                                                                local positionInResearchSpace = Vector(x, 0, z)\r\n                                                                return positionInResearchSpace\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._getAveragePosition(positionField)\r\n                                                                local p = Vector(0, 0, 0)\r\n                                                                local count = 0\r\n                                                                for _, color in pairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                    if not Commander.isCommander(color) then\r\n                                                                        p = p + PlayBoard.getContent(color)[positionField]\r\n                                                                        count = count + 1\r\n                                                                    end\r\n                                                                end\r\n                                                                return p * (1 / count)\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch.getTokenCellPosition(color)\r\n                                                                local token = PlayBoard.getContent(color).researchToken\r\n                                                                local tokenCellPosition = TleilaxuResearch._worlPositionToResearchSpace(token.getPosition())\r\n                                                                return tokenCellPosition\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._generateResearchButtons()\r\n                                                                for cellPosition, _ in pairs(TleilaxuResearch.researchCellBenefits) do\r\n                                                                    local p = TleilaxuResearch._researchSpaceToWorldPosition(cellPosition)\r\n                                                                    local cellZone = spawnObject({\r\n                                                                        type = 'ScriptingTrigger',\r\n                                                                        position = p,\r\n                                                                    scale = Vector(1.2, 1, 1.35)})\r\n                                                                    Helper.markAsTransient(cellZone)\r\n                                                                    Helper.createAnchoredAreaButton(cellZone, 1.6, 0.1, I18N(\"progressOnResearchTrack\"), PlayBoard.withLeader(function (_, color, _)\r\n                                                                        local validPlayer = Helper.isElementOf(color, PlayBoard.getActivePlayBoardColors())\r\n                                                                        if validPlayer and not PlayBoard.isRival(color) then\r\n                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                            local token = PlayBoard.getContent(color).researchToken\r\n                                                                            local tokenCellPosition = TleilaxuResearch._worlPositionToResearchSpace(token.getPosition())\r\n                                                                            local jump = cellPosition - tokenCellPosition\r\n\r\n                                                                            if jump.x == 1 and math.abs(jump.z) <= 1 then\r\n                                                                                leader.research(color, jump)\r\n                                                                            else\r\n                                                                                Dialog.showConfirmDialog(color, I18N(\"forbiddenMove\"), function ()\r\n                                                                                    leader.research(color, jump)\r\n                                                                                end)\r\n                                                                            end\r\n                                                                        else\r\n                                                                            Dialog.broadcastToColor(I18N('noTouch'), color, \"Purple\")\r\n                                                                        end\r\n                                                                    end))\r\n                                                                end\r\n\r\n                                                                Helper.createAnchoredAreaButton(TleilaxuResearch.twoHelicesZone, 1.6, 0.1, I18N(\"progressAfterResearchTrack\"), PlayBoard.withLeader(function (_, color, _)\r\n                                                                    local validPlayer = Helper.isElementOf(color, PlayBoard.getActivePlayBoardColors())\r\n                                                                    if validPlayer and not PlayBoard.isRival(color) and TleilaxuResearch.hasReachedTwoHelices(color) then\r\n                                                                        local leader = PlayBoard.getLeader(color)\r\n                                                                        local specialJump = Vector(1, 0, 0)\r\n                                                                        leader.research(color, specialJump)\r\n                                                                    else\r\n                                                                        Dialog.broadcastToColor(I18N('noTouch'), color, \"Purple\")\r\n                                                                    end\r\n                                                                end))\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._findResearchCellBenefits(cellPosition)\r\n                                                                for existingCellPosition, cell in pairs(TleilaxuResearch.researchCellBenefits) do\r\n                                                                    if Vector.distance(existingCellPosition, cellPosition) < 0.1 then\r\n                                                                        return cell\r\n                                                                    end\r\n                                                                end\r\n                                                                return nil\r\n                                                            end\r\n\r\n                                                            ---@param color PlayerColor\r\n                                                            ---@param jump Vector\r\n                                                            function TleilaxuResearch.advanceResearch(color, jump)\r\n                                                                local continuation = Helper.createContinuation(\"TleilaxuResearch.advanceResearch\")\r\n                                                                local finalJump = jump\r\n                                                                if not finalJump and TleilaxuResearch.hasReachedTwoHelices(color) then\r\n                                                                    finalJump = Vector(1, 0, 0)\r\n                                                                end\r\n                                                                if finalJump then\r\n                                                                    local legit = finalJump.x == 1 and math.abs(finalJump.z) <= 1\r\n                                                                    TleilaxuResearch._advanceResearch(color, finalJump, legit)\r\n                                                                    continuation.run(finalJump)\r\n                                                                else\r\n                                                                    continuation.cancel()\r\n                                                                end\r\n                                                                return continuation\r\n                                                            end\r\n\r\n                                                            ---@param color PlayerColor\r\n                                                            ---@param jump Vector\r\n                                                            ---@param withBenefits boolean\r\n                                                            function TleilaxuResearch._advanceResearch(color, jump, withBenefits)\r\n                                                                local leader = PlayBoard.getLeader(color)\r\n                                                                local researchToken = PlayBoard.getContent(color).researchToken\r\n\r\n                                                                if TleilaxuResearch.hasReachedTwoHelices(color) and jump.x > 0 then\r\n                                                                    if withBenefits then\r\n                                                                        PlayBoard.getLeader(color).drawImperiumCards(color, 1)\r\n                                                                        Helper.emitEvent(\"researchProgress\", color)\r\n                                                                    end\r\n                                                                else\r\n                                                                    local cellPosition = TleilaxuResearch._worlPositionToResearchSpace(researchToken.getPosition())\r\n                                                                    local newCellPosition = cellPosition + jump\r\n\r\n                                                                    local p = TleilaxuResearch._researchSpaceToWorldPosition(newCellPosition)\r\n                                                                    researchToken.setPositionSmooth(p + Vector(0, 1, 0.25))\r\n\r\n                                                                    if withBenefits then\r\n                                                                        Helper.onceMotionless(researchToken).doAfter(function ()\r\n                                                                            local researchCellBenefits = TleilaxuResearch._findResearchCellBenefits(newCellPosition)\r\n                                                                            assert(researchCellBenefits, \"No cell benefits at cell \" .. tostring(newCellPosition))\r\n\r\n                                                                            for _, resource in ipairs({\"spice\", \"solari\"}) do\r\n                                                                                if researchCellBenefits[resource] then\r\n                                                                                    leader.resources(color, resource, researchCellBenefits[resource])\r\n                                                                                end\r\n                                                                            end\r\n\r\n                                                                            if researchCellBenefits.specimen then\r\n                                                                                leader.troops(color, \"supply\", \"tanks\", 1)\r\n                                                                            end\r\n\r\n                                                                            if researchCellBenefits.beetle then\r\n                                                                                leader.beetle(color, 1)\r\n                                                                            end\r\n\r\n                                                                            if researchCellBenefits.research then\r\n                                                                                Helper.onceTimeElapsed(0.5).doAfter(function ()\r\n                                                                                    leader.research(color, Vector(1, 0, -Helper.signum(newCellPosition.z)))\r\n                                                                                end)\r\n                                                                            end\r\n\r\n                                                                            if researchCellBenefits.solariToBeetle then\r\n                                                                                if PlayBoard.getResource(color, \"solari\"):get() >= 7 then\r\n                                                                                    Dialog.showConfirmDialog(color, I18N(\"confirmSolarisToBeetles\"), function ()\r\n                                                                                        leader.resources(color, \"solari\", -7)\r\n                                                                                        leader.beetle(color, 2)\r\n                                                                                    end)\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end)\r\n\r\n                                                                        Helper.emitEvent(\"researchProgress\", color)\r\n                                                                    end\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch.hasReachedOneHelix(color)\r\n                                                                return TleilaxuResearch.getBestResearch(color) >= 4\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch.hasReachedTwoHelices(color)\r\n                                                                return TleilaxuResearch.getBestResearch(color) == 8\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch.getBestResearch(color)\r\n                                                                local bestResearch = 0\r\n                                                                if Commander.isCommander(color) then\r\n                                                                    for _, otherColor in ipairs(Commander.getAllies(color)) do\r\n                                                                        bestResearch = math.max(bestResearch, TleilaxuResearch.getTokenCellPosition(otherColor).x)\r\n                                                                    end\r\n                                                                else\r\n                                                                    bestResearch = TleilaxuResearch.getTokenCellPosition(color).x\r\n                                                                end\r\n                                                                return bestResearch\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._tleilaxSpaceToWorldPosition(positionInTleilaxSpace)\r\n                                                                return TleilaxuResearch.tleilaxuLevelZones[positionInTleilaxSpace].getPosition()\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._worlPositionToTleilaxSpace(positionInWorldSpace)\r\n                                                                local nearestLevel = nil\r\n                                                                local nearestDistance = 0\r\n                                                                for level, zone in ipairs(TleilaxuResearch.tleilaxuLevelZones) do\r\n                                                                    local d = Vector.distance(positionInWorldSpace, zone.getPosition())\r\n                                                                    if not nearestLevel or d < nearestDistance then\r\n                                                                        nearestLevel = level\r\n                                                                        nearestDistance = d\r\n                                                                    end\r\n                                                                end\r\n                                                                return nearestLevel\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._generateTleilaxButtons()\r\n                                                                for level, _ in pairs(TleilaxuResearch.tleilaxLevelBenefits) do\r\n                                                                    local levelZone = TleilaxuResearch.tleilaxuLevelZones[level]\r\n                                                                    Helper.createAnchoredAreaButton(levelZone, 1.6, 0.1, I18N(\"progressOnTleilaxTrack\"), PlayBoard.withLeader(function (_, color, _)\r\n                                                                        local leader = PlayBoard.getLeader(color)\r\n                                                                        local token = PlayBoard.getContent(color).tleilaxToken\r\n                                                                        local tokenLevel = TleilaxuResearch._worlPositionToTleilaxSpace(token.getPosition())\r\n                                                                        -- Human players are required to advance step by step.\r\n                                                                        local jump = math.min(1, level - tokenLevel)\r\n\r\n                                                                        if jump < 0 then\r\n                                                                            Dialog.showConfirmDialog(color, I18N(\"forbiddenMove\"), function ()\r\n                                                                                TleilaxuResearch._advanceTleilax(color, jump, false).doAfter(function ()\r\n                                                                                    leader.beetle(color, jump)\r\n                                                                                end)\r\n                                                                            end)\r\n                                                                        else\r\n                                                                            leader.beetle(color, jump)\r\n                                                                        end\r\n                                                                    end))\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---@param color PlayerColor\r\n                                                            ---@param jump integer\r\n                                                            ---@return Continuation\r\n                                                            function TleilaxuResearch.advanceTleilax(color, jump)\r\n                                                                if jump >= 1 then\r\n                                                                    return Helper.repeatChainedAction(jump, function ()\r\n                                                                        return TleilaxuResearch._advanceTleilax(color, 1, true)\r\n                                                                    end)\r\n                                                                else\r\n                                                                    return TleilaxuResearch._advanceTleilax(color, jump, false)\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---@param color PlayerColor\r\n                                                            ---@param jump integer\r\n                                                            ---@param withBenefits boolean\r\n                                                            ---@return Continuation\r\n                                                            function TleilaxuResearch._advanceTleilax(color, jump, withBenefits)\r\n                                                                local continuation = Helper.createContinuation(\"TleilaxuResearch._advanceTleilax\")\r\n\r\n                                                                local leader = PlayBoard.getLeader(color)\r\n                                                                local tleilaxToken = PlayBoard.getContent(color).tleilaxToken\r\n                                                                local level = TleilaxuResearch._worlPositionToTleilaxSpace(tleilaxToken.getPosition())\r\n\r\n                                                                local finalJump = jump\r\n                                                                finalJump = math.min(8, level + finalJump) - level\r\n                                                                finalJump = math.max(0, level + finalJump) - level\r\n\r\n                                                                if finalJump ~= 0 then\r\n                                                                    local newLevel = level + finalJump\r\n\r\n                                                                    local p = TleilaxuResearch._tleilaxSpaceToWorldPosition(newLevel)\r\n                                                                    tleilaxToken.setPositionSmooth(p + Vector(0, 1, 0.25))\r\n\r\n                                                                    if withBenefits then\r\n                                                                        Helper.onceMotionless(tleilaxToken).doAfter(function ()\r\n                                                                            local researchLevelBenefits = TleilaxuResearch.tleilaxLevelBenefits[newLevel] or {}\r\n                                                                            assert(researchLevelBenefits, \"No level benefits at level \" .. tostring(newLevel))\r\n\r\n                                                                            if researchLevelBenefits.intrigue then\r\n                                                                                leader.drawIntrigues(color, 1)\r\n                                                                            end\r\n\r\n                                                                            if researchLevelBenefits.victoryToken then\r\n                                                                                leader.gainVictoryPoint(color, \"tleilax\", 1)\r\n                                                                            end\r\n\r\n                                                                            if researchLevelBenefits.spiceBonus then\r\n                                                                                local amount = TleilaxuResearch.spiceBonus:get()\r\n                                                                                leader.resources(color, \"spice\", amount)\r\n                                                                                TleilaxuResearch.spiceBonus:set(0)\r\n                                                                            end\r\n\r\n                                                                            Helper.emitEvent(\"tleilaxProgress\", color)\r\n\r\n                                                                            continuation.run(finalJump)\r\n                                                                        end)\r\n                                                                    else\r\n                                                                        continuation.run(finalJump)\r\n                                                                    end\r\n                                                                else\r\n                                                                    continuation.run(finalJump)\r\n                                                                end\r\n\r\n                                                                return continuation\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._createTanksButton()\r\n                                                                Helper.createAnchoredAreaButton(TleilaxuResearch.TanksZone, 1.6, 0.1, I18N(\"specimenEdit\"), PlayBoard.withLeader(function (_, color, altClick)\r\n                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                    if altClick then\r\n                                                                        leader.troops(color, \"tanks\", \"supply\", 1)\r\n                                                                    else\r\n                                                                        leader.troops(color, \"supply\", \"tanks\", 1)\r\n                                                                    end\r\n                                                                end))\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch._createTanksPark(color)\r\n                                                                local offsets = {\r\n                                                                    Red = Vector(-0.65, 0, 0.45),\r\n                                                                    Blue = Vector(-0.65, 0, -0.45),\r\n                                                                    Green = Vector(0.65, 0, 0.45),\r\n                                                                Yellow = Vector(0.65, 0, -0.45)}\r\n\r\n                                                                local origin = getObjectFromGUID(\"f5de09\").getPosition() + offsets[color]\r\n                                                                origin:setAt('y', 1.86) -- ground level\r\n                                                                local slots = {}\r\n                                                                for k = 1, 2 do\r\n                                                                    for j = 1, 2 do\r\n                                                                        for i = 1, 3 do\r\n                                                                            local x = (i - 2) * 0.4\r\n                                                                            local y = (k - 1) * 0.4\r\n                                                                            local z = (1.5 - j) * 0.4\r\n                                                                            local slot = Vector(x, y, z) + origin\r\n                                                                            table.insert(slots, slot)\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                local zone = Park.createTransientBoundingZone(0, Vector(0.25, 0.25, 0.25), slots)\r\n\r\n                                                                return Park.createPark(\r\n                                                                    color .. \"Tanks\",\r\n                                                                    slots,\r\n                                                                    Vector(0, 0, 0),\r\n                                                                    {zone},\r\n                                                                    {\"Troop\", color},\r\n                                                                    nil,\r\n                                                                    false,\r\n                                                                true)\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TleilaxuResearch.getTankPark(color)\r\n                                                                return TleilaxuResearch.tanksParks[color]\r\n                                                            end\r\n\r\n                                                            return TleilaxuResearch\r\n\r\n                                                        end)\r\n                                                        __bundle_register(\"utils.Park\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                            local Helper = require(\"utils.Helper\")\r\n\r\n                                                            -- Make it a class (and upgrade createPark into newPark)?\r\n                                                            local Park = {}\r\n\r\n                                                            ---\r\n                                                            function Park.createCommonPark(tags, slots, margins, rotation, rotationSnap, zones)\r\n                                                                assert(#slots > 0)\r\n                                                                local finalZones = (zones and #zones > 0) and zones or {Park.createTransientBoundingZone(0, margins, slots)}\r\n                                                                local name = Helper.stringConcat(tags) .. \"_\" .. finalZones[1].getGUID()\r\n\r\n                                                                local park = Park.createPark(\r\n                                                                    name,\r\n                                                                    slots,\r\n                                                                    rotation,\r\n                                                                    finalZones,\r\n                                                                    tags,\r\n                                                                    nil,\r\n                                                                    false,\r\n                                                                true)\r\n\r\n                                                                local p = slots[1]:copy()\r\n                                                                p:setAt(\"y\", 2)\r\n                                                                Helper.createTransientAnchor(name .. \"Park\", p).doAfter(function (anchor)\r\n                                                                    park.anchor = anchor\r\n                                                                    local snapPoints = {}\r\n                                                                    for _, slot in ipairs(slots) do\r\n                                                                        table.insert(snapPoints, Helper.createRelativeSnapPoint(anchor, slot, rotationSnap or false, tags))\r\n                                                                    end\r\n                                                                    anchor.setSnapPoints(snapPoints)\r\n                                                                end)\r\n\r\n                                                                return park\r\n                                                            end\r\n\r\n                                                            --[[\r\n    A park is basically an open field bag with a fixed size and a visual\r\n    arrangement of its content.\r\n\r\n    name: a unique name for the park.\r\n    slots: the slot positions.\r\n    rotation: the optional rotation to apply to parked objects.\r\n    zones: one or more zones to test if an object is in the park.\r\n    tags: restriction on the park content.\r\n    description: an optional restriction on the park content.\r\n    locked: should the park content be locked?\r\n]]\r\n                                                            ---\r\n                                                            function Park.createPark(name, slots, rotation, zones, tags, description, locked, smooth)\r\n                                                                assert(#slots > 0, \"No slot provided for new park.\")\r\n                                                                assert(zones and #zones > 0, \"No park zones provided.\")\r\n\r\n                                                                Helper.setSharedTable(name, {})\r\n\r\n                                                                -- Check all slots in the zone.\r\n\r\n                                                                return {\r\n                                                                    name = name,\r\n                                                                    slots = slots,\r\n                                                                    rotation = rotation,\r\n                                                                    zones = zones,\r\n                                                                    tags = tags,\r\n                                                                    tagUnion = false,\r\n                                                                    description = description,\r\n                                                                    locked = locked,\r\n                                                                    smooth = smooth\r\n                                                                }\r\n                                                            end\r\n\r\n                                                            --[[\r\n    Transfert objects from a park to another.\r\n\r\n    n: the number of objects to be transfered.\r\n    fromParkName: the source park.\r\n    toParkName: the destination park.\r\n]]\r\n                                                            ---\r\n                                                            function Park.transfert(n, fromPark, toPark)\r\n                                                                assert(n >= 0, \"Negative count.\")\r\n                                                                assert(fromPark, \"No source park.\")\r\n                                                                assert(toPark, \"No destination park.\")\r\n                                                                assert(fromPark ~= toPark, \"Source and destination parks are the same.\")\r\n\r\n                                                                local holders = {}\r\n                                                                for i, object in ipairs(Park.getObjects(fromPark)) do\r\n                                                                    if i <= n then\r\n                                                                        holders[i] = {object = object}\r\n                                                                    else\r\n                                                                        break\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                return Park._putHolders(holders, toPark)\r\n                                                            end\r\n\r\n                                                            --[[\r\n    Put an external object into a park, provided it remains a free slot.\r\n    object: the object to put in the park.\r\n    toParkName: the name of the destination park.\r\n]]\r\n                                                            ---\r\n                                                            function Park.putObject(object, toPark)\r\n                                                                assert(object, \"No object provided.\")\r\n                                                                return Park.putObjects({object}, toPark) > 0\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park.putObjects(objects, toPark)\r\n                                                                assert(objects, \"No objects provided.\")\r\n                                                                local holders = {}\r\n                                                                for _, object in ipairs(objects) do\r\n                                                                    table.insert(holders, {object = object})\r\n                                                                end\r\n                                                                return Park._putHolders(holders, toPark)\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park.putObjectFromBag(objectBag, toPark, count)\r\n                                                                assert(objectBag, \"No object bag provided.\")\r\n                                                                local holders = {}\r\n                                                                for _ = 1, (count or 1) do\r\n                                                                    table.insert(holders, {bag = objectBag})\r\n                                                                end\r\n                                                                return Park._putHolders(holders, toPark) == (count or 1)\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park._putHolders(holders, toPark)\r\n                                                                assert(holders, \"No holders provided.\")\r\n                                                                assert(toPark, \"No destination park.\")\r\n\r\n                                                                local now = Time.time\r\n                                                                local objectsInTransit = Park._getRefreshedObjectsInTransit(toPark, now)\r\n\r\n                                                                Park._instantTidyUp(toPark, objectsInTransit)\r\n\r\n                                                                local emptySlots = Park.findEmptySlots(toPark)\r\n\r\n                                                                local skipCount = #Helper.getKeys(objectsInTransit)\r\n                                                                local count = math.max(0, math.min(#emptySlots - skipCount, #holders))\r\n\r\n                                                                for i = 1, count do\r\n                                                                    local holder = holders[i]\r\n                                                                    if holder.object then\r\n                                                                        Park._moveObjectToPark(holder.object, emptySlots[i + skipCount], toPark)\r\n                                                                        objectsInTransit[holder.object] = now\r\n                                                                    elseif holder.bag then\r\n                                                                        Park.uid = (Park.uid or 0) + 1\r\n                                                                        local uid = Park.uid\r\n                                                                        objectsInTransit[uid] = now\r\n                                                                        Park._takeObjectToPark(holder.bag, emptySlots[i + skipCount], toPark).doAfter(function (object)\r\n                                                                            Park._mutateObjectInTransit(toPark, uid, object)\r\n                                                                        end)\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                Helper.setSharedTable(toPark.name, objectsInTransit)\r\n\r\n                                                                return count\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park._mutateObjectInTransit(toPark, before, after)\r\n                                                                local now = Time.time\r\n                                                                local objectsInTransit = Park._getRefreshedObjectsInTransit(toPark, now)\r\n                                                                local newObjectsInTransit = {}\r\n                                                                for object, transit in pairs(objectsInTransit or {}) do\r\n                                                                    if object == before then\r\n                                                                        if after then\r\n                                                                            newObjectsInTransit[after] = transit\r\n                                                                        end\r\n                                                                    else\r\n                                                                        newObjectsInTransit[object] = transit\r\n                                                                    end\r\n                                                                end\r\n                                                                Helper.setSharedTable(toPark.name, newObjectsInTransit)\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park._getRefreshedObjectsInTransit(toPark, now)\r\n                                                                local objectsInTransit = Helper.getSharedTable(toPark.name)\r\n\r\n                                                                local objectsAround = {}\r\n                                                                for _, object in ipairs(Park.getObjects(toPark)) do\r\n                                                                    for _, slot in ipairs(toPark.slots) do\r\n                                                                        if Vector.sqrDistance(slot, object.getPosition()) < 0.1 then\r\n                                                                            objectsAround[object] = true\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                local newObjectsInTransit = {}\r\n                                                                for object, transit in pairs(objectsInTransit or {}) do\r\n                                                                    if now - transit < 2.0 and not objectsAround[object] then\r\n                                                                        newObjectsInTransit[object] = transit\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                return newObjectsInTransit\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park.onceStabilized(toPark)\r\n                                                                local continuation = Helper.createContinuation(\"Park.onceStabilized\")\r\n                                                                Wait.condition(continuation.run, function ()\r\n                                                                    continuation.tick()\r\n                                                                    local objectsInTransit = Park._getRefreshedObjectsInTransit(toPark, Time.time)\r\n                                                                    return #Helper.getKeys(objectsInTransit) == 0\r\n                                                                end)\r\n                                                                return continuation\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park.getZones(park)\r\n                                                                return park.zones\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park.getPosition(park)\r\n                                                                return park.zones[1].getPosition()\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park.getObjects(park)\r\n                                                                assert(park)\r\n                                                                local objects = {}\r\n                                                                local objectsInTransit = Helper.getSharedTable(park.name)\r\n                                                                for _, zone in ipairs(park.zones) do\r\n                                                                    for _, object in ipairs(zone.getObjects()) do\r\n                                                                        if not Helper.tableContains(objectsInTransit, object) then\r\n                                                                            local isOneOfThem =\r\n                                                                            (park.tagUnion and Helper.hasAnyTag(object, park.tags) or Helper.hasAllTags(object, park.tags)) and\r\n                                                                            (not Helper.getID(park) or Helper.getID(park) == Helper.getID(object))\r\n                                                                            if isOneOfThem then\r\n                                                                                table.insert(objects, object)\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n                                                                return objects\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park.getAnyObject(park)\r\n                                                                local objects = Park.getObjects(park)\r\n                                                                return #objects > 0 and objects[1] or nil\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park.isEmpty(park)\r\n                                                                return #Park.getObjects(park) == 0\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park._instantTidyUp(park, newObjectsInTransit)\r\n\r\n                                                                local freeSlots = {}\r\n                                                                local freeSlotCount = 0\r\n                                                                for _, slot in ipairs(park.slots) do\r\n                                                                    freeSlots[slot] = {}\r\n                                                                    freeSlotCount = freeSlotCount + 1\r\n                                                                end\r\n\r\n                                                                local freeObjects = {}\r\n                                                                local freeObjectCount = 0\r\n                                                                for _, object in ipairs(Park.getObjects(park)) do\r\n                                                                    if object.resting then\r\n                                                                        freeObjects[object] = true\r\n                                                                        freeObjectCount = freeObjectCount + 1\r\n                                                                        newObjectsInTransit[object] = nil\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                while freeSlotCount > 0 and freeObjectCount > 0 do\r\n\r\n                                                                    for object, _ in pairs(freeObjects) do\r\n                                                                        local nearestSqrtDistance = 0\r\n                                                                        local nearestCandidates = nil\r\n                                                                        for slot, candidates in pairs(freeSlots) do\r\n                                                                            if candidates then\r\n                                                                                local sqrtDistance = Vector.sqrDistance(slot, object.getPosition())\r\n                                                                                if not nearestCandidates or sqrtDistance < nearestSqrtDistance then\r\n                                                                                    nearestSqrtDistance = sqrtDistance\r\n                                                                                    nearestCandidates = candidates\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n                                                                        assert(nearestCandidates)\r\n                                                                        nearestCandidates[object] = nearestSqrtDistance\r\n                                                                    end\r\n\r\n                                                                    for slot, candidates in pairs(freeSlots) do\r\n                                                                        local nearestSqrtDistance = 0\r\n                                                                        local nearestObject = nil\r\n                                                                        for object, sqrtDistance in pairs(candidates) do\r\n                                                                            if not nearestObject or sqrtDistance < nearestSqrtDistance then\r\n                                                                                nearestSqrtDistance = sqrtDistance\r\n                                                                                nearestObject = object\r\n                                                                            end\r\n                                                                        end\r\n                                                                        if nearestObject then\r\n                                                                            freeSlots[slot] = nil\r\n                                                                            freeSlotCount = freeSlotCount - 1\r\n                                                                            freeObjects[nearestObject] = nil\r\n                                                                            freeObjectCount = freeObjectCount - 1\r\n\r\n                                                                            nearestObject.setPosition(slot)\r\n                                                                            if park.rotation then\r\n                                                                                nearestObject.setRotation(park.rotation:copy())\r\n                                                                            end\r\n                                                                            nearestObject.setLock(park.locked)\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                --assert(#freeObjects == 0, \"Too many objects.\")\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park._moveObjectToPark(object, slot, park)\r\n                                                                object.setLock(park.locked)\r\n                                                                local offset = Vector(0, 0, 0)\r\n                                                                if not object.getLock() then\r\n                                                                    -- Nice drop are only for unlocked objects.\r\n                                                                    offset = Vector(0, 1, 0)\r\n                                                                end\r\n                                                                if park.smooth then\r\n                                                                    object.setPositionSmooth(slot + offset, false, false)\r\n                                                                else\r\n                                                                    object.setPosition(slot + offset)\r\n                                                                end\r\n                                                                if park.rotation then\r\n                                                                    object.setRotation(park.rotation:copy())\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park._takeObjectToPark(bag, slot, park)\r\n                                                                local continuation = Helper.createContinuation(\"Park._takeObjectToPark/\" .. park.name)\r\n                                                                local takeParameters = {}\r\n                                                                local offset = Vector(0, 0, 0)\r\n                                                                if not park.locked then\r\n                                                                    -- Nice drop are only for unlocked objects.\r\n                                                                    offset = Vector(0, 1, 0)\r\n                                                                end\r\n                                                                takeParameters.position = slot + offset\r\n                                                                if park.rotation then\r\n                                                                    takeParameters.rotation = park.rotation\r\n                                                                end\r\n                                                                takeParameters.callback_function = function (object)\r\n                                                                    object.locked = park.locked\r\n                                                                    continuation.run(object)\r\n                                                                end\r\n                                                                bag.takeObject(takeParameters)\r\n                                                                return continuation\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park.findEmptySlots(park)\r\n                                                                local freeSlots = Park.deepCopy(park.slots)\r\n\r\n                                                                for _, object in ipairs(Park.getObjects(park)) do\r\n                                                                    for i, slot in ipairs(freeSlots) do\r\n                                                                        if Vector.sqrDistance(slot, object.getPosition()) < 0.1 then\r\n                                                                            table.remove(freeSlots, i)\r\n                                                                            break\r\n                                                                        end\r\n                                                                    end\r\n                                                                    if #freeSlots == 0 then\r\n                                                                        break\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                return freeSlots\r\n                                                            end\r\n\r\n                                                            --- Unify with Helper.deepCopy which doesn't use copy?\r\n                                                            function Park.deepCopy(c)\r\n                                                                local copy = {}\r\n                                                                for i, e in ipairs(c) do\r\n                                                                    copy[i] = e:copy()\r\n                                                                end\r\n                                                                return copy\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Park.createTransientBoundingZone(rotationAroundY, margins, points)\r\n                                                                assert(#points > 0)\r\n\r\n                                                                local barycenter = nil\r\n                                                                for _, slot in ipairs(points) do\r\n                                                                    assert(slot)\r\n                                                                    if barycenter then\r\n                                                                        barycenter = barycenter + slot\r\n                                                                    else\r\n                                                                        barycenter = slot:copy()\r\n                                                                    end\r\n                                                                end\r\n                                                                barycenter = barycenter * (1.0 / #points)\r\n\r\n                                                                local minBounds = nil\r\n                                                                local maxBounds = nil\r\n                                                                for i, slot in ipairs(points) do\r\n                                                                    local transformedSlot = (slot - barycenter):rotateOver('y', -rotationAroundY)\r\n                                                                    if i > 1 then\r\n                                                                        minBounds.x = math.min(minBounds.x, transformedSlot.x)\r\n                                                                        minBounds.y = math.min(minBounds.y, transformedSlot.y)\r\n                                                                        minBounds.z = math.min(minBounds.z, transformedSlot.z)\r\n                                                                        maxBounds.x = math.max(maxBounds.x, transformedSlot.x)\r\n                                                                        maxBounds.y = math.max(maxBounds.y, transformedSlot.y)\r\n                                                                        maxBounds.z = math.max(maxBounds.z, transformedSlot.z)\r\n                                                                    else\r\n                                                                        minBounds = transformedSlot:copy()\r\n                                                                        maxBounds = transformedSlot:copy()\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                local sx = 2 * math.max(math.abs(minBounds.x), math.abs(maxBounds.x))\r\n                                                                local sy = 2 * math.max(math.abs(minBounds.y), math.abs(maxBounds.y))\r\n                                                                local sz = 2 * math.max(math.abs(minBounds.z), math.abs(maxBounds.z))\r\n\r\n                                                                -- FIXME Created zones are not usable immediately.\r\n                                                                local zone = spawnObject({\r\n                                                                    type = 'ScriptingTrigger',\r\n                                                                    position = barycenter,\r\n                                                                    rotation = Vector(0, rotationAroundY, 0),\r\n                                                                    scale = {\r\n                                                                        math.max(0.1, sx + margins.x),\r\n                                                                        math.max(0.1, sy + margins.y),\r\n                                                                    math.max(0.1, sz + margins.z)}})\r\n\r\n                                                                    Helper.markAsTransient(zone)\r\n\r\n                                                                    return zone\r\n                                                                end\r\n\r\n                                                                return Park\r\n\r\n                                                            end)\r\n                                                            __bundle_register(\"TechCard\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                local Module = require(\"utils.Module\")\r\n                                                                local Helper = require(\"utils.Helper\")\r\n\r\n                                                                -- Exceptional Immediate require for the sake of aliasing.\r\n                                                                local CardEffect = require(\"CardEffect\")\r\n\r\n                                                                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                local Types = Module.lazyRequire(\"Types\")\r\n\r\n                                                                -- Function aliasing for a more readable code.\r\n                                                                local persuasion = CardEffect.persuasion\r\n                                                                local sword = CardEffect.sword\r\n                                                                local spice = CardEffect.spice\r\n                                                                local water = CardEffect.water\r\n                                                                local solari = CardEffect.solari\r\n                                                                local deploy = CardEffect.deploy\r\n                                                                local troop = CardEffect.troop\r\n                                                                local dreadnought = CardEffect.dreadnought\r\n                                                                local negotiator = CardEffect.negotiator\r\n                                                                local specimen = CardEffect.specimen\r\n                                                                local intrigue = CardEffect.intrigue\r\n                                                                local trash = CardEffect.trash\r\n                                                                local research = CardEffect.research\r\n                                                                local beetle = CardEffect.beetle\r\n                                                                local influence = CardEffect.influence\r\n                                                                local vp = CardEffect.vp\r\n                                                                local draw = CardEffect.draw\r\n                                                                local shipment = CardEffect.shipment\r\n                                                                local control = CardEffect.control\r\n                                                                local spy = CardEffect.spy\r\n                                                                local contract = CardEffect.contract\r\n                                                                local voice = CardEffect.voice\r\n                                                                local perDreadnoughtInConflict = CardEffect.perDreadnoughtInConflict\r\n                                                                local perSwordCard = CardEffect.perSwordCard\r\n                                                                local perFremen = CardEffect.perFremen\r\n                                                                local perEmperor = CardEffect.perEmperor\r\n                                                                local perFulfilledContract = CardEffect.perFulfilledContract\r\n                                                                local choice = CardEffect.choice\r\n                                                                local optional = CardEffect.optional\r\n                                                                local seat = CardEffect.seat\r\n                                                                local fremenBond = CardEffect.fremenBond\r\n                                                                -- bloodlines sardaukar commander in conflict\r\n                                                                local sardaukarCommanderInConflict = CardEffect.sardaukarCommanderInConflict\r\n                                                                -- bloodlines imperial throneship reveal\r\n                                                                local imperialThroneship = CardEffect.imperialThroneship\r\n                                                                local agentInEmperorSpace = CardEffect.agentInEmperorSpace\r\n                                                                local emperorAlliance = CardEffect.emperorAlliance\r\n                                                                local spacingGuildAlliance = CardEffect.spacingGuildAlliance\r\n                                                                local beneGesseritAlliance = CardEffect.beneGesseritAlliance\r\n                                                                local fremenAlliance = CardEffect.fremenAlliance\r\n                                                                local fremenFriendship = CardEffect.fremenFriendship\r\n                                                                local anyAlliance = CardEffect.anyAlliance\r\n                                                                local oneHelix = CardEffect.oneHelix\r\n                                                                local twoHelices = CardEffect.twoHelices\r\n                                                                local winner = CardEffect.winner\r\n                                                                local twoSpies = CardEffect.twoSpies\r\n                                                                local spyMakerSpace = CardEffect.spyMakerSpace\r\n                                                                local swordmaster = CardEffect.swordmaster\r\n                                                                local multiply = CardEffect.multiply\r\n\r\n                                                                local TechCard = {\r\n                                                                    -- bloodlines disable ix techs\r\n                                                                    -- windtraps = {cost = 2, hagal = true, acquireBonus = {water(1)}},\r\n                                                                    -- detonationDevices = {cost = 3, hagal = true},\r\n                                                                    -- memocorders = {cost = 2, hagal = true, acquireBonus = {influence(1)}},\r\n                                                                    -- flagship = {cost = 8, hagal = true, acquireBonus = {vp(1)}},\r\n                                                                    -- spaceport = {cost = 5, hagal = false, acquireBonus = {draw(2)}},\r\n                                                                    -- artillery = {cost = 1, hagal = false},\r\n                                                                    -- holoprojectors = {cost = 3, hagal = false},\r\n                                                                    -- restrictedOrdnance = {cost = 4, hagal = false, acquireBonus = {persuasion(seat(2))}},\r\n                                                                    -- shuttleFleet = {cost = 6, hagal = true, acquireBonus = {choice(2, {influence(1, \"emperor\"), influence(1, \"spacingGuild\"), influence(1, \"beneGesserit\"), influence(1, \"fremen\")})}},\r\n                                                                    -- spySatellites = {cost = 4, hagal = true},\r\n                                                                    -- disposalFacility = {cost = 3, hagal = false, acquireBonus = {trash(1)}},\r\n                                                                    -- chaumurky = {cost = 4, hagal = true, acquireBonus = {intrigue(2)}},\r\n                                                                    -- sonicSnoopers = {cost = 2, hagal = true, acquireBonus = {intrigue(1)}},\r\n                                                                    -- trainingDrones = {cost = 3, hagal = true},\r\n                                                                    -- troopTransports = {cost = 2, hagal = true},\r\n                                                                    -- holtzmanEngine = {cost = 6, hagal = true},\r\n                                                                    -- minimicFilm = {cost = 2, hagal = false, acquireBonus = {persuasion(1)}},\r\n                                                                    -- invasionShips = {cost = 5, hagal = true, acquireBonus = {troop(4)}},\r\n                                                                    -- bloodlines techs\r\n                                                                    bl_TrainingDepot = {cost = 1, hagal = true},\r\n                                                                    bl_GeneLockedVault = {cost = 2, hagal = true, acquireBonus = {choice(1, draw(1), intrigue(1))}},\r\n                                                                    bl_Glowglobes = {cost = 2, hagal = true, acquireBonus = {influence(1)}},\r\n                                                                    bl_PlanetaryArray = {cost = 2, hagal = false, acquireBonus = {trash(1)}},\r\n                                                                    bl_ServoReceivers = {cost = 2, hagal = true},\r\n                                                                    bl_DeliveryBay = {cost = 3, hagal = true, acquireBonus = {draw(1)}},\r\n                                                                    bl_PlasteelBlades = {cost = 3, hagal = false, acquireBonus = {solari(4)}},\r\n                                                                    bl_SuspensorSuits = {cost = 3, hagal = false},\r\n                                                                    bl_RapidDropships = {cost = 4, hagal = true, acquireBonus = {troop(2)}},\r\n                                                                    bl_SelfDestroyingMessages = {cost = 4, hagal = true, acquireBonus = {intrigue(2)}},\r\n                                                                    bl_NavigationChamber = {cost = 5, hagal = true, acquireBonus = {influence(1)}},\r\n                                                                    bl_SardaukarHighCommand = {cost = 7, hagal = true, acquireBonus = {vp(1)}},\r\n                                                                    bl_ForbiddenWeapons = {cost = 2, hagal = false, acquireBonus = {'detonation(1)', troop(1)}},\r\n                                                                    bl_AdvancedDataAnalysis = {cost = 3, hagal = false},\r\n                                                                    bl_OrnithopterFleet = {cost = 4, hagal = true, acquireBonus = {troop(2)}},\r\n                                                                    bl_Panopticon = {cost = 5, hagal = true},\r\n                                                                    bl_SpyDrones = {cost = 5, hagal = true, acquireBonus = {spy(2)}},\r\n                                                                    bl_ChoamTransports = {cost = 6, hagal = false, acquireBonus = {contract(1)}},\r\n                                                                }\r\n\r\n                                                                function TechCard._resolveCard(card)\r\n                                                                    assert(card)\r\n                                                                    local cardName = Helper.getID(card)\r\n                                                                    local cardInfo = TechCard[cardName]\r\n                                                                    assert(cardInfo, \"Unknown card: \" .. tostring(cardName))\r\n                                                                    cardInfo.name = cardName\r\n                                                                    return cardInfo\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechCard.getDetails(techCard)\r\n                                                                    return TechCard._resolveCard(techCard)\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechCard.getCost(techCard)\r\n                                                                    return TechCard._resolveCard(techCard).cost\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechCard.isHagal(techCard)\r\n                                                                    return TechCard._resolveCard(techCard).hagal\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechCard.applyBuyEffect(color, techCard)\r\n                                                                    Types.assertIsPlayerColor(color)\r\n                                                                    assert(techCard)\r\n\r\n                                                                    local bonus = TechCard.getDetails(techCard).acquireBonus\r\n                                                                    if bonus then\r\n                                                                        local context = {\r\n                                                                            color = color,\r\n                                                                            player = PlayBoard.getLeader(color),\r\n                                                                            cardName = Helper.getID(techCard),\r\n                                                                            card = techCard,\r\n                                                                        }\r\n\r\n                                                                        for _, bonusItem in ipairs(bonus) do\r\n                                                                            CardEffect.evaluate(context, bonusItem)\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                return TechCard\r\n\r\n                                                            end)\r\n                                                            __bundle_register(\"CardEffect\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                local Module = require(\"utils.Module\")\r\n                                                                local Helper = require(\"utils.Helper\")\r\n                                                                local Set = require(\"utils.Set\")\r\n\r\n                                                                local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n                                                                local Combat = Module.lazyRequire(\"Combat\")\r\n                                                                local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                local TleilaxuResearch = Module.lazyRequire(\"TleilaxuResearch\")\r\n                                                                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                local ImperiumCard = Module.lazyRequire(\"ImperiumCard\")\r\n\r\n                                                                --[[\r\n    Save some helping functions such as \"perSwordCard\", the intent of this\r\n    module is to allow a compact, terse writing style for card effects.\r\n]]\r\n                                                                local CardEffect = {}\r\n\r\n                                                                ---@class Context\r\n                                                                ---@field player any\r\n                                                                ---@field color table\r\n                                                                ---@field card any\r\n                                                                ---@field cardName string\r\n                                                                ---@field playedCards any[]?\r\n                                                                ---@field revealedCards any[]?\r\n\r\n                                                                --[[\r\n-- Function aliasing for a more readable code.\r\nlocal persuasion = CardEffect.persuasion\r\nlocal sword = CardEffect.sword\r\nlocal spice = CardEffect.spice\r\nlocal water = CardEffect.water\r\nlocal solari = CardEffect.solari\r\nlocal deploy = CardEffect.deploy\r\nlocal troop = CardEffect.troop\r\nlocal dreadnought = CardEffect.dreadnought\r\nlocal negotiator = CardEffect.negotiator\r\nlocal specimen = CardEffect.specimen\r\nlocal intrigue = CardEffect.intrigue\r\nlocal trash = CardEffect.trash\r\nlocal research = CardEffect.research\r\nlocal beetle = CardEffect.beetle\r\nlocal influence = CardEffect.influence\r\nlocal vp = CardEffect.vp\r\nlocal draw = CardEffect.draw\r\nlocal shipment = CardEffect.shipment\r\nlocal control = CardEffect.control\r\nlocal spy = CardEffect.spy\r\nlocal contract = CardEffect.contract\r\nlocal voice = CardEffect.voice\r\nlocal perDreadnoughtInConflict = CardEffect.perDreadnoughtInConflict\r\nlocal perSwordCard = CardEffect.perSwordCard\r\nlocal perFremen = CardEffect.perFremen\r\nlocal perEmperor = CardEffect.perEmperor\r\nlocal perFulfilledContract = CardEffect.perFulfilledContract\r\nlocal choice = CardEffect.choice\r\nlocal optional = CardEffect.optional\r\nlocal seat = CardEffect.seat\r\nlocal fremenBond = CardEffect.fremenBond\r\n-- bloodlines sardaukar commander in conflict\r\nlocal sardaukarCommanderInConflict = CardEffect.sardaukarCommanderInConflict\r\n-- bloodlines imperial throneship reveal\r\nlocal imperialThroneship = CardEffect.imperialThroneship\r\nlocal agentInEmperorSpace = CardEffect.agentInEmperorSpace\r\nlocal emperorAlliance = CardEffect.emperorAlliance\r\nlocal spacingGuildAlliance = CardEffect.spacingGuildAlliance\r\nlocal beneGesseritAlliance = CardEffect.beneGesseritAlliance\r\nlocal fremenAlliance = CardEffect.fremenAlliance\r\nlocal fremenFriendship = CardEffect.fremenFriendship\r\nlocal anyAlliance = CardEffect.anyAlliance\r\nlocal oneHelix = CardEffect.oneHelix\r\nlocal twoHelices = CardEffect.twoHelices\r\nlocal winner = CardEffect.winner\r\nlocal twoSpies = CardEffect.twoSpies\r\nlocal spyMakerSpace = CardEffect.spyMakerSpace\r\nlocal swordmaster = CardEffect.swordmaster\r\nlocal multiply = CardEffect.multiply\r\n]]\r\n\r\n                                                                ---@param context Context\r\n                                                                ---@param expression any\r\n                                                                ---@return boolean\r\n                                                                function CardEffect.evaluate(context, expression)\r\n                                                                    if type(expression) == 'function' then\r\n                                                                        return expression(context)\r\n                                                                    else\r\n                                                                        return expression\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                function CardEffect._dispatch(selector, expression)\r\n                                                                    return function (context)\r\n                                                                        local color = context.color\r\n                                                                        local value = CardEffect.evaluate(context, expression)\r\n                                                                        local leader = context.player\r\n                                                                        local call = function (method, ...)\r\n                                                                            if leader[method] then\r\n                                                                                return leader[method](...)\r\n                                                                            else\r\n                                                                                return false\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        if selector == \"deploy\" then\r\n                                                                            return call(\"troops\", color, \"supply\", \"combat\", value)\r\n                                                                        elseif selector == \"troop\" then\r\n                                                                            return call(\"troops\", color, \"supply\", \"garrison\", value)\r\n                                                                        elseif selector == \"negotiator\" then\r\n                                                                            return call(\"troops\", color, \"supply\", \"negotiation\", value)\r\n                                                                        elseif selector == \"specimen\" then\r\n                                                                            return call(\"troops\", color, \"supply\", \"tanks\", value)\r\n                                                                        elseif selector == \"dreadnought\" then\r\n                                                                            return call(\"dreadnought\", color, \"supply\", \"garrison\", value)\r\n                                                                        elseif Helper.isElementOf(selector, {\"spice\", \"water\", \"solari\"}) then\r\n                                                                            return call(\"resources\", color, selector, value)\r\n                                                                        elseif Helper.isElementOf(selector, {\"persuasion\", \"strength\"}) then\r\n                                                                            return call(\"resources\", color, selector, value)\r\n                                                                        elseif selector == \"intrigue\" then\r\n                                                                            return call(\"drawIntrigues\", color, value)\r\n                                                                        elseif selector == \"trash\" then\r\n                                                                            return false\r\n                                                                        elseif Helper.isElementOf(selector, {\"emperor\", \"spacingGuild\", \"beneGesserit\", \"fremen\", \"?\"}) then\r\n                                                                            local faction = selector\r\n                                                                            if selector == \"?\" then\r\n                                                                                faction = nil\r\n                                                                            end\r\n                                                                            return call(\"influence\", color, faction, value)\r\n                                                                        elseif selector == \"vp\" then\r\n                                                                            call(\"gainVictoryPoint\", color, context.cardName, value)\r\n                                                                            return true\r\n                                                                        elseif selector == \"control\" then\r\n                                                                            return call(\"control\", color, expression)\r\n                                                                        elseif selector == \"draw\" then\r\n                                                                            return call(\"drawImperiumCards\", color, value)\r\n                                                                        elseif selector == \"shipment\" then\r\n                                                                            return call(\"shipments\", color, value)\r\n                                                                        elseif selector == \"research\" then\r\n                                                                            --return call(\"research\", color, value)\r\n                                                                            return false\r\n                                                                        elseif selector == \"beetle\" then\r\n                                                                            return call(\"beetle\", color, value)\r\n                                                                        elseif selector == \"spy\" then\r\n                                                                            assert(type(value) == \"number\")\r\n                                                                            if value >= 0 then\r\n                                                                                for _ = 1, value do\r\n                                                                                    call(\"sendSpy\", color)\r\n                                                                                end\r\n                                                                                return true\r\n                                                                            else\r\n                                                                                local recallableSpies = MainBoard.findRecallableSpies(color)\r\n                                                                                if #recallableSpies >= -value then\r\n                                                                                    for _, otherObservationPostName in ipairs(recallableSpies) do\r\n                                                                                        MainBoard.recallSpy(color, otherObservationPostName)\r\n                                                                                    end\r\n                                                                                    return true\r\n                                                                                else\r\n                                                                                    return false\r\n                                                                                end\r\n                                                                            end\r\n                                                                        elseif selector == \"contract\" then\r\n                                                                            assert(not value or value == 1, tostring(value))\r\n                                                                            return call(\"pickContract\", color)\r\n                                                                        elseif selector == \"voice\" then\r\n                                                                            assert(not value, tostring(value))\r\n                                                                            return call(\"pickVoice\", color)\r\n                                                                        else\r\n                                                                            error(\"Unknown selector: \" .. tostring(selector))\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                -- Effectors\r\n\r\n                                                                function CardEffect.persuasion(expression)\r\n                                                                    return CardEffect._dispatch('persuasion', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.sword(expression)\r\n                                                                    return CardEffect._dispatch('strength', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.spice(expression)\r\n                                                                    return CardEffect._dispatch('spice', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.water(expression)\r\n                                                                    return CardEffect._dispatch('water', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.solari(expression)\r\n                                                                    return CardEffect._dispatch('solari', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.deploy(expression)\r\n                                                                    return CardEffect._dispatch('deploy', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.troop(expression)\r\n                                                                    return CardEffect._dispatch('troop', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.dreadnought(expression)\r\n                                                                    return CardEffect._dispatch('dreadnought', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.negotiator(expression)\r\n                                                                    return CardEffect._dispatch('negotiator', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.specimen(expression)\r\n                                                                    return CardEffect._dispatch('specimen', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.intrigue(expression)\r\n                                                                    return CardEffect._dispatch('intrigue', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.trash(expression)\r\n                                                                    return CardEffect._dispatch('trash', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.research(expression)\r\n                                                                    return CardEffect._dispatch('research', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.beetle(expression)\r\n                                                                    return CardEffect._dispatch('beetle', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.influence(expression, faction)\r\n                                                                    return CardEffect._dispatch(faction or \"?\", expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.vp(expression)\r\n                                                                    return CardEffect._dispatch('vp', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.draw(expression)\r\n                                                                    return CardEffect._dispatch('draw', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.shipment(expression)\r\n                                                                    return CardEffect._dispatch('shipment', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.control(expression)\r\n                                                                    return CardEffect._dispatch('control', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.spy(expression)\r\n                                                                    return CardEffect._dispatch('spy', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.contract(expression)\r\n                                                                    return CardEffect._dispatch('contract', expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.voice(expression)\r\n                                                                    return CardEffect._dispatch('voice', expression)\r\n                                                                end\r\n\r\n                                                                -- Functors\r\n                                                                function CardEffect.perDreadnoughtInConflict(expression)\r\n                                                                    return function (context)\r\n                                                                        return CardEffect.evaluate(context, expression) * Combat.getNumberOfDreadnoughtsInConflict(context.color)\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                function CardEffect.perSwordCard(expression, cardExcluded)\r\n                                                                    return function (context)\r\n                                                                        if context.fake then\r\n                                                                            return 0\r\n                                                                        end\r\n                                                                        local allCards = Set.newFromList(Helper.concatTables(context.playedCards, context.revealedCards))\r\n                                                                        local count = 0\r\n                                                                        for _, card in ipairs(context.revealedCards) do\r\n                                                                            if card.reveal and (not cardExcluded or card ~= context.card) then\r\n                                                                                -- Special case here of a recursive call.\r\n                                                                                local fakePlayedCards = (allCards - Set.newFromItems(card)):toList()\r\n                                                                                local output = ImperiumCard.evaluateReveal2(context.color, fakePlayedCards, {card}, false)\r\n                                                                                if output.strength and output.strength > 0 then\r\n                                                                                    count = count + 1\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n                                                                        return CardEffect.evaluate(context, expression) * count\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                function CardEffect.perFremen(expression)\r\n                                                                    return function (context)\r\n                                                                        local count = 0\r\n                                                                        for _, card in ipairs(Helper.concatTables(context.playedCards, context.revealedCards)) do\r\n                                                                            if card.factions and Helper.isElementOf(\"fremen\", card.factions) then\r\n                                                                                count = count + 1\r\n                                                                            end\r\n                                                                        end\r\n                                                                        return CardEffect.evaluate(context, expression) * count\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                function CardEffect.perEmperor(expression)\r\n                                                                    return function (context)\r\n                                                                        local count = 0\r\n                                                                        for _, card in ipairs(Helper.concatTables(context.revealedCards)) do\r\n                                                                            if card.factions and Helper.isElementOf(\"emperor\", card.factions) then\r\n                                                                                count = count + 1\r\n                                                                            end\r\n                                                                        end\r\n                                                                        return CardEffect.evaluate(context, expression) * count\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                function CardEffect.perFulfilledContract(expression)\r\n                                                                    return function (context)\r\n                                                                        local count = PlayBoard.getCompletedContractCount(context.color)\r\n                                                                        return CardEffect.evaluate(context, expression) * count\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                -- Special functors\r\n\r\n                                                                function CardEffect.choice(n, options)\r\n                                                                    return function (context)\r\n                                                                        PlayBoard.getLeader(context.color).choose(context.color, context.cardName)\r\n                                                                        return true\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                function CardEffect.optional(options)\r\n                                                                    return function (context)\r\n                                                                        if PlayBoard.getLeader(context.color).decide(context.color, context.cardName) then\r\n                                                                            for _, option in ipairs(options) do\r\n                                                                                if not option(context) then\r\n                                                                                    return false\r\n                                                                                end\r\n                                                                            end\r\n                                                                            return true\r\n                                                                        else\r\n                                                                            return false\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                -- Filter\r\n\r\n                                                                function CardEffect._filter(expression, predicate)\r\n                                                                    return function (context)\r\n                                                                        return predicate(context) and CardEffect.evaluate(context, expression) or 0\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                function CardEffect.seat(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        return PlayBoard.hasHighCouncilSeat(context.color)\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                function CardEffect.fremenBond(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        for _, card in ipairs(Helper.concatTables(context.playedCards, context.revealedCards)) do\r\n                                                                            if card ~= context.card and card.factions and Helper.isElementOf(\"fremen\", card.factions) then\r\n                                                                                return true\r\n                                                                            end\r\n                                                                        end\r\n                                                                        return false\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                -- bloodlines TEST reveal command\r\n                                                                function CardEffect.revealCommand(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        Helper.onceTimeElapsed(1).doAfter(function ()\r\n                                                                            for _, card in ipairs(context.revealedCards) do\r\n                                                                                Helper.dump(\"Color:\", context.color)\r\n                                                                                Helper.dump(\"Persuasion:\", PlayBoard.getResource(context.color, \"persuasion\"):get())\r\n                                                                                if PlayBoard.getResource(context.color, \"persuasion\"):get() >= 6 then\r\n                                                                                    Helper.dump(\"True\")\r\n                                                                                    return true\r\n                                                                                end\r\n                                                                            end\r\n                                                                            Helper.dump(\"False\")\r\n                                                                            return false\r\n                                                                        end)\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                -- bloodlines sardaukar commander in conflict\r\n                                                                function CardEffect.sardaukarCommanderInConflict(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        return Combat.hasSardaukarCommander(context.color)\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                -- bloodlines imperial throneship reveal\r\n                                                                function CardEffect.imperialThroneship(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        if Combat.getGarrisonCount(context.color) >= 4 then\r\n                                                                            return true\r\n                                                                        end\r\n                                                                        return false\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                function CardEffect.agentInEmperorSpace(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        for _, space in ipairs(MainBoard.getEmperorSpaces()) do\r\n                                                                            if MainBoard.hasAgentInSpace(space, context.color) then\r\n                                                                                return true\r\n                                                                            end\r\n                                                                        end\r\n                                                                        return false\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                function CardEffect._alliance(faction, expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        return InfluenceTrack.hasAlliance(context.color, faction)\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                function CardEffect.emperorAlliance(expression)\r\n                                                                    return CardEffect._alliance(\"emperor\", expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.spacingGuildAlliance(expression)\r\n                                                                    return CardEffect._alliance(\"spacingGuild\", expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.beneGesseritAlliance(expression)\r\n                                                                    return CardEffect._alliance(\"beneGesserit\", expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.fremenAlliance(expression)\r\n                                                                    return CardEffect._alliance(\"fremen\", expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect._friendShip(faction, expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        return InfluenceTrack.hasFriendship(context.color, faction)\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                function CardEffect.fremenFriendship(expression)\r\n                                                                    return CardEffect._friendShip(\"fremen\", expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.anyAlliance(expression)\r\n                                                                    return CardEffect.emperorAlliance(expression)\r\n                                                                    or CardEffect.spacingGuildAlliance(expression)\r\n                                                                    or CardEffect.beneGesseritAlliance(expression)\r\n                                                                    or CardEffect.fremenAlliance(expression)\r\n                                                                end\r\n\r\n                                                                function CardEffect.oneHelix(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        return TleilaxuResearch.hasReachedOneHelix(context.color)\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                function CardEffect.twoHelices(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        return TleilaxuResearch.hasReachedTwoHelices(context.color)\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                function CardEffect.winner(expression)\r\n                                                                    return function ()\r\n                                                                        error(\"TODO\")\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                function CardEffect.twoSpies(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        return MainBoard.getDeployedSpyCount(context.color) >= 2\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                function CardEffect.spyMakerSpace(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        return MainBoard.getDeployedSpyCount(context.color, true) > 0\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                function CardEffect.swordmaster(expression)\r\n                                                                    return CardEffect._filter(expression, function (context)\r\n                                                                        return PlayBoard.hasSwordmaster(context.color)\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                function CardEffect.multiply(...)\r\n                                                                    local expressions = {...}\r\n                                                                    return function (context)\r\n                                                                        local result = 1\r\n                                                                        for _, expression in ipairs(expressions) do\r\n                                                                            result = result * CardEffect.evaluate(context, expression)\r\n                                                                        end\r\n                                                                        return result\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                return CardEffect\r\n\r\n                                                            end)\r\n                                                            __bundle_register(\"utils.Set\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                local Helper = require(\"utils.Helper\")\r\n\r\n                                                                local Set = Helper.createClass()\r\n\r\n                                                                function Set.newFromItems(...)\r\n                                                                    local data = {\r\n                                                                    elements = {}}\r\n                                                                    for _, element in ipairs({...}) do\r\n                                                                        data.elements[element] = true\r\n                                                                    end\r\n                                                                    return Helper.createClassInstance(Set, data)\r\n                                                                end\r\n\r\n                                                                function Set.newFromList(elements)\r\n                                                                    local data = {\r\n                                                                    elements = {}}\r\n                                                                    for _, element in ipairs(elements) do\r\n                                                                        data.elements[element] = true\r\n                                                                    end\r\n                                                                    return Helper.createClassInstance(Set, data)\r\n                                                                end\r\n\r\n                                                                function Set.newFromSet(elements)\r\n                                                                    local data = {\r\n                                                                    elements = {}}\r\n                                                                    if elements then\r\n                                                                        for element, _ in pairs(elements) do\r\n                                                                            data.elements[element] = true\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return Helper.createClassInstance(Set, data)\r\n                                                                end\r\n\r\n                                                                function Set.new(set)\r\n                                                                    local data = {\r\n                                                                    elements = {}}\r\n                                                                    if set then\r\n                                                                        for element, _ in pairs(set.elements) do\r\n                                                                            data.elements[element] = true\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return Helper.createClassInstance(Set, data)\r\n                                                                end\r\n\r\n                                                                function Set:size()\r\n                                                                    return #self:toList()\r\n                                                                end\r\n\r\n                                                                function Set:union(set)\r\n                                                                    local newSet = Set.new(self)\r\n                                                                    for element, _ in pairs(set.elements) do\r\n                                                                        newSet:add(element)\r\n                                                                    end\r\n                                                                    return newSet\r\n                                                                end\r\n\r\n                                                                function Set:soustraction(set)\r\n                                                                    assert(set)\r\n                                                                    local newSet = Set.new()\r\n                                                                    for element, _ in pairs(self.elements) do\r\n                                                                        if not set.elements[element] then\r\n                                                                            newSet:add(element)\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return newSet\r\n                                                                end\r\n\r\n                                                                function Set:intersection(set)\r\n                                                                    assert(set)\r\n                                                                    local newSet = Set.new()\r\n                                                                    for element, _ in pairs(self.elements) do\r\n                                                                        if set.elements[element] then\r\n                                                                            newSet:add(element)\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return newSet\r\n                                                                end\r\n\r\n                                                                function Set:isSupersetOf(set)\r\n                                                                    assert(set)\r\n                                                                    for element, _ in pairs(set.elements) do\r\n                                                                        if not self.elements[element] then\r\n                                                                            return false\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return true\r\n                                                                end\r\n\r\n                                                                function Set:isSubsetOf(set)\r\n                                                                    assert(set)\r\n                                                                    for element, _ in pairs(self.elements) do\r\n                                                                        if not set.elements[element] then\r\n                                                                            return false\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return true\r\n                                                                end\r\n\r\n                                                                function Set:contains(element)\r\n                                                                    assert(element)\r\n                                                                    return self.elements[element]\r\n                                                                end\r\n\r\n                                                                function Set:add(element)\r\n                                                                    assert(element)\r\n                                                                    if not self.elements[element] then\r\n                                                                        self.elements[element] = true\r\n                                                                        return true\r\n                                                                    else\r\n                                                                        return false\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                function Set:remove(element)\r\n                                                                    assert(element)\r\n                                                                    if self.elements[element] then\r\n                                                                        self.elements[element] = nil\r\n                                                                        return true\r\n                                                                    else\r\n                                                                        return false\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                function Set:map(f)\r\n                                                                    local newSet = Set.new()\r\n                                                                    for element, _ in pairs(self.elements) do\r\n                                                                        local notAnInjection = newSet:add(f(element))\r\n                                                                        assert(notAnInjection)\r\n                                                                    end\r\n                                                                    return newSet\r\n                                                                end\r\n\r\n                                                                function Set:filter(p)\r\n                                                                    local newSet = Set.new()\r\n                                                                    for element, _ in pairs(self.elements) do\r\n                                                                        if p(element) then\r\n                                                                            local success = newSet:add(element)\r\n                                                                            assert(success)\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return newSet\r\n                                                                end\r\n\r\n                                                                function Set:toList()\r\n                                                                    local list = {}\r\n                                                                    for element, _ in pairs(self.elements) do\r\n                                                                        table.insert(list, element)\r\n                                                                    end\r\n                                                                    return list\r\n                                                                end\r\n\r\n                                                                function Set:toString()\r\n                                                                    local str = \"{\"\r\n                                                                    local first = true\r\n                                                                    for element, _ in pairs(self.elements) do\r\n                                                                        if first then\r\n                                                                            first = false\r\n                                                                        else\r\n                                                                            str = str .. \", \"\r\n                                                                        end\r\n                                                                        str = str .. tostring(element)\r\n                                                                    end\r\n                                                                    str = str .. \"}\"\r\n                                                                    return str\r\n                                                                end\r\n\r\n                                                                Set.__len = Set.size\r\n                                                                Set.__add = Set.union\r\n                                                                Set.__sub = Set.soustraction\r\n                                                                Set.__pow = Set.intersection\r\n                                                                Set.__ge = Set.isSupersetOf\r\n                                                                Set.__le = Set.isSubsetOf\r\n                                                                Set.__gt = function (a, b) return Set.isSupersetOf(a, b) and not Set.isSubsetOf(b, a) end\r\n                                                                Set.__lt = function (a, b) return Set.isSubsetOf(a, b) and not Set.isSupersetOf(b, a) end\r\n                                                                Set.__tostring = Set.toString\r\n\r\n                                                                return Set\r\n\r\n                                                            end)\r\n                                                            __bundle_register(\"TechMarket\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                local Module = require(\"utils.Module\")\r\n                                                                local Helper = require(\"utils.Helper\")\r\n                                                                local Park = require(\"utils.Park\")\r\n                                                                local AcquireCard = require(\"utils.AcquireCard\")\r\n                                                                local I18N = require(\"utils.I18N\")\r\n                                                                local Dialog = require(\"utils.Dialog\")\r\n\r\n                                                                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                local Deck = Module.lazyRequire(\"Deck\")\r\n                                                                local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                local Types = Module.lazyRequire(\"Types\")\r\n                                                                local Commander = Module.lazyRequire(\"Commander\")\r\n                                                                local TechCard = Module.lazyRequire(\"TechCard\")\r\n                                                                local Action = Module.lazyRequire(\"Action\")\r\n\r\n                                                                local TechMarket = {\r\n                                                                    -- bloodlines disabled\r\n                                                                    -- negotiationParks = {},\r\n                                                                    acquireTechOptions = {},\r\n                                                                }\r\n\r\n                                                                ---\r\n                                                                function TechMarket.onLoad(state)\r\n                                                                    Helper.append(TechMarket, Helper.resolveGUIDs(false, {\r\n                                                                        -- bloodlines disabled ix board\r\n                                                                        -- board = \"d75455\",\r\n\r\n                                                                        -- bloodlines tech board\r\n                                                                        board = \"c6985a\",\r\n\r\n                                                                        -- bloodlines disabled\r\n                                                                        -- negotiationZone = \"2253fa\",\r\n                                                                        techSlots = {\r\n                                                                            \"7e131d\",\r\n                                                                            \"5a22f7\",\r\n                                                                            \"9c81c1\"\r\n                                                                        },\r\n                                                                    }))\r\n\r\n                                                                    Helper.noPhysicsNorPlay(TechMarket.board)\r\n\r\n                                                                    -- if state.settings and state.settings.riseOfIx then\r\n                                                                    -- bloodlines disabled ix\r\n                                                                    if state.settings then\r\n                                                                        TechMarket.hagalSoloModeEnabled = state.TechMarket.hagalSoloModeEnabled\r\n                                                                        TechMarket._transientSetUp(state.settings)\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechMarket.onSave(state)\r\n                                                                    state.TechMarket = {\r\n                                                                        hagalSoloModeEnabled = TechMarket.hagalSoloModeEnabled\r\n                                                                    }\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechMarket.setUp(settings)\r\n                                                                    -- bloodlines disabled\r\n                                                                    -- if settings.riseOfIx then\r\n                                                                    TechMarket.hagalSoloModeEnabled = settings.numberOfPlayers == 1\r\n                                                                    Deck.generateTechDeck(TechMarket.techSlots).doAfter(function (decks)\r\n                                                                        for _, deck in ipairs(decks) do\r\n                                                                            -- bloodlines because of kota passive\r\n                                                                            deck.interactable = true\r\n                                                                        end\r\n\r\n                                                                        if TechMarket.hagalSoloModeEnabled then\r\n                                                                            Helper.onceTimeElapsed(1).doAfter(TechMarket.pruneStacksForSoloMode)\r\n                                                                        end\r\n\r\n                                                                        TechMarket._transientSetUp(settings)\r\n                                                                    end)\r\n                                                                    -- bloodlines disabled\r\n                                                                    -- else\r\n                                                                    --     TechMarket._tearDown()\r\n                                                                    -- end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechMarket._transientSetUp(settings)\r\n                                                                    -- bloodlines disabled\r\n                                                                    -- for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                    --     if not Commander.isCommander(color) then\r\n                                                                    --         TechMarket.negotiationParks[color] = TechMarket._createNegotiationPark(color)\r\n                                                                    --     end\r\n                                                                    -- end\r\n                                                                    -- TechMarket._createNegotiationButton()\r\n\r\n                                                                    TechMarket.acquireCards = {}\r\n                                                                    for i, zone in ipairs(TechMarket.techSlots) do\r\n                                                                        local acquireCard = AcquireCard.new(zone, \"Tech\", PlayBoard.withLeader(function (_, color)\r\n                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                            leader.acquireTech(color, i)\r\n                                                                        end))\r\n                                                                        -- bloodlines 0.2 too low for bloodlines board, changed to 0.22\r\n                                                                        acquireCard.groundHeight = acquireCard.groundHeight + 0.22\r\n                                                                        table.insert(TechMarket.acquireCards, acquireCard)\r\n                                                                    end\r\n\r\n                                                                    Helper.registerEventListener(\"agentSent\", function (color, spaceName)\r\n                                                                        TechMarket.acquireTechOptions = {}\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                -- bloodlines disabled\r\n                                                                -- function TechMarket._tearDown()\r\n                                                                --     TechMarket.board.destruct()\r\n                                                                --     TechMarket.board = nil\r\n                                                                --     TechMarket.negotiationZone.destruct()\r\n                                                                --     for _, techSlot in ipairs(TechMarket.techSlots) do\r\n                                                                --         techSlot.destruct()\r\n                                                                --     end\r\n                                                                -- end\r\n\r\n                                                                ---\r\n                                                                function TechMarket.getBoard()\r\n                                                                    return TechMarket.board\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechMarket.pruneStacksForSoloMode()\r\n                                                                    local highestHeightIndex\r\n                                                                    local highestHeight\r\n                                                                    for stackIndex = 1, 3 do\r\n                                                                        local techTileStack = TechMarket._getTechTileStack(stackIndex)\r\n                                                                        if techTileStack.topCard then\r\n                                                                            local height = Helper.getCardCount(techTileStack.otherCards)\r\n                                                                            if not highestHeightIndex or highestHeight < height then\r\n                                                                                highestHeightIndex = stackIndex\r\n                                                                                highestHeight = height\r\n                                                                            end\r\n                                                                            if TechCard.isHagal(techTileStack.topCard) then\r\n                                                                                TechMarket.frozen = false\r\n                                                                                return\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n                                                                    if highestHeightIndex then\r\n                                                                        TechMarket._doAcquireTech(highestHeightIndex).doAfter(function (card)\r\n                                                                            Helper.onceTimeElapsed(1).doAfter(TechMarket.pruneStacksForSoloMode)\r\n                                                                        end)\r\n                                                                    else\r\n                                                                        TechMarket.frozen = false\r\n                                                                        return\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                -- bloodlines disabled\r\n                                                                -- function TechMarket._createNegotiationButton()\r\n                                                                --     Helper.createAnchoredAreaButton(TechMarket.negotiationZone, 1.6, 0.1, I18N(\"negotiatorEdit\"), PlayBoard.withLeader(function (_, color, altClick)\r\n                                                                --         local leader = PlayBoard.getLeader(color)\r\n                                                                --         if altClick then\r\n                                                                --             leader.troops(color, \"negotiation\", \"supply\", 1)\r\n                                                                --         else\r\n                                                                --             leader.troops(color, \"supply\", \"negotiation\", 1)\r\n                                                                --         end\r\n                                                                --     end))\r\n                                                                -- end\r\n\r\n                                                                ---\r\n                                                                function TechMarket.acquireTech(stackIndex, color)\r\n                                                                    if not TechMarket.frozen then\r\n                                                                        TechMarket.frozen = true\r\n                                                                        TechMarket._doAcquireTech(stackIndex, color).doAfter(function (card)\r\n                                                                            if card and TechMarket.hagalSoloModeEnabled then\r\n                                                                                TechMarket.pruneStacksForSoloMode()\r\n                                                                            else\r\n                                                                                TechMarket.frozen = false\r\n                                                                            end\r\n                                                                            if not card then\r\n                                                                                Dialog.broadcastToColor(I18N('notAffordableOption'), color, \"Purple\")\r\n                                                                            end\r\n                                                                        end)\r\n                                                                    else\r\n                                                                        Helper.dump(\"Still frozen...\")\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechMarket._doAcquireTech(stackIndex, color)\r\n                                                                    local continuation = Helper.createContinuation(\"TechMarket._doAcquireTech\")\r\n                                                                    local acquireCard = TechMarket.acquireCards[stackIndex]\r\n\r\n                                                                    local techTileStack = TechMarket._getTechTileStack(stackIndex)\r\n                                                                    if techTileStack.topCard then\r\n\r\n                                                                        local innerContinuation = Helper.createContinuation(\"TechMarket._doAcquireTech#inner\")\r\n                                                                        innerContinuation.doAfter(function (success)\r\n                                                                            if success then\r\n                                                                                if color then\r\n                                                                                    PlayBoard.grantTechTile(color, techTileStack.topCard)\r\n                                                                                    TechCard.applyBuyEffect(color, techTileStack.topCard)\r\n                                                                                end\r\n                                                                                Helper.onceTimeElapsed(0.5).doAfter(function ()\r\n                                                                                    if techTileStack.otherCards then\r\n                                                                                        local above = acquireCard.zone.getPosition() + Vector(0, 1, 0)\r\n                                                                                        Helper.moveCardFromZone(acquireCard.zone, above, Vector(0, 180, 0), true).doAfter(function (card)\r\n                                                                                            assert(card)\r\n                                                                                            Helper.onceMotionless(card).doAfter(function ()\r\n                                                                                                continuation.run(techTileStack.topCard)\r\n                                                                                            end)\r\n                                                                                        end)\r\n                                                                                    else\r\n                                                                                        continuation.run(techTileStack.topCard)\r\n                                                                                    end\r\n                                                                                end)\r\n                                                                            else\r\n                                                                                continuation.run(nil)\r\n                                                                            end\r\n                                                                        end)\r\n\r\n                                                                        if color then\r\n                                                                            TechMarket._buyTech(stackIndex, color).doAfter(innerContinuation.run)\r\n                                                                        else\r\n                                                                            printToAll(I18N(\"pruneTechCard\", {card = I18N(Helper.getID(techTileStack.topCard))}), \"Pink\")\r\n                                                                            MainBoard.trash(techTileStack.topCard)\r\n                                                                            innerContinuation.run(true)\r\n                                                                        end\r\n                                                                    else\r\n                                                                        continuation.run(nil)\r\n                                                                    end\r\n\r\n                                                                    return continuation\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechMarket._buyTech(stackIndex, color)\r\n                                                                    local continuation = Helper.createContinuation(\"TechMarket._buyTech\")\r\n                                                                    local techTileStack = TechMarket._getTechTileStack(stackIndex)\r\n                                                                    if techTileStack.topCard then\r\n                                                                        local options = Helper.getKeys(TechMarket.acquireTechOptions)\r\n                                                                        if #options > 0 then\r\n                                                                            if #options > 1 then\r\n                                                                                Dialog.showOptionsAndCancelDialog(color, I18N(\"buyTechSelection\"), Helper.mapValues(options, I18N), continuation, function (index)\r\n                                                                                    if index > 0 then\r\n                                                                                        continuation.run(index and TechMarket._doBuyTech(techTileStack, options[index], color))\r\n                                                                                    else\r\n                                                                                        continuation.run(false)\r\n                                                                                    end\r\n                                                                                end)\r\n                                                                            else\r\n                                                                                continuation.run(TechMarket._doBuyTech(techTileStack, options[1], color))\r\n                                                                            end\r\n                                                                        elseif not PlayBoard.isRival(color) then\r\n                                                                            Dialog.showYesOrNoDialog(color, I18N(\"manuallyBuyTech\"), continuation, function (confirmed)\r\n                                                                                continuation.run(confirmed)\r\n                                                                            end)\r\n                                                                        else\r\n                                                                            continuation.run(false)\r\n                                                                        end\r\n                                                                    else\r\n                                                                        continuation.run(false)\r\n                                                                    end\r\n                                                                    return continuation\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function TechMarket._doBuyTech(techTileStack, option, color)\r\n                                                                    local techCost = TechCard.getCost(techTileStack.topCard)\r\n\r\n                                                                    local optionDetails = TechMarket.acquireTechOptions[option]\r\n                                                                    local discountAmount = optionDetails.amount\r\n                                                                    -- bloodlines disabled\r\n                                                                    -- local negotiation = TechMarket.getNegotiationPark(color)\r\n                                                                    -- local recalledNegociatorCount\r\n                                                                    local adjustedTechCost\r\n\r\n                                                                    if optionDetails.resourceType == \"spice\" then\r\n                                                                        -- bloodlines disabled\r\n                                                                        --     local negotiatorCount = #Park.getObjects(negotiation)\r\n\r\n                                                                        --     adjustedTechCost = math.max(0, techCost - discountAmount - negotiatorCount)\r\n                                                                        --     recalledNegociatorCount = math.max(0, techCost - adjustedTechCost - discountAmount)\r\n                                                                        -- else\r\n                                                                        adjustedTechCost = math.max(0, techCost - discountAmount)\r\n                                                                        -- bloodlines disabled\r\n                                                                        -- recalledNegociatorCount = 0\r\n                                                                    end\r\n\r\n                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                    if leader.resources(color, optionDetails.resourceType, -adjustedTechCost) then\r\n                                                                        -- bloodlines disabled\r\n                                                                        -- local supply = PlayBoard.getSupplyPark(color)\r\n                                                                        -- Park.transfert(recalledNegociatorCount, negotiation, supply)\r\n\r\n                                                                        TechMarket.acquireTechOptions[option] = nil\r\n\r\n                                                                        Action.log(I18N(\"buyTech\", {\r\n                                                                            name = I18N(Helper.getID(techTileStack.topCard)),\r\n                                                                            amount = adjustedTechCost,\r\n                                                                        resource = I18N.agree(adjustedTechCost, optionDetails.resourceType)}),\r\n                                                                    color)\r\n\r\n                                                                    return true\r\n                                                                else\r\n                                                                    return false\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function TechMarket.getTopCardDetails(stackIndex)\r\n                                                                local techTileStack = TechMarket._getTechTileStack(stackIndex)\r\n                                                                if techTileStack.topCard then\r\n                                                                    return TechCard.getDetails(techTileStack.topCard)\r\n                                                                end\r\n                                                                return nil\r\n                                                            end\r\n\r\n                                                            function TechMarket._getTechTileStack(stackIndex)\r\n                                                                Types.assertIsInteger(stackIndex)\r\n                                                                Types.assertIsInRange(1, 3, stackIndex)\r\n\r\n                                                                local techTileStack = {}\r\n\r\n                                                                local zone = TechMarket.techSlots[stackIndex]\r\n                                                                for _, object in ipairs(zone.getObjects()) do\r\n                                                                    if object.type == \"Card\" and not object.is_face_down then\r\n                                                                        techTileStack.topCard = object\r\n                                                                    elseif object.type == \"Deck\" or (object.type == \"Card\" and object.is_face_down) then\r\n                                                                        techTileStack.otherCards = object\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                return techTileStack\r\n                                                            end\r\n\r\n                                                            ---@param color PlayerColor\r\n                                                            ---@param source any\r\n                                                            ---@param resourceType ResourceName\r\n                                                            ---@param amount integer\r\n                                                            function TechMarket.registerAcquireTechOption(color, source, resourceType, amount)\r\n                                                                Types.assertIsPlayerColor(color)\r\n                                                                assert(color)\r\n                                                                Types.assertIsResourceName(resourceType)\r\n                                                                Types.assertIsInteger(amount)\r\n\r\n                                                                TechMarket.acquireTechOptions[source] = {\r\n                                                                    resourceType = resourceType,\r\n                                                                    amount = amount\r\n                                                                }\r\n                                                            end\r\n\r\n                                                            function TechMarket.getRivalSpiceDiscount()\r\n                                                                local options = Helper.getValues(TechMarket.acquireTechOptions)\r\n                                                                assert(#options == 1)\r\n                                                                local option = options[1]\r\n                                                                assert(option.resourceType == \"spice\")\r\n                                                                return option.amount\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            -- bloodlines disabled\r\n                                                            -- function TechMarket._createNegotiationPark(color)\r\n                                                            --     local offsets = {\r\n                                                            --         Red = Vector(-0.45, 0, 0.45),\r\n                                                            --         Blue = Vector(-0.45, 0, -0.45),\r\n                                                            --         Green = Vector(0.45, 0, 0.45),\r\n                                                            --         Yellow = Vector(0.45, 0, -0.45)\r\n                                                            --     }\r\n\r\n                                                            --     local origin = TechMarket.negotiationZone.getPosition() + offsets[color]\r\n                                                            --     origin:setAt('y', 1.86) -- ground level\r\n                                                            --     local slots = {}\r\n                                                            --     for k = 1, 2 do\r\n                                                            --         for j = 1, 2 do\r\n                                                            --             for i = 1, 2 do\r\n                                                            --                 local x = (i - 1.5) * 0.4\r\n                                                            --                 local y = (k - 1) * 0.4\r\n                                                            --                 local z = (1.5 - j) * 0.4\r\n                                                            --                 local slot = Vector(x, y, z) + origin\r\n                                                            --                 table.insert(slots, slot)\r\n                                                            --             end\r\n                                                            --         end\r\n                                                            --     end\r\n\r\n                                                            --     local zone = Park.createTransientBoundingZone(0, Vector(0.25, 0.25, 0.25), slots)\r\n\r\n                                                            --     return Park.createPark(\r\n                                                            --         color .. \"Negotiation\",\r\n                                                            --         slots,\r\n                                                            --         Vector(0, 0, 0),\r\n                                                            --         { zone },\r\n                                                            --         { \"Troop\", color },\r\n                                                            --         nil,\r\n                                                            --         false,\r\n                                                            --         true)\r\n                                                            -- end\r\n\r\n                                                            ---\r\n                                                            -- bloodlines disabled\r\n                                                            -- function TechMarket.getNegotiationPark(color)\r\n                                                            --     return TechMarket.negotiationParks[color]\r\n                                                            -- end\r\n\r\n                                                            ---\r\n                                                            -- bloodlines disabled\r\n                                                            -- function TechMarket.addNegotiator(color)\r\n                                                            --     local supply = PlayBoard.getSupplyPark()\r\n                                                            --     local negotiation = TechMarket.negotiationParks[color]\r\n                                                            --     return Park.transfert(1, supply, negotiation) > 0\r\n                                                            -- end\r\n\r\n                                                            ---\r\n                                                            -- bloodlines disabled\r\n                                                            -- function TechMarket.removeNegotiator(color)\r\n                                                            --     local supply = PlayBoard.getSupplyPark()\r\n                                                            --     local negotiation = TechMarket.negotiationParks[color]\r\n                                                            --     return Park.transfert(1, negotiation, supply) > 0\r\n                                                            -- end\r\n\r\n                                                            --- In TechMarket for convenience, but it could also be in MainBoard.\r\n                                                            function TechMarket.isInside(object)\r\n                                                                if TechMarket.board then\r\n                                                                    local position = object.getPosition()\r\n                                                                    local center = TechMarket.board.getPosition()\r\n                                                                    local offset = position - center\r\n                                                                    return math.abs(offset.x) < 3.5 and math.abs(offset.z) < 4\r\n                                                                else\r\n                                                                    return false\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            return TechMarket\r\n\r\n                                                        end)\r\n                                                        __bundle_register(\"Rival\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                            local Module = require(\"utils.Module\")\r\n                                                            local Helper = require(\"utils.Helper\")\r\n                                                            local I18N = require(\"utils.I18N\")\r\n\r\n                                                            local Action = Module.lazyRequire(\"Action\")\r\n                                                            local Hagal = Module.lazyRequire(\"Hagal\")\r\n                                                            local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                            local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                            local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n                                                            local ShippingTrack = Module.lazyRequire(\"ShippingTrack\")\r\n                                                            local TechMarket = Module.lazyRequire(\"TechMarket\")\r\n                                                            local Intrigue = Module.lazyRequire(\"Intrigue\")\r\n                                                            local HagalCard = Module.lazyRequire(\"HagalCard\")\r\n\r\n                                                            local Rival = Helper.createClass(Action)\r\n\r\n                                                            ---\r\n                                                            function Rival.newRival(name)\r\n                                                                local RivalClass = Rival[name]\r\n                                                                assert(RivalClass, \"Unknown rival leader: \" .. tostring(name))\r\n                                                                RivalClass.name = name\r\n                                                                return Helper.createClassInstance(RivalClass)\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival.triggerHagalReaction(color)\r\n                                                                local continuation = Helper.createContinuation(\"Rival.triggerHagalReaction\")\r\n\r\n                                                                local coroutineHolder = {}\r\n                                                                coroutineHolder.coroutine = Helper.registerGlobalCallback(function ()\r\n                                                                    assert(coroutineHolder.coroutine)\r\n                                                                    Helper.unregisterGlobalCallback(coroutineHolder.coroutine)\r\n\r\n                                                                    Helper.sleep(1)\r\n\r\n                                                                    local rival = PlayBoard.getLeader(color)\r\n\r\n                                                                    if rival.recallableSpies and #rival.recallableSpies == 2 then\r\n                                                                        for _, otherObservationPostName in ipairs(rival.recallableSpies) do\r\n                                                                            MainBoard.recallSpy(color, otherObservationPostName)\r\n                                                                        end\r\n                                                                        rival.recallableSpies = {}\r\n                                                                        -- Doesn't work well as a scheme.\r\n                                                                        --Action.setContext(\"schemeTriggered\", {})\r\n                                                                        Action.log(I18N(\"triggeringScheme\", {leader = PlayBoard.getLeaderName(color)}), color)\r\n                                                                        rival.scheme(color)\r\n                                                                        Helper.sleep(2)\r\n                                                                        --Action.unsetContext(\"schemeTriggered\")\r\n                                                                    end\r\n\r\n                                                                    local hasSwordmaster = PlayBoard.hasSwordmaster(color)\r\n\r\n                                                                    local allResources = {\r\n                                                                        intrigues = PlayBoard.getIntrigues(color),\r\n                                                                        solari = PlayBoard.getResource(color, \"solari\"),\r\n                                                                        spice = PlayBoard.getResource(color, \"spice\"),\r\n                                                                        water = PlayBoard.getResource(color, \"water\"),\r\n                                                                    }\r\n\r\n                                                                    local reduceGenericResource = function (name, amount)\r\n                                                                        local realAmount\r\n                                                                        if name == \"intrigues\" then\r\n                                                                            realAmount = math.min(amount, #allResources.intrigues)\r\n                                                                            for i = 1, realAmount do\r\n                                                                                -- Not smooth to avoid being recaptured by the hand zone.\r\n                                                                                Intrigue.discard(allResources.intrigues[i])\r\n                                                                            end\r\n                                                                        else\r\n                                                                            realAmount = math.min(amount, allResources[name]:get())\r\n                                                                            Action.resources(color, name, -realAmount)\r\n                                                                        end\r\n                                                                        return realAmount\r\n                                                                    end\r\n\r\n                                                                    local capital =\r\n                                                                    #allResources.intrigues +\r\n                                                                    allResources.solari:get() +\r\n                                                                    allResources.spice:get() +\r\n                                                                    allResources.water:get()\r\n\r\n                                                                    if not hasSwordmaster and capital >= rival.swordmasterCost then\r\n                                                                        local remainder = rival.swordmasterCost\r\n                                                                        for _, name in ipairs({\"solari\", \"spice\", \"intrigues\", \"water\"}) do\r\n                                                                            if remainder == 0 then\r\n                                                                                break\r\n                                                                            end\r\n                                                                            remainder = remainder - reduceGenericResource(name, remainder)\r\n                                                                        end\r\n                                                                        rival.recruitSwordmaster(color)\r\n                                                                        hasSwordmaster = true\r\n                                                                        Helper.sleep(1)\r\n                                                                    end\r\n\r\n                                                                    if hasSwordmaster then\r\n                                                                        Rival._buyVictoryPoints(color)\r\n                                                                    end\r\n\r\n                                                                    continuation.run()\r\n\r\n                                                                    return 1\r\n                                                                end)\r\n                                                                startLuaCoroutine(Global, coroutineHolder.coroutine)\r\n\r\n                                                                return continuation\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival._buyVictoryPoints(color)\r\n                                                                -- Do not use Rival.resources inside this function!\r\n\r\n                                                                local rival = PlayBoard.getLeader(color)\r\n\r\n                                                                if Helper.isElementOf(rival.name, {\"glossuRabban\", \"amberMetulli\"}) then\r\n                                                                    return\r\n                                                                end\r\n\r\n                                                                while true do\r\n                                                                    local intrigues = PlayBoard.getIntrigues(color)\r\n                                                                    if #intrigues >= 3 then\r\n                                                                        for i = 1, 3 do\r\n                                                                            -- Not smooth to avoid being recaptured by the hand zone.\r\n                                                                            Intrigue.discard(intrigues[i])\r\n                                                                        end\r\n                                                                        Rival.gainVictoryPoint(color, \"intrigue\", 1)\r\n                                                                        goto continue\r\n                                                                    end\r\n\r\n                                                                    if Hagal.riseOfIx then\r\n                                                                        local tech = PlayBoard.getTech(color, \"spySatellites\")\r\n                                                                        if tech and Action.resources(color, \"spice\", -3) then\r\n                                                                            MainBoard.trash(tech)\r\n                                                                            Rival.gainVictoryPoint(color, \"spySatellites\", 1)\r\n                                                                            goto continue\r\n                                                                        end\r\n                                                                    else\r\n                                                                        if Action.resources(color, \"spice\", -7) then\r\n                                                                            Rival.gainVictoryPoint(color, \"spice\", 1)\r\n                                                                            goto continue\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    if Action.resources(color, \"water\", -3) then\r\n                                                                        Rival.gainVictoryPoint(color, \"water\", 1)\r\n                                                                        goto continue\r\n                                                                    end\r\n\r\n                                                                    if Action.resources(color, \"solari\", -7) then\r\n                                                                        Rival.gainVictoryPoint(color, \"solari\", 1)\r\n                                                                        goto continue\r\n                                                                    end\r\n\r\n                                                                    break\r\n                                                                    ::continue::\r\n                                                                    Helper.sleep(1.5)\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival.prepare(color, settings)\r\n                                                                if Hagal.getRivalCount() == 2 then\r\n                                                                    Action.resources(color, \"water\", 1)\r\n                                                                    if settings.difficulty ~= \"novice\" then\r\n                                                                        Action.troops(color, \"supply\", \"garrison\", 3)\r\n                                                                    end\r\n                                                                else\r\n                                                                    Action.resources(color, \"water\", 1)\r\n                                                                    Action.troops(color, \"supply\", \"garrison\", 3)\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival:_removeBestFaction(color, factions)\r\n                                                                local function indexOf(faction)\r\n                                                                    for i, f in pairs(self.factionPriorities) do\r\n                                                                        if f == faction then\r\n                                                                            return i\r\n                                                                        end\r\n                                                                    end\r\n                                                                    assert(false)\r\n                                                                end\r\n                                                                table.sort(factions, function (f1, f2)\r\n                                                                    local i1 = InfluenceTrack.getInfluence(f1, color) * 10 + indexOf(f1)\r\n                                                                    local i2 = InfluenceTrack.getInfluence(f2, color) * 10 + indexOf(f2)\r\n                                                                    return i1 < i2\r\n                                                                end)\r\n                                                                local bestFaction = factions[1]\r\n                                                                table.remove(factions, 1)\r\n                                                                return bestFaction\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival.influence(color, indexOrfactionOrFactions, amount)\r\n                                                                local finalFaction\r\n                                                                local rival = PlayBoard.getLeader(color)\r\n                                                                if not indexOrfactionOrFactions or type(indexOrfactionOrFactions) == \"table\" then\r\n                                                                    local factions = indexOrfactionOrFactions\r\n                                                                    if not factions then\r\n                                                                        factions = {\"emperor\", \"spacingGuild\", \"beneGesserit\", \"fremen\"}\r\n                                                                    end\r\n                                                                    finalFaction = rival:_removeBestFaction(color, factions)\r\n                                                                elseif type(indexOrfactionOrFactions) == \"number\" then\r\n                                                                    local index = indexOrfactionOrFactions\r\n                                                                    finalFaction = rival.factionPriorities[index]\r\n                                                                else\r\n                                                                    finalFaction = indexOrfactionOrFactions\r\n                                                                end\r\n                                                                return Action.influence(color, finalFaction, amount)\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival.shipments(color, amount)\r\n                                                                Helper.repeatChainedAction(amount, function ()\r\n                                                                    local level = ShippingTrack.getFreighterLevel(color)\r\n                                                                    if level < 2 then\r\n                                                                        Rival.advanceFreighter(color, 1)\r\n                                                                    else\r\n                                                                        Rival.recallFreighter(color)\r\n                                                                        Rival.influence(color, nil, 1)\r\n                                                                        if PlayBoard.hasTech(color, \"troopTransports\") then\r\n                                                                            Action.troops(color, \"supply\", \"combat\", 3)\r\n                                                                        else\r\n                                                                            Action.troops(color, \"supply\", \"garrison\", 2)\r\n                                                                        end\r\n                                                                        Rival.resources(color, \"solari\", 5)\r\n                                                                        for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                            if otherColor ~= color then\r\n                                                                                local otherLeader = PlayBoard.getLeader(otherColor)\r\n                                                                                otherLeader.resources(otherColor, \"solari\", 1)\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n                                                                    -- FIXME\r\n                                                                    return Helper.onceTimeElapsed(0.5)\r\n                                                                end)\r\n                                                                return true\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival.acquireTech(color, stackIndex, discount)\r\n\r\n                                                                local finalStackIndex = stackIndex\r\n                                                                if not finalStackIndex then\r\n                                                                    local spiceBudget = PlayBoard.getResource(color, \"spice\"):get()\r\n\r\n                                                                    local bestTechIndex\r\n                                                                    local bestTech\r\n                                                                    for otherStackIndex = 1, 3 do\r\n                                                                        local tech = TechMarket.getTopCardDetails(otherStackIndex)\r\n                                                                        if tech.hagal and tech.cost <= spiceBudget + discount and (not bestTech or bestTech.cost < tech.cost) then\r\n                                                                            bestTechIndex = otherStackIndex\r\n                                                                            bestTech = tech\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    if bestTech then\r\n                                                                        Rival.resources(color, \"spice\", -bestTech.cost)\r\n                                                                        finalStackIndex = bestTechIndex\r\n                                                                    else\r\n                                                                        return false\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                local tech = TechMarket.getTopCardDetails(finalStackIndex)\r\n                                                                if Action.acquireTech(color, finalStackIndex, discount) then\r\n                                                                    if tech.name == \"trainingDrones\" then\r\n                                                                        if PlayBoard.useTech(color, \"trainingDrones\") then\r\n                                                                            Action.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return true\r\n                                                                else\r\n                                                                    return false\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival.pickContract(color, stackIndex)\r\n                                                                local rival = PlayBoard.getLeader(color)\r\n                                                                rival.resources(color, \"solari\", 2)\r\n                                                                return true\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival.choose(color, topic)\r\n                                                                if Helper.isElementOf(topic, {\"shuttleFleet\", \"machinations\", \"propaganda\"}) then\r\n                                                                    local factions = {\"emperor\", \"spacingGuild\", \"beneGesserit\", \"fremen\"}\r\n                                                                    Helper.repeatChainedAction(2, function ()\r\n                                                                        return Rival.influence(color, factions, 1)\r\n                                                                    end)\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Action.decide(color, topic)\r\n                                                                return true\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival.resources(color, nature, amount)\r\n                                                                local rival = PlayBoard.getLeader(color)\r\n                                                                local hasSwordmaster = PlayBoard.hasSwordmaster(color)\r\n\r\n                                                                if amount > 0 and hasSwordmaster and Helper.isElementOf(rival, {Rival.glossuRabban, Rival.amberMetulli}) then\r\n                                                                    return false\r\n                                                                else\r\n                                                                    return Action.resources(color, nature, amount)\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Rival.sendSpy(color, observationPostName)\r\n                                                                local rival = PlayBoard.getLeader(color)\r\n                                                                local finalObservationPostName = observationPostName\r\n                                                                if not finalObservationPostName then\r\n                                                                    for _, faction in ipairs(rival.factionPriorities) do\r\n                                                                        -- Observation posts in faction spaces have the same name as the faction.\r\n                                                                        if not MainBoard.observationPostIsOccupied(faction) then\r\n                                                                            finalObservationPostName = faction\r\n                                                                            break\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n                                                                if finalObservationPostName then\r\n                                                                    local recallableSpies = MainBoard.findRecallableSpies(color)\r\n                                                                    if Action.sendSpy(color, finalObservationPostName) then\r\n                                                                        rival.recallableSpies = recallableSpies\r\n                                                                        return true\r\n                                                                    end\r\n                                                                else\r\n                                                                    Helper.dump(\"No free observation post!\")\r\n                                                                end\r\n                                                                return false\r\n                                                            end\r\n\r\n                                                            Rival.vladimirHarkonnen = Helper.createClass(Rival, {\r\n\r\n                                                                swordmasterCost = 6,\r\n\r\n                                                                factionPriorities = {\r\n                                                                    \"spacingGuild\",\r\n                                                                    \"emperor\",\r\n                                                                    \"beneGesserit\",\r\n                                                                    \"fremen\",\r\n                                                                },\r\n\r\n                                                                signetRing = function (color)\r\n                                                                    Rival.drawIntrigues(color, 1)\r\n                                                                end,\r\n\r\n                                                                scheme = function (color)\r\n                                                                    Rival.resources(color, \"solari\", 2)\r\n                                                                    HagalCard.acquireTroops(color, 2)\r\n                                                                end,\r\n                                                            })\r\n\r\n                                                            Rival.glossuRabban = Helper.createClass(Rival, {\r\n\r\n                                                                swordmasterCost = 7,\r\n\r\n                                                                factionPriorities = {\r\n                                                                    \"emperor\",\r\n                                                                    \"spacingGuild\",\r\n                                                                    \"beneGesserit\",\r\n                                                                    \"fremen\",\r\n                                                                },\r\n\r\n                                                                signetRing = function (color)\r\n                                                                    HagalCard.acquireTroops(color, InfluenceTrack.hasAnyAlliance(color) and 2 or 1)\r\n                                                                end,\r\n\r\n                                                                scheme = function (color)\r\n                                                                    local factions = {}\r\n                                                                    for _, faction in ipairs({\"emperor\", \"spacingGuild\", \"beneGesserit\", \"fremen\"}) do\r\n                                                                        local cost = InfluenceTrack.getAllianceCost(color, faction)\r\n                                                                        if cost == 1 or cost == 2 then\r\n                                                                            table.insert(factions, faction)\r\n                                                                        end\r\n                                                                    end\r\n                                                                    Rival.influence(color, #factions > 0 and factions or nil, 2)\r\n                                                                end,\r\n\r\n                                                                gainVictoryPoint = function (color, name, count)\r\n                                                                    if Helper.endsWith(name, \"Alliance\") then\r\n                                                                        assert(count == 1)\r\n                                                                        return Action.gainVictoryPoint(color, name, count)\r\n                                                                    else\r\n                                                                        return false\r\n                                                                    end\r\n                                                                end,\r\n                                                            })\r\n\r\n                                                            Rival.stabanTuek = Helper.createClass(Rival, {\r\n\r\n                                                                swordmasterCost = 9,\r\n\r\n                                                                factionPriorities = {\r\n                                                                    \"spacingGuild\",\r\n                                                                    \"fremen\",\r\n                                                                    \"beneGesserit\",\r\n                                                                    \"emperor\",\r\n                                                                },\r\n\r\n                                                                signetRing = function (color)\r\n                                                                    Rival.resources(color, \"spice\", 1)\r\n                                                                end,\r\n\r\n                                                                scheme = function (color)\r\n                                                                    HagalCard.acquireTroops(color, 2)\r\n                                                                end,\r\n                                                            })\r\n\r\n                                                            Rival.amberMetulli = Helper.createClass(Rival, {\r\n\r\n                                                                swordmasterCost = 9,\r\n\r\n                                                                factionPriorities = {\r\n                                                                    \"fremen\",\r\n                                                                    \"emperor\",\r\n                                                                    \"spacingGuild\",\r\n                                                                    \"beneGesserit\",\r\n                                                                },\r\n\r\n                                                                signetRing = function (color)\r\n                                                                    HagalCard.acquireTroops(color, 1)\r\n                                                                end,\r\n\r\n                                                                scheme = function (color)\r\n                                                                    HagalCard.acquireTroops(color, 3)\r\n                                                                end,\r\n\r\n                                                                gainVictoryPoint = function (color, name, count)\r\n                                                                    if Helper.endsWith(name, \"Alliance\") then\r\n                                                                        assert(count == 1)\r\n                                                                        return Action.gainVictoryPoint(color, name, count)\r\n                                                                    else\r\n                                                                        return false\r\n                                                                    end\r\n                                                                end,\r\n                                                            })\r\n\r\n                                                            Rival.gurneyHalleck = Helper.createClass(Rival, {\r\n\r\n                                                                swordmasterCost = 8,\r\n\r\n                                                                factionPriorities = {\r\n                                                                    \"fremen\",\r\n                                                                    \"spacingGuild\",\r\n                                                                    \"emperor\",\r\n                                                                    \"beneGesserit\",\r\n                                                                },\r\n\r\n                                                                signetRing = function (color)\r\n                                                                    HagalCard.acquireTroops(color, 1)\r\n                                                                end,\r\n\r\n                                                                scheme = function (color)\r\n                                                                    local rival = PlayBoard.getLeader(color)\r\n                                                                    local bestFaction = nil\r\n                                                                    local bestRank = nil\r\n                                                                    for _, faction in ipairs(rival.factionPriorities) do\r\n                                                                        local rank = InfluenceTrack.getInfluence(faction, color)\r\n                                                                        if not bestRank or bestRank < rank then\r\n                                                                            bestFaction = faction\r\n                                                                            bestRank = rank\r\n                                                                        end\r\n                                                                    end\r\n                                                                    Rival.influence(color, bestFaction, 1)\r\n                                                                end,\r\n                                                            })\r\n\r\n                                                            Rival.margotFenring = Helper.createClass(Rival, {\r\n\r\n                                                                swordmasterCost = 8,\r\n\r\n                                                                factionPriorities = {\r\n                                                                    \"beneGesserit\",\r\n                                                                    \"emperor\",\r\n                                                                    \"fremen\",\r\n                                                                    \"spacingGuild\",\r\n                                                                },\r\n\r\n                                                                signetRing = function (color)\r\n                                                                    Rival.resources(color, \"solari\", 1)\r\n                                                                end,\r\n\r\n                                                                scheme = function (color)\r\n                                                                    Rival.influence(color, \"beneGesserit\", 1)\r\n                                                                end,\r\n                                                            })\r\n\r\n                                                            Rival.irulanCorrino = Helper.createClass(Rival, {\r\n\r\n                                                                swordmasterCost = 7,\r\n\r\n                                                                factionPriorities = {\r\n                                                                    \"emperor\",\r\n                                                                    \"beneGesserit\",\r\n                                                                    \"fremen\",\r\n                                                                    \"spacingGuild\",\r\n                                                                },\r\n\r\n                                                                signetRing = function (color)\r\n                                                                    Rival.sendSpy(color)\r\n                                                                end,\r\n\r\n                                                                scheme = function (color)\r\n                                                                    Rival.influence(color, nil, 1)\r\n                                                                    HagalCard.acquireTroops(color, 1)\r\n                                                                end,\r\n                                                            })\r\n\r\n                                                            Rival.jessica = Helper.createClass(Rival, {\r\n\r\n                                                                swordmasterCost = 6,\r\n\r\n                                                                factionPriorities = {\r\n                                                                    \"beneGesserit\",\r\n                                                                    \"fremen\",\r\n                                                                    \"spacingGuild\",\r\n                                                                    \"emperor\",\r\n                                                                },\r\n\r\n                                                                signetRing = function (color)\r\n                                                                    local factions = {}\r\n                                                                    for _, faction in ipairs({\"emperor\", \"spacingGuild\", \"beneGesserit\", \"fremen\"}) do\r\n                                                                        local cost = InfluenceTrack.getAllianceCost(color, faction)\r\n                                                                        if cost == 1 then\r\n                                                                            table.insert(factions, faction)\r\n                                                                        end\r\n                                                                    end\r\n                                                                    Rival.influence(color, #factions > 0 and factions or nil, 1)\r\n                                                                end,\r\n\r\n                                                                scheme = function (color)\r\n                                                                    Rival.resources(color, \"water\", 2)\r\n                                                                end,\r\n                                                            })\r\n\r\n                                                            Rival.feydRauthaHarkonnen = Helper.createClass(Rival, {\r\n\r\n                                                                swordmasterCost = 4,\r\n\r\n                                                                factionPriorities = {\r\n                                                                    \"emperor\",\r\n                                                                    \"beneGesserit\",\r\n                                                                    \"spacingGuild\",\r\n                                                                    \"fremen\",\r\n                                                                },\r\n\r\n                                                                signetRing = function (color)\r\n                                                                    HagalCard.acquireTroops(color, 2)\r\n                                                                end,\r\n\r\n                                                                scheme = function (color)\r\n                                                                    Rival.influence(color, nil, 1)\r\n                                                                end,\r\n                                                            })\r\n\r\n                                                            Rival.muadDib = Helper.createClass(Rival, {\r\n\r\n                                                                swordmasterCost = 4,\r\n\r\n                                                                factionPriorities = {\r\n                                                                    \"fremen\",\r\n                                                                    \"beneGesserit\",\r\n                                                                    \"spacingGuild\",\r\n                                                                    \"emperor\",\r\n                                                                },\r\n\r\n                                                                signetRing = function (color)\r\n                                                                    Rival.influence(color, \"fremen\", 1)\r\n                                                                end,\r\n\r\n                                                                scheme = function (color)\r\n                                                                    Rival.takeMakerHook(color)\r\n                                                                    MainBoard.blowUpShieldWall(color, true)\r\n                                                                    Rival.drawIntrigues(color, 1)\r\n                                                                end,\r\n                                                            })\r\n\r\n                                                            return Rival\r\n\r\n                                                        end)\r\n                                                        __bundle_register(\"Resource\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                            local Module = require(\"utils.Module\")\r\n                                                            local Helper = require(\"utils.Helper\")\r\n                                                            local I18N = require(\"utils.I18N\")\r\n                                                            local Dialog = require(\"utils.Dialog\")\r\n\r\n                                                            local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                            local Types = Module.lazyRequire(\"Types\")\r\n\r\n                                                            local Resource = Helper.createClass(nil, {\r\n                                                                MIN_VALUE = 0,\r\n                                                                MAX_VALUE = 99,\r\n                                                            resources = {}})\r\n\r\n                                                            ---\r\n                                                            function Resource.new(token, color, resourceName, value, location)\r\n                                                                assert(token)\r\n                                                                Types.assertIsResourceName(resourceName)\r\n                                                                Types.assertIsPositiveInteger(value)\r\n\r\n                                                                token.interactable = false\r\n\r\n                                                                local resource = Helper.createClassInstance(Resource, {\r\n                                                                    token = token,\r\n                                                                    color = color,\r\n                                                                    resourceName = resourceName,\r\n                                                                    value = value,\r\n                                                                    laggingValue = value,\r\n                                                                    location = location,\r\n                                                                })\r\n                                                                Resource.resources[token.getGUID()] = resource\r\n\r\n                                                                local fontColors = {\r\n                                                                    spice = {0.9, 0.9, 0.9, 100},\r\n                                                                    water = {0.2, 0.2, 0.5, 100},\r\n                                                                    solari = {0.2, 0.2, 0.2, 100},\r\n                                                                    persuasion = {0.9, 0.9, 0.9, 100},\r\n                                                                    strength = {0.9, 0.6, 0.3, 100},\r\n                                                                }\r\n\r\n                                                                local scales = {\r\n                                                                    spice = Vector(1.8, 1, 1.8) * Helper.toVector(token.getScale()),\r\n                                                                    water = Vector(1.8, 1, 1.8) * Helper.toVector(token.getScale()),\r\n                                                                    solari = Vector(1.8, 1, 1.8) * Helper.toVector(token.getScale()),\r\n                                                                    persuasion = Vector(0.9, 1, 0.9),\r\n                                                                    strength = Vector(0.9, 1, 0.9),\r\n                                                                }\r\n\r\n                                                                local offset = Vector(\r\n                                                                    0,\r\n                                                                    0.1 * token.getScale().y,\r\n                                                                resourceName == \"water\" and - 0.25 or - 0.0)\r\n\r\n                                                                Helper.createAbsoluteButtonWithRoundness(token, 1, {\r\n                                                                    label = tostring(resource.value),\r\n                                                                    click_function = Helper.registerGlobalCallback(function (_, otherColor, altClick)\r\n                                                                        if resource.color or resource.location then\r\n                                                                            resource:_changeValue(otherColor, altClick)\r\n                                                                        else\r\n                                                                            resource:_setValue(otherColor, altClick)\r\n                                                                        end\r\n                                                                    end),\r\n                                                                    tooltip = resource:_getTooltip(),\r\n                                                                    position = token.getPosition() + offset,\r\n                                                                    height = (color or location) and 800,\r\n                                                                    width = (color or location) and 800,\r\n                                                                    scale = scales[resourceName],\r\n                                                                    alignment = 3,\r\n                                                                    font_size = 600,\r\n                                                                    font_color = fontColors[resourceName],\r\n                                                                color = {0, 0, 0, 0}})\r\n\r\n                                                                Helper.registerEventListener(\"locale\", function ()\r\n                                                                    resource:_updateButton()\r\n                                                                end)\r\n\r\n                                                                resource:_updateButton()\r\n\r\n                                                                return resource\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Resource:_updateState()\r\n                                                                if self.value == self.laggingValue then\r\n                                                                    Helper.emitEvent(self.resourceName .. \"ValueChanged\", self.color, self.value)\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Resource:_getTooltip()\r\n                                                                return I18N(self.resourceName .. \"Amount\", self.value)\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Resource:_updateButton()\r\n                                                                self.token.editButton({\r\n                                                                    index = 0,\r\n                                                                    label = tostring(self.value),\r\n                                                                tooltip = self:_getTooltip()})\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Resource.findResourceFromToken(token)\r\n                                                                for _, resource in pairs(Resource.resources) do\r\n                                                                    if resource.token == token then\r\n                                                                        return resource\r\n                                                                    end\r\n                                                                end\r\n                                                                return nil\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Resource:_setValue(_, altClick)\r\n                                                                local change = altClick and - 1 or 1\r\n                                                                local newValue = math.min(math.max(self.value + change, self.MIN_VALUE), self.MAX_VALUE)\r\n                                                                if self.value ~= newValue then\r\n                                                                    self.value = newValue\r\n                                                                    self.laggingValue = self.value\r\n                                                                    self:_updateButton()\r\n                                                                    self:_updateState()\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Resource:_changeValue(color, altClick)\r\n                                                                if self.color and color ~= self.color then\r\n                                                                    Dialog.broadcastToColor(I18N(\"noTouch\"), color, color)\r\n                                                                    return\r\n                                                                end\r\n\r\n                                                                local change = altClick and - 1 or 1\r\n                                                                local newValue = math.min(math.max(self.value + change, self.MIN_VALUE), self.MAX_VALUE)\r\n                                                                if self.value ~= newValue then\r\n                                                                    self.value = newValue\r\n                                                                    self:_updateButton()\r\n                                                                    self:_updateState()\r\n\r\n                                                                    if self.laggingUpdate then\r\n                                                                        Wait.stop(self.laggingUpdate)\r\n                                                                    end\r\n\r\n                                                                    self.laggingUpdate = Wait.time(function ()\r\n                                                                        local delta = self.value - self.laggingValue\r\n\r\n                                                                        if self.color then\r\n                                                                            local leaderName = PlayBoard.getLeaderName(self.color)\r\n                                                                            if delta < 0 then\r\n                                                                                local text = I18N(\"spendManually\", {leader = leaderName, amount = -delta, resource = I18N.agree(delta, self.resourceName)})\r\n                                                                                broadcastToAll(text, color)\r\n                                                                            elseif delta > 0 then\r\n                                                                                local text = I18N(\"receiveManually\", {leader = leaderName, amount = delta, resource = I18N.agree(delta, self.resourceName)})\r\n                                                                                broadcastToAll(text, color)\r\n                                                                            end\r\n                                                                        else\r\n                                                                            local text = I18N(\"fixManually\", {location = I18N(self.location), amount = delta, resource = I18N.agree(delta, self.resourceName)})\r\n                                                                            broadcastToAll(text, color)\r\n                                                                        end\r\n\r\n                                                                        self.laggingValue = self.value\r\n                                                                        self:_updateState()\r\n                                                                    end, 1)\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Resource:change(change)\r\n                                                                local newValue = math.min(math.max(self.value + change, self.MIN_VALUE), self.MAX_VALUE)\r\n                                                                self.value = newValue\r\n                                                                self.laggingValue = self.value\r\n                                                                self:_updateButton()\r\n                                                                self:_updateState()\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Resource:set(value)\r\n                                                                local newValue = math.min(math.max(value, self.MIN_VALUE), self.MAX_VALUE)\r\n                                                                self.value = newValue\r\n                                                                self.laggingValue = value\r\n                                                                self:_updateButton()\r\n                                                                self:_updateState()\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Resource:get()\r\n                                                                return self.value\r\n                                                            end\r\n\r\n                                                            return Resource\r\n\r\n                                                        end)\r\n                                                        __bundle_register(\"Reserve\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                            local Module = require(\"utils.Module\")\r\n                                                            local Helper = require(\"utils.Helper\")\r\n                                                            local AcquireCard = require(\"utils.AcquireCard\")\r\n\r\n                                                            local Deck = Module.lazyRequire(\"Deck\")\r\n                                                            local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n\r\n                                                            local Reserve = {}\r\n\r\n                                                            ---\r\n                                                            function Reserve.onLoad(state)\r\n                                                                Helper.append(Reserve, Helper.resolveGUIDs(false, {\r\n                                                                    foldspaceSlotZone = \"6b62e0\",\r\n                                                                    prepareTheWaySlotZone = \"cbcd9a\",\r\n                                                                    theSpiceMustFlowSlotZone = \"c087d2\"\r\n                                                                }))\r\n\r\n                                                                if state.settings then\r\n                                                                    Reserve._transientSetUp()\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Reserve.setUp()\r\n                                                                -- TODO Detect Ilesa Ecaz?\r\n                                                                if false then\r\n                                                                    Deck.generateSpecialDeck(Reserve.foldspaceSlotZone, \"base\", \"foldspace\")\r\n                                                                else\r\n                                                                    Reserve.foldspaceSlotZone.destruct()\r\n                                                                end\r\n                                                                Deck.generateSpecialDeck(Reserve.prepareTheWaySlotZone, \"uprising\", \"prepareTheWay\")\r\n                                                                Deck.generateSpecialDeck(Reserve.theSpiceMustFlowSlotZone, \"uprising\", \"theSpiceMustFlow\")\r\n                                                                Reserve._transientSetUp()\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Reserve._transientSetUp()\r\n                                                                -- TODO Detect Ilesa Ecaz?\r\n                                                                if false then\r\n                                                                    Reserve.foldspace = AcquireCard.new(Reserve.foldspaceSlotZone, \"Imperium\", PlayBoard.withLeader(function (_, color)\r\n                                                                        local leader = PlayBoard.getLeader(color)\r\n                                                                        leader.acquireFoldspace(color)\r\n                                                                    end), Deck.getAcquireCardDecalUrl(\"generic\"))\r\n                                                                end\r\n                                                                Reserve.prepareTheWay = AcquireCard.new(Reserve.prepareTheWaySlotZone, \"Imperium\", PlayBoard.withLeader(function (_, color)\r\n                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                    leader.acquirePrepareTheWay(color)\r\n                                                                end), Deck.getAcquireCardDecalUrl(\"generic\"))\r\n                                                                Reserve.theSpiceMustFlow = AcquireCard.new(Reserve.theSpiceMustFlowSlotZone, \"Imperium\", PlayBoard.withLeader(function (_, color)\r\n                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                    leader.acquireTheSpiceMustFlow(color)\r\n                                                                end), Deck.getAcquireCardDecalUrl(\"generic\"))\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Reserve.acquireFoldspace(color)\r\n                                                                if Reserve.foldspace then\r\n                                                                    PlayBoard.giveCardFromZone(color, Reserve.foldspace.zone, false)\r\n                                                                    return true\r\n                                                                else\r\n                                                                    return false\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Reserve.acquirePrepareTheWay(color)\r\n                                                                PlayBoard.giveCardFromZone(color, Reserve.prepareTheWay.zone, false)\r\n                                                                return true\r\n                                                            end\r\n\r\n                                                            ---\r\n                                                            function Reserve.acquireTheSpiceMustFlow(color, toItsHand)\r\n                                                                if toItsHand then\r\n                                                                    local position = Player[color].getHandTransform().position\r\n                                                                    Helper.moveCardFromZone(Reserve.theSpiceMustFlow.zone, position, nil, false, true)\r\n                                                                else\r\n                                                                    PlayBoard.giveCardFromZone(color, Reserve.theSpiceMustFlow.zone, false, toItsHand)\r\n                                                                end\r\n                                                                return true\r\n                                                            end\r\n\r\n                                                            --- Move a card out of a trash and back into the reserve if necessary.\r\n                                                            function Reserve.redirectUntrashableCards(trashBag, card)\r\n                                                                -- The ID is stored in the 'GM Notes' property (the description and/or name\r\n                                                                -- properties store an unpredictable I18N content).\r\n                                                                local cardName = Helper.getID(card)\r\n                                                                local acquireCard = Reserve[cardName]\r\n                                                                if acquireCard then\r\n                                                                    trashBag.takeObject({\r\n                                                                        guid = card.guid,\r\n                                                                        position = acquireCard.zone.getPosition() + Vector(0, 1, 0),\r\n                                                                        rotation = Vector(0, 180, 0),\r\n                                                                        smooth = false,\r\n                                                                    })\r\n                                                                end\r\n                                                            end\r\n\r\n                                                            return Reserve\r\n\r\n                                                        end)\r\n                                                        __bundle_register(\"PlayBoard\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                            local Module = require(\"utils.Module\")\r\n                                                            local Helper = require(\"utils.Helper\")\r\n                                                            local Park = require(\"utils.Park\")\r\n                                                            local I18N = require(\"utils.I18N\")\r\n                                                            local Set = require(\"utils.Set\")\r\n                                                            local Dialog = require(\"utils.Dialog\")\r\n\r\n                                                            local Resource = Module.lazyRequire(\"Resource\")\r\n                                                            local TleilaxuResearch = Module.lazyRequire(\"TleilaxuResearch\")\r\n                                                            local TurnControl = Module.lazyRequire(\"TurnControl\")\r\n                                                            local Types = Module.lazyRequire(\"Types\")\r\n                                                            local Deck = Module.lazyRequire(\"Deck\")\r\n                                                            local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                            local Hagal = Module.lazyRequire(\"Hagal\")\r\n                                                            local Leader = Module.lazyRequire(\"Leader\")\r\n                                                            local Combat = Module.lazyRequire(\"Combat\")\r\n                                                            local Intrigue = Module.lazyRequire(\"Intrigue\")\r\n                                                            local Reserve = Module.lazyRequire(\"Reserve\")\r\n                                                            local TechMarket = Module.lazyRequire(\"TechMarket\")\r\n                                                            local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n                                                            local ImperiumCard = Module.lazyRequire(\"ImperiumCard\")\r\n                                                            local Commander = Module.lazyRequire(\"Commander\")\r\n                                                            local ConflictCard = Module.lazyRequire(\"ConflictCard\")\r\n                                                            local ScoreBoard = Module.lazyRequire(\"ScoreBoard\")\r\n                                                            local Action = Module.lazyRequire(\"Action\")\r\n\r\n                                                            local PlayBoard = Helper.createClass(nil, {\r\n                                                                ALL_RESOURCE_NAMES = {\"spice\", \"water\", \"solari\", \"strength\", \"persuasion\"},\r\n                                                                -- Temporary structure (set to nil *after* loading).\r\n                                                                unresolvedContentByColor = {\r\n                                                                    Red = {\r\n                                                                        board = \"d47b92\",\r\n                                                                        supportBoard = \"7c5bb0\",\r\n                                                                        colorband = \"643f4d\",\r\n                                                                        spice = \"3074d4\",\r\n                                                                        solari = \"576ccd\",\r\n                                                                        water = \"692c4d\",\r\n                                                                        persuasion = \"7eb590\",\r\n                                                                        strength = \"3f6645\",\r\n                                                                        -- bloodlines sardaukar commanders\r\n                                                                        dreadnoughts = {\"e28e7b\", \"5988c3\", \"b66870\", \"6d5fe4\", \"c66678\", \"77b44a\", \"3503b4\"},\r\n                                                                        dreadnoughtInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('e28e7b', -23.70, 2.199222, 19.65),\r\n                                                                            Helper.getHardcodedPositionFromGUID('5988c3', -25.30, 2.199222, 19.65),\r\n                                                                            Helper.getHardcodedPositionFromGUID('b66870', -24.50, 2.199222, 19.65),\r\n                                                                            Helper.getHardcodedPositionFromGUID('6d5fe4', -24.10, 2.199222, 19.15),\r\n                                                                            Helper.getHardcodedPositionFromGUID('c66678', -24.90, 2.199222, 19.15),\r\n                                                                            Helper.getHardcodedPositionFromGUID('77b44a', -23.30, 2.199222, 19.15),\r\n                                                                        Helper.getHardcodedPositionFromGUID('3503b4', -25.70, 2.199222, 19.15)},\r\n                                                                        agents = {\"7751c8\", \"afa978\"},\r\n                                                                        agentInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('7751c8', -19.15, 2.19722152, 21.7),\r\n                                                                        Helper.getHardcodedPositionFromGUID('afa978', -17.65, 2.19722152, 21.7)},\r\n                                                                        swordmaster = \"ed3490\",\r\n                                                                        swordmasterBonusToken = \"db91e0\",\r\n                                                                        spies = {\r\n                                                                            \"fdecae\",\r\n                                                                            \"84d545\",\r\n                                                                            \"e7a4ef\",\r\n                                                                        },\r\n                                                                        spyInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('fdecae', -19.15, 2.52385259, 20.95),\r\n                                                                            Helper.getHardcodedPositionFromGUID('84d545', -17.65, 2.52385259, 20.95),\r\n                                                                        Helper.getHardcodedPositionFromGUID('e7a4ef', -16.15, 2.52385259, 20.95)},\r\n                                                                        councilToken = \"f19a48\",\r\n                                                                        fourPlayerVictoryToken = \"a6c2e0\",\r\n                                                                        scoreMarker = \"175a0a\",\r\n                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('175a0a', 10.3903551, 2.19088173, -14.0911646),\r\n                                                                        controlMarkerBag = '61453d',\r\n                                                                        troops = {\r\n                                                                            \"8b2acc\",\r\n                                                                            \"6c2b85\",\r\n                                                                            \"81763a\",\r\n                                                                            \"fd5673\",\r\n                                                                            \"8bb1e6\",\r\n                                                                            \"1bbf1c\",\r\n                                                                            \"0fa955\",\r\n                                                                            \"465c38\",\r\n                                                                            \"4fd2dd\",\r\n                                                                            \"488161\",\r\n                                                                            \"5cfef7\",\r\n                                                                            \"af7cd0\"\r\n                                                                        },\r\n                                                                        forceMarker = '2d1d17',\r\n                                                                        trash = \"ea3fe1\",\r\n                                                                        completedContractBag = \"ce13d1\",\r\n                                                                        tleilaxToken = \"2bfc39\",\r\n                                                                        tleilaxTokenInitalPosition = Helper.getHardcodedPositionFromGUID('2bfc39', 0.5429316, 1.882152, 22.0543556),\r\n                                                                        researchToken = \"39e0f3\",\r\n                                                                        researchTokenInitalPosition = Helper.getHardcodedPositionFromGUID('39e0f3', 0.369857281, 1.88465214, 18.2348137),\r\n                                                                        freighter = \"e9096d\",\r\n                                                                        firstPlayerMarkerZone = \"781a03\",\r\n                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('781a03', -13.6, 2.7, 20.89) + Vector(0, -0.4, 0),\r\n                                                                        endTurnButton = \"895594\",\r\n                                                                        atomicsToken = \"d5ff47\",\r\n                                                                        makerHook = \"2a8414\",\r\n                                                                    },\r\n                                                                    Blue = {\r\n                                                                        board = \"f23836\",\r\n                                                                        supportBoard = \"3d9589\",\r\n                                                                        colorband = \"bca124\",\r\n                                                                        spice = \"9cc286\",\r\n                                                                        solari = \"fa5236\",\r\n                                                                        water = \"0afaeb\",\r\n                                                                        persuasion = \"d1fed4\",\r\n                                                                        strength = \"aa3bb9\",\r\n                                                                        -- bloodlines sardaukar commanders\r\n                                                                        dreadnoughts = {\"86c998\", \"6e87f4\", \"a1c0cd\", \"9dd030\", \"73f073\", \"f87386\", \"52374d\"},\r\n                                                                        dreadnoughtInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('86c998', -23.70, 2.19922233, -18.75),\r\n                                                                            Helper.getHardcodedPositionFromGUID('6e87f4', -25.30, 2.19922233, -18.75),\r\n                                                                            Helper.getHardcodedPositionFromGUID('a1c0cd', -24.50, 2.19922233, -18.75),\r\n                                                                            Helper.getHardcodedPositionFromGUID('9dd030', -24.10, 2.19922233, -19.25),\r\n                                                                            Helper.getHardcodedPositionFromGUID('73f073', -24.90, 2.19922233, -19.25),\r\n                                                                            Helper.getHardcodedPositionFromGUID('f87386', -23.30, 2.19922233, -19.25),\r\n                                                                        Helper.getHardcodedPositionFromGUID('52374d', -25.70, 2.19922233, -19.25)},\r\n                                                                        agents = {\"64d013\", \"106d8b\"},\r\n                                                                        agentInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('64d013', -19.15, 2.19722152, -16.7),\r\n                                                                        Helper.getHardcodedPositionFromGUID('106d8b', -17.65, 2.19722152, -16.7)},\r\n                                                                        swordmaster = \"a78ad7\",\r\n                                                                        swordmasterBonusToken = \"28ec54\",\r\n                                                                        spies = {\r\n                                                                            \"7d7083\",\r\n                                                                            \"e07c5c\",\r\n                                                                            \"272ba1\",\r\n                                                                        },\r\n                                                                        spyInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('7d7083', -19.15, 2.52385259, -17.45),\r\n                                                                            Helper.getHardcodedPositionFromGUID('e07c5c', -17.65, 2.52385259, -17.45),\r\n                                                                        Helper.getHardcodedPositionFromGUID('272ba1', -16.15, 2.52385259, -17.45)},\r\n                                                                        councilToken = \"f5b14a\",\r\n                                                                        fourPlayerVictoryToken = \"311255\",\r\n                                                                        scoreMarker = \"7fa9a7\",\r\n                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('7fa9a7', 10.3909073, 2.3901546, -14.090991),\r\n                                                                        controlMarkerBag = '8627e0',\r\n                                                                        troops = {\r\n                                                                            \"2a5276\",\r\n                                                                            \"f2c21f\",\r\n                                                                            \"5fba3c\",\r\n                                                                            \"bc6e74\",\r\n                                                                            \"f60d9c\",\r\n                                                                            \"f65e5d\",\r\n                                                                            \"46c1c6\",\r\n                                                                            \"49afee\",\r\n                                                                            \"1bbc16\",\r\n                                                                            \"98e3a6\",\r\n                                                                            \"bb23cc\",\r\n                                                                            \"694553\"\r\n                                                                        },\r\n                                                                        forceMarker = 'f22e20',\r\n                                                                        trash = \"52a539\",\r\n                                                                        completedContractBag = \"f67091\",\r\n                                                                        tleilaxToken = \"96607f\",\r\n                                                                        tleilaxTokenInitalPosition = Helper.getHardcodedPositionFromGUID('96607f', 0.542550147, 1.884652, 22.75358),\r\n                                                                        researchToken = \"292658\",\r\n                                                                        researchTokenInitalPosition = Helper.getHardcodedPositionFromGUID('292658', 0.370049357, 1.882152, 18.9373875),\r\n                                                                        freighter = \"68e424\",\r\n                                                                        firstPlayerMarkerZone = \"311c04\",\r\n                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('311c04', -13.6, 2.7, -17.49) + Vector(0, -0.4, 0),\r\n                                                                        endTurnButton = \"9eeccd\",\r\n                                                                        atomicsToken = \"700023\",\r\n                                                                        makerHook = \"7011f2\",\r\n                                                                    },\r\n                                                                    Green = {\r\n                                                                        board = \"2facfd\",\r\n                                                                        supportBoard = \"8a1a96\",\r\n                                                                        colorband = \"a138eb\",\r\n                                                                        spice = \"22478f\",\r\n                                                                        solari = \"e597dc\",\r\n                                                                        water = \"fa9522\",\r\n                                                                        persuasion = \"aa79bf\",\r\n                                                                        strength = \"d880f7\",\r\n                                                                        -- bloodlines sardaukar commanders\r\n                                                                        dreadnoughts = {\"e90a35\", \"95ee6b\", \"e0a262\", \"3f3fb3\", \"da0e2f\", \"4b60b6\", \"c20e15\"},\r\n                                                                        dreadnoughtInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('e90a35', 23.70, 2.19653678, 19.65),\r\n                                                                            Helper.getHardcodedPositionFromGUID('95ee6b', 25.30, 2.19653678, 19.65),\r\n                                                                            Helper.getHardcodedPositionFromGUID('e0a262', 24.50, 2.19653678, 19.65),\r\n                                                                            Helper.getHardcodedPositionFromGUID('3f3fb3', 24.10, 2.19653678, 19.15),\r\n                                                                            Helper.getHardcodedPositionFromGUID('da0e2f', 24.90, 2.19653678, 19.15),\r\n                                                                            Helper.getHardcodedPositionFromGUID('4b60b6', 23.30, 2.19653678, 19.15),\r\n                                                                        Helper.getHardcodedPositionFromGUID('c20e15', 25.70, 2.19653678, 19.15)},\r\n                                                                        agents = {\"bceb0e\", \"ee412b\"},\r\n                                                                        agentInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('bceb0e', 16.1, 2.194536, 21.7),\r\n                                                                        Helper.getHardcodedPositionFromGUID('ee412b', 17.599762, 2.194536, 21.7)},\r\n                                                                        swordmaster = \"fb1629\",\r\n                                                                        swordmasterBonusToken = \"f5bfa8\",\r\n                                                                        spies = {\r\n                                                                            \"ed1748\",\r\n                                                                            \"795934\",\r\n                                                                            \"8ca6ca\",\r\n                                                                        },\r\n                                                                        spyInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('ed1748', 16.1, 2.521167, 20.95),\r\n                                                                            Helper.getHardcodedPositionFromGUID('795934', 17.6, 2.521167, 20.95),\r\n                                                                        Helper.getHardcodedPositionFromGUID('8ca6ca', 19.1, 2.521167, 20.95)},\r\n                                                                        councilToken = \"a0028d\",\r\n                                                                        fourPlayerVictoryToken = \"66444c\",\r\n                                                                        scoreMarker = \"7bae32\",\r\n                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('7bae32', 10.3895054, 1.99093008, -14.0924873),\r\n                                                                        controlMarkerBag = 'ad6b92',\r\n                                                                        troops = {\r\n                                                                            \"167fd4\",\r\n                                                                            \"60c92d\",\r\n                                                                            \"b614cc\",\r\n                                                                            \"f433eb\",\r\n                                                                            \"08be0c\",\r\n                                                                            \"b48887\",\r\n                                                                            \"8e22cc\",\r\n                                                                            \"866a9c\",\r\n                                                                            \"060aee\",\r\n                                                                            \"86396c\",\r\n                                                                            \"b5e9ae\",\r\n                                                                            \"fc9c62\"\r\n                                                                        },\r\n                                                                        forceMarker = 'a1a9a7',\r\n                                                                        trash = \"4060b5\",\r\n                                                                        completedContractBag = \"e48304\",\r\n                                                                        tleilaxToken = \"63d39f\",\r\n                                                                        tleilaxTokenInitalPosition = Helper.getHardcodedPositionFromGUID('63d39f', 1.2458272, 1.8846519, 22.04864),\r\n                                                                        researchToken = \"658b17\",\r\n                                                                        researchTokenInitalPosition = Helper.getHardcodedPositionFromGUID('658b17', 0.3700056, 1.882152, 20.3406372),\r\n                                                                        freighter = \"34281d\",\r\n                                                                        firstPlayerMarkerZone = \"ce7c68\",\r\n                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('ce7c68', 13.6, 2.7, 20.89) + Vector(0, -0.4, 0),\r\n                                                                        endTurnButton = \"96aa58\",\r\n                                                                        atomicsToken = \"0a22ec\",\r\n                                                                        makerHook = \"0492e6\",\r\n                                                                    },\r\n                                                                    Yellow = {\r\n                                                                        board = \"13b6cb\",\r\n                                                                        supportBoard = \"da264a\",\r\n                                                                        colorband = \"9232e7\",\r\n                                                                        spice = \"78fb8a\",\r\n                                                                        solari = \"c5c4ef\",\r\n                                                                        water = \"f217d0\",\r\n                                                                        persuasion = \"c04d4e\",\r\n                                                                        strength = \"6f007c\",\r\n                                                                        -- bloodlines sardaukar commanders\r\n                                                                        dreadnoughts = {\"a9e6a7\", \"b1f60b\", \"bd1bd0\", \"6f542e\", \"cad40d\", \"4d619c\", \"fe20d0\"},\r\n                                                                        dreadnoughtInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('a9e6a7', 23.70, 2.19653654, -18.75),\r\n                                                                            Helper.getHardcodedPositionFromGUID('b1f60b', 25.30, 2.19653654, -18.75),\r\n                                                                            Helper.getHardcodedPositionFromGUID('bd1bd0', 24.50, 2.19653654, -18.75),\r\n                                                                            Helper.getHardcodedPositionFromGUID('6f542e', 24.10, 2.19653654, -19.25),\r\n                                                                            Helper.getHardcodedPositionFromGUID('cad40d', 24.90, 2.19653654, -19.25),\r\n                                                                            Helper.getHardcodedPositionFromGUID('4d619c', 23.30, 2.19653654, -19.25),\r\n                                                                        Helper.getHardcodedPositionFromGUID('fe20d0', 25.70, 2.19653654, -19.25)},\r\n                                                                        agents = {\"5068c8\", \"67b476\"},\r\n                                                                        agentInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('5068c8', 16.1, 2.194536, -16.7),\r\n                                                                        Helper.getHardcodedPositionFromGUID('67b476', 17.6, 2.194536, -16.7)},\r\n                                                                        swordmaster = \"635c49\",\r\n                                                                        swordmasterBonusToken = \"e160d9\",\r\n                                                                        spies = {\r\n                                                                            \"94ffec\",\r\n                                                                            \"f59e0c\",\r\n                                                                            \"4e66c4\",\r\n                                                                        },\r\n                                                                        spyInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('94ffec', 16.1, 2.521167, -17.45),\r\n                                                                            Helper.getHardcodedPositionFromGUID('f59e0c', 17.6, 2.521167, -17.45),\r\n                                                                        Helper.getHardcodedPositionFromGUID('4e66c4', 19.1, 2.521167, -17.45)},\r\n                                                                        councilToken = \"1be491\",\r\n                                                                        fourPlayerVictoryToken = \"4e8873\",\r\n                                                                        scoreMarker = \"f9ac91\",\r\n                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('f9ac91', 10.3904238, 1.79251623, -14.090271),\r\n                                                                        controlMarkerBag = 'b92a4c',\r\n                                                                        troops = {\r\n                                                                            \"fbf8d2\",\r\n                                                                            \"7c5b7b\",\r\n                                                                            \"4d0dbf\",\r\n                                                                            \"ef6da2\",\r\n                                                                            \"d01e0b\",\r\n                                                                            \"9b55e4\",\r\n                                                                            \"ef9008\",\r\n                                                                            \"734b6e\",\r\n                                                                            \"4f4199\",\r\n                                                                            \"1f5949\",\r\n                                                                            \"3dc7ff\",\r\n                                                                            \"b5d32e\"\r\n                                                                        },\r\n                                                                        forceMarker = 'c2dd31',\r\n                                                                        trash = \"7d1e07\",\r\n                                                                        completedContractBag = \"04d334\",\r\n                                                                        tleilaxToken = \"d20bcf\",\r\n                                                                        tleilaxTokenInitalPosition = Helper.getHardcodedPositionFromGUID('d20bcf', 1.24723184, 1.884652, 22.7536983),\r\n                                                                        researchToken = \"8988cf\",\r\n                                                                        researchTokenInitalPosition = Helper.getHardcodedPositionFromGUID('8988cf', 0.370085269, 1.88215208, 19.6398125),\r\n                                                                        freighter = \"8fa76f\",\r\n                                                                        firstPlayerMarkerZone = \"ba0c20\",\r\n                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('ba0c20', 13.6, 2.7, -17.49) + Vector(0, -0.4, 0),\r\n                                                                        endTurnButton = \"3d1b90\",\r\n                                                                        atomicsToken = \"7e10a9\",\r\n                                                                        makerHook = \"a07d90\",\r\n                                                                    },\r\n                                                                    White = {\r\n                                                                        board = \"4ad196\",\r\n                                                                        colorband = \"6d455c\",\r\n                                                                        spice = \"9d593f\",\r\n                                                                        solari = \"5a16bb\",\r\n                                                                        water = \"830a1a\",\r\n                                                                        persuasion = \"57a567\",\r\n                                                                        strength = \"a18dca\",\r\n                                                                        agents = {\"b9a4d2\", \"2c1095\"},\r\n                                                                        agentInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('b9a4d2', -19.15, 2.19472766, 2.49999976),\r\n                                                                        Helper.getHardcodedPositionFromGUID('2c1095', -17.6500015, 2.19472766, 2.49999976)},\r\n                                                                        swordmaster = \"c2a908\",\r\n                                                                        swordmasterBonusToken = \"a456bf\",\r\n                                                                        spies = {\r\n                                                                            \"96bbc4\",\r\n                                                                            \"040248\",\r\n                                                                            \"bddedd\",\r\n                                                                        },\r\n                                                                        spyInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('96bbc4', -19.15, 2.52385283, 1.75000143),\r\n                                                                            Helper.getHardcodedPositionFromGUID('040248', -17.65, 2.52385354, 1.74999988),\r\n                                                                        Helper.getHardcodedPositionFromGUID('bddedd', -16.15, 2.523853, 1.74999964)},\r\n                                                                        councilToken = \"ded786\",\r\n                                                                        scoreMarker = \"201011\",\r\n                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('201011', 10.3917294, 2.58932447, -14.09231),\r\n                                                                        trash = \"a4f139\",\r\n                                                                        completedContractBag = \"98c18d\",\r\n                                                                        firstPlayerMarkerZone = \"f4c962\",\r\n                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('f4c962', -13.6, 2.7, 1.7) + Vector(0, -0.4, 0),\r\n                                                                        endTurnButton = \"8d70a4\",\r\n                                                                        atomicsToken = \"a20687\",\r\n                                                                    },\r\n                                                                    Purple = {\r\n                                                                        board = \"dc05a6\",\r\n                                                                        colorband = \"1434c7\",\r\n                                                                        spice = \"2c9946\",\r\n                                                                        solari = \"43d234\",\r\n                                                                        water = \"c72ecc\",\r\n                                                                        persuasion = \"ab28ea\",\r\n                                                                        strength = \"50f36d\",\r\n                                                                        agents = {\"10ca63\", \"fb1dd6\"},\r\n                                                                        agentInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('10ca63', 16.1, 2.192042, 2.5),\r\n                                                                        Helper.getHardcodedPositionFromGUID('fb1dd6', 17.6, 2.19204187, 2.5)},\r\n                                                                        swordmaster = \"a695f9\",\r\n                                                                        swordmasterBonusToken = \"aa9a39\",\r\n                                                                        spies = {\r\n                                                                            \"e5b04d\",\r\n                                                                            \"407c67\",\r\n                                                                            \"a3d964\",\r\n                                                                        },\r\n                                                                        spyInitialPositions = {\r\n                                                                            Helper.getHardcodedPositionFromGUID('e5b04d', 16.1, 2.521167, 1.749999),\r\n                                                                            Helper.getHardcodedPositionFromGUID('407c67', 17.6, 2.521168, 1.74999988),\r\n                                                                        Helper.getHardcodedPositionFromGUID('a3d964', 19.1, 2.521168, 1.75000155)},\r\n                                                                        councilToken = \"8c6ba7\",\r\n                                                                        scoreMarker = \"2ccf7f\",\r\n                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('2ccf7f', 10.3914042, 2.789329, -14.0921068),\r\n                                                                        trash = \"556139\",\r\n                                                                        completedContractBag = \"49dedf\",\r\n                                                                        firstPlayerMarkerZone = \"7a8ea9\",\r\n                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('7a8ea9', 13.58, 2.7, 1.7) + Vector(0, -0.4, 0),\r\n                                                                        endTurnButton = \"eded7c\",\r\n                                                                        atomicsToken = \"0a3ccb\",\r\n                                                                    },\r\n                                                                },\r\n                                                                playBoards = {},\r\n                                                                -- TODO Use the snappoints (swordmasterBonusTokenXxx) instead.\r\n                                                                swordmasterBonusPositions = {\r\n                                                                    Red = Vector(-0.29, 1.79, -7.77),\r\n                                                                    Blue = Vector(-0.29, 1.79, -12.35),\r\n                                                                    Green = Vector(6.96, 1.79, -7.77),\r\n                                                                    Yellow = Vector(6.96, 1.79, -12.35),\r\n                                                                    White = Vector(3.33, 1.79, -12.35),\r\n                                                                    Purple = Vector(3.33, 1.79, -7.77),\r\n                                                                }})\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.rebuild()\r\n                                                                    for _, color in ipairs({\"Green\", \"Yellow\", \"Blue\", \"Red\", \"White\", \"Purple\"}) do\r\n                                                                        local content = Helper.resolveGUIDs(true, PlayBoard.unresolvedContentByColor[color])\r\n\r\n                                                                        local colorSwitch = function (left, right)\r\n                                                                            if PlayBoard.isLeft(color) then\r\n                                                                                return left\r\n                                                                            else\r\n                                                                                return right\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        local symmetric = function (x, y, z)\r\n                                                                            return colorSwitch(Vector(-x, y, z), Vector(x, y, z))\r\n                                                                        end\r\n                                                                        local offseted = function (x, y, z)\r\n                                                                            return colorSwitch(Vector(12.75 + x, y, z), Vector(x, y, z))\r\n                                                                        end\r\n\r\n                                                                        local symmetric2 = function (x, y, z)\r\n                                                                            local r = symmetric(-x, y, -z)\r\n                                                                            return Vector(-r.x, r.y, -r.z)\r\n                                                                        end\r\n                                                                        local offseted2 = function (x, y, z)\r\n                                                                            local r = offseted(-x, y, -z)\r\n                                                                            return Vector(-r.x, r.y, -r.z)\r\n                                                                        end\r\n\r\n                                                                        local c1 = 0.5\r\n\r\n                                                                        local objectGroups = {\r\n                                                                            {\r\n                                                                                board = Vector(0, 0, 0),\r\n                                                                                colorband = Vector(0, 0, -0.55),\r\n                                                                                fourPlayerVictoryToken = symmetric(-11.2, 0, 8.1),\r\n                                                                            },\r\n                                                                            {\r\n                                                                                --[[\r\n                spice = offseted(-8.4, 0, 4.5),\r\n                solari = offseted(-4.4, 0, 4.5),\r\n                water = offseted(-6.4, 0, 4),\r\n                ]]\r\n                                                                                spice = offseted(-8.4, 0, 4),\r\n                                                                                solari = offseted(-6.4, 0, 4.5),\r\n                                                                                water = offseted(-4.4, 0, 4),\r\n                                                                                agents = {\r\n                                                                                    origin = offseted(-7.9, 0, 6.5),\r\n                                                                                    width = 3,\r\n                                                                                    height = 1,\r\n                                                                                    xOffset = Vector(1.5, 0, 0),\r\n                                                                                },\r\n                                                                                spies = {\r\n                                                                                    origin = offseted(-7.9, 0, 5.75),\r\n                                                                                    width = 3,\r\n                                                                                    height = 1,\r\n                                                                                    xOffset = Vector(1.5, 0, 0),\r\n                                                                                },\r\n                                                                            },\r\n                                                                            {\r\n                                                                                persuasion = symmetric(c1, 0, 0.2),\r\n                                                                                strength = symmetric(c1, 0, 6),\r\n                                                                                dreadnoughts = {\r\n                                                                                    origin = symmetric(c1 - 0.8, 0, 4.2),\r\n                                                                                    width = 2,\r\n                                                                                    height = 1,\r\n                                                                                    xOffset = symmetric(1.6, 0, 0),\r\n                                                                                    yOffset = Vector(0, 0, 0),\r\n                                                                                },\r\n                                                                                councilToken = symmetric(1.35, 0, -0.6),\r\n                                                                                controlMarkerBag = symmetric(c1, 0, 4),\r\n                                                                                troops = {\r\n                                                                                    origin = symmetric(c1 - 0.5, 0, 1.8),\r\n                                                                                    width = 3,\r\n                                                                                    height = 4,\r\n                                                                                    xOffset = symmetric(0.5, 0, 0),\r\n                                                                                    yOffset = Vector(0, 0, 0.5),\r\n                                                                                },\r\n                                                                            },\r\n                                                                            {\r\n                                                                                trash = symmetric(10, 0, 1),\r\n                                                                                endTurnButton = symmetric(-2.4, 0, 6),\r\n                                                                                atomicsToken = symmetric(10, 0, 3.4),\r\n                                                                            },\r\n                                                                        }\r\n\r\n                                                                        local c0 = 1\r\n                                                                        local positions = {\r\n                                                                            Green = Vector(24, 2, 14.2 + c0),\r\n                                                                            Yellow = Vector(24, 2, -24.2 + c0),\r\n                                                                            Red = Vector(-24, 2, 14.2 + c0),\r\n                                                                            Blue = Vector(-24, 2, -24.2 + c0),\r\n                                                                            White = Vector(-24, 2, -5 + c0),\r\n                                                                            Purple = Vector(24, 2, -5 + c0),\r\n                                                                        }\r\n                                                                        local position = positions[color]\r\n\r\n                                                                        local offset = position - content.board.getPosition()\r\n\r\n                                                                        for _, objects in ipairs(objectGroups) do\r\n                                                                            for name, localOffset in pairs(objects) do\r\n                                                                                local object = content[name]\r\n                                                                                if object then\r\n                                                                                    if type(object) == \"table\" then\r\n                                                                                        assert(type(localOffset) == \"table\", name)\r\n                                                                                        for j, item in ipairs(object) do\r\n                                                                                            local newPosition = position + localOffset.origin\r\n                                                                                            local x = (j - 1) % localOffset.width\r\n                                                                                            local y = math.floor((j - 1) / localOffset.width)\r\n                                                                                            newPosition = newPosition + localOffset.xOffset:copy():scale(x) + (localOffset.yOffset and localOffset.yOffset:copy():scale(y) or Vector(0, 0, 0))\r\n                                                                                            newPosition.y = (item.getPosition() + offset).y + localOffset.origin.y\r\n                                                                                            item.setPosition(newPosition)\r\n                                                                                        end\r\n                                                                                    else\r\n                                                                                        local newPosition = position + localOffset\r\n                                                                                        newPosition.y = (object.getPosition() + offset).y + localOffset.y\r\n                                                                                        object.setPosition(newPosition)\r\n                                                                                        object.setLock(true)\r\n                                                                                    end\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        local handTransform = Player[color].getHandTransform()\r\n                                                                        handTransform.position = handTransform.position + offset\r\n                                                                        Player[color].setHandTransform(handTransform)\r\n\r\n                                                                        local layoutGrid = function (width, height, f)\r\n                                                                            local n = width * height\r\n                                                                            for i = 1, n do\r\n                                                                                local x = (i - 1) % width\r\n                                                                                local y = math.floor((i - 1) / width)\r\n                                                                                f(x, y)\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        -- Coordinates in the object space (rotated by 180??).\r\n                                                                        local decals = {\r\n                                                                            {\r\n                                                                                name = \"Scoreboard\",\r\n                                                                                url = colorSwitch(\r\n                                                                                    \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141335512/BD4C6DB374A73A3A1586E84DD94DD2459EB51782/\",\r\n                                                                                \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141335805/00AEA6A9B03D893B1BF82EFF392448FD52B8C70E/\"),\r\n                                                                                position = symmetric2(1.4, 0.2, -8.1),\r\n                                                                                rotation = {90, 180, 0},\r\n                                                                                scale = {21.56, 1.1, 1.1},\r\n                                                                            },\r\n                                                                            {\r\n                                                                                name = \"First Player Token Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141336231/B2176FBF3640DC02A6840C8E0FB162057724DE41/\",\r\n                                                                                position = symmetric2(10.4, 0.2, -5.7),\r\n                                                                                rotation = {90, 180, 0},\r\n                                                                                scale = {2, 2, 2},\r\n                                                                            },\r\n                                                                            {\r\n                                                                                name = \"Deck Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141335305/9973F87497827C194B979D7410D0DD47E46305FA/\",\r\n                                                                                position = offseted2(10.4, 0.2, -1.5),\r\n                                                                                rotation = {90, 180, 0},\r\n                                                                                scale = {2.4, 3.4, 3.4},\r\n                                                                            },\r\n                                                                            {\r\n                                                                                name = \"Discard Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141335224/76205DFA6ECBC5F9C6B38BE95F42E6B5468B5999/\",\r\n                                                                                position = offseted2(2.4, 0.2, -1.5),\r\n                                                                                rotation = {90, 180, 0},\r\n                                                                                scale = {2.4, 3.4, 3.4},\r\n                                                                            },\r\n                                                                            {\r\n                                                                                name = \"Leader Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141335398/7882B2E68FF7767C67EE5C63C9D7CF17B405A5C3/\",\r\n                                                                                position = offseted2(6.4, 0.2, -1),\r\n                                                                                rotation = {90, 180, 0},\r\n                                                                                scale = {5, 3.5, 3.5},\r\n                                                                            },\r\n                                                                            {\r\n                                                                                name = \"MuadDib Objective Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141305375/52C4F6DEBC5F101B6663B833F1964BB9034A7C75/\",\r\n                                                                                position = symmetric2(-3.4, 0.2, 0),\r\n                                                                                rotation = {90, 180, 0},\r\n                                                                                scale = {1.1, 1.1, 1.1},\r\n                                                                            },\r\n                                                                            {\r\n                                                                                name = \"Crysknife Objective Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141304988/D455406509BD5D1C4387C102CBACC5BFB56FC59E/\",\r\n                                                                                position = symmetric2(-4.8, 0.2, 0),\r\n                                                                                rotation = {90, 180, 0},\r\n                                                                                scale = {1.1, 1.1, 1.1},\r\n                                                                            },\r\n                                                                            {\r\n                                                                                name = \"Ornithopter Objective Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141304687/E4E692FE0EF6AF7B51B5A31DAC5D0D7DC7859655/\",\r\n                                                                                position = symmetric2(-6.2, 0.2, 0),\r\n                                                                                rotation = {90, 180, 0},\r\n                                                                                scale = {1.1, 1.1, 1.1},\r\n                                                                            },\r\n                                                                            {\r\n                                                                                name = \"Joker Objective Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141304458/384109878E6ED179516CE638CE97167E12698A54/\",\r\n                                                                                position = symmetric2(-7.6, 0.2, 0),\r\n                                                                                rotation = {90, 180, 0},\r\n                                                                                scale = {1, 1, 1},\r\n                                                                            },\r\n                                                                        }\r\n\r\n                                                                        layoutGrid(3, 1, function (x, y)\r\n                                                                            table.insert(decals, {\r\n                                                                                name = \"Generic Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141334991/8C42D07B62ACE707EF3C206E9DFEA483821ECFD8/\",\r\n                                                                                position = offseted2(4.9 + x * 1.5, 0.2, -6.5),\r\n                                                                                rotation = {90, 0, 0},\r\n                                                                                scale = {0.5, 0.5, 0.5},\r\n                                                                            })\r\n                                                                        end)\r\n\r\n                                                                        layoutGrid(3, 1, function (x, y)\r\n                                                                            table.insert(decals, {\r\n                                                                                name = \"Generic Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141334991/8C42D07B62ACE707EF3C206E9DFEA483821ECFD8/\",\r\n                                                                                position = offseted2(4.9 + x * 1.5, 0.2, -5.75),\r\n                                                                                rotation = {90, 0, 0},\r\n                                                                                scale = {0.25, 0.25, 0.25},\r\n                                                                            })\r\n                                                                        end)\r\n\r\n                                                                        layoutGrid(2, 3, function (x, y)\r\n                                                                            table.insert(decals, {\r\n                                                                                name = \"Tech Tile Slot\",\r\n                                                                                url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141336300/6A948CDC20774D0D4E5EA0EFF3E0D2C23F30FCC1/\",\r\n                                                                                position = symmetric2(-4 - 3 * x, 0.2, -2 - 2 * y),\r\n                                                                                rotation = {90, 0, 0},\r\n                                                                                scale = {2.6, 1.8, 1.8},\r\n                                                                            })\r\n                                                                        end)\r\n\r\n                                                                        if content.dreadnoughts then\r\n                                                                            layoutGrid(2, 1, function (x, y)\r\n                                                                                table.insert(decals, {\r\n                                                                                    name = \"Generic Slot\",\r\n                                                                                    url = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141334991/8C42D07B62ACE707EF3C206E9DFEA483821ECFD8/\",\r\n                                                                                    position = symmetric2(-1.3 + x * 1.6, 0.2, -4.2),\r\n                                                                                    rotation = {90, 0, 0},\r\n                                                                                    scale = {0.5, 0.5, 0.5},\r\n                                                                                })\r\n                                                                            end)\r\n                                                                        end\r\n\r\n                                                                        if false then\r\n                                                                            layoutGrid(9, 2, function (x, y)\r\n                                                                                table.insert(decals, {\r\n                                                                                    name = \"Intrigium\",\r\n                                                                                    url = \"https://steamusercontent-a.akamaihd.net/ugc/2120690798716490121/DB0A29253195530F3A39D5AC737922A5B2338795/\",\r\n                                                                                    position = symmetric2(9.5 - 2.5 * x, 0.2, 3.2 + 4 * y),\r\n                                                                                    rotation = {90, 180, 0},\r\n                                                                                    scale = {2, 2, 2},\r\n                                                                                })\r\n                                                                            end)\r\n                                                                        else\r\n                                                                            layoutGrid(6, 1, function (x, y)\r\n                                                                                table.insert(decals, {\r\n                                                                                    name = \"Intrigium\",\r\n                                                                                    url = \"https://steamusercontent-a.akamaihd.net/ugc/2120690798716490121/DB0A29253195530F3A39D5AC737922A5B2338795/\",\r\n                                                                                    position = symmetric2(9.5 - 2.5 * x, 0.2, 3.2 + 4 * y),\r\n                                                                                    rotation = {90, 180, 0},\r\n                                                                                    scale = {2, 2, 2},\r\n                                                                                })\r\n                                                                            end)\r\n                                                                        end\r\n\r\n                                                                        content.board.setDecals(decals)\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                ---@param position Vector\r\n                                                                function PlayBoard:moveAt(position, isRelative, horizontalHandLayout)\r\n                                                                    local toBeMoved = Helper.shallowCopy(self.content)\r\n                                                                    local offset = isRelative and position or (position - toBeMoved.board.getPosition())\r\n\r\n                                                                    local exceptions = {\r\n                                                                        \"swordmaster\",\r\n                                                                        \"scoreMarker\",\r\n                                                                        \"forceMarker\",\r\n                                                                        \"tleilaxToken\",\r\n                                                                        \"tleilaxTokenInitalPosition\",\r\n                                                                        \"researchToken\",\r\n                                                                        \"researchTokenInitalPosition\",\r\n                                                                        \"freighter\",\r\n                                                                    }\r\n                                                                    for _, exception in ipairs(exceptions) do\r\n                                                                        toBeMoved[exception] = nil\r\n                                                                    end\r\n\r\n                                                                    toBeMoved.drawDeck = self.content.drawDeckZone and Helper.getDeckOrCard(self.content.drawDeckZone) or nil\r\n                                                                    toBeMoved.discard = self.content.discardZone and Helper.getDeckOrCard(self.content.discardZone) or nil\r\n\r\n                                                                    local smooth = false\r\n                                                                    local move = smooth and \"setPositionSmooth\" or \"setPosition\"\r\n\r\n                                                                    Helper.forEachRecursively(toBeMoved, function (name, object)\r\n                                                                        assert(tostring(object) ~= \"null\", name)\r\n                                                                        if name ~= \"supportBoard\" then\r\n                                                                            if object.getPosition then\r\n                                                                                object[move](object.getPosition() + offset)\r\n                                                                            elseif object.x then\r\n                                                                                object.x = object.x + offset.x\r\n                                                                                object.y = object.y + offset.y\r\n                                                                                object.z = object.z + offset.z\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end)\r\n\r\n                                                                    local parks = {\r\n                                                                        self.agentCardPark,\r\n                                                                        self.revealCardPark,\r\n                                                                        self.agentPark,\r\n                                                                        self.spyPark,\r\n                                                                        self.dreadnoughtPark,\r\n                                                                        self.supplyPark,\r\n                                                                        self.techPark,\r\n                                                                        self.scorePark,\r\n                                                                    }\r\n\r\n                                                                    for _, park in ipairs(parks) do\r\n                                                                        for _, slot in ipairs(park.slots) do\r\n                                                                            slot.x = slot.x + offset.x\r\n                                                                            slot.y = slot.y + offset.y\r\n                                                                            slot.z = slot.z + offset.z\r\n                                                                        end\r\n\r\n                                                                        for _, zone in ipairs(Park.getZones(park)) do\r\n                                                                            zone[move](zone.getPosition() + offset)\r\n                                                                        end\r\n                                                                        if park.anchor then\r\n                                                                            park.anchor[move](park.anchor.getPosition() + offset)\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    -- Not reliable, only done for the old vertical layout which doesn't have alternate zones.\r\n                                                                    if not horizontalHandLayout then\r\n                                                                        PlayBoard.tq = PlayBoard.tq or Helper.createTemporalQueue(0.25)\r\n                                                                        PlayBoard.tq.submit(function ()\r\n                                                                            local handTransform = Player[self.color].getHandTransform()\r\n                                                                            handTransform.position = handTransform.position + offset\r\n                                                                            if horizontalHandLayout then\r\n                                                                                handTransform.position = handTransform.position + self:_newSymmetricBoardPosition(-15, 0, 11.95)\r\n                                                                                handTransform.scale = Vector(25, 5, 4)\r\n                                                                                handTransform.rotation = Vector(0, 0, 0)\r\n                                                                            end\r\n                                                                            Player[self.color].setHandTransform(handTransform)\r\n                                                                        end)\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_pruneHandsInExcess(color, horizontalHandLayout)\r\n                                                                    local rgba = Color.fromString(color)\r\n                                                                    rgba.a = 0\r\n                                                                    for _, hand in ipairs(Hands.getHands()) do\r\n                                                                        if hand.getColorTint() == rgba then\r\n                                                                            local horizontal = math.abs(hand.getRotation().y) < 1\r\n                                                                            if horizontal ~= horizontalHandLayout then\r\n                                                                                hand.destruct()\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.onLoad(state)\r\n                                                                    for color, unresolvedContent in pairs(PlayBoard.unresolvedContentByColor) do\r\n                                                                        local alive = true\r\n                                                                        local subState = nil\r\n                                                                        if state.PlayBoard then\r\n                                                                            subState = state.PlayBoard[color]\r\n                                                                            alive = subState ~= nil\r\n                                                                        end\r\n                                                                        if alive then\r\n                                                                            PlayBoard.playBoards[color] = PlayBoard.new(color, unresolvedContent, state, subState)\r\n                                                                        end\r\n                                                                    end\r\n                                                                    PlayBoard.unresolvedContentByColor = nil\r\n\r\n                                                                    if state.settings then\r\n                                                                        PlayBoard._transientSetUp(state.settings)\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.onSave(state)\r\n                                                                    state.PlayBoard = Helper.map(PlayBoard.playBoards, function (color, playBoard)\r\n                                                                        local resourceValues = {}\r\n                                                                        for _, resourceName in ipairs(PlayBoard.ALL_RESOURCE_NAMES) do\r\n                                                                            if playBoard[resourceName] then\r\n                                                                                resourceValues[resourceName] = playBoard[resourceName]:get()\r\n                                                                            end\r\n                                                                        end\r\n                                                                        return {\r\n                                                                            opponent = playBoard.opponent,\r\n                                                                            resources = resourceValues,\r\n                                                                            leader = playBoard.leader and playBoard.leader.name,\r\n                                                                            lastPhase = playBoard.lastPhase,\r\n                                                                            revealed = playBoard.revealed,\r\n                                                                            initialPositions = {\r\n                                                                                dreadnoughtInitialPositions = playBoard.content.dreadnoughtInitialPositions,\r\n                                                                                agentInitialPositions = playBoard.content.agentInitialPositions,\r\n                                                                                spyInitialPositions = playBoard.content.spyInitialPositions,\r\n                                                                                tleilaxTokenInitalPosition = playBoard.content.tleilaxTokenInitalPosition,\r\n                                                                                researchTokenInitalPosition = playBoard.content.researchTokenInitalPosition,\r\n                                                                                firstPlayerInitialPosition = playBoard.content.firstPlayerInitialPosition,\r\n                                                                            },\r\n                                                                        }\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.generatePosition(playBoard, operation, position)\r\n\r\n                                                                    local colorSwitch = function (left, right)\r\n                                                                        if PlayBoard.isLeft(playBoard.color) then\r\n                                                                            return left\r\n                                                                        else\r\n                                                                            return right\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    local p = playBoard.content.board.getPosition()\r\n                                                                    if not operation then\r\n                                                                        p = p + position\r\n                                                                    elseif operation == \"symmetric\" then\r\n                                                                        p = p + colorSwitch(Vector(-position.x, position.y, position.z), position)\r\n                                                                    elseif operation == \"offseted\" then\r\n                                                                        p = p + colorSwitch(Vector(12.75 + position.x, position.y, position.z), position)\r\n                                                                    else\r\n                                                                        assert(\"Unknow operation: \" .. tostring(operation))\r\n                                                                    end\r\n\r\n                                                                    return p\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.createTransientZone(playBoard, operation, position, scale)\r\n                                                                    local zone = spawnObject({\r\n                                                                        type = 'ScriptingTrigger',\r\n                                                                        position = PlayBoard.generatePosition(playBoard, operation, position),\r\n                                                                        scale = {scale.x, scale.y, scale.z},\r\n                                                                    })\r\n                                                                    Helper.markAsTransient(zone)\r\n                                                                    return zone\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.new(color, unresolvedContent, state, subState)\r\n                                                                    local playBoard = Helper.createClassInstance(PlayBoard, {\r\n                                                                        color = color,\r\n                                                                        score = 0,\r\n                                                                        scorePositions = {},\r\n                                                                    })\r\n                                                                    playBoard.content = Helper.resolveGUIDs(false, unresolvedContent)\r\n\r\n                                                                    Helper.noPhysicsNorPlay(\r\n                                                                        playBoard.content.board,\r\n                                                                        playBoard.content.colorband,\r\n                                                                    playBoard.content.endTurnButton)\r\n\r\n                                                                    playBoard.content.drawDeckZone = PlayBoard.createTransientZone(playBoard, \"offseted\", Vector(-10.4, 0.4, 1.5), Vector(2.3, 1, 3.3))\r\n                                                                    playBoard.content.leaderZone = PlayBoard.createTransientZone(playBoard, \"offseted\", Vector(-6.4, 0.4, 1), Vector(5, 1, 3.5))\r\n                                                                    playBoard.content.discardZone = PlayBoard.createTransientZone(playBoard, \"offseted\", Vector(-2.4, 0.4, 1.5), Vector(2.3, 1, 3.3))\r\n\r\n                                                                    if subState then\r\n                                                                        playBoard.opponent = subState.opponent\r\n\r\n                                                                        playBoard.lastPhase = subState.lastPhase\r\n                                                                        playBoard.revealed = subState.revealed\r\n\r\n                                                                        -- Zones can't be queried right now.\r\n                                                                        Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                            playBoard.leaderCard = Helper.getDeckOrCard(playBoard.content.leaderZone)\r\n                                                                            if playBoard.leaderCard then\r\n                                                                                assert(subState.leader)\r\n                                                                                if playBoard.opponent == \"rival\" then\r\n                                                                                    playBoard.leader = Hagal.newRival(subState.leader)\r\n                                                                                else\r\n                                                                                    playBoard.leader = Leader.newLeader(subState.leader)\r\n                                                                                    if Commander.isCommander(color) then\r\n                                                                                        playBoard.leader = Commander.newCommander(color, playBoard.leader)\r\n                                                                                    end\r\n                                                                                end\r\n                                                                                if playBoard.leader.transientSetUp then\r\n                                                                                    playBoard.leader.transientSetUp(color, state.settings)\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end)\r\n\r\n                                                                        if not Commander.isCommander(color) then\r\n                                                                            playBoard.content.dreadnoughtInitialPositions = Helper.mapValues(subState.initialPositions.dreadnoughtInitialPositions, Helper.toVector)\r\n                                                                        end\r\n                                                                        playBoard.content.agentInitialPositions = Helper.mapValues(subState.initialPositions.agentInitialPositions, Helper.toVector)\r\n                                                                        playBoard.content.spyInitialPositions = Helper.mapValues(subState.initialPositions.spyInitialPositions, Helper.toVector)\r\n                                                                        playBoard.content.tleilaxTokenInitalPosition = Helper.toVector(subState.initialPositions.tleilaxTokenInitalPosition)\r\n                                                                        playBoard.content.researchTokenInitalPosition = Helper.toVector(subState.initialPositions.researchTokenInitalPosition)\r\n                                                                        playBoard.content.firstPlayerInitialPosition = Helper.toVector(subState.initialPositions.firstPlayerInitialPosition)\r\n\r\n                                                                        if Commander.isCommander(color) then\r\n                                                                            playBoard:_createAllySelector()\r\n                                                                        end\r\n                                                                    else\r\n                                                                        Helper.noPlay(\r\n                                                                            playBoard.content.freighter,\r\n                                                                            playBoard.content.tleilaxToken,\r\n                                                                            playBoard.content.researchToken\r\n                                                                        )\r\n                                                                        Helper.noPhysicsNorPlay(\r\n                                                                            playBoard.content.councilToken,\r\n                                                                            playBoard.content.scoreMarker,\r\n                                                                            playBoard.content.forceMarker\r\n                                                                        )\r\n                                                                    end\r\n\r\n                                                                    local snapZones = {\r\n                                                                        firstPlayerMarkerZone = {\"FirstPlayerMarker\"},\r\n                                                                        drawDeckZone = {\"Imperium\"},\r\n                                                                        leaderZone = {\"Leader\", \"RivalLeader\"},\r\n                                                                        discardZone = {\"Imperium\"},\r\n                                                                    }\r\n                                                                    local snapPoints = {}\r\n                                                                    for name, tags in pairs(snapZones) do\r\n                                                                        local snapPoint = Helper.createRelativeSnapPointFromZone(playBoard.content.board, playBoard.content[name], true, tags)\r\n                                                                        table.insert(snapPoints, snapPoint)\r\n                                                                    end\r\n\r\n                                                                    if not Commander.isCommander(color) then\r\n                                                                        table.insert(snapPoints, {position = playBoard:_newSymmetricBoardPosition(-3.4, 0.2, 0), rotation_snap = true, tags = {\"MuadDibObjectiveToken\"}})\r\n                                                                        table.insert(snapPoints, {position = playBoard:_newSymmetricBoardPosition(-4.8, 0.2, 0), rotation_snap = true, tags = {\"CrysknifeObjectiveToken\"}})\r\n                                                                        table.insert(snapPoints, {position = playBoard:_newSymmetricBoardPosition(-6.2, 0.2, 0), rotation_snap = true, tags = {\"OrnithopterObjectiveToken\"}})\r\n                                                                        table.insert(snapPoints, {position = playBoard:_newSymmetricBoardPosition(-7.6, 0.2, 0), rotation_snap = true, tags = {\"JokerObjectiveToken\"}})\r\n                                                                    end\r\n\r\n                                                                    playBoard.content.board.setSnapPoints(snapPoints)\r\n\r\n                                                                    for _, resourceName in ipairs(PlayBoard.ALL_RESOURCE_NAMES) do\r\n                                                                        local token = playBoard.content[resourceName]\r\n                                                                        if token then\r\n                                                                            local value = subState and subState.resources[resourceName] or 0\r\n                                                                            playBoard[resourceName] = Resource.new(token, color, resourceName, value)\r\n                                                                        end\r\n                                                                    end\r\n                                                                    playBoard.agentCardPark = playBoard:_createAgentCardPark()\r\n                                                                    playBoard.revealCardPark = playBoard:_createRevealCardPark()\r\n                                                                    playBoard.agentPark = playBoard:_createAgentPark(subState == nil)\r\n                                                                    playBoard.spyPark = playBoard:_createSpyPark(subState == nil)\r\n                                                                    if not Commander.isCommander(color) then\r\n                                                                        playBoard.dreadnoughtPark = playBoard:_createDreadnoughtPark(subState == nil)\r\n                                                                        playBoard.supplyPark = playBoard:_createSupplyPark(subState == nil)\r\n                                                                    end\r\n                                                                    playBoard:_generatePlayerScoreboardPositions()\r\n                                                                    playBoard.scorePark = playBoard:_createPlayerScorePark()\r\n                                                                    playBoard.techPark = playBoard:_createTechPark()\r\n\r\n                                                                    Helper.registerEventListener(\"locale\", function ()\r\n                                                                        playBoard:_createButtons()\r\n                                                                    end)\r\n\r\n                                                                    return playBoard\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.setUp(settings, activeOpponents)\r\n                                                                    local sequentialActions = {}\r\n\r\n                                                                    for color, playBoard in pairs(PlayBoard.playBoards) do\r\n                                                                        playBoard:_cleanUp(false, not settings.riseOfIx, not settings.immortality, settings.numberOfPlayers ~= 6)\r\n\r\n                                                                        PlayBoard:_pruneHandsInExcess(playBoard.color, settings.numberOfPlayers <= 4 and settings.horizontalHandLayout)\r\n\r\n                                                                        if settings.numberOfPlayers <= 4 then\r\n                                                                            local offsets\r\n                                                                            if settings.horizontalHandLayout then\r\n                                                                                offsets = {\r\n                                                                                    Green = Vector(0, 0, -7.25),\r\n                                                                                    Yellow = Vector(0, 0, 7.25),\r\n                                                                                    Red = Vector(0, 0, -7.25),\r\n                                                                                    Blue = Vector(0, 0, 7.25),\r\n                                                                                }\r\n                                                                            else\r\n                                                                                offsets = {\r\n                                                                                    Green = Vector(0, 0, -9.25),\r\n                                                                                    Yellow = Vector(0, 0, 9.25),\r\n                                                                                    Red = Vector(0, 0, -9.25),\r\n                                                                                    Blue = Vector(0, 0, 9.25),\r\n                                                                                }\r\n                                                                            end\r\n                                                                            local offset = offsets[color]\r\n                                                                            if offset then\r\n                                                                                playBoard:moveAt(offset, true, settings.horizontalHandLayout)\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        if activeOpponents[color] then\r\n                                                                            playBoard.opponent = activeOpponents[color]\r\n                                                                            if playBoard.opponent ~= \"rival\" then\r\n                                                                                playBoard.opponent = \"human\"\r\n                                                                                if color == \"White\" then\r\n                                                                                    Deck.generateMuadDibStarterDeck(playBoard.content.drawDeckZone).doAfter(Helper.shuffleDeck)\r\n                                                                                elseif color == \"Purple\" then\r\n                                                                                    Deck.generateEmperorStarterDeck(playBoard.content.drawDeckZone).doAfter(Helper.shuffleDeck)\r\n                                                                                else\r\n                                                                                    Deck.generateStarterDeck(playBoard.content.drawDeckZone, settings.immortality, settings.epicMode).doAfter(Helper.shuffleDeck)\r\n                                                                                    Deck.generateStarterDiscard(playBoard.content.discardZone, settings.immortality, settings.epicMode)\r\n                                                                                end\r\n                                                                            else\r\n                                                                                if settings.immortality and not Commander.isCommander(color) then\r\n                                                                                    playBoard.content.researchToken.destruct()\r\n                                                                                    playBoard.content.researchToken = nil\r\n                                                                                end\r\n                                                                            end\r\n\r\n                                                                            if not Commander.isCommander(color) then\r\n                                                                                if settings.numberOfPlayers ~= 4 or settings.goTo11 then\r\n                                                                                    playBoard.content.fourPlayerVictoryToken.destruct()\r\n                                                                                    playBoard.content.fourPlayerVictoryToken = nil\r\n                                                                                end\r\n                                                                                if settings.numberOfPlayers == 6 then\r\n                                                                                    if Commander.isTeamShaddam(color) then\r\n                                                                                        playBoard.content.makerHook.destruct()\r\n                                                                                        playBoard.content.makerHook = nil\r\n                                                                                    end\r\n                                                                                    table.insert(sequentialActions, Helper.partialApply(ScoreBoard.gainVictoryPoint, color, \"ally\", 1))\r\n                                                                                end\r\n                                                                                if settings.numberOfPlayers == 6 or not settings.horizontalHandLayout then\r\n                                                                                    -- Support boards are hidden rectangles used to elevate the hand zones in 4 players configuration.\r\n                                                                                    -- Two of them are partially blocking mouse picking on the bottom Commander selector buttons in 6\r\n                                                                                    -- players configuration however.\r\n                                                                                    playBoard.content.supportBoard.destruct()\r\n                                                                                    playBoard.content.supportBoard = nil\r\n                                                                                end\r\n                                                                            else\r\n                                                                                table.insert(sequentialActions, 1, Helper.partialApply(ScoreBoard.gainVictoryPoint, color, \"commander\", 4))\r\n                                                                            end\r\n\r\n                                                                            playBoard:_createButtons()\r\n\r\n                                                                            Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                                playBoard:_updatePlayerScore()\r\n                                                                            end)\r\n                                                                        else\r\n                                                                            playBoard:_tearDown()\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    -- The score track for VP tokens is fragile and doesn't handle too well the\r\n                                                                    -- token collisions happening when multiples scores are updated at the same\r\n                                                                    -- time.\r\n                                                                    Helper.repeatChainedAction(#sequentialActions, function ()\r\n                                                                        sequentialActions[1]()\r\n                                                                        table.remove(sequentialActions, 1)\r\n                                                                        return Helper.onceTimeElapsed(1)\r\n                                                                    end)\r\n\r\n                                                                    PlayBoard._transientSetUp(settings)\r\n\r\n                                                                    if PlayBoard.tq then\r\n                                                                        local continuation = Helper.createContinuation(\"PlayBoard.setUp\")\r\n                                                                        PlayBoard.tq.submit(continuation.run)\r\n                                                                        return continuation\r\n                                                                    else\r\n                                                                        return nil\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard._transientSetUp(settings)\r\n                                                                    -- I don't like it, but at least things are now explicit.\r\n                                                                    Helper.registerEventListener(\"loaded\", function (moduleName)\r\n                                                                        if moduleName == \"TurnControl\" then\r\n                                                                            for _, playBoard in pairs(PlayBoard._getPlayBoards(true)) do\r\n                                                                                playBoard:_createButtons()\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end)\r\n\r\n                                                                    Helper.registerEventListener(\"phaseStart\", function (phase, firstPlayer)\r\n                                                                        if phase == \"leaderSelection\" or phase == \"roundStart\" then\r\n                                                                            local playBoard = PlayBoard.getPlayBoard(firstPlayer)\r\n                                                                            MainBoard.getFirstPlayerMarker().setPositionSmooth(playBoard.content.firstPlayerInitialPosition, false, false)\r\n                                                                        end\r\n\r\n                                                                        if phase == \"roundStart\" then\r\n\r\n                                                                            if TurnControl.getCurrentRound() == 1 then\r\n                                                                                for _, playBoard in pairs(PlayBoard._getPlayBoards(true)) do\r\n                                                                                    -- Force button creation now that we have all the information to create the Sandworm button.\r\n                                                                                    playBoard:_createButtons()\r\n                                                                                end\r\n                                                                            end\r\n\r\n                                                                            for color, playBoard in pairs(PlayBoard._getPlayBoards(true)) do\r\n                                                                                local cardAmount = PlayBoard.hasTech(color, \"holtzmanEngine\") and 6 or 5\r\n                                                                                playBoard:drawCards(cardAmount)\r\n\r\n                                                                                if PlayBoard.hasTech(color, \"shuttleFleet\") then\r\n                                                                                    playBoard.leader.resources(color, \"solari\", 2)\r\n                                                                                end\r\n\r\n                                                                                -- bloodlines piter round start twisted intrigue draw\r\n                                                                                if PlayBoard.getLeader(color).name == \"bl_Piter\" then\r\n                                                                                    local twistedIntrigueDeck = getObjectFromGUID(\"e13c0b\")\r\n                                                                                    broadcastToAll(I18N(\"piterTwistedGenius\"), color)\r\n                                                                                    twistedIntrigueDeck.deal(1, color)\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        if phase == \"recall\" then\r\n                                                                            for _, playBoard in pairs(PlayBoard._getPlayBoards()) do\r\n                                                                                playBoard:_recall()\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end)\r\n\r\n                                                                    Helper.registerEventListener(\"phaseEnd\", function (phase)\r\n                                                                        if phase == \"leaderSelection\" then\r\n                                                                            for color, playBoard in pairs(PlayBoard._getPlayBoards()) do\r\n                                                                                playBoard.leader.doSetUp(color, settings)\r\n                                                                                playBoard.leader.prepare(color, settings)\r\n                                                                                if Commander.isCommander(color) then\r\n                                                                                    playBoard:_createAllySelector()\r\n                                                                                end\r\n                                                                            end\r\n                                                                        elseif phase == \"endgame\" then\r\n                                                                            MainBoard.getFirstPlayerMarker().destruct()\r\n                                                                        end\r\n\r\n                                                                        for _, playBoard in pairs(PlayBoard._getPlayBoards()) do\r\n                                                                            playBoard:_updateInstructionLabel(nil)\r\n                                                                        end\r\n\r\n                                                                        PlayBoard._setActivePlayer(nil, nil)\r\n                                                                    end)\r\n\r\n                                                                    Helper.registerEventListener(\"playerTurn\", function (phase, color, refreshing)\r\n                                                                        local playBoard = PlayBoard.getPlayBoard(color)\r\n\r\n                                                                        if PlayBoard.isHuman(color) and not refreshing then\r\n                                                                            -- FIXME To naive, won't work for multiple agents in a single turn (weirding way).\r\n                                                                            playBoard.alreadyPlayedCards = Helper.filter(Park.getObjects(playBoard.agentCardPark), function (card)\r\n                                                                                return Types.isImperiumCard(card) or Types.isIntrigueCard(card)\r\n                                                                            end)\r\n                                                                        end\r\n\r\n                                                                        if phase == \"playerTurns\" and Commander.isCommander(color) then\r\n                                                                            local sides = {}\r\n                                                                            for _, agent in ipairs(Park.getObjects(PlayBoard.getAgentPark(color))) do\r\n                                                                                if agent.hasTag(\"left\") then\r\n                                                                                    sides.left = true\r\n                                                                                end\r\n                                                                                if agent.hasTag(\"right\") then\r\n                                                                                    sides.right = true\r\n                                                                                end\r\n                                                                            end\r\n                                                                            if #Helper.getKeys(sides) == 1 then\r\n                                                                                Commander.setActivatedAlly(color, sides.left and Commander.getLeftSeatedAlly(color) or Commander.getRightSeatedAlly(color))\r\n                                                                            else\r\n                                                                                Commander.setActivatedAlly(color, nil)\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        for otherColor, otherPlayBoard in pairs(PlayBoard._getPlayBoards(true)) do\r\n                                                                            local instruction = (playBoard.leader or Action).instruct(phase, color == otherColor) or \"-\"\r\n                                                                            otherPlayBoard:_updateInstructionLabel(instruction)\r\n                                                                        end\r\n\r\n                                                                        PlayBoard._setActivePlayer(phase, color, refreshing)\r\n                                                                    end)\r\n\r\n                                                                    Helper.registerEventListener(\"combatUpdate\", function (forces)\r\n                                                                        PlayBoard.combatPassCountdown = Helper.count(forces, function (color, v)\r\n                                                                            return not PlayBoard.isRival(color) and v > 0\r\n                                                                        end)\r\n                                                                    end)\r\n\r\n                                                                    Helper.registerEventListener(\"agentSent\", function (color, spaceName)\r\n                                                                        if PlayBoard.isHuman(color) then\r\n                                                                            -- Do it after the clean up done in TechMarket.\r\n                                                                            Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                                local cards = PlayBoard.getCardsPlayedThisTurn(color)\r\n                                                                                for _, card in ipairs(cards) do\r\n                                                                                    local cardName = Helper.getID(card)\r\n                                                                                    if cardName == \"appropriate\" then\r\n                                                                                        if InfluenceTrack.hasFriendship(color, \"emperor\") then\r\n                                                                                            TechMarket.registerAcquireTechOption(color, cardName .. \"TechBuyOption\", \"solari\", 0)\r\n                                                                                        end\r\n                                                                                    elseif cardName == \"ixianEngineer\" then\r\n                                                                                        TechMarket.registerAcquireTechOption(color, cardName .. \"TechBuyOption\", \"spice\", 0)\r\n                                                                                    elseif cardName == \"machineCulture\" then\r\n                                                                                        TechMarket.registerAcquireTechOption(color, cardName .. \"TechBuyOption\", \"spice\", 0)\r\n                                                                                        -- FIXME Find some way to push this into Leader.\r\n                                                                                    elseif cardName == \"signetRing\" and PlayBoard.getLeader(color).name == \"rhomburVernius\" then\r\n                                                                                        TechMarket.registerAcquireTechOption(color, \"rhomburVerniusTechBuyOption\", \"spice\", 0)\r\n                                                                                    end\r\n                                                                                end\r\n                                                                            end)\r\n                                                                        end\r\n                                                                    end)\r\n\r\n                                                                    Helper.registerEventListener(\"influence\", function (faction, color, newRank)\r\n                                                                        if PlayBoard.isHuman(color) then\r\n                                                                            local cards = PlayBoard.getCardsPlayedThisTurn(color)\r\n                                                                            for _, card in ipairs(cards) do\r\n                                                                                local cardName = Helper.getID(card)\r\n                                                                                if cardName == \"appropriate\" then\r\n                                                                                    if InfluenceTrack.hasFriendship(color, \"emperor\") then\r\n                                                                                        TechMarket.registerAcquireTechOption(color, cardName .. \"TechBuyOption\", \"solari\", 0)\r\n                                                                                    end\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end)\r\n\r\n                                                                    for _, playBoard in pairs(PlayBoard._getPlayBoards()) do\r\n                                                                        playBoard.content.completedContractBag.createButton({\r\n                                                                            click_function = Helper.registerGlobalCallback(),\r\n                                                                            label = \"\",\r\n                                                                            -- bloodlines changed from 1 to 0.9\r\n                                                                            -- position = Vector(0, 0.1, 1),\r\n                                                                            position = Vector(0, 0.1, 0.9),\r\n                                                                            width = 0,\r\n                                                                            height = 0,\r\n                                                                            font_size = 400,\r\n                                                                            font_color = \"White\"\r\n                                                                        })\r\n                                                                        PlayBoard._updateBagCounts(playBoard.content.completedContractBag)\r\n\r\n                                                                        local InstructionTextAnchorPosition = playBoard.content.board.getPosition() + playBoard:_newSymmetricBoardPosition(8, -0.5, 3.5)\r\n                                                                        Helper.createTransientAnchor(\"InstructionTextAnchor\", InstructionTextAnchorPosition).doAfter(function (anchor)\r\n                                                                            playBoard.instructionTextAnchor = anchor\r\n                                                                        end)\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_updateInstructionLabel(instruction)\r\n                                                                    if self.instructionTextAnchor then\r\n                                                                        Helper.clearButtons(self.instructionTextAnchor)\r\n                                                                        if instruction then\r\n                                                                            Helper.createAbsoluteButtonWithRoundness(self.instructionTextAnchor, 1, {\r\n                                                                                click_function = Helper.registerGlobalCallback(),\r\n                                                                                label = instruction,\r\n                                                                                position = self.instructionTextAnchor.getPosition() + Vector(0, 0.7, 0),\r\n                                                                                width = 0,\r\n                                                                                height = 0,\r\n                                                                                font_size = 200,\r\n                                                                                scale = Vector(1, 1, 1),\r\n                                                                                color = {0, 0, 0, 0.90},\r\n                                                                            font_color = Color.fromString(\"White\")})\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_recall()\r\n                                                                    local minimicFilm = PlayBoard.hasTech(self.color, \"minimicFilm\")\r\n                                                                    -- bloodlines tech self destroying messages\r\n                                                                    local bl_SelfDestroyingMessages = PlayBoard.hasTech(self.color, \"bl_SelfDestroyingMessages\")\r\n                                                                    -- bloodlines y'rkoon persuasion navigation card (tagged as tech)\r\n                                                                    local bl_YrkoonPersuasion = PlayBoard.hasTech(self.color, \"bl_YrkoonPersuasion\")\r\n                                                                    local restrictedOrdnance = PlayBoard.hasTech(self.color, \"restrictedOrdnance\")\r\n                                                                    local councilSeat = PlayBoard.hasHighCouncilSeat(self.color)\r\n                                                                    local swordmasterBonus = TurnControl.getPlayerCount() == 6 and PlayBoard.hasSwordmaster(self.color)\r\n\r\n                                                                    self.revealed = false\r\n                                                                    self.persuasion:set((councilSeat and 2 or 0) + (minimicFilm and 1 or 0) + (bl_SelfDestroyingMessages and 1 or 0) + (bl_YrkoonPersuasion and 1 or 0))\r\n                                                                    self.strength:set(((restrictedOrdnance and councilSeat) and 4 or 0) + (swordmasterBonus and 2 or 0))\r\n\r\n                                                                    self:_createButtons()\r\n\r\n                                                                    local stackHeight = 0\r\n                                                                    local nextDiscardPosition = function ()\r\n                                                                        stackHeight = stackHeight + 1\r\n                                                                        return self.content.discardZone.getPosition() + Vector(0, stackHeight * 0.5, 0)\r\n                                                                    end\r\n\r\n                                                                    -- Send all played cards to the discard, save those which shouldn't.\r\n                                                                    Helper.forEach(Helper.filter(Park.getObjects(self.agentCardPark), Types.isImperiumCard), function (_, card)\r\n                                                                        local cardName = Helper.getID(card)\r\n                                                                        if cardName == \"foldspace\" then\r\n                                                                            --card.setPosition(Reserve.foldspaceSlotZone.getPosition())\r\n                                                                            self:trash(card)\r\n                                                                        elseif Helper.isElementOf(cardName, {\"seekAllies\", \"emperorSeekAllies\", \"muadDibSeekAllies\", \"powerPlay\", \"treachery\", \"dangerousRhetoric\"}) then\r\n                                                                            self:trash(card)\r\n                                                                        else\r\n                                                                            card.setPosition(nextDiscardPosition())\r\n                                                                        end\r\n                                                                    end)\r\n\r\n                                                                    -- Send all revealed cards to the discard.\r\n                                                                    Helper.forEach(Helper.filter(Park.getObjects(self.revealCardPark), Types.isImperiumCard), function (i, card)\r\n                                                                        card.setPosition(nextDiscardPosition())\r\n                                                                    end)\r\n\r\n                                                                    -- Send all played intrigues to their discard.\r\n                                                                    local playedIntrigueCards = Helper.concatTables(\r\n                                                                        Helper.filter(Park.getObjects(self.agentCardPark), Types.isIntrigueCard),\r\n                                                                    Helper.filter(Park.getObjects(self.revealCardPark), Types.isIntrigueCard))\r\n                                                                    Helper.forEach(playedIntrigueCards, function (i, card)\r\n                                                                        Intrigue.discard(card)\r\n                                                                    end)\r\n\r\n                                                                    -- Flip any used tech.\r\n                                                                    for _, techTile in ipairs(Park.getObjects(self.techPark)) do\r\n                                                                        if Types.isTech(techTile) and techTile.is_face_down then\r\n                                                                            techTile.flip()\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard._setActivePlayer(phase, color, refreshing)\r\n                                                                    local indexedColors = {\"Green\", \"Yellow\", \"Blue\", \"Red\", \"White\", \"Purple\"}\r\n                                                                    for i, otherColor in ipairs(indexedColors) do\r\n                                                                        local playBoard = PlayBoard.playBoards[otherColor]\r\n                                                                        if playBoard then\r\n                                                                            local effectIndex = 0 -- black index (no color actually)\r\n                                                                            if otherColor == color then\r\n                                                                                effectIndex = i\r\n                                                                                if playBoard.opponent == \"rival\" and not refreshing then\r\n                                                                                    Hagal.activate(phase, color)\r\n                                                                                end\r\n                                                                            else\r\n                                                                                -- As stated in the rule, reset swords after a reveal for non-combatants.\r\n                                                                                if not refreshing\r\n                                                                                    and TurnControl.getPlayerCount() == 6\r\n                                                                                    and not Commander.isCommander(otherColor)\r\n                                                                                    and playBoard.revealed\r\n                                                                                    and not Combat.isInCombat(otherColor)\r\n                                                                                    then\r\n                                                                                    playBoard.strength:set(0)\r\n                                                                                end\r\n                                                                            end\r\n                                                                            playBoard.content.colorband.setColorTint(effectIndex > 0 and indexedColors[effectIndex] or \"Black\")\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    if phase ~= \"leaderSelection\" then\r\n                                                                        PlayBoard._updateControlButtons()\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard._updateControlButtons()\r\n                                                                    for color, playBoard in pairs(PlayBoard._getPlayBoards()) do\r\n                                                                        if color == TurnControl.getCurrentPlayer() then\r\n                                                                            local player = Helper.findPlayerByColor(color)\r\n                                                                            if player and player.seated then\r\n                                                                                playBoard:_createEndOfTurnButton()\r\n                                                                            else\r\n                                                                                playBoard:_createTakePlaceButton()\r\n                                                                            end\r\n                                                                        elseif TurnControl.isHotSeatEnabled() then\r\n                                                                            playBoard:_createTakePlaceButton()\r\n                                                                        else\r\n                                                                            Helper.clearButtons(playBoard.content.endTurnButton)\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.createEndOfTurnButton(color)\r\n                                                                    PlayBoard.playBoards[color]:_createEndOfTurnButton()\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createEndOfTurnButton()\r\n                                                                    Helper.clearButtons(self.content.endTurnButton)\r\n                                                                    local action = function ()\r\n                                                                        self.content.endTurnButton.AssetBundle.playTriggerEffect(0)\r\n                                                                        TurnControl.endOfTurn()\r\n                                                                        Helper.clearButtons(self.content.endTurnButton)\r\n                                                                    end\r\n                                                                    local callback = self:_createExclusiveCallback(action)\r\n                                                                    self.content.endTurnButton.createButton({\r\n                                                                        click_function = callback,\r\n                                                                        position = Vector(0, 0.6, 0),\r\n                                                                        label = I18N(\"endTurn\"),\r\n                                                                        width = 1500,\r\n                                                                        height = 1500,\r\n                                                                        color = {0, 0, 0, 0},\r\n                                                                        font_size = 450,\r\n                                                                    font_color = Helper.concatTables(PlayBoard._getTextColor(self.color), {100})})\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createTakePlaceButton()\r\n                                                                    Helper.clearButtons(self.content.endTurnButton)\r\n                                                                    self.content.endTurnButton.createButton({\r\n                                                                        click_function = self:_createSharedCallback(function (_, color, _)\r\n                                                                            self.content.endTurnButton.AssetBundle.playTriggerEffect(0)\r\n                                                                            local player = Helper.findPlayerByColor(color)\r\n                                                                            if player then\r\n                                                                                player.changeColor(self.color)\r\n                                                                                Helper.onceFramesPassed(1).doAfter(PlayBoard._updateControlButtons)\r\n                                                                            end\r\n                                                                        end),\r\n                                                                        position = Vector(0, 0.6, 0),\r\n                                                                        label = I18N(\"takePlace\"),\r\n                                                                        width = 1500,\r\n                                                                        height = 1500,\r\n                                                                        color = {0, 0, 0, 0},\r\n                                                                        font_size = 450,\r\n                                                                    font_color = Helper.concatTables(PlayBoard._getTextColor(self.color), {100})})\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.acceptTurn(phase, color)\r\n                                                                    assert(color)\r\n                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                    local accepted = false\r\n\r\n                                                                    if phase == 'leaderSelection' then\r\n                                                                        accepted = playBoard.leader == nil\r\n                                                                    elseif phase == 'gameStart' then\r\n                                                                        accepted = playBoard.lastPhase ~= phase and playBoard.leader.instruct(phase, color)\r\n                                                                    elseif phase == 'roundStart' then\r\n                                                                        accepted = playBoard.lastPhase ~= phase and playBoard.leader.instruct(phase, color)\r\n                                                                    elseif phase == 'playerTurns' then\r\n                                                                        accepted = PlayBoard.couldSendAgentOrReveal(color)\r\n                                                                    elseif phase == 'combat' then\r\n                                                                        if Combat.isInCombat(color) and Combat.isFormalCombatPhaseEnabled() then\r\n                                                                            accepted = PlayBoard.combatPassCountdown > 0 and not PlayBoard.isRival(color) and #PlayBoard._getPotentialCombatIntrigues(color) > 0\r\n                                                                            PlayBoard.combatPassCountdown = PlayBoard.combatPassCountdown - 1\r\n                                                                        end\r\n                                                                    elseif phase == 'combatEnd' then\r\n                                                                        if playBoard.lastPhase ~= phase then\r\n                                                                            accepted = true\r\n                                                                            -- Rival collect their reward their own way.\r\n                                                                            if PlayBoard.isHuman(color) then\r\n                                                                                Helper.onceFramesPassed(1).doAfter(Helper.partialApply(PlayBoard.collectReward, color))\r\n                                                                            end\r\n                                                                        else\r\n                                                                            return false\r\n                                                                        end\r\n                                                                    elseif phase == 'makers' then\r\n                                                                        accepted = false\r\n                                                                    elseif phase == 'recall' then\r\n                                                                        accepted = false\r\n                                                                    elseif phase == 'endgame' then\r\n                                                                        accepted = playBoard.lastPhase ~= phase\r\n                                                                    else\r\n                                                                        accepted = playBoard.lastPhase ~= phase\r\n                                                                    end\r\n\r\n                                                                    playBoard.lastPhase = phase\r\n                                                                    return accepted\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.withLeader(action)\r\n                                                                    return function (source, color, ...)\r\n                                                                        local validPlayer = Helper.isElementOf(color, PlayBoard.getActivePlayBoardColors())\r\n                                                                        if validPlayer then\r\n                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                            if leader then\r\n                                                                                if not Commander.isCommander(color) or Commander.getActivatedAlly(color) then\r\n                                                                                    -- Replace the source by the leader.\r\n                                                                                    action(leader, color, ...)\r\n                                                                                else\r\n                                                                                    Dialog.broadcastToColor(I18N('noAlly'), color, \"Purple\")\r\n                                                                                end\r\n                                                                            else\r\n                                                                                Dialog.broadcastToColor(I18N('noLeader'), color, \"Purple\")\r\n                                                                            end\r\n                                                                        else\r\n                                                                            Dialog.broadcastToColor(I18N('noTouch'), color, \"Purple\")\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.collectReward(color)\r\n                                                                    local conflictName = Combat.getCurrentConflictName()\r\n                                                                    local rank = Combat.getRank(color).value\r\n                                                                    local hasSandworms = Combat.hasSandworms(color)\r\n                                                                    ConflictCard.collectReward(color, conflictName, rank, hasSandworms).doAfter(function ()\r\n                                                                        if rank == 1 then\r\n                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                            if PlayBoard.hasTech(color, \"windtraps\") then\r\n                                                                                leader.resources(color, \"water\", 1)\r\n                                                                            end\r\n                                                                            -- bloodlines tech planetary array\r\n                                                                            if PlayBoard.hasTech(color, \"bl_PlanetaryArray\") then\r\n                                                                                leader.drawImperiumCards(color, 1)\r\n                                                                            end\r\n                                                                            local dreadnoughts = Combat.getDreadnoughtsInConflict(color)\r\n                                                                            if #dreadnoughts > 0 then\r\n                                                                                Dialog.showInfoDialog(color, I18N(\"dreadnoughtMandatoryOccupation\"))\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.getPlayBoard(color)\r\n                                                                    assert(color)\r\n                                                                    assert(#Helper.getKeys(PlayBoard.playBoards) > 0, \"No playBoard at all: too soon!\")\r\n                                                                    local playBoard = PlayBoard.playBoards[color]\r\n                                                                    assert(playBoard, \"No playBoard for color \" .. tostring(color))\r\n                                                                    return playBoard\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard._getPlayBoards(filterOutRival)\r\n                                                                    assert(#Helper.getKeys(PlayBoard.playBoards) > 0, \"No playBoard at all: too soon!\")\r\n                                                                    local filteredPlayBoards = {}\r\n                                                                    for color, playBoard in pairs(PlayBoard.playBoards) do\r\n                                                                        if playBoard.opponent and (not filterOutRival or playBoard.opponent ~= \"rival\") then\r\n                                                                            filteredPlayBoards[color] = playBoard\r\n                                                                        end\r\n                                                                    end\r\n                                                                    assert(#Helper.getKeys(filteredPlayBoards) > 0, \"No playBoard at all in the end: still too soon! (Lazy PlayBoard setUp?)\")\r\n                                                                    return filteredPlayBoards\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.getActivePlayBoardColors(filterOutRival)\r\n                                                                    return Helper.getKeys(PlayBoard._getPlayBoards(filterOutRival))\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard._getBoard(color)\r\n                                                                    return PlayBoard.getContent(color).board\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createAgentCardPark()\r\n                                                                    local origin = PlayBoard.generatePosition(self, \"symmetric\", Vector(-9.5, 0.2, -3.2))\r\n                                                                    local step = PlayBoard.isLeft(self.color) and - 2.5 or 2.5\r\n\r\n                                                                    local slots = {}\r\n                                                                    for i = 0, 5 do\r\n                                                                        table.insert(slots, origin + Vector(i * step, 0, 0))\r\n                                                                    end\r\n\r\n                                                                    local park = Park.createCommonPark({\"Imperium\", \"Intrigue\"}, slots, Vector(2.4, 0.5, 3.2), Vector(0, 180, 0), true)\r\n                                                                    park.tagUnion = true\r\n                                                                    park.smooth = false\r\n                                                                    return park\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createRevealCardPark()\r\n                                                                    local origin = PlayBoard.generatePosition(self, \"symmetric\", Vector(-9.5, 0.2, -3.2))\r\n                                                                    local step = PlayBoard.isLeft(self.color) and - 2.5 or 2.5\r\n\r\n                                                                    local bottomSlots = {}\r\n                                                                    for i = 0, 8 do\r\n                                                                        table.insert(bottomSlots, origin + Vector(i * step, 0, -4))\r\n                                                                    end\r\n                                                                    local bottomZone = Park.createTransientBoundingZone(0, Vector(2.4, 0.5, 3.2), bottomSlots)\r\n                                                                    local topSlots = {}\r\n                                                                    for i = 8, 6, -1 do\r\n                                                                        table.insert(topSlots, origin + Vector(i * step, 0, 0))\r\n                                                                    end\r\n                                                                    local topZone = Park.createTransientBoundingZone(0, Vector(2.4, 0.5, 3.2), topSlots)\r\n\r\n                                                                    local slots = Helper.concatTables(bottomSlots, topSlots)\r\n\r\n                                                                    local park = Park.createCommonPark({\"Imperium\", \"Intrigue\"}, slots, nil, Vector(0, 180, 0), true, {bottomZone, topZone})\r\n                                                                    park.tagUnion = true\r\n                                                                    park.smooth = false\r\n                                                                    return park\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createAgentPark(firstTime)\r\n                                                                    -- Extrapolate the other positions (for the swordmaster)\r\n                                                                    -- from the positions of the two existing agents.\r\n                                                                    assert(#self.content.agentInitialPositions == 2)\r\n                                                                    -- Copy does matter (since move update the positions).\r\n                                                                    local p1 = self.content.agentInitialPositions[1]:copy()\r\n                                                                    local p2 = self.content.agentInitialPositions[2]:copy()\r\n                                                                    local slots = {\r\n                                                                        p1,\r\n                                                                        p2,\r\n                                                                        p2 + (p2 - p1),\r\n                                                                    }\r\n\r\n                                                                    local park = Park.createCommonPark({\"Agent\"}, slots, Vector(0.75, 3, 0.75))\r\n                                                                    -- Helping psychorigid players migrate from immorality.\r\n                                                                    park.locked = true\r\n                                                                    if firstTime then\r\n                                                                        for i, agent in ipairs(self.content.agents) do\r\n                                                                            agent.setPosition(slots[i])\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return park\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createSpyPark(firstTime)\r\n                                                                    assert(#self.content.spyInitialPositions == 3)\r\n                                                                    local slots = Helper.mapValues(self.content.spyInitialPositions, function (slot)\r\n                                                                        return slot:copy()\r\n                                                                    end)\r\n                                                                    local park = Park.createCommonPark({\"Spy\"}, slots, Vector(0.75, 1, 0.75))\r\n                                                                    if firstTime then\r\n                                                                        for i, spy in ipairs(self.content.spies) do\r\n                                                                            spy.setPosition(slots[i])\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return park\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createDreadnoughtPark(firstTime)\r\n                                                                    -- bloodlines sardaukar commanders changed to 7\r\n                                                                    assert(#self.content.dreadnoughtInitialPositions == 7)\r\n                                                                    local slots = Helper.mapValues(self.content.dreadnoughtInitialPositions, function (slot)\r\n                                                                        return slot:copy()\r\n                                                                    end)\r\n                                                                    -- bloodlines sardaukar commanders added tag to snaps and park.tagUnion = true\r\n                                                                    local park = Park.createCommonPark({\"Dreadnought\", \"SardaukarCommander\"}, slots, Vector(1, 2, 1))\r\n                                                                    park.tagUnion = true\r\n                                                                    if firstTime then\r\n                                                                        for i, dreadnought in ipairs(self.content.dreadnoughts) do\r\n                                                                            dreadnought.setPosition(self.content.dreadnoughtInitialPositions[i])\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return park\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createSupplyPark(firstTime)\r\n                                                                    local origin = PlayBoard.generatePosition(self, \"symmetric\", Vector(0.5, 0, 2))\r\n\r\n                                                                    local allSlots = {}\r\n                                                                    local slots = {}\r\n                                                                    for i = 1, 4 do\r\n                                                                        for j = 1, 4 do\r\n                                                                            local x = (i - 2.5) * 0.5\r\n                                                                            local z = (j - 2.5) * 0.5\r\n                                                                            local slot = Vector(x, 0.37, z):rotateOver('y', -45) + origin\r\n                                                                            table.insert(allSlots, slot)\r\n                                                                            if i > 2 or j > 2 then\r\n                                                                                table.insert(slots, slot)\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    local supplyZone = Park.createTransientBoundingZone(45, Vector(0.5, 0.5, 0.5), allSlots)\r\n\r\n                                                                    if firstTime then\r\n                                                                        for i, troop in ipairs(self.content.troops) do\r\n                                                                            troop.setLock(true)\r\n                                                                            troop.setPosition(slots[i])\r\n                                                                            troop.setRotation(Vector(0, 45, 0))\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    return Park.createPark(\r\n                                                                        \"Supply\" .. self.color,\r\n                                                                        slots,\r\n                                                                        Vector(0, -45, 0),\r\n                                                                        {supplyZone},\r\n                                                                        {\"Troop\", self.color},\r\n                                                                        nil,\r\n                                                                        true,\r\n                                                                    true)\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createTechPark()\r\n                                                                    local origin = PlayBoard.generatePosition(self, \"symmetric\", Vector(-0.45, 0, 3.6))\r\n                                                                    local color = self.color\r\n                                                                    local slots = {}\r\n\r\n                                                                    for h = 1, 3 do\r\n                                                                        -- bloodlines tech park 4 columns\r\n                                                                        for i = 1, 4 do\r\n                                                                            for j = 3, 1, -1 do\r\n                                                                                local x\r\n                                                                                if i == 1 or i == 2 then\r\n                                                                                    x = (i - 1.5) * 3 + 6\r\n                                                                                elseif i == 3 then\r\n                                                                                    -- bloodlines sardaukar commander skills 3rd column reduced spacing\r\n                                                                                    x = (i - 1.5) * 2.48 + 6\r\n                                                                                else\r\n                                                                                    -- bloodlines sardaukar commander skills 4th column reduced spacing\r\n                                                                                    x = (i - 1.5) * 2.16 + 6\r\n                                                                                end\r\n\r\n                                                                                if PlayBoard.isLeft(color) then\r\n                                                                                    x = -x\r\n                                                                                end\r\n\r\n                                                                                local z = (j - 2) * 2 + 0.4\r\n                                                                                local slot = Vector(x, 0.5 * h - 0.3, z) + origin\r\n                                                                                table.insert(slots, slot)\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    -- bloodlines sardaukar commander skills added tag\r\n                                                                    local park = Park.createCommonPark({\"Tech\", \"Contract\", \"SardaukarSkill\"}, slots, Vector(3, 1, 2), nil)\r\n                                                                    park.tagUnion = true\r\n                                                                    return park\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_generatePlayerScoreboardPositions()\r\n                                                                    assert(self.content.scoreMarker, self.color .. \": no score marker!\")\r\n                                                                    local origin = self.content.scoreMarkerInitialPosition\r\n\r\n                                                                    -- Avoid collision between markers by giving a different height to each.\r\n                                                                    local heights = {\r\n                                                                        Green = 1,\r\n                                                                        Yellow = 1.5,\r\n                                                                        Blue = 2,\r\n                                                                        Red = 2.5,\r\n                                                                        White = 3,\r\n                                                                        Purple = 3.5,\r\n                                                                    }\r\n\r\n                                                                    self.scorePositions = {}\r\n                                                                    for i = 0, 14 do\r\n                                                                        self.scorePositions[i] = {\r\n                                                                            origin.x,\r\n                                                                            3 + heights[self.color],\r\n                                                                            origin.z + i * 1.185\r\n                                                                        }\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createPlayerScorePark()\r\n                                                                    local origin = self:_newSymmetricBoardPosition(-11.2, 0.20, -8.10) + self.content.board.getPosition()\r\n\r\n                                                                    local direction = 1\r\n                                                                    if PlayBoard.isLeft(self.color) then\r\n                                                                        direction = -1\r\n                                                                    end\r\n\r\n                                                                    local slots = {}\r\n                                                                    for i = 1, 18 do\r\n                                                                        slots[i] = Vector(\r\n                                                                            origin.x + (i - 1) * 1.075 * direction,\r\n                                                                            origin.y,\r\n                                                                        origin.z)\r\n                                                                    end\r\n\r\n                                                                    return Park.createCommonPark({\"VictoryPointToken\"}, slots, Vector(1, 0.2, 1), Vector(0, 180, 0))\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_updatePlayerScore()\r\n                                                                    if self.content.scoreMarker then\r\n                                                                        local rectifiedScore = self:getScore()\r\n                                                                        rectifiedScore = rectifiedScore > 13 and rectifiedScore - 10 or rectifiedScore\r\n                                                                        local scoreMarker = self.content.scoreMarker\r\n                                                                        scoreMarker.setLock(false)\r\n                                                                        scoreMarker.setPositionSmooth(self.scorePositions[rectifiedScore])\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.onObjectEnterZone(zone, object)\r\n                                                                    for color, playBoard in pairs(PlayBoard.playBoards) do\r\n                                                                        if playBoard.opponent and playBoard.scorePark then\r\n                                                                            if Helper.isElementOf(zone, Park.getZones(playBoard.scorePark)) then\r\n                                                                                if Types.isVictoryPointToken(object) then\r\n                                                                                    playBoard:_updatePlayerScore()\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.onObjectLeaveZone(zone, object)\r\n                                                                    for _, playBoard in pairs(PlayBoard.playBoards) do\r\n                                                                        if playBoard.opponent and playBoard.scorePark then\r\n                                                                            if Helper.isElementOf(zone, Park.getZones(playBoard.scorePark)) then\r\n                                                                                if Types.isVictoryPointToken(object) then\r\n                                                                                    playBoard:_updatePlayerScore()\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_tearDown()\r\n                                                                    self:_cleanUp(true, true, true, true, true)\r\n                                                                    PlayBoard.playBoards[self.color] = nil\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_cleanUp(base, ix, immortality, teamMode, full)\r\n                                                                    local content = self.content\r\n\r\n                                                                    local toBeRemoved = {}\r\n\r\n                                                                    local collect = function (childName)\r\n                                                                        local child = content[childName]\r\n                                                                        if child then\r\n                                                                            if type(child) == \"table\" then\r\n                                                                                for _, leafChild in ipairs(child) do\r\n                                                                                    table.insert(toBeRemoved, leafChild)\r\n                                                                                end\r\n                                                                            else\r\n                                                                                table.insert(toBeRemoved, child)\r\n                                                                            end\r\n                                                                            content[childName] = nil\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    if base then\r\n                                                                        collect(\"councilToken\")\r\n                                                                        collect(\"scoreMarker\")\r\n                                                                        collect(\"endTurnButton\")\r\n                                                                        collect(\"drawDeckZone\")\r\n                                                                        collect(\"leaderZone\")\r\n                                                                        collect(\"discardZone\")\r\n                                                                        collect(\"firstPlayerMarkerZone\")\r\n\r\n                                                                        collect(\"spice\")\r\n                                                                        collect(\"solari\")\r\n                                                                        collect(\"water\")\r\n                                                                        collect(\"strength\")\r\n                                                                        collect(\"persuasion\")\r\n                                                                        collect(\"trash\")\r\n                                                                        collect(\"completedContractBag\")\r\n\r\n                                                                        collect(\"agents\")\r\n                                                                        collect(\"swordmaster\")\r\n                                                                        collect(\"swordmasterBonusToken\")\r\n                                                                        collect(\"spies\")\r\n\r\n                                                                        if not Commander.isCommander(self.color) then\r\n                                                                            collect(\"controlMarkerBag\")\r\n                                                                            collect(\"forceMarker\")\r\n                                                                            collect(\"fourPlayerVictoryToken\")\r\n                                                                            collect(\"troops\")\r\n                                                                            collect(\"makerHook\")\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    if teamMode then\r\n                                                                        collect(\"swordmasterBonusToken\")\r\n                                                                    end\r\n\r\n                                                                    if ix then\r\n                                                                        if not Commander.isCommander(self.color) then\r\n                                                                            collect(\"dreadnoughts\")\r\n                                                                            collect(\"freighter\")\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    if immortality then\r\n                                                                        if not Commander.isCommander(self.color) then\r\n                                                                            collect(\"tleilaxToken\")\r\n                                                                            collect(\"researchToken\")\r\n                                                                        end\r\n                                                                        collect(\"atomicsToken\")\r\n                                                                    end\r\n\r\n                                                                    if full then\r\n                                                                        self:_clearButtons()\r\n\r\n                                                                        if Commander.isCommander(self.color) then\r\n                                                                            collect(\"board\")\r\n                                                                            collect(\"colorband\")\r\n\r\n                                                                            local parkNames = {\r\n                                                                                \"agentCardPark\",\r\n                                                                                \"revealCardPark\",\r\n                                                                                \"agentPark\",\r\n                                                                                \"spyPark\",\r\n                                                                                \"techPark\",\r\n                                                                                \"scorePark\",\r\n                                                                            }\r\n\r\n                                                                            for _, parkName in ipairs(parkNames) do\r\n                                                                                local park = self[parkName]\r\n                                                                                self[parkName] = nil\r\n                                                                                if park then\r\n                                                                                    table.insert(toBeRemoved, park.anchor)\r\n                                                                                    for _, zone in ipairs(Park.getZones(park)) do\r\n                                                                                        table.insert(toBeRemoved, zone)\r\n                                                                                    end\r\n                                                                                end\r\n                                                                            end\r\n\r\n                                                                            local handTransform = Player[self.color].getHandTransform()\r\n                                                                            if handTransform then\r\n                                                                                for _, hand in ipairs(Hands.getHands()) do\r\n                                                                                    if hand.getPosition() == handTransform.position then\r\n                                                                                        hand.destruct()\r\n                                                                                        break\r\n                                                                                    end\r\n                                                                                end\r\n                                                                            end\r\n\r\n                                                                            -- Only remove the commander's influence tokens since they are on their own boards.\r\n                                                                            for _, object in ipairs(getObjects()) do\r\n                                                                                if object.hasTag(\"InfluenceTokens\") and object.hasTag(self.color) then\r\n                                                                                    table.insert(toBeRemoved, object)\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    for _, object in ipairs(toBeRemoved) do\r\n                                                                        assert(object)\r\n                                                                        object.interactable = true\r\n                                                                        object.destruct()\r\n                                                                    end\r\n\r\n                                                                    content = {}\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard.findBoardColor(board)\r\n                                                                    for color, _ in pairs(PlayBoard.playBoards) do\r\n                                                                        if PlayBoard._getBoard(color) == board then\r\n                                                                            return color\r\n                                                                        end\r\n                                                                    end\r\n                                                                    return nil\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createExclusiveCallback(innerCallback)\r\n                                                                    return Helper.registerGlobalCallback(function (object, color, altClick)\r\n                                                                        if self.leader and self.color == color or PlayBoard.isRival(self.color) or TurnControl.isHotSeatEnabled() then\r\n                                                                            if not self.buttonsDisabled then\r\n                                                                                self.buttonsDisabled = true\r\n                                                                                Helper.onceTimeElapsed(0.5).doAfter(function ()\r\n                                                                                    self.buttonsDisabled = false\r\n                                                                                end)\r\n                                                                                innerCallback(object, self.color, altClick)\r\n                                                                            end\r\n                                                                        else\r\n                                                                            Dialog.broadcastToColor(I18N('noTouch'), color, \"Purple\")\r\n                                                                        end\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createSharedCallback(innerCallback)\r\n                                                                    return Helper.registerGlobalCallback(function (object, color, altClick)\r\n                                                                        local legitimateColors = Helper.mapValues(\r\n                                                                            TurnControl.getLegitimatePlayers(self.color),\r\n                                                                        Helper.field(\"color\"))\r\n                                                                        if Helper.isElementOf(color, legitimateColors) then\r\n                                                                            if not self.buttonsDisabled then\r\n                                                                                self.buttonsDisabled = true\r\n                                                                                Helper.onceTimeElapsed(0.5).doAfter(function ()\r\n                                                                                    self.buttonsDisabled = false\r\n                                                                                end)\r\n                                                                                innerCallback(object, color, altClick)\r\n                                                                            end\r\n                                                                        else\r\n                                                                            Dialog.broadcastToColor(I18N('noTouch'), color, \"Purple\")\r\n                                                                        end\r\n                                                                    end)\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_clearButtons()\r\n                                                                    Helper.clearButtons(self.content.board)\r\n                                                                    if self.content.atomicsToken then\r\n                                                                        Helper.clearButtons(self.content.atomicsToken)\r\n                                                                    end\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard._getTextColor(color)\r\n                                                                    local fontColor = {0.9, 0.9, 0.9}\r\n                                                                    if color == \"Green\" or color == \"Yellow\" or color == \"White\" then\r\n                                                                        fontColor = {0.1, 0.1, 0.1}\r\n                                                                    end\r\n                                                                    return fontColor\r\n                                                                end\r\n\r\n                                                                ---\r\n                                                                function PlayBoard:_createButtons()\r\n                                                                    self:_clearButtons()\r\n\r\n                                                                    local chromae = {\r\n                                                                        Red = \"Red\",\r\n                                                                        Blue = \"Blue\",\r\n                                                                        Green = \"Green\",\r\n                                                                        Yellow = \"Yellow\",\r\n                                                                        White = \"White\",\r\n                                                                        Purple = \"Purple\",\r\n                                                                    }\r\n                                                                    local chroma = chromae[self.color]\r\n\r\n                                                                    local fontColor = PlayBoard._getTextColor(self.color)\r\n\r\n                                                                    local board = self.content.board\r\n\r\n                                                                    if TurnControl.getCurrentRound() > 0 then\r\n                                                                        board.createButton({\r\n                                                                            click_function = self:_createExclusiveCallback(function (_, _, altClick)\r\n                                                                                if PlayBoard.hasMakerHook(self.color) then\r\n                                                                                    -- bloodlines liet sandworm button\r\n                                                                                    if PlayBoard.getLeader(self.color).name == \"bl_Liet\" then\r\n                                                                                        broadcastToAll(I18N(\"lietHatesTheMaker\"), self.color)\r\n                                                                                        self.leader.resources(self.color, \"spice\", 1)\r\n                                                                                        self.leader.drawIntrigues(self.color, 1)\r\n                                                                                    else\r\n                                                                                        Combat.callSandworm(self.color, altClick and - 1 or 1)\r\n                                                                                    end\r\n                                                                                else\r\n                                                                                    -- TODO Confirmation popup?\r\n                                                                                    Combat.callSandworm(self.color, altClick and - 1 or 1)\r\n                                                                                end\r\n                                                                            end),\r\n                                                                            label = I18N(\"sandwormButton\"),\r\n                                                                            position = self:_newSymmetricBoardPosition(-10.4, 0.2, 4),\r\n                                                                            rotation = self:_newSymmetricBoardRotation(0, 0, 0),\r\n                                                                            width = 700,\r\n                                                                            height = 400,\r\n                                                                            font_size = 120,\r\n                                                                            color = chroma,\r\n                                                                            font_color = fontColor\r\n                                                                        })\r\n\r\n                                                                        -- bloodlines sardaukar commander recruit button\r\n                                                                        board.createButton({\r\n                                                                            click_function = self:_createExclusiveCallback(function (_, _, altClick)\r\n                                                                                local garrisonPark = Combat.dreadnoughtParks[self.color]\r\n                                                                                local playerAreaPark = PlayBoard.getDreadnoughtPark(self.color)\r\n\r\n                                                                                if altClick then\r\n                                                                                    local commanderFound = false\r\n                                                                                    -- move sardaukar commanders from garrison to player area in player area on alt-click\r\n                                                                                    if PlayBoard.hasTech(self.color, \"bl_SardaukarHighCommand\") then\r\n                                                                                        for _, object in ipairs(Park.getObjects(garrisonPark)) do\r\n                                                                                            if Types.isUnit(object, self.color) then\r\n                                                                                                if Types.isSardaukarCommander(object, self.color) then\r\n                                                                                                    if not commanderFound then\r\n                                                                                                        Park.putObject(object, playerAreaPark)\r\n                                                                                                        broadcastToAll(I18N(\"undoSupplySardaukarCommander\"), self.color)\r\n                                                                                                        self.leader.resources(self.color, \"solari\", 1)\r\n                                                                                                        commanderFound = true\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n                                                                                        end\r\n                                                                                    else\r\n                                                                                        for _, object in ipairs(Park.getObjects(garrisonPark)) do\r\n                                                                                            if Types.isUnit(object, self.color) then\r\n                                                                                                if Types.isSardaukarCommander(object, self.color) then\r\n                                                                                                    if not commanderFound then\r\n                                                                                                        Park.putObject(object, playerAreaPark)\r\n                                                                                                        broadcastToAll(I18N(\"undoSupplySardaukarCommander\"), self.color)\r\n                                                                                                        self.leader.resources(self.color, \"solari\", 2)\r\n                                                                                                        commanderFound = true\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n                                                                                        end\r\n                                                                                    end\r\n\r\n                                                                                    -- no commander found in garrison\r\n                                                                                    if not commanderFound then\r\n                                                                                        Dialog.broadcastToColor(I18N('noCommanderGarrison'), self.color, \"Purple\")\r\n                                                                                    end\r\n                                                                                else\r\n                                                                                    local commanderFound = false\r\n                                                                                    -- move sardaukar commanders from player area to garrison on regular click\r\n                                                                                    if PlayBoard.hasTech(self.color, \"bl_SardaukarHighCommand\") then\r\n                                                                                        if PlayBoard.getResource(self.color, \"solari\"):get() >= 1 then\r\n                                                                                            for _, object in ipairs(Park.getObjects(playerAreaPark)) do\r\n                                                                                                if Types.isUnit(object, self.color) then\r\n                                                                                                    if Types.isSardaukarCommander(object, self.color) then\r\n                                                                                                        if not commanderFound then\r\n                                                                                                            Park.putObject(object, garrisonPark)\r\n                                                                                                            broadcastToAll(I18N(\"recruitSupplySardaukarCommander\"), self.color)\r\n                                                                                                            self.leader.resources(self.color, \"solari\", -1)\r\n                                                                                                            commanderFound = true\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n                                                                                        else\r\n                                                                                            Dialog.broadcastToColor(I18N('noSolari'), self.color, \"Purple\")\r\n                                                                                        end\r\n                                                                                    elseif PlayBoard.getResource(self.color, \"solari\"):get() >= 2 then\r\n                                                                                        for _, object in ipairs(Park.getObjects(playerAreaPark)) do\r\n                                                                                            if Types.isUnit(object, self.color) then\r\n                                                                                                if Types.isSardaukarCommander(object, self.color) then\r\n                                                                                                    if not commanderFound then\r\n                                                                                                        Park.putObject(object, garrisonPark)\r\n                                                                                                        broadcastToAll(I18N(\"recruitSupplySardaukarCommander\"), self.color)\r\n                                                                                                        self.leader.resources(self.color, \"solari\", -2)\r\n                                                                                                        commanderFound = true\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n                                                                                        end\r\n                                                                                    else\r\n                                                                                        Dialog.broadcastToColor(I18N('noSolari'), self.color, \"Purple\")\r\n                                                                                    end\r\n\r\n                                                                                    -- no commander found in player area\r\n                                                                                    if not commanderFound then\r\n                                                                                        Dialog.broadcastToColor(I18N('noCommanderSupply'), self.color, \"Purple\")\r\n                                                                                    end\r\n                                                                                end\r\n                                                                            end),\r\n                                                                            label = I18N(\"sardaukarCommanderButton\"),\r\n                                                                            position = self:_newSymmetricBoardPosition(-2.3, 0.2, 4),\r\n                                                                            rotation = self:_newSymmetricBoardRotation(0, 0, 0),\r\n                                                                            width = 900,\r\n                                                                            height = 400,\r\n                                                                            font_size = 120,\r\n                                                                            color = chroma,\r\n                                                                            font_color = fontColor\r\n                                                                        })\r\n\r\n                                                                        if not PlayBoard.hasHighCouncilSeat(self.color) then\r\n                                                                            Helper.clearButtons(self.content.councilToken)\r\n                                                                            if PlayBoard.isHuman(self.color) then\r\n                                                                                self.content.councilToken.createButton({\r\n                                                                                    click_function = self:_createExclusiveCallback(function ()\r\n                                                                                        Dialog.showConfirmDialog(\r\n                                                                                            self.color,\r\n                                                                                            I18N(\"takeHighCouncilSeatByForceConfirm\"),\r\n                                                                                            function ()\r\n                                                                                                local leader = PlayBoard.getLeader(self.color)\r\n                                                                                                leader.takeHighCouncilSeat(self.color)\r\n                                                                                            end)\r\n                                                                                        end),\r\n                                                                                        position = Vector(0, 0, 0),\r\n                                                                                        tooltip = I18N(\"takeHighCouncilSeatByForce\"),\r\n                                                                                        width = 1500,\r\n                                                                                        height = 1500,\r\n                                                                                        color = {0, 0, 0, 0},\r\n                                                                                    })\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        if PlayBoard.isHuman(self.color) then\r\n                                                                            board.createButton({\r\n                                                                                click_function = self:_createExclusiveCallback(function ()\r\n                                                                                    self:drawCards(1, true)\r\n                                                                                end),\r\n                                                                                label = I18N(\"drawOneCardButton\"),\r\n                                                                                position = self:_newOffsetedBoardPosition(-10.4, 0.2, -0.6),\r\n                                                                                width = 1100,\r\n                                                                                height = 250,\r\n                                                                                font_size = 150,\r\n                                                                                color = chroma,\r\n                                                                                font_color = fontColor\r\n                                                                            })\r\n\r\n                                                                            board.createButton({\r\n                                                                                click_function = self:_createExclusiveCallback(function ()\r\n                                                                                    self:_resetDiscard()\r\n                                                                                end),\r\n                                                                                label = I18N(\"resetDiscardButton\"),\r\n                                                                                position = self:_newOffsetedBoardPosition(-2.4, 0.2, -0.6),\r\n                                                                                width = 1400,\r\n                                                                                height = 250,\r\n                                                                                font_size = 150,\r\n                                                                                color = chroma,\r\n                                                                                font_color = fontColor\r\n                                                                            })\r\n\r\n                                                                            board.createButton({\r\n                                                                                click_function = Helper.registerGlobalCallback(),\r\n                                                                                label = I18N(\"agentTurn\"),\r\n                                                                                position = self:_newSymmetricBoardPosition(-11.3, 0.2, -3.3),\r\n                                                                                rotation = self:_newSymmetricBoardRotation(0, -90, 0),\r\n                                                                                width = 0,\r\n                                                                                height = 0,\r\n                                                                                font_size = 280,\r\n                                                                                color = {0, 0, 0, 1},\r\n                                                                                font_color = chroma\r\n                                                                            })\r\n\r\n                                                                            board.createButton({\r\n                                                                                click_function = self:_createExclusiveCallback(function (_, _, altClick)\r\n                                                                                    if PlayBoard.isHuman(self.color) and not self.revealing then\r\n                                                                                        self:onRevealHand(altClick)\r\n                                                                                    end\r\n                                                                                end),\r\n                                                                                label = I18N(\"revealHandButton\"),\r\n                                                                                position = self:_newSymmetricBoardPosition(-11.3, 0.2, -7.3),\r\n                                                                                rotation = self:_newSymmetricBoardRotation(0, -90, 0),\r\n                                                                                width = 1600,\r\n                                                                                height = 320,\r\n                                                                                font_size = 280,\r\n                                                                                color = chroma,\r\n                                                                                font_color = fontColor,\r\n                                                                            tooltip = I18N(\"revealHandTooltip\")})\r\n\r\n                                                                            self:_createNukeButton()\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard.onObjectDrop(color, object)\r\n                                                                        local objectiveTags = {\r\n                                                                            \"MuadDibObjectiveToken\",\r\n                                                                            \"CrysknifeObjectiveToken\",\r\n                                                                            \"OrnithopterObjectiveToken\",\r\n                                                                            \"JokerObjectiveToken\",\r\n                                                                        }\r\n                                                                        for _, objectiveTag in ipairs(objectiveTags) do\r\n                                                                            -- bloodlines disabled joker\r\n                                                                            if object.hasTag(objectiveTag) and objectiveTag ~= \"JokerObjectiveToken\" then\r\n                                                                                PlayBoard._convertObjectiveTokenPairsIntoVictoryPoints(object)\r\n                                                                                break\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard._convertObjectiveTokenPairsIntoVictoryPoints(object)\r\n                                                                        local tagToName = {\r\n                                                                            MuadDibObjectiveToken = \"muadDibVictoryPoint\",\r\n                                                                            OrnithopterObjectiveToken = \"ornithopterVictoryPoint\",\r\n                                                                            CrysknifeObjectiveToken = \"crysknifeVictoryPoint\",\r\n                                                                            JokerObjectiveToken = \"jokerVictoryPoint\",\r\n                                                                        }\r\n                                                                        local objectiveTag = object.getTags()[1]\r\n                                                                        for color, playBoard in pairs(PlayBoard.playBoards) do\r\n                                                                            local board = playBoard.content.board\r\n                                                                            for _, snapPoint in ipairs(board.getSnapPoints()) do\r\n                                                                                if Helper.isElementOf(objectiveTag, snapPoint.tags) then\r\n                                                                                    local absoluteSnapPointPosition = board.positionToWorld(snapPoint.position)\r\n                                                                                    local d = Vector.sqrDistance(object.getPosition(), absoluteSnapPointPosition)\r\n                                                                                    if d < 1.5 then\r\n                                                                                        local leader = PlayBoard.getLeader(color)\r\n                                                                                        if not leader then\r\n                                                                                            return\r\n                                                                                        end\r\n\r\n                                                                                        local radius = 0.5\r\n                                                                                        local hits = Physics.cast({\r\n                                                                                            origin = absoluteSnapPointPosition,\r\n                                                                                            direction = Vector(0, 1, 0),\r\n                                                                                            type = 2,\r\n                                                                                            size = Vector(radius, radius, radius),\r\n                                                                                            max_distance = 2,\r\n                                                                                        })\r\n\r\n                                                                                        local hitTokens = Helper.filter(Helper.mapValues(hits, Helper.field(\"hit_object\")), function (hitObject)\r\n                                                                                            return hitObject.hasTag(objectiveTag)\r\n                                                                                        end)\r\n\r\n                                                                                        -- bloodlines disabled joker\r\n                                                                                        while #hitTokens >= 2 and objectiveTag ~= \"JokerObjectiveToken\" do\r\n                                                                                            for _ = 1, 2 do\r\n                                                                                                hitTokens[1].destruct()\r\n                                                                                                table.remove(hitTokens, 1)\r\n                                                                                            end\r\n                                                                                            leader.gainVictoryPoint(color, tagToName[objectiveTag], 1)\r\n                                                                                        end\r\n\r\n                                                                                        break\r\n                                                                                    end\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    --- The global event handler 'onObjectEnterContainer' automatically calls every\r\n                                                                    --- '<Module>.onObjectEnterContainer' function thanks to 'Module.registerModuleRedirections'\r\n                                                                    --- (see asyncOnLoad in Global.-1.lua).\r\n                                                                    function PlayBoard.onObjectEnterContainer(container, object)\r\n                                                                        PlayBoard._updateBagCounts(container)\r\n\r\n                                                                        if object.type == \"Card\" then\r\n                                                                            for color, playBoard in pairs(PlayBoard._getPlayBoards()) do\r\n                                                                                if container == playBoard.content.trash then\r\n                                                                                    -- The dump function actually accepts any number of arguments and is able to format each of them.\r\n                                                                                    -- Since everything is a string here, simply concatenating things produces the same output (save the additional spaces).\r\n                                                                                    --Helper.dump(\"The card '\" .. Helper.getID(object) .. \"'has been trashed in the \" .. color .. \"trash.\")\r\n                                                                                    Reserve.redirectUntrashableCards(container, object)\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard.onObjectLeaveContainer(container, object)\r\n                                                                        PlayBoard._updateBagCounts(container)\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard.getOpenContracts(color)\r\n                                                                        local contracts = {}\r\n                                                                        local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                        for _, contractTile in ipairs(Park.getObjects(playBoard.techPark)) do\r\n                                                                            if Types.isContract(contractTile) and not contractTile.is_face_down then\r\n                                                                                table.insert(contracts, contractTile)\r\n                                                                            end\r\n                                                                        end\r\n                                                                        return contracts\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard._updateBagCounts(container)\r\n                                                                        for _, playBoard in pairs(PlayBoard.playBoards) do\r\n                                                                            if playBoard.opponent ~= \"rival\" then\r\n                                                                                if container == playBoard.content.completedContractBag then\r\n                                                                                    local count = #Helper.filter(container.getObjects(), function (element)\r\n                                                                                        return element.tags and Helper.isElementOf(\"Contract\", element.tags)\r\n                                                                                    end)\r\n                                                                                    playBoard.content.completedContractBag.editButton({\r\n                                                                                        index = 0,\r\n                                                                                        label = tostring(count),\r\n                                                                                    })\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard.getCompletedContractCount(color)\r\n                                                                        local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                        if playBoard.opponent ~= \"rival\" then\r\n                                                                            local objets = playBoard.content.completedContractBag.getObjects()\r\n                                                                            return #Helper.filter(objets, function (element)\r\n                                                                                return element.tags and Helper.isElementOf(\"Contract\", element.tags)\r\n                                                                            end)\r\n                                                                        end\r\n                                                                        return 0\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard:_createNukeButton()\r\n                                                                        if self.content.atomicsToken then\r\n                                                                            self.content.atomicsToken.createButton({\r\n                                                                                click_function = self:_createExclusiveCallback(function ()\r\n                                                                                    if PlayBoard.isHuman(self.color) then\r\n                                                                                        self:_nukeConfirm()\r\n                                                                                    end\r\n                                                                                end),\r\n                                                                                tooltip = I18N('atomics'),\r\n                                                                                position = Vector(0, 0, 0),\r\n                                                                                width = 700,\r\n                                                                                height = 700,\r\n                                                                                scale = Vector(3, 3, 3),\r\n                                                                                font_size = 300,\r\n                                                                                font_color = {1, 1, 1, 100},\r\n                                                                            color = {0, 0, 0, 0}})\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard:onRevealHand(brutal)\r\n                                                                        local currentPlayer = TurnControl.getCurrentPlayer()\r\n                                                                        if currentPlayer and currentPlayer ~= self.color then\r\n                                                                            Dialog.broadcastToColor(I18N(\"revealNotTurn\"), self.color, \"Pink\")\r\n                                                                        else\r\n                                                                            if not self.revealed and self:stillHavePlayableAgents() then\r\n                                                                                self:tryRevealHandEarly(brutal)\r\n                                                                            else\r\n                                                                                self:revealHand(brutal)\r\n                                                                            end\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard:tryRevealHandEarly(brutal)\r\n                                                                        local origin = PlayBoard.getPlayBoard(self.color):_newSymmetricBoardPosition(-2, 0.2, -6.5)\r\n\r\n                                                                        local board = self.content.board\r\n\r\n                                                                        local indexHolder = {}\r\n\r\n                                                                        local function reset()\r\n                                                                            self.revealing = false\r\n                                                                            Helper.removeButtons(board, Helper.getValues(indexHolder))\r\n                                                                        end\r\n\r\n                                                                        self.revealing = true\r\n\r\n                                                                        indexHolder.messageButtonIndex = Helper.createButton(board, {\r\n                                                                            click_function = Helper.registerGlobalCallback(),\r\n                                                                            label = I18N(\"revealEarlyConfirm\"),\r\n                                                                            position = origin,\r\n                                                                            width = 0,\r\n                                                                            height = 0,\r\n                                                                            scale = {0.5, 0.5, 0.5},\r\n                                                                            font_size = 500,\r\n                                                                            font_color = self.color,\r\n                                                                        color = {0, 0, 0, 1}})\r\n\r\n                                                                        indexHolder.validateButtonIndex = Helper.createButton(board, {\r\n                                                                            click_function = self:_createExclusiveCallback(function ()\r\n                                                                                reset()\r\n                                                                                self:revealHand(brutal)\r\n                                                                            end),\r\n                                                                            label = I18N('yes'),\r\n                                                                            position = origin + Vector(-1, 0, 1),\r\n                                                                            width = 1000,\r\n                                                                            height = 600,\r\n                                                                            scale = {0.5, 0.5, 0.5},\r\n                                                                            font_size = 500,\r\n                                                                            font_color = {1, 1, 1},\r\n                                                                            color = \"Green\"\r\n                                                                        })\r\n\r\n                                                                        indexHolder.cancelButtonIndex = Helper.createButton(board, {\r\n                                                                            click_function = self:_createExclusiveCallback(reset),\r\n                                                                            label = I18N('no'),\r\n                                                                            position = origin + Vector(1, 0, 1),\r\n                                                                            width = 1000,\r\n                                                                            height = 600,\r\n                                                                            scale = {0.5, 0.5, 0.5},\r\n                                                                            font_size = 500,\r\n                                                                            font_color = {1, 1, 1},\r\n                                                                            color = \"Red\"\r\n                                                                        })\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard:revealHand(brutal)\r\n                                                                        PlayBoard._onceCardParkSpread(self.agentCardPark).doAfter(function ()\r\n                                                                            PlayBoard._onceCardParkSpread(self.revealCardPark).doAfter(function ()\r\n                                                                                self:_revealHand(brutal)\r\n                                                                            end)\r\n                                                                        end)\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard._onceCardParkSpread(park)\r\n                                                                        local continuation = Helper.createContinuation(\"PlayBoard.spreadCardPark\")\r\n                                                                        -- FIXME Useless indirection.\r\n                                                                        local holder = {\r\n                                                                            count = 0\r\n                                                                        }\r\n\r\n                                                                        local next = function ()\r\n                                                                            if holder.count == 0 then\r\n                                                                                Helper.onceFramesPassed(1).doAfter(continuation.run)\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        local freeSlots = Park.findEmptySlots(park)\r\n\r\n                                                                        for _, object in ipairs(Park.getObjects(park)) do\r\n                                                                            if object.type == \"Deck\" then\r\n                                                                                local cardCound = Helper.getCardCount(object)\r\n                                                                                for _ = 2, cardCound do\r\n                                                                                    if holder.count >= #freeSlots then\r\n                                                                                        break\r\n                                                                                    end\r\n                                                                                    holder.count = holder.count + 1\r\n                                                                                    local p = freeSlots[holder.count]\r\n                                                                                    local parameters = {\r\n                                                                                        position = freeSlots[holder.count],\r\n                                                                                        smooth = false,\r\n                                                                                        -- It matters that the target position is not directly a deck or card.\r\n                                                                                        -- Otherwise, the taken card won't be created and the callback won't be\r\n                                                                                        -- called.\r\n                                                                                        callback_function = function ()\r\n                                                                                            holder.count = holder.count - 1\r\n                                                                                            next()\r\n                                                                                        end\r\n                                                                                    }\r\n                                                                                    object.takeObject(parameters)\r\n                                                                                end\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        next()\r\n\r\n                                                                        return continuation\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard:_revealHand(brutal)\r\n                                                                        local playedIntrigues = Helper.filter(Park.getObjects(self.agentCardPark), Types.isIntrigueCard)\r\n                                                                        local playedCards = Helper.filter(Park.getObjects(self.agentCardPark), Types.isImperiumCard)\r\n\r\n                                                                        local properCard = function (card)\r\n                                                                            assert(card)\r\n                                                                            if Types.isImperiumCard(card) then\r\n                                                                                --[[\r\n                We leave the cards with a choice (not an option) in the player's hand to simplify\r\n                things and make clear to the player that the card must be manually revealed.\r\n            ]]\r\n                                                                                local choiceOfferingCards = {\r\n                                                                                    \"beneGesseritSister\",\r\n                                                                                    \"undercoverAsset\",\r\n                                                                                    \"desertPower\",\r\n                                                                                    -- bloodlines choice cards\r\n                                                                                    \"bl_DeliverLogistics\",\r\n                                                                                }\r\n                                                                                if brutal then\r\n                                                                                    choiceOfferingCards = Helper.concatTables(choiceOfferingCards, {\r\n                                                                                        \"deliveryAgreement\",\r\n                                                                                        \"priorityContracts\",\r\n                                                                                    })\r\n                                                                                    if not PlayBoard.hasHighCouncilSeat(self.color) then\r\n                                                                                        table.insert(choiceOfferingCards, \"corrinthCity\")\r\n                                                                                    end\r\n                                                                                end\r\n                                                                                return not Helper.isElementOf(Helper.getID(card), choiceOfferingCards)\r\n                                                                            else\r\n                                                                                return false\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        local revealedCards = Helper.filter(Player[self.color].getHandObjects(), properCard)\r\n                                                                        local alreadyRevealedCards = Helper.filter(Park.getObjects(self.revealCardPark), properCard)\r\n                                                                        local allRevealedCards = Helper.concatTables(revealedCards, alreadyRevealedCards)\r\n\r\n                                                                        -- FIXME The agent could have been removed (e.g. Kwisatz Haderach)\r\n                                                                        local techNegotiation = MainBoard.hasAgentInSpace(\"techNegotiation\", self.color)\r\n                                                                        local assemblyHall = MainBoard.hasAgentInSpace(\"assemblyHall\", self.color)\r\n\r\n                                                                        local minimicFilm = PlayBoard.hasTech(self.color, \"minimicFilm\")\r\n                                                                        -- bloodlines tech self destroying messages\r\n                                                                        local bl_SelfDestroyingMessages = PlayBoard.hasTech(self.color, \"bl_SelfDestroyingMessages\")\r\n                                                                        -- bloodlines y'rkoon persuasion navigation card (tagged as tech)\r\n                                                                        local bl_YrkoonPersuasion = PlayBoard.hasTech(self.color, \"bl_YrkoonPersuasion\")\r\n                                                                        local restrictedOrdnance = PlayBoard.hasTech(self.color, \"restrictedOrdnance\")\r\n                                                                        local councilSeat = PlayBoard.hasHighCouncilSeat(self.color)\r\n                                                                        local artillery = PlayBoard.hasTech(self.color, \"artillery\")\r\n                                                                        local swordmasterBonus = TurnControl.getPlayerCount() == 6 and PlayBoard.hasSwordmaster(self.color)\r\n\r\n                                                                        local imperiumCardContributions = ImperiumCard.evaluateReveal(self.color, playedCards, allRevealedCards, artillery)\r\n\r\n                                                                        self.persuasion:set(\r\n                                                                            (imperiumCardContributions.persuasion or 0) +\r\n                                                                            (techNegotiation and 1 or 0) +\r\n                                                                            (assemblyHall and 1 or 0) +\r\n                                                                            (councilSeat and 2 or 0) +\r\n                                                                            (minimicFilm and 1 or 0) +\r\n                                                                            (bl_SelfDestroyingMessages and 1 or 0) +\r\n                                                                        (bl_YrkoonPersuasion and 1 or 0))\r\n                                                                        -- bloodlines tech self destroying messages and y'rkoon persuasion (previous lines)\r\n\r\n                                                                        self.strength:set(\r\n                                                                            (imperiumCardContributions.strength or 0) +\r\n                                                                            ((restrictedOrdnance and councilSeat) and 4 or 0) +\r\n                                                                        (swordmasterBonus and 2 or 0))\r\n\r\n                                                                        --Helper.dump(\"imperiumCardContributions:\", imperiumCardContributions)\r\n\r\n                                                                        if brutal and not self.revealed then\r\n                                                                            for _, resourceName in ipairs({\"spice\", \"solari\", \"water\"}) do\r\n                                                                                local amount = imperiumCardContributions[resourceName]\r\n                                                                                if amount then\r\n                                                                                    self.leader.resources(self.color, resourceName, amount)\r\n                                                                                end\r\n                                                                            end\r\n\r\n                                                                            local intrigues = imperiumCardContributions.intrigues\r\n                                                                            if intrigues then\r\n                                                                                self.leader.drawIntrigues(self.color, intrigues)\r\n                                                                            end\r\n\r\n                                                                            local createMove = function (category, to)\r\n                                                                                return function ()\r\n                                                                                    local amount = imperiumCardContributions[category] or 0\r\n                                                                                    if amount > 0 then\r\n                                                                                        self.leader.troops(self.color, \"supply\", to, amount)\r\n                                                                                        return Park.onceStabilized(Action.getTroopPark(self.color, to))\r\n                                                                                    else\r\n                                                                                        return Helper.fakeContinuation()\r\n                                                                                    end\r\n                                                                                end\r\n                                                                            end\r\n\r\n                                                                            Helper.chainActions({\r\n                                                                                createMove(\"troops\", \"garrison\"),\r\n                                                                                createMove(\"fighters\", \"combat\"),\r\n                                                                                createMove(\"negotiators\", \"negotiation\"),\r\n                                                                                createMove(\"specimens\", \"tanks\"),\r\n                                                                            })\r\n                                                                        end\r\n\r\n                                                                        Park.putObjects(revealedCards, self.revealCardPark)\r\n\r\n                                                                        Helper.emitEvent(\"reveal\", self.color)\r\n\r\n                                                                        -- bloodlines sardaukar commander skill - charismatic\r\n                                                                        local sc_Charismatic = PlayBoard.hasSkill(self.color, \"sc_Charismatic\")\r\n                                                                        if sc_Charismatic and Combat.hasSardaukarCommander(self.color) then\r\n                                                                            self.leader.resources(self.color, \"persuasion\", 1)\r\n                                                                        end\r\n\r\n                                                                        -- bloodlines sardaukar commander skill - driven\r\n                                                                        local sc_Driven = PlayBoard.hasSkill(self.color, \"sc_Driven\")\r\n                                                                        if sc_Driven and Combat.hasSardaukarCommander(self.color) then\r\n                                                                            self.leader.resources(self.color, \"spice\", 1)\r\n                                                                        end\r\n\r\n                                                                        -- bloodlines sardaukar commander skill - hardy\r\n                                                                        local sc_Hardy = PlayBoard.hasSkill(self.color, \"sc_Hardy\")\r\n                                                                        if sc_Hardy and Combat.hasSardaukarCommander(self.color) then\r\n                                                                            Helper.onceFramesPassed(9).doAfter(function ()\r\n                                                                                self.leader.troops(self.color, \"supply\", \"garrison\", 1)\r\n                                                                            end)\r\n                                                                        end\r\n\r\n                                                                        -- bloodlines tech panopticon\r\n                                                                        local bl_Panopticon = PlayBoard.hasTech(self.color, \"bl_Panopticon\")\r\n                                                                        if bl_Panopticon then\r\n                                                                            Helper.onceFramesPassed(3).doAfter(function ()\r\n                                                                                self.leader.troops(self.color, \"supply\", \"garrison\", 1)\r\n                                                                            end)\r\n                                                                        end\r\n\r\n                                                                        -- bloodlines tech training depot\r\n                                                                        local bl_TrainingDepot = PlayBoard.hasTech(self.color, \"bl_TrainingDepot\")\r\n                                                                        if bl_TrainingDepot and PlayBoard.hasCommand(self.color) then\r\n                                                                            self.strength:change(2)\r\n                                                                        end\r\n\r\n                                                                        -- bloodlines tech training depot\r\n                                                                        local bl_DeliveryBay = PlayBoard.hasTech(self.color, \"bl_DeliveryBay\")\r\n                                                                        if bl_DeliveryBay and PlayBoard.hasCommand(self.color) then\r\n                                                                            self.leader.resources(self.color, \"solari\", 2)\r\n                                                                        end\r\n\r\n                                                                        -- bloodlines command bombast\r\n                                                                        local bl_Bombast = PlayBoard.hasRevealedCard(self.color, \"bl_Bombast\")\r\n                                                                        if bl_Bombast and PlayBoard.hasCommand(self.color) then\r\n                                                                            self.leader.resources(self.color, \"solari\", 3)\r\n                                                                        end\r\n\r\n                                                                        -- bloodlines command i believe\r\n                                                                        local bl_IBelieve = PlayBoard.hasRevealedCard(self.color, \"bl_IBelieve\")\r\n                                                                        if bl_IBelieve and PlayBoard.hasCommand(self.color) then\r\n                                                                            Helper.onceFramesPassed(6).doAfter(function ()\r\n                                                                                self.leader.troops(self.color, \"supply\", \"garrison\", 2)\r\n                                                                            end)\r\n                                                                        end\r\n\r\n                                                                        -- bloodlines command southern faith\r\n                                                                        local bl_SouthernFaith = PlayBoard.hasRevealedCard(self.color, \"bl_SouthernFaith\")\r\n                                                                        if bl_SouthernFaith and PlayBoard.hasCommand(self.color) then\r\n                                                                            self.leader.resources(self.color, \"spice\", 2)\r\n                                                                        end\r\n\r\n                                                                        self.revealed = true\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard:stillHavePlayableAgents()\r\n                                                                        return #Park.getObjects(self.agentPark) > 0\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    -- bloodlines command cards\r\n                                                                    function PlayBoard.hasRevealedCard(color, cardName)\r\n                                                                        for _, card in ipairs(PlayBoard.getHandedCards(color)) do\r\n                                                                            if Helper.getID(card) == cardName then\r\n                                                                                return true\r\n                                                                            end\r\n                                                                        end\r\n                                                                        return false\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard.getCardsPlayedThisTurn(color)\r\n                                                                        local playBoard = PlayBoard.getPlayBoard(color)\r\n\r\n                                                                        local playedCards = Helper.filter(Park.getObjects(playBoard.agentCardPark), function (card)\r\n                                                                            return Types.isImperiumCard(card) or Types.isIntrigueCard(card)\r\n                                                                        end)\r\n\r\n                                                                        return (Set.newFromList(playedCards) - Set.newFromList(playBoard.alreadyPlayedCards or {})):toList()\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard.hasPlayedThisTurn(color, cardName)\r\n                                                                        for _, card in ipairs(PlayBoard.getCardsPlayedThisTurn(color)) do\r\n                                                                            if Helper.getID(card) == cardName then\r\n                                                                                return true\r\n                                                                            end\r\n                                                                        end\r\n                                                                        return false\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard.couldSendAgentOrReveal(color)\r\n                                                                        local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                        if playBoard.opponent == \"rival\" then\r\n                                                                            return playBoard:stillHavePlayableAgents()\r\n                                                                        else\r\n                                                                            return not playBoard.revealed\r\n                                                                        end\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard:tryToDrawCards(count)\r\n                                                                        local continuation = Helper.createContinuation(\"PlayBoard:tryToDrawCards\")\r\n\r\n                                                                        if not self.drawCardsCoalescentQueue then\r\n\r\n                                                                            local function coalesce(c1, c2)\r\n                                                                                return {\r\n                                                                                    parameteredContinuations = Helper.concatTables(c1.parameteredContinuations, c2.parameteredContinuations),\r\n                                                                                    count = c1.count + c2.count\r\n                                                                                }\r\n                                                                            end\r\n\r\n                                                                            local function handle(c)\r\n                                                                                local runAllContinuations = function (_)\r\n                                                                                    for _, parameteredContinuation in ipairs(c.parameteredContinuations) do\r\n                                                                                        parameteredContinuation.continuation.run(parameteredContinuation.parameter)\r\n                                                                                    end\r\n                                                                                end\r\n\r\n                                                                                if c.count > 0 then\r\n                                                                                    self:_tryToDrawCards(c.count).doAfter(runAllContinuations)\r\n                                                                                else\r\n                                                                                    runAllContinuations(0)\r\n                                                                                end\r\n                                                                            end\r\n\r\n                                                                            self.drawCardsCoalescentQueue = Helper.createCoalescentQueue(\"draw\", 1, coalesce, handle)\r\n                                                                        end\r\n\r\n                                                                        self.drawCardsCoalescentQueue.submit({\r\n                                                                            parameteredContinuations = {{continuation = continuation, parameter = count}},\r\n                                                                            count = count\r\n                                                                        })\r\n\r\n                                                                        return continuation\r\n                                                                    end\r\n\r\n                                                                    ---\r\n                                                                    function PlayBoard:_tryToDrawCards(count)\r\n                                                                        local continuation = Helper.createContinuation(\"PlayBoard:_tryToDrawCards\")\r\n\r\n                                                                        local content = self.content\r\n                                                                        local deck = Helper.getDeckOrCard(content.drawDeckZone)\r\n                                                                        local discard = Helper.getDeckOrCard(content.discardZone)\r\n\r\n                                                                        local needDiscardReset = Helper.getCardCount(deck) < count\r\n                                                                        local availableCardCount = Helper.getCardCount(deck) + Helper.getCardCount(discard)\r\n                                                                        local notEnoughCards = availableCardCount < count\r\n\r\n                                                                        if availableCardCount == 0 then\r\n                                                                            continuation.run(0)\r\n                                                                        elseif needDiscardReset or notEnoughCards then\r\n                                                                            local leaderName = PlayBoard.getLeaderName(self.color)\r\n                                                                            broadcastToAll(I18N(\"isDecidingToDraw\", {leader = leaderName}), \"Pink\")\r\n                                                                            local maxCount = math.min(count, availableCardCount)\r\n                                                                            Dialog.showYesOrNoDialog(\r\n                                                                                self.color,\r\n                                                                                I18N(\"warningBeforeDraw\", {count = count, maxCount = maxCount}),\r\n                                                                                continuation,\r\n                                                                                function (confirmed)\r\n                                                                                    if confirmed then\r\n                                                                                        self:drawCards(count, false).doAfter(continuation.run)\r\n                                                                                    else\r\n                                                                                        continuation.run(0)\r\n                                                                                    end\r\n                                                                                end)\r\n                                                                            else\r\n                                                                                self:drawCards(count, false).doAfter(continuation.run)\r\n                                                                            end\r\n\r\n                                                                            return continuation\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard:drawCards(count, button)\r\n                                                                            Types.assertIsInteger(count)\r\n\r\n                                                                            local continuation = Helper.createContinuation(\"PlayBoard:drawCards\")\r\n\r\n                                                                            local deckOrCard = Helper.getDeckOrCard(self.content.drawDeckZone)\r\n                                                                            local drawableCardCount = Helper.getCardCount(deckOrCard)\r\n\r\n                                                                            local dealCardCount = math.min(count, drawableCardCount)\r\n                                                                            -- The getCardCount function is ok with nil arg, but we add a check for the sake of VS Code.\r\n                                                                            if deckOrCard and dealCardCount > 0 then\r\n                                                                                if button then\r\n                                                                                    Action.log(I18N(\"drawObjectsManually\", {amount = dealCardCount, object = I18N.agree(dealCardCount, \"imperiumCard\")}), self.color)\r\n                                                                                end\r\n                                                                                deckOrCard.deal(dealCardCount, self.color)\r\n                                                                            end\r\n\r\n                                                                            -- Dealing cards take an unknown amout of time.\r\n                                                                            Helper.onceTimeElapsed(0.5).doAfter(function ()\r\n                                                                                local remainingCardToDrawCount = count - dealCardCount\r\n                                                                                if remainingCardToDrawCount > 0 then\r\n                                                                                    self:_resetDiscard().doAfter(function ()\r\n                                                                                        self:drawCards(remainingCardToDrawCount).doAfter(function (dealOfOtherCardCount)\r\n                                                                                            continuation.run(dealCardCount + dealOfOtherCardCount)\r\n                                                                                        end)\r\n                                                                                    end)\r\n                                                                                else\r\n                                                                                    continuation.run(dealCardCount)\r\n                                                                                end\r\n                                                                            end)\r\n\r\n                                                                            return continuation\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard:_resetDiscard()\r\n                                                                            local continuation = Helper.createContinuation(\"PlayBoard:_resetDiscard\")\r\n                                                                            local discard = Helper.getDeckOrCard(self.content.discardZone)\r\n                                                                            if discard then\r\n                                                                                discard.setRotationSmooth({0, 180, 180}, false, false)\r\n                                                                                discard.setPositionSmooth(self.content.drawDeckZone.getPosition() + Vector(0, 1, 0), false, true)\r\n                                                                                Helper.onceOneDeck(self.content.drawDeckZone).doAfter(function ()\r\n                                                                                    local replenishedDeckOrCard = Helper.getDeckOrCard(self.content.drawDeckZone)\r\n                                                                                    assert(replenishedDeckOrCard)\r\n                                                                                    if replenishedDeckOrCard.type == \"Deck\" then\r\n                                                                                        Helper.shuffleDeck(replenishedDeckOrCard)\r\n                                                                                        Helper.onceShuffled(replenishedDeckOrCard).doAfter(continuation.run)\r\n                                                                                    else\r\n                                                                                        continuation.run(replenishedDeckOrCard)\r\n                                                                                    end\r\n                                                                                end)\r\n                                                                            else\r\n                                                                                continuation.cancel()\r\n                                                                            end\r\n                                                                            return continuation\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard:_nukeConfirm()\r\n                                                                            local token = self.content.atomicsToken\r\n                                                                            Helper.clearButtons(token)\r\n\r\n                                                                            local function reset()\r\n                                                                                Helper.clearButtons(token)\r\n                                                                                self:_createNukeButton()\r\n                                                                            end\r\n\r\n                                                                            Helper.createButton(token, {\r\n                                                                                click_function = self:_createExclusiveCallback(function ()\r\n                                                                                    reset()\r\n                                                                                    self.leader.atomics(self.color)\r\n                                                                                    self.content.atomicsToken.destruct()\r\n                                                                                    self.content.atomicsToken = nil\r\n                                                                                end),\r\n                                                                                label = I18N('yes'),\r\n                                                                                position = Vector(-5, 0, 0),\r\n                                                                                width = 550,\r\n                                                                                height = 350,\r\n                                                                                scale = Vector(3, 3, 3),\r\n                                                                                font_size = 300,\r\n                                                                                font_color = {1, 1, 1},\r\n                                                                                color = \"Green\"\r\n                                                                            })\r\n\r\n                                                                            Helper.createButton(token, {\r\n                                                                                click_function = self:_createExclusiveCallback(function ()\r\n                                                                                    reset()\r\n                                                                                end),\r\n                                                                                label = I18N('no'),\r\n                                                                                position = Vector(5, 0, 0),\r\n                                                                                width = 550,\r\n                                                                                height = 350,\r\n                                                                                scale = Vector(3, 3, 3),\r\n                                                                                font_size = 300,\r\n                                                                                font_color = {1, 1, 1},\r\n                                                                                color = \"Red\"\r\n                                                                            })\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard:_createAllySelector()\r\n                                                                            assert(Commander.isCommander(self.color))\r\n\r\n                                                                            local p = self.content.board.getPosition() + self:_newSymmetricBoardPosition(0.5, 0, -3)\r\n                                                                            Helper.createTransientAnchor(self.color .. \"AllySelector\", p).doAfter(function (anchor)\r\n\r\n                                                                                Helper.createAbsoluteButtonWithRoundness(anchor, 1, {\r\n                                                                                    click_function = Helper.registerGlobalCallback(),\r\n                                                                                    label = I18N(\"activatedAlly\"),\r\n                                                                                    position = anchor.getPosition() + Vector(0, 0.2, 0),\r\n                                                                                    width = 0,\r\n                                                                                    height = 0,\r\n                                                                                    font_size = 120,\r\n                                                                                    font_color = {0, 0, 0, 100},\r\n                                                                                color = {0, 0, 0, 0}})\r\n\r\n                                                                                for i, allyColor in ipairs(Commander.getAllies(self.color)) do\r\n                                                                                    Helper.createAbsoluteButtonWithRoundness(anchor, 1, {\r\n                                                                                        click_function = self:_createExclusiveCallback(function ()\r\n                                                                                            Commander.setActivatedAlly(self.color, allyColor)\r\n                                                                                        end),\r\n                                                                                        label = Helper.chopName(PlayBoard.getLeaderName(allyColor), 2),\r\n                                                                                        position = anchor.getPosition() + Vector(0, 0.2, (i - 1.5) * 1.5),\r\n                                                                                        width = 1600,\r\n                                                                                        height = 300,\r\n                                                                                        font_size = 150,\r\n                                                                                        font_color = PlayBoard._getTextColor(allyColor),\r\n                                                                                    color = Color.fromString(\"Grey\")})\r\n                                                                                end\r\n\r\n                                                                                local onAllyChange = function (color, allyColor)\r\n                                                                                    if color == self.color then\r\n                                                                                        for i, otherAllyColor in ipairs(Commander.getAllies(self.color)) do\r\n                                                                                            anchor.editButton({\r\n                                                                                                index = i,\r\n                                                                                                color = Color.fromString(otherAllyColor == allyColor and allyColor or \"Grey\"),\r\n                                                                                            })\r\n                                                                                        end\r\n                                                                                    end\r\n                                                                                end\r\n\r\n                                                                                Helper.registerEventListener(\"selectAlly\", onAllyChange)\r\n                                                                                onAllyChange(self.color, Commander.getActivatedAlly(self.color))\r\n                                                                            end)\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.isRival(color)\r\n                                                                            local playerBoard = PlayBoard.getPlayBoard(color)\r\n                                                                            return playerBoard.opponent == \"rival\"\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.isHuman(color)\r\n                                                                            local playerBoard = PlayBoard.getPlayBoard(color)\r\n                                                                            return playerBoard.opponent ~= \"rival\"\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.setLeader(color, leaderCard)\r\n                                                                            Types.assertIsPlayerColor(color)\r\n                                                                            assert(leaderCard)\r\n\r\n                                                                            local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                            if playBoard.opponent == \"rival\" then\r\n                                                                                assert(leaderCard.hasTag(\"RivalLeader\"))\r\n                                                                                playBoard.leader = Hagal.newRival(Helper.getID(leaderCard))\r\n                                                                            else\r\n                                                                                assert(leaderCard.hasTag(\"Leader\"))\r\n                                                                                playBoard.leader = Leader.newLeader(Helper.getID(leaderCard))\r\n                                                                                if Commander.isCommander(color) then\r\n                                                                                    playBoard.leader = Commander.newCommander(color, playBoard.leader)\r\n                                                                                end\r\n                                                                            end\r\n\r\n                                                                            assert(playBoard.leader)\r\n                                                                            local position = playBoard.content.leaderZone.getPosition()\r\n                                                                            leaderCard.setPosition(position)\r\n                                                                            playBoard.leaderCard = leaderCard\r\n\r\n                                                                            local continuation = Helper.onceMotionless(leaderCard)\r\n\r\n                                                                            continuation.doAfter(function ()\r\n                                                                                Helper.noPhysics(leaderCard)\r\n                                                                                playBoard:_createButtons()\r\n                                                                            end)\r\n\r\n                                                                            return continuation\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.findLeaderCard(color)\r\n                                                                            local leaderZone = PlayBoard.getContent(color).leaderZone\r\n                                                                            for _, object in ipairs(leaderZone.getObjects(true)) do\r\n                                                                                if object.hasTag(\"Leader\") or object.hasTag(\"RivalLeader\") then\r\n                                                                                    return object\r\n                                                                                end\r\n                                                                            end\r\n                                                                            return nil\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getLeader(color)\r\n                                                                            return PlayBoard.getPlayBoard(color).leader\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getLeaderName(color)\r\n                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                            return leaderCard and leaderCard.getName() or \"?\"\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getContent(color)\r\n                                                                            local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                            assert(playBoard, \"Unknow player color: \" .. tostring(color))\r\n                                                                            return playBoard.content\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getAgentCardPark(color)\r\n                                                                            return PlayBoard.getPlayBoard(color).agentCardPark\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getRevealCardPark(color)\r\n                                                                            return PlayBoard.getPlayBoard(color).revealCardPark\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getAgentPark(color)\r\n                                                                            return PlayBoard.getPlayBoard(color).agentPark\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getSpyPark(color)\r\n                                                                            return PlayBoard.getPlayBoard(color).spyPark\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getDreadnoughtPark(color)\r\n                                                                            return PlayBoard.getPlayBoard(color).dreadnoughtPark\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getSupplyPark(color)\r\n                                                                            return PlayBoard.getPlayBoard(color).supplyPark\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getTechPark(color)\r\n                                                                            return PlayBoard.getPlayBoard(color).techPark\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getScorePark(color)\r\n                                                                            return PlayBoard.getPlayBoard(color).scorePark\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard:getScore()\r\n                                                                            local score = 0\r\n                                                                            if self.scorePark then\r\n                                                                                for _, object in ipairs(Park.getObjects(self.scorePark)) do\r\n                                                                                    if Types.isVictoryPointToken(object) then\r\n                                                                                        score = score + 1\r\n                                                                                    end\r\n                                                                                end\r\n                                                                            else\r\n                                                                                log(\"Missing score park for player \" .. self.color)\r\n                                                                            end\r\n                                                                            return score\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.grantTechTile(color, techTile)\r\n                                                                            return Park.putObject(techTile, PlayBoard.getPlayBoard(color).techPark)\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.grantContractTile(color, contractTile)\r\n                                                                            return Park.putObject(contractTile, PlayBoard.getPlayBoard(color).techPark)\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        -- bloodlines sardaukar commanders skill\r\n                                                                        function PlayBoard.grantSkillTile(color, skillTile)\r\n                                                                            return Park.putObject(skillTile, PlayBoard.getPlayBoard(color).techPark)\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getScoreTokens(color)\r\n                                                                            return Park.getObjects(PlayBoard.getPlayBoard(color).scorePark)\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.grantScoreToken(color, token)\r\n                                                                            token.setInvisibleTo({})\r\n                                                                            return Park.putObject(token, PlayBoard.getPlayBoard(color).scorePark)\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.grantScoreTokenFromBag(color, tokenBag, count)\r\n                                                                            return Park.putObjectFromBag(tokenBag, PlayBoard.getPlayBoard(color).scorePark, count)\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.hasTech(color, techName)\r\n                                                                            return PlayBoard.getTech(color, techName) ~= nil\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getTech(color, techName)\r\n                                                                            local techs = Park.getObjects(PlayBoard.getPlayBoard(color).techPark)\r\n                                                                            for _, tech in ipairs(techs) do\r\n                                                                                if Helper.getID(tech) == techName then\r\n                                                                                    return tech\r\n                                                                                end\r\n                                                                            end\r\n                                                                            return nil\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.useTech(color, techName)\r\n                                                                            local tech = PlayBoard.getTech(color, techName)\r\n                                                                            if tech and not tech.is_face_down then\r\n                                                                                tech.flip()\r\n                                                                                return true\r\n                                                                            else\r\n                                                                                return false\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        -- bloodlines sardaukar commander skills\r\n                                                                        function PlayBoard.hasSkill(color, skillName)\r\n                                                                            return PlayBoard.getSkill(color, skillName) ~= nil\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        -- bloodlines sardaukar commander skills\r\n                                                                        function PlayBoard.getSkill(color, skillName)\r\n                                                                            local skills = Park.getObjects(PlayBoard.getPlayBoard(color).techPark)\r\n                                                                            for _, skill in ipairs(skills) do\r\n                                                                                if Helper.getID(skill) == skillName then\r\n                                                                                    return skill\r\n                                                                                end\r\n                                                                            end\r\n                                                                            return nil\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        -- bloodlines command\r\n                                                                        function PlayBoard.hasCommand(color)\r\n                                                                            local playBoard = PlayBoard.getPlayBoard(color)\r\n\r\n                                                                            if playBoard.persuasion:get() >= 6 then\r\n                                                                                return true\r\n                                                                            end\r\n                                                                            return false\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.hasHighCouncilSeat(color)\r\n                                                                            local token = PlayBoard._getCouncilToken(color)\r\n                                                                            for _, zone in ipairs(Park.getZones(MainBoard.getHighCouncilSeatPark())) do\r\n                                                                                if Helper.contains(zone, token) then\r\n                                                                                    return true\r\n                                                                                end\r\n                                                                            end\r\n                                                                            return false\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.takeHighCouncilSeat(color)\r\n                                                                            local token = PlayBoard._getCouncilToken(color)\r\n                                                                            if not PlayBoard.hasHighCouncilSeat(color) then\r\n                                                                                if Park.putObject(token, MainBoard.getHighCouncilSeatPark()) then\r\n                                                                                    Helper.clearButtons(token)\r\n                                                                                    token.interactable = true\r\n                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                    playBoard.persuasion:change(2)\r\n                                                                                    if PlayBoard.hasTech(color, \"restrictedOrdnance\") then\r\n                                                                                        playBoard.strength:change(4)\r\n                                                                                    end\r\n                                                                                    Helper.emitEvent(\"highCouncilSeatTaken\", color)\r\n                                                                                    return true\r\n                                                                                end\r\n                                                                            end\r\n                                                                            return false\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.hasMakerHook(color)\r\n                                                                            local content = PlayBoard.getContent(color)\r\n                                                                            if content.makerHook then\r\n                                                                                local d = content.makerHook.getPosition():distance(Combat.getMakerHookPosition(color))\r\n                                                                                return d < 1\r\n                                                                            else\r\n                                                                                return false\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.canTakeMakerHook(color)\r\n                                                                            local normalOrAllyColor = color\r\n                                                                            if TurnControl.getPlayerCount() == 6 and Commander.isCommander(color) then\r\n                                                                                normalOrAllyColor = Commander.getActivatedAlly(color)\r\n                                                                            end\r\n\r\n                                                                            return not PlayBoard.hasMakerHook(normalOrAllyColor) and (TurnControl.getPlayerCount() < 6 or Commander.isTeamMuadDib(normalOrAllyColor))\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.takeMakerHook(color)\r\n                                                                            if PlayBoard.canTakeMakerHook(color) then\r\n                                                                                local normalOrAllyColor = color\r\n                                                                                if TurnControl.getPlayerCount() == 6 and Commander.isCommander(color) then\r\n                                                                                    normalOrAllyColor = Commander.getActivatedAlly(color)\r\n                                                                                end\r\n\r\n                                                                                local makerHook = PlayBoard._getMakerHook(normalOrAllyColor)\r\n                                                                                makerHook.setPositionSmooth(Combat.getMakerHookPosition(normalOrAllyColor))\r\n                                                                                Helper.onceMotionless(makerHook).doAfter(function ()\r\n                                                                                    Helper.noPlay(makerHook)\r\n                                                                                    Helper.emitEvent(\"makerHookTaken\", normalOrAllyColor)\r\n                                                                                    PlayBoard.getPlayBoard(normalOrAllyColor):_createButtons()\r\n\r\n                                                                                    if TurnControl.getPlayerCount() == 6 then\r\n                                                                                        assert(Commander.isTeamMuadDib(normalOrAllyColor))\r\n                                                                                        local otherAllyColor = Commander.getOtherAlly(normalOrAllyColor)\r\n                                                                                        assert(otherAllyColor ~= normalOrAllyColor)\r\n                                                                                        if not PlayBoard.hasMakerHook(otherAllyColor) then\r\n                                                                                            local leader = PlayBoard.getLeader(otherAllyColor)\r\n                                                                                            leader.takeMakerHook(otherAllyColor)\r\n                                                                                        end\r\n                                                                                    end\r\n                                                                                end)\r\n                                                                                return true\r\n                                                                            end\r\n                                                                            return false\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.hasSwordmaster(color)\r\n                                                                            local content = PlayBoard.getContent(color)\r\n                                                                            if TurnControl.getPlayerCount() == 6 then\r\n                                                                                return content.swordmasterBonusToken\r\n                                                                                and content.swordmasterBonusToken.getPosition():distance(PlayBoard.swordmasterBonusPositions[color]) < 1\r\n                                                                            else\r\n                                                                                return PlayBoard.isInside(color, content.swordmaster)\r\n                                                                                or MainBoard.isInside(content.swordmaster)\r\n                                                                                or TechMarket.isInside(content.swordmaster)\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.recruitSwordmaster(color)\r\n                                                                            local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                            if playBoard.content.swordmaster and Park.putObject(playBoard.content.swordmaster, PlayBoard.getAgentPark(color)) then\r\n                                                                                if TurnControl.getPlayerCount() == 6 then\r\n                                                                                    playBoard.content.swordmasterBonusToken.setPosition(PlayBoard.swordmasterBonusPositions[color] + Vector(0, -0.15, 0))\r\n                                                                                    Helper.noPhysics(playBoard.content.swordmasterBonusToken)\r\n                                                                                    playBoard.strength:change(2)\r\n                                                                                end\r\n                                                                                Helper.emitEvent(\"swordmasterTaken\", color)\r\n                                                                                return true\r\n                                                                            else\r\n                                                                                return false\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.destroySwordmaster(color)\r\n                                                                            local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                            if playBoard.content.swordmaster then\r\n                                                                                --playBoard:trash(playBoard.content.swordmaster)\r\n                                                                                playBoard.content.swordmaster.destruct()\r\n                                                                                playBoard.content.swordmaster = nil\r\n                                                                            end\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard._getCouncilToken(color)\r\n                                                                            local content = PlayBoard.getContent(color)\r\n                                                                            return content.councilToken\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard._getMakerHook(color)\r\n                                                                            local content = PlayBoard.getContent(color)\r\n                                                                            return content.makerHook\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.getResource(color, resourceName)\r\n                                                                            Types.assertIsResourceName(resourceName)\r\n                                                                            return PlayBoard.getPlayBoard(color)[resourceName]\r\n                                                                        end\r\n\r\n                                                                        ---\r\n                                                                        function PlayBoard.giveCard(color, card, isTleilaxuCard)\r\n                                                                            Types.assertIsPlayerColor(color)\r\n                                                                            assert(card)\r\n\r\n                                                                            local content = PlayBoard.getContent(color)\r\n                                                                            assert(content)\r\n\r\n                                                                            -- Acquire the card (not smoothly to avoid being grabbed by a player hand zone).\r\n                                                                            card.setPosition(content.discardZone.getPosition())\r\n                                                                            printToAll(I18N(isTleilaxuCard and \"acquireTleilaxuCard\" or \"acquireImperiumCard\", {card = I18N(Helper.getID(card))}), color)\r\n                                                                            ImperiumCard.applyAcquireEffect(color, card)\r\n\r\n                                                                            -- Move it on the top of the content deck if possible and wanted.\r\n                                                                            if (isTleilaxuCard and TleilaxuResearch.hasReachedOneHelix(color)) or PlayBoard.hasTech(color, \"spaceport\") then\r\n                                                                                Dialog.showYesOrNoDialog(\r\n                                                                                    color,\r\n                                                                                    I18N(\"dialogCardAbove\"),\r\n                                                                                    nil,\r\n                                                                                    function (confirmed)\r\n                                                                                        if confirmed then\r\n                                                                                            Helper.moveCardFromZone(content.discardZone, content.drawDeckZone.getPosition(), Vector(0, 180, 180))\r\n                                                                                        end\r\n                                                                                    end)\r\n                                                                                end\r\n                                                                            end\r\n\r\n                                                                            ---\r\n                                                                            function PlayBoard.giveCardFromZone(color, zone, isTleilaxuCard)\r\n                                                                                Types.assertIsPlayerColor(color)\r\n\r\n                                                                                local content = PlayBoard.getContent(color)\r\n                                                                                assert(content)\r\n\r\n                                                                                -- Acquire the card (not smoothly to avoid being grabbed by a player hand zone).\r\n                                                                                Helper.moveCardFromZone(zone, content.discardZone.getPosition()).doAfter(function (card)\r\n                                                                                    assert(card)\r\n                                                                                    local cardName = I18N(Helper.getID(card))\r\n                                                                                    printToAll(I18N(isTleilaxuCard and \"acquireTleilaxuCard\" or \"acquireImperiumCard\", {card = cardName}), color)\r\n                                                                                    ImperiumCard.applyAcquireEffect(color, card)\r\n                                                                                end)\r\n\r\n                                                                                -- Move it on the top of the player deck if possible and wanted.\r\n                                                                                if (isTleilaxuCard and TleilaxuResearch.hasReachedOneHelix(color)) or PlayBoard.hasTech(color, \"spaceport\") then\r\n                                                                                    Dialog.showYesOrNoDialog(\r\n                                                                                        color,\r\n                                                                                        I18N(\"dialogCardAbove\"),\r\n                                                                                        nil,\r\n                                                                                        function (confirmed)\r\n                                                                                            if confirmed then\r\n                                                                                                Helper.moveCardFromZone(content.discardZone, content.drawDeckZone.getPosition() + Vector(0, 1, 0), Vector(0, 180, 180))\r\n                                                                                            end\r\n                                                                                        end)\r\n                                                                                    end\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.giveCardFromTrash(color, cardName)\r\n                                                                                    Types.assertIsPlayerColor(color)\r\n\r\n                                                                                    local content = PlayBoard.getContent(color)\r\n                                                                                    assert(content)\r\n\r\n                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                    for _, object in ipairs(playBoard.content.trash.getObjects()) do\r\n                                                                                        if Helper.getID(object) == cardName then\r\n                                                                                            local parameters = {\r\n                                                                                                guid = object.guid,\r\n                                                                                                position = content.discardZone.getPosition(),\r\n                                                                                                smooth = false,\r\n                                                                                                rotation = Vector(0, 180, 0),\r\n                                                                                                callback_function = function (card)\r\n                                                                                                    printToAll(I18N(\"acquireImperiumCard\", {card = I18N(cardName)}), color)\r\n                                                                                                end\r\n                                                                                            }\r\n                                                                                            playBoard.content.trash.takeObject(parameters)\r\n                                                                                            break\r\n                                                                                        end\r\n                                                                                    end\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.giveObjectiveCardFromZone(color, zone)\r\n                                                                                    Types.assertIsPlayerColor(color)\r\n                                                                                    local content = PlayBoard.getContent(color)\r\n                                                                                    assert(content)\r\n                                                                                    local firstSlot = Park.findEmptySlots(PlayBoard.getAgentCardPark(color))[1]\r\n                                                                                    local continuation = Helper.moveCardFromZone(zone, firstSlot + Vector(0, 1, 0), nil, false, true)\r\n                                                                                    continuation.doAfter(function (card)\r\n                                                                                        local cardName = Helper.getID(card)\r\n                                                                                        assert(cardName)\r\n                                                                                        local cardToObjective = {\r\n                                                                                            muadDibFirstPlayer = \"muadDib\",\r\n                                                                                            muadDib4to6p = \"muadDib\",\r\n                                                                                            crysknife4to6p = \"crysknife\",\r\n                                                                                            crysknife = \"crysknife\",\r\n                                                                                            ornithopter1to3p = \"ornithopter\",\r\n                                                                                        }\r\n                                                                                        local objective = cardToObjective[cardName]\r\n                                                                                        assert(objective, cardName)\r\n                                                                                        Combat.gainObjective(color, objective)\r\n\r\n                                                                                        Helper.onceTimeElapsed(3).doAfter(function ()\r\n                                                                                            -- original\r\n                                                                                            -- PlayBoard.getPlayBoard(color):trash(card)\r\n                                                                                            -- bloodlines delete objective card\r\n                                                                                            card.destruct()\r\n                                                                                        end)\r\n                                                                                    end)\r\n                                                                                    return continuation\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.gainObjective(color, objective)\r\n                                                                                    return Combat.gainObjective(color, objective).doAfter(PlayBoard._convertObjectiveTokenPairsIntoVictoryPoints)\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.getObjectiveStackPosition(color, objective)\r\n                                                                                    local tag = Helper.toPascalCase(objective, \"ObjectiveToken\")\r\n                                                                                    local board = PlayBoard.getPlayBoard(color).content.board\r\n                                                                                    for _, snapPoint in ipairs(board.getSnapPoints()) do\r\n                                                                                        if Helper.isElementOf(tag, snapPoint.tags) then\r\n                                                                                            return board.positionToWorld(snapPoint.position)\r\n                                                                                        end\r\n                                                                                    end\r\n                                                                                    error(tag)\r\n                                                                                    return nil\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.getDrawDeck(color)\r\n                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                    local deckOrCard = Helper.getDeckOrCard(playBoard.content.drawDeckZone)\r\n                                                                                    return deckOrCard\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.getDiscard(color)\r\n                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                    local deckOrCard = Helper.getDeckOrCard(playBoard.content.discardZone)\r\n                                                                                    return deckOrCard\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.getHandedCards(color)\r\n                                                                                    return Helper.filter(Player[color].getHandObjects(), Types.isImperiumCard)\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.getDiscardedCards(color)\r\n                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                    local deckOrCard = Helper.getDeckOrCard(playBoard.content.discardZone)\r\n                                                                                    return Helper.getCards(deckOrCard)\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.getDiscardedCardCount(color)\r\n                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                    local deckOrCard = Helper.getDeckOrCard(playBoard.content.discardZone)\r\n                                                                                    return Helper.getCardCount(deckOrCard)\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.getIntrigues(color)\r\n                                                                                    return Helper.filter(Player[color].getHandObjects(), Types.isIntrigueCard)\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard._getPotentialCombatIntrigues(color)\r\n                                                                                    local predicate\r\n                                                                                    if Hagal.getRivalCount() == 2 then\r\n                                                                                        predicate = function (card)\r\n                                                                                            return Types.isIntrigueCard(card)\r\n                                                                                        end\r\n                                                                                    else\r\n                                                                                        predicate = Types.isIntrigueCard\r\n                                                                                    end\r\n                                                                                    return Helper.filter(Player[color].getHandObjects(), predicate)\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.getAquiredDreadnoughtCount(color)\r\n                                                                                    local park = PlayBoard.getPlayBoard(color).dreadnoughtPark\r\n                                                                                    return #Park.findEmptySlots(park)\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.getControlMarkerBag(color)\r\n                                                                                    local content = PlayBoard.getContent(color)\r\n                                                                                    assert(content)\r\n                                                                                    return content.controlMarkerBag\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard:_newSymmetricBoardPosition(x, y, z)\r\n                                                                                    if PlayBoard.isLeft(self.color) then\r\n                                                                                        return self:_newBoardPosition(-x, y, z)\r\n                                                                                    else\r\n                                                                                        return self:_newBoardPosition(x, y, z)\r\n                                                                                    end\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard:_newSymmetricBoardRotation(x, y, z)\r\n                                                                                    if PlayBoard.isLeft(self.color) then\r\n                                                                                        return self:_newBoardPosition(x, -y, z)\r\n                                                                                    else\r\n                                                                                        return self:_newBoardPosition(x, y, z)\r\n                                                                                    end\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard:_newOffsetedBoardPosition(x, y, z)\r\n                                                                                    if PlayBoard.isLeft(self.color) then\r\n                                                                                        return self:_newBoardPosition(12.75 + x, y, z)\r\n                                                                                    else\r\n                                                                                        return self:_newBoardPosition(x, y, z)\r\n                                                                                    end\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard:_newBoardPosition(x, y, z)\r\n                                                                                    return Vector(x, y, -z)\r\n                                                                                end\r\n\r\n                                                                                --- Relative to the board, not a commander.\r\n                                                                                function PlayBoard.isLeft(color)\r\n                                                                                    return color == \"Red\" or color == \"White\" or color == \"Blue\"\r\n                                                                                end\r\n\r\n                                                                                --- Relative to the board, not a commander.\r\n                                                                                function PlayBoard.isRight(color)\r\n                                                                                    return color == \"Green\" or color == \"Purple\" or color == \"Yellow\"\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                -- bloodlines bug fix - hook clashes with dreadnought park\r\n                                                                                function PlayBoard.isBottom(color)\r\n                                                                                    return color == \"Blue\" or color == \"Yellow\"\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard:trash(object)\r\n                                                                                    self.trashQueue = self.trashQueue or Helper.createSpaceQueue()\r\n                                                                                    self.trashQueue.submit(function (height)\r\n                                                                                        object.interactable = true\r\n                                                                                        object.setLock(false)\r\n                                                                                        object.setPosition(self.content.trash.getPosition() + Vector(0, 1 + height * 0.5, 0))\r\n                                                                                    end)\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.isInside(color, object)\r\n                                                                                    local position = object.getPosition()\r\n                                                                                    local center = PlayBoard.getPlayBoard(color).content.board.getPosition()\r\n                                                                                    local offset = position - center\r\n                                                                                    return math.abs(offset.x) < 12 and math.abs(offset.z) < 10\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.getHandOrientedPosition(color)\r\n                                                                                    -- Add an offset to put the card on the left side of the player's hand.\r\n                                                                                    local handTransform = Player[color].getHandTransform()\r\n                                                                                    local position = handTransform.position\r\n                                                                                    if handTransform.rotation == Vector(0, 0, 0) then\r\n                                                                                        position = position + Vector(-12.5, 0, 0)\r\n                                                                                    elseif handTransform.rotation == Vector(0, 270, 0) then\r\n                                                                                        position = position + Vector(0, 0, -8.5)\r\n                                                                                    elseif handTransform.rotation == Vector(0, 90, 0) then\r\n                                                                                        position = position + Vector(0, 0, 8.5)\r\n                                                                                    else\r\n                                                                                        -- Should not happen.\r\n                                                                                        position = position + Vector(0, 0, 0)\r\n                                                                                    end\r\n                                                                                    local rotation = handTransform.rotation + Vector(0, 180, 0)\r\n                                                                                    return {\r\n                                                                                        position = position,\r\n                                                                                        rotation = rotation\r\n                                                                                    }\r\n                                                                                end\r\n\r\n                                                                                ---\r\n                                                                                function PlayBoard.acquireVoice(color, voiceToken)\r\n                                                                                    Types.assertIsPlayerColor(color)\r\n                                                                                    assert(voiceToken)\r\n                                                                                    local position = PlayBoard.getPlayBoard(color).content.firstPlayerInitialPosition\r\n                                                                                    voiceToken.setPositionSmooth(position + Vector(0, 1, -1.8))\r\n                                                                                    return true\r\n                                                                                end\r\n\r\n                                                                                return PlayBoard\r\n\r\n                                                                            end)\r\n                                                                            __bundle_register(\"Pdf\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                local Helper = require(\"utils.Helper\")\r\n                                                                                local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                local Pdf = {\r\n                                                                                    books = {\r\n                                                                                        base = {guid = \"dc6297\", position = Vector(-13, 0.61, -29), scale = Vector(1.67, 1, 1.67)},\r\n                                                                                        guide = {guid = \"43fd49\", position = Vector(-5, 0.61, -29), scale = Vector(1.59, 1, 1.59)},\r\n                                                                                        --riseOfIx = { guid = \"2ed556\", position = Vector(5, 0.61, -29), scale = Vector(1.5, 1, 1.5) },\r\n                                                                                        --immortality = { guid = \"e2ef02\", position = Vector(13, 0.61, -29), scale = Vector(1.1, 1, 1.1) },\r\n                                                                                    }}\r\n\r\n                                                                                    ---\r\n                                                                                    function Pdf.onLoad()\r\n                                                                                        Pdf.fr = require(\"fr.Pdf\")\r\n                                                                                        Pdf.en = require(\"en.Pdf\")\r\n                                                                                    end\r\n\r\n                                                                                    ---\r\n                                                                                    function Pdf.setUp()\r\n                                                                                        local locale = I18N.getLocale()\r\n\r\n                                                                                        if locale == \"en\" then\r\n                                                                                            -- Bail out since the starting PDFs are in english.\r\n                                                                                            return\r\n                                                                                        end\r\n\r\n                                                                                        for bookName, bookInfo in pairs(Pdf.books) do\r\n                                                                                            local bookUrl = Pdf[locale][bookName]\r\n                                                                                            Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                                                Pdf._mututateBook(bookName, bookInfo, bookUrl)\r\n                                                                                            end)\r\n                                                                                        end\r\n                                                                                    end\r\n\r\n                                                                                    function Pdf._mututateBook(_, info, url)\r\n                                                                                        --- We cannot create PDF ex nihilo, but need an existing PDF to be mutated.\r\n                                                                                        local book = getObjectFromGUID(info.guid)\r\n                                                                                        local data = book.getData()\r\n                                                                                        data.CustomPDF.PDFUrl = url\r\n                                                                                        book.destruct()\r\n                                                                                        spawnObjectData({data = data})\r\n                                                                                    end\r\n\r\n                                                                                    return Pdf\r\n\r\n                                                                                end)\r\n                                                                                __bundle_register(\"en.Pdf\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                    return {\r\n                                                                                        base = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141310401/5D80D79E4DE7E7D43B4D9EC7FAFDAAEB1772F30C/\",\r\n                                                                                        guide = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141310081/F2BA836F3CFB5B076AC051794400FFC15812CACF/\",\r\n                                                                                        riseOfIx = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141356865/F55C0BC54AD4F658FFF7A511D5740BF93A0CB19E/\",\r\n                                                                                        immortality = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141359158/DE61CF514A5C813C2E46CAA7C7FF76DDB3069641/\",\r\n                                                                                    }\r\n\r\n                                                                                end)\r\n                                                                                __bundle_register(\"fr.Pdf\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                    return {\r\n                                                                                        base = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141312592/5DABE09D5D6B5430AD1EFC1179AEE743A18CA802/\",\r\n                                                                                        guide = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141312881/328FD1BA1D23DD410440ABBFED3F2507EDBAC40C/\",\r\n                                                                                        riseOfIx = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141357832/C7ACC9E96C2C162A13761F3C7C285AB9CF6D1C96/\",\r\n                                                                                        immortality = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141359528/8542ECE0CBCE22F7B43D305B72718C7D689C1128/\",\r\n                                                                                    }\r\n\r\n                                                                                end)\r\n                                                                                __bundle_register(\"Music\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                    local Helper = require(\"utils.Helper\")\r\n\r\n                                                                                    local Music = {\r\n                                                                                        sounds = {\r\n                                                                                            atomics = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141278359/C9F0035DAF76EE6B353F9885C2859EBB282A9988/\",\r\n                                                                                            battle = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141336378/474E09BB37578C5FC1CFDE001E7D6785EE54C52F/\",\r\n                                                                                            turn = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141336932/2C9434C28270DDD87D33648DA7B17B23DA0D5ECF/\",\r\n                                                                                            chomp = \"https://raw.githubusercontent.com/cozos/dune-custom/master/eating-a-cracker-mouth-open-81375.mp3\"\r\n                                                                                        }}\r\n\r\n                                                                                        ---\r\n                                                                                        function Music.onLoad(state)\r\n                                                                                            if state.settings then\r\n                                                                                                Music.enabled = state.settings.soundEnabled\r\n                                                                                            end\r\n                                                                                        end\r\n\r\n                                                                                        ---\r\n                                                                                        function Music.setUp(settings)\r\n                                                                                            Music.enabled = settings.soundEnabled\r\n                                                                                        end\r\n\r\n                                                                                        ---\r\n                                                                                        function Music.play(sound)\r\n                                                                                            if Music.enabled and Music.sounds[sound] then\r\n                                                                                                MusicPlayer.setCurrentAudioclip({\r\n                                                                                                    url = Music.sounds[sound],\r\n                                                                                                    title = sound\r\n                                                                                                })\r\n                                                                                            end\r\n                                                                                            -- Do nothing, but introduces a pause in sync with the music which highlights a noticable event.\r\n                                                                                            Helper.onceTimeElapsed(1)\r\n                                                                                        end\r\n\r\n                                                                                        return Music\r\n\r\n                                                                                    end)\r\n                                                                                    __bundle_register(\"MainBoard\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                        local Module = require(\"utils.Module\")\r\n                                                                                        local Helper = require(\"utils.Helper\")\r\n                                                                                        local Park = require(\"utils.Park\")\r\n                                                                                        local I18N = require(\"utils.I18N\")\r\n                                                                                        local Dialog = require(\"utils.Dialog\")\r\n\r\n                                                                                        local Types = Module.lazyRequire(\"Types\")\r\n                                                                                        local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                        local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n                                                                                        local ShippingTrack = Module.lazyRequire(\"ShippingTrack\")\r\n                                                                                        local TechMarket = Module.lazyRequire(\"TechMarket\")\r\n                                                                                        local Combat = Module.lazyRequire(\"Combat\")\r\n                                                                                        local Resource = Module.lazyRequire(\"Resource\")\r\n                                                                                        local Action = Module.lazyRequire(\"Action\")\r\n                                                                                        local TurnControl = Module.lazyRequire(\"TurnControl\")\r\n                                                                                        local Commander = Module.lazyRequire(\"Commander\")\r\n                                                                                        local Music = Module.lazyRequire(\"Music\")\r\n                                                                                        local Hagal = Module.lazyRequire(\"Hagal\")\r\n                                                                                        local Board = Module.lazyRequire(\"Board\")\r\n                                                                                        local ImperiumRow = Module.lazyRequire(\"ImperiumRow\")\r\n\r\n                                                                                        local MainBoard = {\r\n                                                                                            spaceDetails = {\r\n                                                                                                sardaukar = {group = \"emperor\", posts = {\"emperor\"}},\r\n                                                                                                vastWealth = {group = \"emperor\", posts = {\"emperor\"}},\r\n                                                                                                dutifulService = {group = \"emperor\", posts = {\"emperor\"}},\r\n\r\n                                                                                                militarySupport = {group = \"greatHouses\", posts = {\"greatHouses\"}},\r\n                                                                                                economicSupport = {group = \"greatHouses\", posts = {\"greatHouses\"}},\r\n\r\n                                                                                                heighliner = {group = \"spacingGuild\", combat = true, posts = {\"spacingGuild\"}},\r\n                                                                                                deliverSupplies = {group = \"spacingGuild\", posts = {\"spacingGuild\"}},\r\n\r\n                                                                                                espionage = {group = \"beneGesserit\", posts = {\"beneGesserit\"}},\r\n                                                                                                secrets = {group = \"beneGesserit\", posts = {\"beneGesserit\"}},\r\n\r\n                                                                                                controversialTechnology = {group = \"fringeWorlds\", posts = {\"fringeWorlds\"}},\r\n                                                                                                expedition = {group = \"fringeWorlds\", posts = {\"fringeWorlds\"}},\r\n\r\n                                                                                                desertTactics = {group = \"fremen\", combat = true, posts = {\"fremen\"}},\r\n                                                                                                fremkit = {group = \"fremen\", combat = true, posts = {\"fremen\"}},\r\n                                                                                                hardyWarriors = {group = \"fremen\", combat = true, posts = {\"fremen\"}},\r\n                                                                                                desertMastery = {group = \"fremen\", combat = true, posts = {\"fremen\"}},\r\n\r\n                                                                                                highCouncil = {group = \"landsraad\", posts = {\"landsraadCouncil1\"}},\r\n                                                                                                imperialPrivilege = {group = \"landsraad\", posts = {\"landsraadCouncil1\"}},\r\n                                                                                                swordmaster = {group = \"landsraad\", posts = {\"landsraadCouncil1\"}},\r\n                                                                                                assemblyHall = {group = \"landsraad\", posts = {\"landsraadCouncil2\"}},\r\n                                                                                                gatherSupport = {group = \"landsraad\", posts = {\"landsraadCouncil2\"}},\r\n\r\n                                                                                                techNegotiation = {group = \"ix\", posts = {\"ix\"}},\r\n                                                                                                dreadnought = {group = \"ix\", posts = {\"ix\"}},\r\n\r\n                                                                                                shipping = {group = \"choam\", posts = {\"choam\"}},\r\n                                                                                                acceptContract = {group = \"choam\", posts = {\"choam\"}},\r\n\r\n                                                                                                smuggling = {group = \"choam\", posts = {\"ixChoam\"}},\r\n                                                                                                interstellarShipping = {group = \"choam\", posts = {\"ixChoam\"}},\r\n\r\n                                                                                                sietchTabr = {group = \"city\", combat = true, posts = {\"sietchTabrResearchStation\"}},\r\n                                                                                                researchStation = {group = \"city\", combat = true, posts = {\"sietchTabrResearchStation\", \"researchStationSpiceRefinery\"}},\r\n                                                                                                spiceRefinery = {group = \"city\", combat = true, posts = {\"researchStationSpiceRefinery\", \"spiceRefineryArrakeen\"}},\r\n                                                                                                arrakeen = {group = \"city\", combat = true, posts = {\"spiceRefineryArrakeen\"}},\r\n                                                                                                carthag = {group = \"city\", combat = true, posts = {\"carthag\"}},\r\n\r\n                                                                                                deepDesert = {group = \"desert\", combat = true, posts = {\"deepDesert\"}},\r\n                                                                                                haggaBasin = {group = \"desert\", combat = true, posts = {\"haggaBasin\"}},\r\n                                                                                                habbanyaErg = {group = \"desert\", combat = true, posts = {\"habbanyaErg\"}},\r\n                                                                                                imperialBasin = {group = \"desert\", combat = true, posts = {\"imperialBasin\"}},\r\n                                                                                                -- bloodlines tuek's sietch spice bonus token\r\n                                                                                                tueksSietch = {group = \"desert\", combat = true, posts = {\"tueksSietch\"}},\r\n                                                                                            }}\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.onLoad(state)\r\n                                                                                                Helper.append(MainBoard, Helper.resolveGUIDs(false, {\r\n                                                                                                    immortalityPatch = \"6cf62a\",\r\n                                                                                                    -- bloodlines tuek's sietch board\r\n                                                                                                    bl_EsmarBoard = \"290e79\",\r\n                                                                                                    spiceBonusTokens = {\r\n                                                                                                        deepDesert = \"116807\",\r\n                                                                                                        haggaBasin = \"c24705\",\r\n                                                                                                        imperialBasin = \"3cdb2d\",\r\n                                                                                                        habbanyaErg = \"394db2\",\r\n                                                                                                        -- bloodlines tuek's sietch spice bonus token\r\n                                                                                                        tueksSietch = \"0984aa\",\r\n                                                                                                    },\r\n                                                                                                    firstPlayerMarker = \"1f5576\",\r\n                                                                                                    shieldWallToken = \"31d6b0\",\r\n                                                                                                    -- bloodlines sardaukar commanders\r\n                                                                                                    sardaukarCommanders = {\r\n                                                                                                        sc_GatherSupport = \"f951ae\",\r\n                                                                                                        sc_AssemblyHall = \"21e46d\",\r\n                                                                                                        sc_HighCouncil = \"d226f7\",\r\n                                                                                                        sc_Sardaukar = \"f8e9ea\",\r\n                                                                                                        sc_DutifulService = \"eb7b9d\",\r\n                                                                                                        sc_DeliverSupplies = \"47ef40\",\r\n                                                                                                        sc_Standard = \"a0605f\",\r\n                                                                                                        sc_NoPopup = \"e070d6\",\r\n                                                                                                    },\r\n                                                                                                }))\r\n                                                                                                MainBoard.spiceBonuses = {}\r\n\r\n                                                                                                Helper.forEachValue(MainBoard.spiceBonusTokens, Helper.noPhysicsNorPlay)\r\n\r\n                                                                                                if state.settings then\r\n                                                                                                    for name, token in pairs(MainBoard.spiceBonusTokens) do\r\n                                                                                                        if token then\r\n                                                                                                            local value = state.MainBoard and state.MainBoard.spiceBonuses[name] or 0\r\n                                                                                                            MainBoard.spiceBonuses[name] = Resource.new(token, nil, \"spice\", value, name)\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    MainBoard.mainBoard = Board.getBoard(\"mainBoard4P\") or Board.getBoard(\"mainBoard6P\")\r\n                                                                                                    MainBoard.emperorBoard = Board.getBoard(\"emperorBoard\")\r\n                                                                                                    MainBoard.fremenBoard = Board.getBoard(\"fremenBoard\")\r\n\r\n                                                                                                    MainBoard._transientSetUp(state.settings)\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.onSave(state)\r\n                                                                                                state.MainBoard = {\r\n                                                                                                    spiceBonuses = Helper.map(MainBoard.spiceBonuses, function (_, resource)\r\n                                                                                                        return resource:get()\r\n                                                                                                    end),\r\n                                                                                                }\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.setUp(settings)\r\n                                                                                                local continuation = Helper.createContinuation(\"MainBoard.setUp\")\r\n\r\n                                                                                                if settings.numberOfPlayers == 6 then\r\n                                                                                                    MainBoard.mainBoard = Board.selectBoard(\"mainBoard6P\", settings.language)\r\n                                                                                                    MainBoard.emperorBoard = Board.selectBoard(\"emperorBoard\", settings.language)\r\n                                                                                                    MainBoard.fremenBoard = Board.selectBoard(\"fremenBoard\", settings.language)\r\n                                                                                                    continuation.run()\r\n                                                                                                    if settings.immortality then\r\n                                                                                                        local position = MainBoard.immortalityPatch.getPosition()\r\n                                                                                                        MainBoard.immortalityPatch.setPosition(position + Vector(1.6, 0, -1.9))\r\n                                                                                                    end\r\n                                                                                                else\r\n                                                                                                    MainBoard.mainBoard = Board.selectBoard(\"mainBoard4P\", settings.language)\r\n                                                                                                    Board.destructBoard(\"emperorBoard\")\r\n                                                                                                    MainBoard.emperorBoard = nil\r\n                                                                                                    Board.destructBoard(\"fremenBoard\")\r\n                                                                                                    MainBoard.fremenBoard = nil\r\n                                                                                                    MainBoard.spiceBonusTokens.habbanyaErg.destruct()\r\n                                                                                                    MainBoard.spiceBonusTokens.habbanyaErg = nil\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n\r\n                                                                                                Board.destructInactiveBoards()\r\n\r\n                                                                                                if settings.immortality then\r\n                                                                                                else\r\n                                                                                                    MainBoard.immortalityPatch.destruct()\r\n                                                                                                    MainBoard.immortalityPatch = nil\r\n                                                                                                end\r\n\r\n                                                                                                local nextContinuation = Helper.createContinuation(\"MainBoard.setUp.next\")\r\n                                                                                                continuation.doAfter(function ()\r\n                                                                                                    MainBoard._transientSetUp(settings)\r\n                                                                                                    nextContinuation.run()\r\n                                                                                                end)\r\n\r\n                                                                                                return nextContinuation\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._transientSetUp(settings)\r\n                                                                                                MainBoard._processSnapPoints(settings)\r\n\r\n                                                                                                if MainBoard.shieldWallToken then\r\n                                                                                                    MainBoard.shieldWallToken.clearButtons()\r\n                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.shieldWallToken, 7, {\r\n                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)\r\n                                                                                                            MainBoard.blowUpShieldWall(color)\r\n                                                                                                        end),\r\n                                                                                                        position = MainBoard.shieldWallToken.getPosition() + Vector(0.2, 0.1, 0.2),\r\n                                                                                                        width = 800,\r\n                                                                                                        height = 800,\r\n                                                                                                        color = {0, 0, 0, 0},\r\n                                                                                                    tooltip = I18N(\"explosion\")})\r\n                                                                                                end\r\n\r\n                                                                                                MainBoard._createRoundIndicator()\r\n                                                                                                -- bloodlines sardaukar commander buttons\r\n                                                                                                MainBoard._createSardaukarCommanderButtons()\r\n\r\n                                                                                                Helper.registerEventListener(\"phaseStart\", function (phase)\r\n                                                                                                    if phase == \"makers\" then\r\n                                                                                                        for desert, _ in pairs(MainBoard.spiceBonusTokens) do\r\n                                                                                                            local space = MainBoard.spaces[desert]\r\n                                                                                                            if space then\r\n                                                                                                                local spiceBonus = MainBoard.spiceBonuses[desert]\r\n                                                                                                                if Park.isEmpty(space.park) then\r\n                                                                                                                    spiceBonus:change(1)\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        if settings.wormEatsTheCard then\r\n                                                                                                            -- TODO(arwin.tio) Get better sound\r\n                                                                                                            -- Music.play(\"chomp\")\r\n                                                                                                            ImperiumRow.wormEatsTheCard()\r\n                                                                                                        end\r\n                                                                                                    elseif phase == \"recall\" then\r\n\r\n                                                                                                        -- Recalling dreadnoughts in controlable spaces.\r\n                                                                                                        for _, bannerZone in pairs(MainBoard.banners) do\r\n                                                                                                            for _, dreadnought in ipairs(Helper.filter(bannerZone.getObjects(), Types.isDreadnought)) do\r\n                                                                                                                for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                    if dreadnought.hasTag(color) then\r\n                                                                                                                        if dreadnought.hasTag(\"toBeRecalled\") then\r\n                                                                                                                            dreadnought.removeTag(\"toBeRecalled\")\r\n                                                                                                                            Park.putObject(dreadnought, Combat.getDreadnoughtPark(color))\r\n                                                                                                                        else\r\n                                                                                                                            dreadnought.addTag(\"toBeRecalled\")\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        -- Recalling agents.\r\n                                                                                                        for _, space in pairs(MainBoard.spaces) do\r\n                                                                                                            if space.park then\r\n                                                                                                                for _, object in ipairs(Park.getObjects(space.park)) do\r\n                                                                                                                    if object.hasTag(\"Agent\") then\r\n                                                                                                                        for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                            if object.hasTag(color) then\r\n                                                                                                                                if settings.numberOfPlayers == 6 and object.hasTag(\"Swordmaster\") then\r\n                                                                                                                                    PlayBoard.destroySwordmaster(color)\r\n                                                                                                                                else\r\n                                                                                                                                    Park.putObject(object, PlayBoard.getAgentPark(color))\r\n                                                                                                                                end\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._createRoundIndicator()\r\n                                                                                                local primaryTable = getObjectFromGUID(\"2b4b92\")\r\n                                                                                                local origin = primaryTable.getPosition() + Vector(-3.7, 1.8, -16.5)\r\n\r\n                                                                                                Helper.createAbsoluteButtonWithRoundness(primaryTable, 1, {\r\n                                                                                                    click_function = Helper.registerGlobalCallback(),\r\n                                                                                                    label = I18N(\"roundNumber\"),\r\n                                                                                                    position = origin,\r\n                                                                                                    width = 1000,\r\n                                                                                                    height = 200,\r\n                                                                                                    font_size = 140,\r\n                                                                                                    color = {0, 0, 0, 0},\r\n                                                                                                    font_color = {1, 1, 1, 80},\r\n                                                                                                })\r\n\r\n                                                                                                Helper.createAbsoluteButtonWithRoundness(primaryTable, 1, {\r\n                                                                                                    click_function = Helper.registerGlobalCallback(),\r\n                                                                                                    position = origin + Vector(0, 0, -1),\r\n                                                                                                    width = 1000,\r\n                                                                                                    height = 1000,\r\n                                                                                                    font_size = 700,\r\n                                                                                                    color = {0, 0, 0, 0},\r\n                                                                                                    font_color = {1, 1, 1, 80},\r\n                                                                                                })\r\n\r\n                                                                                                local function updateContent()\r\n                                                                                                    primaryTable.editButton({index = 1, label = tostring(TurnControl.getCurrentRound())})\r\n                                                                                                end\r\n\r\n                                                                                                Helper.registerEventListener(\"phaseStart\", function (phase)\r\n                                                                                                    if phase == \"roundStart\" then\r\n                                                                                                        updateContent()\r\n                                                                                                    end\r\n                                                                                                end)\r\n\r\n                                                                                                Helper.onceTimeElapsed(1).doAfter(updateContent)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            -- bloodlines sardaukar commander buttons\r\n                                                                                            function MainBoard._createSardaukarCommanderButtons()\r\n                                                                                                -- bloodlines sardaukar commander assembly hall\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_AssemblyHall then\r\n                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_AssemblyHall, 7, {\r\n                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)\r\n                                                                                                            MainBoard.recruitSardaukarCommanderFromAssemblyHall(color)\r\n                                                                                                        end),\r\n                                                                                                        position = MainBoard.sardaukarCommanders.sc_AssemblyHall.getPosition() + Vector(0.2, 0.1, 0.2),\r\n                                                                                                        width = 1000,\r\n                                                                                                        height = 1000,\r\n                                                                                                        color = {0, 0, 0, 0},\r\n                                                                                                    tooltip = I18N(\"sardaukarCommanderAssemblyHall\")})\r\n                                                                                                end\r\n\r\n                                                                                                -- bloodlines sardaukar commander gather support\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_GatherSupport then\r\n                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_GatherSupport, 7, {\r\n                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)\r\n                                                                                                            MainBoard.recruitSardaukarCommanderFromGatherSupport(color)\r\n                                                                                                        end),\r\n                                                                                                        position = MainBoard.sardaukarCommanders.sc_GatherSupport.getPosition() + Vector(0.2, 0.1, 0.2),\r\n                                                                                                        width = 1000,\r\n                                                                                                        height = 1000,\r\n                                                                                                        color = {0, 0, 0, 0},\r\n                                                                                                    tooltip = I18N(\"sardaukarCommanderGatherSupport\")})\r\n                                                                                                end\r\n\r\n                                                                                                -- bloodlines sardaukar commander high council\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_HighCouncil then\r\n                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_HighCouncil, 7, {\r\n                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)\r\n                                                                                                            MainBoard.recruitSardaukarCommanderFromHighCouncil(color)\r\n                                                                                                        end),\r\n                                                                                                        position = MainBoard.sardaukarCommanders.sc_HighCouncil.getPosition() + Vector(0.2, 0.1, 0.2),\r\n                                                                                                        width = 1000,\r\n                                                                                                        height = 1000,\r\n                                                                                                        color = {0, 0, 0, 0},\r\n                                                                                                    tooltip = I18N(\"sardaukarCommanderHighCouncil\")})\r\n                                                                                                end\r\n\r\n                                                                                                -- bloodlines sardaukar commander sardaukar\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_Sardaukar then\r\n                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_Sardaukar, 7, {\r\n                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)\r\n                                                                                                            MainBoard.recruitSardaukarCommanderFromSardaukar(color)\r\n                                                                                                        end),\r\n                                                                                                        position = MainBoard.sardaukarCommanders.sc_Sardaukar.getPosition() + Vector(0.2, 0.1, 0.2),\r\n                                                                                                        width = 1000,\r\n                                                                                                        height = 1000,\r\n                                                                                                        color = {0, 0, 0, 0},\r\n                                                                                                    tooltip = I18N(\"sardaukarCommanderSardaukar\")})\r\n                                                                                                end\r\n\r\n                                                                                                -- bloodlines sardaukar commander dutiful service\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_DutifulService then\r\n                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_DutifulService, 7, {\r\n                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)\r\n                                                                                                            MainBoard.recruitSardaukarCommanderFromDutifulService(color)\r\n                                                                                                        end),\r\n                                                                                                        position = MainBoard.sardaukarCommanders.sc_DutifulService.getPosition() + Vector(0.2, 0.1, 0.2),\r\n                                                                                                        width = 1000,\r\n                                                                                                        height = 1000,\r\n                                                                                                        color = {0, 0, 0, 0},\r\n                                                                                                    tooltip = I18N(\"sardaukarCommanderDutifulService\")})\r\n                                                                                                end\r\n\r\n                                                                                                -- bloodlines sardaukar commander deliver supplies\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_DeliverSupplies then\r\n                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_DeliverSupplies, 7, {\r\n                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)\r\n                                                                                                            MainBoard.recruitSardaukarCommanderFromDeliverSupplies(color)\r\n                                                                                                        end),\r\n                                                                                                        position = MainBoard.sardaukarCommanders.sc_DeliverSupplies.getPosition() + Vector(0.2, 0.1, 0.2),\r\n                                                                                                        width = 1000,\r\n                                                                                                        height = 1000,\r\n                                                                                                        color = {0, 0, 0, 0},\r\n                                                                                                    tooltip = I18N(\"sardaukarCommanderDeliverSupplies\")})\r\n                                                                                                end\r\n\r\n                                                                                                -- bloodlines sardaukar commander standard\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_Standard then\r\n                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_Standard, 7, {\r\n                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)\r\n                                                                                                            MainBoard.recruitSardaukarCommanderFromStandard(color)\r\n                                                                                                        end),\r\n                                                                                                        position = MainBoard.sardaukarCommanders.sc_Standard.getPosition() + Vector(0.2, 0.1, 0.2),\r\n                                                                                                        width = 1000,\r\n                                                                                                        height = 1000,\r\n                                                                                                        color = {0, 0, 0, 0},\r\n                                                                                                    tooltip = I18N(\"sardaukarCommanderStandard\")})\r\n                                                                                                end\r\n\r\n                                                                                                -- bloodlines sardaukar commander no popup\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_NoPopup then\r\n                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_NoPopup, 7, {\r\n                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)\r\n                                                                                                            MainBoard.recruitSardaukarCommanderNoPopup(color)\r\n                                                                                                        end),\r\n                                                                                                        position = MainBoard.sardaukarCommanders.sc_NoPopup.getPosition() + Vector(0.2, 0.1, 0.2),\r\n                                                                                                        width = 1000,\r\n                                                                                                        height = 1000,\r\n                                                                                                        color = {0, 0, 0, 0},\r\n                                                                                                    tooltip = I18N(\"sardaukarCommanderNoPopup\")})\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            -- bloodlines sardaukar commander assembly hall\r\n                                                                                            function MainBoard.recruitSardaukarCommanderFromAssemblyHall(color)\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_AssemblyHall ~= nil then\r\n                                                                                                    if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                        if PlayBoard.getResource(color, \"solari\"):get() >= 1 then\r\n                                                                                                            Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                                if confirmed then\r\n                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                    broadcastToAll(I18N(\"recruitSardaukarCommanderAssemblyHall\"), color)\r\n                                                                                                                    Combat.recruitSardaukarCommander(color)\r\n                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                        playBoard.leader.resources(color, \"solari\", -1)\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_AssemblyHall.destruct()\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_AssemblyHall = nil\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        else\r\n                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                        end\r\n                                                                                                    elseif PlayBoard.getResource(color, \"solari\"):get() >= 2 then\r\n                                                                                                        Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                            if confirmed then\r\n                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                broadcastToAll(I18N(\"recruitSardaukarCommanderAssemblyHall\"), color)\r\n                                                                                                                Combat.recruitSardaukarCommander(color)\r\n                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                    playBoard.leader.resources(color, \"solari\", -2)\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_AssemblyHall.destruct()\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_AssemblyHall = nil\r\n                                                                                                                end)\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            -- bloodlines sardaukar commander gather support\r\n                                                                                            function MainBoard.recruitSardaukarCommanderFromGatherSupport(color)\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_GatherSupport ~= nil then\r\n                                                                                                    if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                        if PlayBoard.getResource(color, \"solari\"):get() >= 1 then\r\n                                                                                                            Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                                if confirmed then\r\n                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                    broadcastToAll(I18N(\"recruitSardaukarCommanderGatherSupport\"), color)\r\n                                                                                                                    Combat.recruitSardaukarCommander(color)\r\n                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                        playBoard.leader.resources(color, \"solari\", -1)\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_GatherSupport = nil\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        else\r\n                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                        end\r\n                                                                                                    elseif PlayBoard.getResource(color, \"solari\"):get() >= 2 then\r\n                                                                                                        Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                            if confirmed then\r\n                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                broadcastToAll(I18N(\"recruitSardaukarCommanderGatherSupport\"), color)\r\n                                                                                                                Combat.recruitSardaukarCommander(color)\r\n                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                    playBoard.leader.resources(color, \"solari\", -2)\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_GatherSupport = nil\r\n                                                                                                                end)\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            -- bloodlines sardaukar commander high council\r\n                                                                                            function MainBoard.recruitSardaukarCommanderFromHighCouncil(color)\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_HighCouncil ~= nil then\r\n                                                                                                    if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                        if PlayBoard.getResource(color, \"solari\"):get() >= 1 then\r\n                                                                                                            Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                                if confirmed then\r\n                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                    broadcastToAll(I18N(\"recruitSardaukarCommanderHighCouncil\"), color)\r\n                                                                                                                    Combat.recruitSardaukarCommander(color)\r\n                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                        playBoard.leader.resources(color, \"solari\", -1)\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_HighCouncil.destruct()\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_HighCouncil = nil\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        else\r\n                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                        end\r\n                                                                                                    elseif PlayBoard.getResource(color, \"solari\"):get() >= 2 then\r\n                                                                                                        Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                            if confirmed then\r\n                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                broadcastToAll(I18N(\"recruitSardaukarCommanderHighCouncil\"), color)\r\n                                                                                                                Combat.recruitSardaukarCommander(color)\r\n                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                    playBoard.leader.resources(color, \"solari\", -2)\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_HighCouncil.destruct()\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_HighCouncil = nil\r\n                                                                                                                end)\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            -- bloodlines sardaukar commander sardaukar\r\n                                                                                            function MainBoard.recruitSardaukarCommanderFromSardaukar(color)\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_Sardaukar ~= nil then\r\n                                                                                                    if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                        if PlayBoard.getResource(color, \"solari\"):get() >= 1 then\r\n                                                                                                            Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                                if confirmed then\r\n                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                    broadcastToAll(I18N(\"recruitSardaukarCommanderSardaukar\"), color)\r\n                                                                                                                    Combat.recruitSardaukarCommander(color)\r\n                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                        playBoard.leader.resources(color, \"solari\", -1)\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_Sardaukar.destruct()\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_Sardaukar = nil\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        else\r\n                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                        end\r\n                                                                                                    elseif PlayBoard.getResource(color, \"solari\"):get() >= 2 then\r\n                                                                                                        Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                            if confirmed then\r\n                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                broadcastToAll(I18N(\"recruitSardaukarCommanderSardaukar\"), color)\r\n                                                                                                                Combat.recruitSardaukarCommander(color)\r\n                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                    playBoard.leader.resources(color, \"solari\", -2)\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_Sardaukar.destruct()\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_Sardaukar = nil\r\n                                                                                                                end)\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            -- bloodlines sardaukar commander dutiful service\r\n                                                                                            function MainBoard.recruitSardaukarCommanderFromDutifulService(color)\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_DutifulService ~= nil then\r\n                                                                                                    if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                        if PlayBoard.getResource(color, \"solari\"):get() >= 1 then\r\n                                                                                                            Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                                if confirmed then\r\n                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                    broadcastToAll(I18N(\"recruitSardaukarCommanderDutifulService\"), color)\r\n                                                                                                                    Combat.recruitSardaukarCommander(color)\r\n                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                        playBoard.leader.resources(color, \"solari\", -1)\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_DutifulService.destruct()\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_DutifulService = nil\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        else\r\n                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                        end\r\n                                                                                                    elseif PlayBoard.getResource(color, \"solari\"):get() >= 2 then\r\n                                                                                                        Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                            if confirmed then\r\n                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                broadcastToAll(I18N(\"recruitSardaukarCommanderDutifulService\"), color)\r\n                                                                                                                Combat.recruitSardaukarCommander(color)\r\n                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                    playBoard.leader.resources(color, \"solari\", -2)\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_DutifulService.destruct()\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_DutifulService = nil\r\n                                                                                                                end)\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            -- bloodlines sardaukar commander deliver supplies\r\n                                                                                            function MainBoard.recruitSardaukarCommanderFromDeliverSupplies(color)\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_DeliverSupplies ~= nil then\r\n                                                                                                    if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                        if PlayBoard.getResource(color, \"solari\"):get() >= 1 then\r\n                                                                                                            Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                                if confirmed then\r\n                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                    broadcastToAll(I18N(\"recruitSardaukarCommanderDeliverSupplies\"), color)\r\n                                                                                                                    Combat.recruitSardaukarCommander(color)\r\n                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                        playBoard.leader.resources(color, \"solari\", -1)\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_DeliverSupplies.destruct()\r\n                                                                                                                        MainBoard.sardaukarCommanders.sc_DeliverSupplies = nil\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        else\r\n                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                        end\r\n                                                                                                    elseif PlayBoard.getResource(color, \"solari\"):get() >= 2 then\r\n                                                                                                        Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                            if confirmed then\r\n                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                broadcastToAll(I18N(\"recruitSardaukarCommanderDeliverSupplies\"), color)\r\n                                                                                                                Combat.recruitSardaukarCommander(color)\r\n                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                    playBoard.leader.resources(color, \"solari\", -2)\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_DeliverSupplies.destruct()\r\n                                                                                                                    MainBoard.sardaukarCommanders.sc_DeliverSupplies = nil\r\n                                                                                                                end)\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            -- bloodlines sardaukar commander standard\r\n                                                                                            function MainBoard.recruitSardaukarCommanderFromStandard(color)\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_Standard ~= nil then\r\n                                                                                                    Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderFreeConfirm\"), continuation, function (confirmed)\r\n                                                                                                        if confirmed then\r\n                                                                                                            local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                            broadcastToAll(I18N(\"recruitSardaukarCommanderStandard\"), color)\r\n                                                                                                            Combat.recruitSardaukarCommander(color)\r\n                                                                                                            Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                MainBoard.sardaukarCommanders.sc_Standard.destruct()\r\n                                                                                                                MainBoard.sardaukarCommanders.sc_Standard = nil\r\n                                                                                                            end)\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            -- bloodlines sardaukar commander no popup\r\n                                                                                            function MainBoard.recruitSardaukarCommanderNoPopup(color)\r\n                                                                                                if MainBoard.sardaukarCommanders.sc_NoPopup ~= nil then\r\n                                                                                                    if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                        if PlayBoard.getResource(color, \"solari\"):get() >= 1 then\r\n                                                                                                            local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                            broadcastToAll(I18N(\"recruitSardaukarCommanderNoPopup\"), color)\r\n                                                                                                            Combat.recruitSardaukarCommander(color)\r\n                                                                                                            Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                                playBoard.leader.resources(color, \"solari\", -1)\r\n                                                                                                            end)\r\n                                                                                                        else\r\n                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                        end\r\n                                                                                                    elseif PlayBoard.getResource(color, \"solari\"):get() >= 2 then\r\n                                                                                                        local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                        broadcastToAll(I18N(\"recruitSardaukarCommanderNoPopup\"), color)\r\n                                                                                                        Combat.recruitSardaukarCommander(color)\r\n                                                                                                        Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                            playBoard.leader.resources(color, \"solari\", -2)\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, \"Purple\")\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._processSnapPoints(settings)\r\n                                                                                                local highCouncilSeats = {}\r\n                                                                                                MainBoard.spaces = {}\r\n                                                                                                MainBoard.observationPosts = {}\r\n                                                                                                MainBoard.banners = {}\r\n\r\n                                                                                                MainBoard.collectSnapPointsOnAllBoards(settings, {\r\n\r\n                                                                                                    seat = function (name, position)\r\n                                                                                                        local str = name:sub(12)\r\n                                                                                                        local index = tonumber(str)\r\n                                                                                                        assert(index, \"Not a number: \" .. str)\r\n                                                                                                        highCouncilSeats[index] = position\r\n                                                                                                    end,\r\n\r\n                                                                                                    space = function (name, position)\r\n                                                                                                        if settings.riseOfIx then\r\n                                                                                                            local ignoredSpaceNames = {\r\n                                                                                                                \"assemblyHall\",\r\n                                                                                                                \"gatherSupport\",\r\n                                                                                                                \"shipping\",\r\n                                                                                                                \"acceptContract\",\r\n                                                                                                            }\r\n                                                                                                            for _, ignoredSpaceName in ipairs(ignoredSpaceNames) do\r\n                                                                                                                if Helper.startsWith(name, ignoredSpaceName) then\r\n                                                                                                                    return\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        MainBoard.spaces[name] = {name = name, position = position}\r\n                                                                                                    end,\r\n\r\n                                                                                                    post = function (name, position)\r\n                                                                                                        if settings.riseOfIx then\r\n                                                                                                            local ignoredSpaceNames = {\r\n                                                                                                                \"choam\",\r\n                                                                                                                \"landsraadCouncil2\"\r\n                                                                                                            }\r\n                                                                                                            for _, ignoredSpaceName in ipairs(ignoredSpaceNames) do\r\n                                                                                                                if Helper.startsWith(name, ignoredSpaceName) then\r\n                                                                                                                    return\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        MainBoard.observationPosts[name] = {name = name, position = position}\r\n                                                                                                    end,\r\n\r\n                                                                                                    spice = function (name, position)\r\n                                                                                                        local token = MainBoard.spiceBonusTokens[name]\r\n                                                                                                        -- bloodlines tuek's sietch spice token higher than others\r\n                                                                                                        -- token.setPosition(position + Vector(0, -0.05, 0))\r\n                                                                                                        token.setPosition(position + Vector(0, 0, 0))\r\n                                                                                                        Helper.noPhysics(token)\r\n                                                                                                        if not MainBoard.spiceBonuses[name] then\r\n                                                                                                            MainBoard.spiceBonuses[name] = Resource.new(token, nil, \"spice\", 0, name)\r\n                                                                                                        end\r\n                                                                                                    end,\r\n\r\n                                                                                                    flag = function (name, position)\r\n                                                                                                        local zone = spawnObject({\r\n                                                                                                            type = 'ScriptingTrigger',\r\n                                                                                                            position = position,\r\n                                                                                                            scale = {0.8, 1, 0.8},\r\n                                                                                                        })\r\n                                                                                                        Helper.markAsTransient(zone)\r\n                                                                                                        MainBoard.banners[name .. \"BannerZone\"] = zone\r\n                                                                                                    end\r\n                                                                                                })\r\n\r\n                                                                                                assert(#highCouncilSeats > 0)\r\n                                                                                                MainBoard.highCouncilPark = Park.createPark(\r\n                                                                                                    \"HighCouncil\",\r\n                                                                                                    highCouncilSeats,\r\n                                                                                                    Vector(0, 0, 0),\r\n                                                                                                    {Park.createTransientBoundingZone(0, Vector(0.5, 1, 0.5), highCouncilSeats)},\r\n                                                                                                    {\"HighCouncilSeatToken\"},\r\n                                                                                                    nil,\r\n                                                                                                    true,\r\n                                                                                                true)\r\n\r\n                                                                                                -- A trick to ensure that parent space are created before\r\n                                                                                                -- their child spaces (which always have a longer name).\r\n                                                                                                local orderedSpaces = Helper.getValues(MainBoard.spaces)\r\n                                                                                                table.sort(orderedSpaces, function (s1, s2)\r\n                                                                                                    return s1.name:len() < s2.name:len()\r\n                                                                                                end)\r\n                                                                                                for _, space in ipairs(orderedSpaces) do\r\n                                                                                                    MainBoard._createSpaceButton(space)\r\n                                                                                                end\r\n\r\n                                                                                                for _, observationPost in pairs(MainBoard.observationPosts) do\r\n                                                                                                    MainBoard._createObservationPostButton(observationPost)\r\n                                                                                                end\r\n\r\n                                                                                                for _, bannerZone in pairs(MainBoard.banners) do\r\n                                                                                                    MainBoard._createBannerSpace(bannerZone)\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._getAllBoards(settings)\r\n                                                                                                local boards = {MainBoard.mainBoard}\r\n\r\n                                                                                                if settings.numberOfPlayers == 6 then\r\n                                                                                                    assert(MainBoard.emperorBoard)\r\n                                                                                                    table.insert(boards, MainBoard.emperorBoard)\r\n                                                                                                    assert(MainBoard.fremenBoard)\r\n                                                                                                    table.insert(boards, MainBoard.fremenBoard)\r\n                                                                                                end\r\n\r\n                                                                                                if settings.riseOfIx then\r\n                                                                                                    table.insert(boards, ShippingTrack.getBoard())\r\n                                                                                                    table.insert(boards, TechMarket.getBoard())\r\n                                                                                                end\r\n\r\n                                                                                                return boards\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.collectSnapPointsOnAllBoards(settings, net)\r\n                                                                                                for _, board in ipairs(MainBoard._getAllBoards(settings)) do\r\n                                                                                                    Helper.collectSnapPoints(board, net)\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getHighCouncilSeatPark()\r\n                                                                                                return MainBoard.highCouncilPark\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.occupy(controlableSpace, color)\r\n                                                                                                for _, object in ipairs(controlableSpace.getObjects()) do\r\n                                                                                                    for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                        if Types.isControlMarker(object, otherColor) then\r\n                                                                                                            if otherColor ~= color then\r\n                                                                                                                local p = PlayBoard.getControlMarkerBag(otherColor).getPosition() + Vector(0, 1, 0)\r\n                                                                                                                object.setLock(false)\r\n                                                                                                                object.setPosition(p)\r\n                                                                                                            else\r\n                                                                                                                return\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n\r\n                                                                                                local p = controlableSpace.getPosition()\r\n                                                                                                PlayBoard.getControlMarkerBag(color).takeObject({\r\n                                                                                                    -- Position is adjusted so as to insert the token below any dreadnought.\r\n                                                                                                    position = Vector(p.x, 1.79, p.z),\r\n                                                                                                    rotation = Vector(0, 180, 0),\r\n                                                                                                    smooth = false,\r\n                                                                                                    callback_function = function (controlMarker)\r\n                                                                                                        controlMarker.setLock(true)\r\n                                                                                                    end\r\n                                                                                                })\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._createSpaceButton(space)\r\n                                                                                                Helper.createTransientAnchor(\"AgentPark\", space.position - Vector(0, 0.5, 0)).doAfter(function (anchor)\r\n                                                                                                    if MainBoard._findParentSpace(space) == space then\r\n\r\n                                                                                                        local p = space.position\r\n                                                                                                        -- FIXME Hardcoded height, use an existing parent anchor.\r\n                                                                                                        local slots = {\r\n                                                                                                            Vector(p.x - 0.36, 1.68, p.z - 0.3),\r\n                                                                                                            Vector(p.x + 0.36, 1.68, p.z + 0.3),\r\n                                                                                                            Vector(p.x - 0.36, 1.68, p.z + 0.3),\r\n                                                                                                        Vector(p.x + 0.36, 1.68, p.z - 0.3)}\r\n\r\n                                                                                                        space.zone = Park.createTransientBoundingZone(0, Vector(1, 3, 0.7), slots)\r\n                                                                                                        local tags = {\"Agent\"}\r\n                                                                                                        space.park = Park.createPark(\"AgentPark\", slots, nil, {space.zone}, tags, nil, false, true)\r\n                                                                                                        local snapPoints = {}\r\n                                                                                                        for _, slot in ipairs(slots) do\r\n                                                                                                            table.insert(snapPoints, Helper.createRelativeSnapPoint(anchor, slot, false, tags))\r\n                                                                                                        end\r\n                                                                                                        anchor.setSnapPoints(snapPoints)\r\n                                                                                                    else\r\n                                                                                                        space.zone = Park.createTransientBoundingZone(0, Vector(0.75, 1, 0.75), {space.position})\r\n                                                                                                    end\r\n\r\n                                                                                                    local tooltip = I18N(\"sendAgentTo\", {space = I18N(space.name)})\r\n                                                                                                    Helper.createAreaButton(space.zone, anchor, 1.75, tooltip, PlayBoard.withLeader(function (leader, color, altClick)\r\n                                                                                                        if TurnControl.getCurrentPlayer() == color then\r\n                                                                                                            leader.sendAgent(color, space.name, altClick)\r\n                                                                                                        else\r\n                                                                                                            Dialog.broadcastToColor(I18N('notYourTurn'), color, \"Purple\")\r\n                                                                                                        end\r\n                                                                                                    end))\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._createObservationPostButton(observationPost)\r\n                                                                                                local slots = {}\r\n                                                                                                for i = 1, 4 do\r\n                                                                                                    table.insert(slots, observationPost.position + Vector(0, (i - 1) * 0.5, 0))\r\n                                                                                                end\r\n                                                                                                Helper.createTransientAnchor(\"AgentPark\", observationPost.position - Vector(0, 0.5, 0)).doAfter(function (anchor)\r\n                                                                                                    observationPost.zone = Park.createTransientBoundingZone(0, Vector(0.75, 1, 0.75), slots)\r\n\r\n                                                                                                    local tags = {\"Spy\"}\r\n                                                                                                    observationPost.park = Park.createPark(\"SpyPark\", slots, nil, {observationPost.zone}, tags, nil, false, true)\r\n\r\n                                                                                                    local snapPoints = {}\r\n                                                                                                    for _, slot in ipairs(slots) do\r\n                                                                                                        table.insert(snapPoints, Helper.createRelativeSnapPoint(anchor, slot, false, tags))\r\n                                                                                                    end\r\n                                                                                                    anchor.setSnapPoints(snapPoints)\r\n\r\n                                                                                                    local tooltip = I18N(\"sendSpyTo\", {observationPost = I18N(observationPost.name)})\r\n                                                                                                    Helper.createAreaButton(observationPost.zone, anchor, 1.75, tooltip, PlayBoard.withLeader(function (leader, color)\r\n                                                                                                        leader.sendSpy(color, observationPost.name)\r\n                                                                                                    end))\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._createBannerSpace(bannerZone)\r\n                                                                                                Helper.createTransientAnchor(\"BannerPark\", bannerZone.getPosition() - Vector(0, 0.5, 0)).doAfter(function (anchor)\r\n                                                                                                    anchor.setSnapPoints({{\r\n                                                                                                        position = anchor.positionToLocal(bannerZone.getPosition()),\r\n                                                                                                        tags = {\"Flag\", \"Dreadnought\"},\r\n                                                                                                        rotation_snap = true,\r\n                                                                                                    }})\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            function MainBoard._findParentSpace(space)\r\n                                                                                                return MainBoard.spaces[MainBoard.findParentSpaceName(space.name)]\r\n                                                                                            end\r\n\r\n                                                                                            function MainBoard.findParentSpaceName(spaceName)\r\n                                                                                                assert(MainBoard.spaces[spaceName], \"No space named: \" .. spaceName)\r\n                                                                                                local parentSpaceName = spaceName\r\n                                                                                                local underscoreIndex = spaceName:find(\"_\")\r\n                                                                                                if underscoreIndex then\r\n                                                                                                    parentSpaceName = spaceName:sub(1, underscoreIndex - 1)\r\n                                                                                                    assert(MainBoard.spaces[parentSpaceName], \"No parent space named: \" .. parentSpaceName)\r\n                                                                                                end\r\n                                                                                                return parentSpaceName\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.sendAgent(color, spaceName, recallSpy)\r\n                                                                                                local continuation = Helper.createContinuation(\"MainBoard.sendAgent\")\r\n\r\n                                                                                                local agent = MainBoard._findProperAgent(color)\r\n\r\n                                                                                                local space = MainBoard.spaces[spaceName]\r\n                                                                                                local functionSpaceName = Helper.toCamelCase(\"_go\", space.name)\r\n                                                                                                local goSpace = MainBoard[functionSpaceName]\r\n                                                                                                assert(goSpace, \"Unknow go space function: \" .. functionSpaceName)\r\n\r\n                                                                                                local parentSpace = MainBoard._findParentSpace(space)\r\n                                                                                                local parentSpaceName = parentSpace.name\r\n\r\n                                                                                                if not agent then\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"noAgent\"), color, \"Purple\")\r\n                                                                                                    continuation.cancel()\r\n                                                                                                elseif MainBoard.hasAgentInSpace(parentSpaceName, color) then\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"agentAlreadyPresent\"), color, \"Purple\")\r\n                                                                                                    continuation.cancel()\r\n                                                                                                else\r\n                                                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                                                    local innerContinuation = Helper.createContinuation(\"MainBoard.\" .. parentSpaceName)\r\n\r\n                                                                                                    goSpace(color, leader, innerContinuation)\r\n                                                                                                    innerContinuation.doAfter(function (action)\r\n                                                                                                        -- The innerContinuation never cancels (but returns nil) to allow us to cancel the root continuation.\r\n                                                                                                        if action then\r\n                                                                                                            MainBoard._manageIntelligenceAndInfiltrate(color, parentSpaceName, recallSpy).doAfter(function (goAhead, spy, otherSpy, recallMode)\r\n                                                                                                                if goAhead then\r\n                                                                                                                    local innerInnerContinuation = Helper.createContinuation(\"MainBoard.\" .. spaceName .. \".goAhead\")\r\n                                                                                                                    Helper.emitEvent(\"agentSent\", color, parentSpaceName)\r\n                                                                                                                    Action.setContext(\"agentSent\", {space = parentSpaceName, cards = Helper.mapValues(PlayBoard.getCardsPlayedThisTurn(color), Helper.getID)})\r\n                                                                                                                    Park.putObject(agent, parentSpace.park)\r\n                                                                                                                    if spy then\r\n                                                                                                                        Park.putObject(spy, PlayBoard.getSpyPark(color))\r\n                                                                                                                        if recallMode == \"infiltrateAndIntelligence\" then\r\n                                                                                                                            Park.putObject(otherSpy, PlayBoard.getSpyPark(color))\r\n                                                                                                                            Action.log(I18N(\"infiltrateWithSpy\"), color)\r\n                                                                                                                            Action.log(I18N(\"gatherIntelligenceWithSpy\"), color)\r\n                                                                                                                            leader.drawImperiumCards(color, 1, true).doAfter(innerInnerContinuation.run)\r\n                                                                                                                        elseif recallMode == \"infiltrate\" then\r\n                                                                                                                            Action.log(I18N(\"infiltrateWithSpy\"), color)\r\n                                                                                                                            innerInnerContinuation.run()\r\n                                                                                                                        elseif recallMode == \"intelligence\" then\r\n                                                                                                                            Action.log(I18N(\"gatherIntelligenceWithSpy\"), color)\r\n                                                                                                                            leader.drawImperiumCards(color, 1, true).doAfter(innerInnerContinuation.run)\r\n                                                                                                                        else\r\n                                                                                                                            error(\"Unexpected mode: \" .. tostring(recallMode))\r\n                                                                                                                            innerInnerContinuation.run()\r\n                                                                                                                        end\r\n                                                                                                                    else\r\n                                                                                                                        innerInnerContinuation.run()\r\n                                                                                                                    end\r\n                                                                                                                    innerInnerContinuation.doAfter(function ()\r\n                                                                                                                        action()\r\n                                                                                                                        -- FIXME We are cheating here...\r\n                                                                                                                        Helper.onceTimeElapsed(2).doAfter(function ()\r\n                                                                                                                            Action.log(nil, color)\r\n                                                                                                                            Action.unsetContext(\"agentSent\")\r\n                                                                                                                        end)\r\n                                                                                                                        continuation.run()\r\n                                                                                                                    end)\r\n                                                                                                                else\r\n                                                                                                                    continuation.cancel()\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        else\r\n                                                                                                            continuation.cancel()\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                end\r\n\r\n                                                                                                return continuation\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._findProperAgent(color)\r\n                                                                                                local leftAlly = Commander.getLeftSeatedAlly(color)\r\n                                                                                                local rightAlly = Commander.getRightSeatedAlly(color)\r\n                                                                                                local agentPark = PlayBoard.getAgentPark(color)\r\n                                                                                                local candidates = {}\r\n                                                                                                if Commander.isCommander(color) then\r\n                                                                                                    local allyColor = Commander.getActivatedAlly(color)\r\n                                                                                                    if allyColor then\r\n                                                                                                        for _, agent in ipairs(Park.getObjects(agentPark)) do\r\n                                                                                                            if (leftAlly == allyColor and agent.hasTag(\"Left\"))\r\n                                                                                                                or (rightAlly == allyColor and agent.hasTag(\"Right\")) then\r\n                                                                                                                table.insert(candidates, agent)\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                else\r\n                                                                                                    for _, agent in ipairs(Park.getObjects(agentPark)) do\r\n                                                                                                        table.insert(candidates, agent)\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                if #candidates == 0 then\r\n                                                                                                    return nil\r\n                                                                                                elseif #candidates > 1 then\r\n                                                                                                    for i, agent in ipairs(candidates) do\r\n                                                                                                        if agent.hasTag(\"Swordmaster\") then\r\n                                                                                                            table.remove(candidates, i)\r\n                                                                                                            break\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return candidates[1]\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.sendSpy(color, observationPostName)\r\n                                                                                                local observationPost = MainBoard.observationPosts[observationPostName]\r\n                                                                                                assert(observationPost, observationPostName)\r\n\r\n                                                                                                local spyPark = PlayBoard.getSpyPark(color)\r\n                                                                                                if not Park.isEmpty(spyPark) then\r\n                                                                                                    Helper.emitEvent(\"spySent\", color, observationPostName)\r\n                                                                                                    Park.transfert(1, spyPark, observationPost.park)\r\n                                                                                                    return true\r\n                                                                                                else\r\n                                                                                                    return false\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.recallSpy(color, observationPostName)\r\n                                                                                                local observationPost = MainBoard.observationPosts[observationPostName]\r\n                                                                                                assert(observationPost, observationPostName)\r\n\r\n                                                                                                local spyPark = PlayBoard.getSpyPark(color)\r\n                                                                                                return Park.transfert(1, observationPost.park, spyPark) > 0\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.findRecallableSpies(color)\r\n                                                                                                local recallableSpies = {}\r\n                                                                                                for observationPostName, observationPost in pairs(MainBoard.observationPosts) do\r\n                                                                                                    for _, spy in ipairs(Park.getObjects(observationPost.park)) do\r\n                                                                                                        if spy.hasTag(color) then\r\n                                                                                                            table.insert(recallableSpies, observationPostName)\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return recallableSpies\r\n                                                                                            end\r\n\r\n                                                                                            ---@param recallSpy boolean? Explicitly require the action and fail if it cannot be executed.\r\n                                                                                            ---In the case of the \"infiltrate + gather intelligence\" combo , only applies to the first.\r\n                                                                                            function MainBoard._manageIntelligenceAndInfiltrate(color, spaceName, recallSpy)\r\n                                                                                                local continuation = Helper.createContinuation(\"MainBoard._manageIntelligenceAndInfiltrate\")\r\n\r\n                                                                                                local recallableSpies = MainBoard.getRecallableSpies(color, spaceName)\r\n\r\n                                                                                                local hasCardsToDraw = PlayBoard.getDrawDeck(color) or PlayBoard.getDiscard(color)\r\n\r\n                                                                                                -- We have already verified that there is no agent of the same color,\r\n                                                                                                -- so any remaining agent must be an enemy.\r\n                                                                                                local enemyAgentPresent = MainBoard.hasAgentInSpace(spaceName)\r\n\r\n                                                                                                if not enemyAgentPresent or MainBoard._couldInfiltrateByOtherMeans(color, spaceName) then\r\n                                                                                                    if #recallableSpies == 0 or not hasCardsToDraw then\r\n                                                                                                        if recallSpy then\r\n                                                                                                            Dialog.broadcastToColor(I18N('noSpyToRecallOrCardToDraw'), color, \"Purple\")\r\n                                                                                                            continuation.run(false)\r\n                                                                                                        else\r\n                                                                                                            continuation.run(true)\r\n                                                                                                        end\r\n                                                                                                    elseif recallSpy then\r\n                                                                                                        MainBoard._recallSpy(color, recallableSpies, continuation, \"intelligence\")\r\n                                                                                                    else\r\n                                                                                                        Dialog.showYesOrNoDialog(color, I18N(\"confirmSpyRecall\"), continuation, function (confirmed)\r\n                                                                                                            if confirmed then\r\n                                                                                                                MainBoard._recallSpy(color, recallableSpies, continuation, \"intelligence\")\r\n                                                                                                            else\r\n                                                                                                                continuation.run(true)\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    end\r\n                                                                                                else\r\n                                                                                                    if #recallableSpies == 0 then\r\n                                                                                                        Dialog.broadcastToColor(I18N(\"noSpyToInfiltrate\"), color, \"Purple\")\r\n                                                                                                        continuation.run(false)\r\n                                                                                                    elseif #recallableSpies > 1 and hasCardsToDraw then\r\n                                                                                                        Dialog.showYesOrNoDialog(color, I18N(\"confirmSpyRecall\"), continuation, function (confirmed)\r\n                                                                                                            if confirmed then\r\n                                                                                                                MainBoard._recallSpy(color, recallableSpies, continuation, \"infiltrateAndIntelligence\")\r\n                                                                                                            else\r\n                                                                                                                MainBoard._recallSpy(color, recallableSpies, continuation, \"infiltrate\")\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        MainBoard._recallSpy(color, recallableSpies, continuation, \"infiltrate\")\r\n                                                                                                    end\r\n                                                                                                end\r\n\r\n                                                                                                return continuation\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._couldInfiltrateByOtherMeans(color, spaceName)\r\n                                                                                                local details = MainBoard.spaceDetails[spaceName]\r\n                                                                                                assert(details, spaceName)\r\n\r\n                                                                                                -- Should be equivalent to the (unused) function 'ImperiumCard._resolveCard(card).factions'.\r\n                                                                                                local infiltrationCards = {\r\n                                                                                                    kwisatzHaderach = {},\r\n                                                                                                    courtIntrigue = {\"emperor\", \"greatHouses\"},\r\n                                                                                                    guildAccord = {\"spacingGuild\"},\r\n                                                                                                    webOfPower = {\"beneGesserit\"},\r\n                                                                                                    jamis = {\"fremen\", \"fringeWorlds\"},\r\n                                                                                                    choamDelegate = {\"desert\", \"choam\"},\r\n                                                                                                    bountyHunter = {\"city\"},\r\n                                                                                                    embeddedAgent = {\"landsraad\", \"ix\"},\r\n                                                                                                    tleilaxuInfiltrator = {},\r\n                                                                                                }\r\n\r\n                                                                                                -- TODO Introduce IoD.\r\n                                                                                                local leader = PlayBoard.getLeader(color)\r\n                                                                                                if leader.name == \"helenaRichese\" and Helper.isElementOf(details.group, {\"landsraad\", \"ix\"}) then\r\n                                                                                                    return true\r\n                                                                                                end\r\n\r\n                                                                                                for cardName, groups in pairs(infiltrationCards) do\r\n                                                                                                    local groupMatchs = Helper.isEmpty(groups) or Helper.isElementOf(details.group, groups)\r\n                                                                                                    if groupMatchs and PlayBoard.hasPlayedThisTurn(color, cardName) then\r\n                                                                                                        return true\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return false\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._recallSpy(color, recallableSpies, continuation, recallMode)\r\n                                                                                                if recallMode == \"infiltrateAndIntelligence\" then\r\n                                                                                                    -- Choosing 2 spies among 3 or more, or choosing twice in a row,\r\n                                                                                                    -- is inconvenient. Good thing it can't happen.\r\n                                                                                                    assert(#recallableSpies == 2)\r\n                                                                                                    continuation.run(true, recallableSpies[1].spy, recallableSpies[2].spy, recallMode)\r\n                                                                                                elseif #recallableSpies == 1 then\r\n                                                                                                    continuation.run(true, recallableSpies[1].spy, nil, recallMode)\r\n                                                                                                else\r\n                                                                                                    local options = Helper.mapValues(recallableSpies, function (recallableSpy)\r\n                                                                                                        return I18N(recallableSpy.toSpaceName)\r\n                                                                                                    end)\r\n                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N(\"selectSpyToRecall\"), options, continuation, function (index)\r\n                                                                                                        if index > 0 then\r\n                                                                                                            continuation.run(true, recallableSpies[index].spy, nil, recallMode)\r\n                                                                                                        else\r\n                                                                                                            continuation.run(false)\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getRecallableSpies(color, spaceName)\r\n                                                                                                local details = MainBoard.spaceDetails[spaceName]\r\n                                                                                                assert(details, spaceName)\r\n\r\n                                                                                                local findConnectedSpaceName = function (postName)\r\n                                                                                                    for otherSpaceName, otherDetails in pairs(MainBoard.spaceDetails) do\r\n                                                                                                        if otherSpaceName ~= spaceName and Helper.isElementOf(postName, otherDetails.posts) then\r\n                                                                                                            return otherSpaceName\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                    return nil\r\n                                                                                                end\r\n\r\n                                                                                                local recallableSpies = {}\r\n                                                                                                for _, postName in ipairs(details.posts) do\r\n                                                                                                    local observationPost = MainBoard.observationPosts[postName]\r\n                                                                                                    if observationPost then\r\n                                                                                                        for _, spy in ipairs(Park.getObjects(observationPost.park)) do\r\n                                                                                                            if spy.hasTag(color) then\r\n                                                                                                                table.insert(recallableSpies, {\r\n                                                                                                                    toSpaceName = findConnectedSpaceName(postName),\r\n                                                                                                                    spy = spy,\r\n                                                                                                                })\r\n                                                                                                                break\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return recallableSpies\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.sendRivalAgent(color, spaceName)\r\n                                                                                                local space = MainBoard.spaces[spaceName]\r\n                                                                                                if not Park.isEmpty(PlayBoard.getAgentPark(color)) then\r\n                                                                                                    local agentPark = PlayBoard.getAgentPark(color)\r\n                                                                                                    Helper.emitEvent(\"agentSent\", color, spaceName)\r\n                                                                                                    Action.setContext(\"agentSent\", {space = spaceName})\r\n                                                                                                    Park.transfert(1, agentPark, space.park)\r\n                                                                                                    return true\r\n                                                                                                else\r\n                                                                                                    return false\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._hasResource(leader, color, resourceName, amount)\r\n                                                                                                local realAmount = leader.bargain(color, resourceName, amount)\r\n                                                                                                return PlayBoard.getResource(color, resourceName):get() >= realAmount\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._checkGenericAccess(color, leader, requirements)\r\n                                                                                                if PlayBoard.isRival(color) then\r\n                                                                                                    return true\r\n                                                                                                end\r\n\r\n                                                                                                for requirement, value in pairs(requirements) do\r\n                                                                                                    if Helper.isElementOf(requirement, {\"spice\", \"water\", \"solari\"}) then\r\n                                                                                                        if not MainBoard._hasResource(leader, color, requirement, value) then\r\n                                                                                                            Dialog.broadcastToColor(I18N(\"noResource\", {resource = I18N(requirement .. \"Amount\")}), color, \"Purple\")\r\n                                                                                                            return false\r\n                                                                                                        end\r\n                                                                                                    elseif requirement == \"friendship\" then\r\n                                                                                                        local exemptionCards = {\r\n                                                                                                            \"undercoverAsset\",\r\n                                                                                                        }\r\n                                                                                                        for _, cardName in ipairs(exemptionCards) do\r\n                                                                                                            if PlayBoard.hasPlayedThisTurn(color, cardName) then\r\n                                                                                                                return true\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        if not InfluenceTrack.hasFriendship(color, value) then\r\n                                                                                                            Dialog.broadcastToColor(I18N(\"noFriendship\", {withFaction = I18N(Helper.toCamelCase(\"with\", value))}), color, \"Purple\")\r\n                                                                                                            return false\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n\r\n                                                                                                return true\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goFremkit(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.drawImperiumCards(color, 1)\r\n                                                                                                    leader.influence(color, \"fremen\", 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goDesertTactics(color, leader, continuation)\r\n                                                                                                if MainBoard._checkGenericAccess(color, leader, {water = 1}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"water\", -1)\r\n                                                                                                        leader.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                                                        leader.influence(color, \"fremen\", 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goSecrets(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.drawIntrigues(color, 1)\r\n                                                                                                    for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                        if otherColor ~= color then\r\n                                                                                                            -- bloodlines tech gene-locked vault\r\n                                                                                                            if PlayBoard.hasTech(otherColor, \"bl_GeneLockedVault\") then\r\n                                                                                                                if #PlayBoard.getIntrigues(otherColor) > 4 then\r\n                                                                                                                    leader.stealIntrigues(color, otherColor, 1)\r\n                                                                                                                end\r\n                                                                                                            elseif #PlayBoard.getIntrigues(otherColor) > 3 then\r\n                                                                                                                leader.stealIntrigues(color, otherColor, 1)\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                    leader.influence(color, \"beneGesserit\", 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goEspionage(color, leader, continuation)\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, {spice = 0}) then\r\n                                                                                                        continuation.run(function ()\r\n                                                                                                            leader.resources(color, \"spice\", 0)\r\n                                                                                                            leader.drawImperiumCards(color, 1)\r\n                                                                                                            leader.influence(color, \"beneGesserit\", 1)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {spice = 1}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"spice\", -1)\r\n                                                                                                        leader.drawImperiumCards(color, 1)\r\n                                                                                                        leader.influence(color, \"beneGesserit\", 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goDeliverSupplies(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.resources(color, \"water\", 1)\r\n                                                                                                    leader.influence(color, \"spacingGuild\", 1)\r\n                                                                                                end)\r\n\r\n                                                                                                -- bloodlines sardaukar commander\r\n                                                                                                -- if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                --     if MainBoard._hasResource(leader, color, \"solari\", 1) then\r\n                                                                                                --         if MainBoard.sardaukarCommanders.sc_DeliverSupplies ~= nil then\r\n                                                                                                --             Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                --                 if confirmed then\r\n                                                                                                --                     local leader = PlayBoard.getLeader(color)\r\n                                                                                                --                     broadcastToAll(I18N(\"recruitSardaukarCommanderDeliverSupplies\"), color)\r\n                                                                                                --                     Combat.recruitSardaukarCommander(color)\r\n                                                                                                --                     Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                --                         leader.resources(color, \"solari\", -1)\r\n                                                                                                --                         MainBoard.sardaukarCommanders.sc_DeliverSupplies.destruct()\r\n                                                                                                --                         MainBoard.sardaukarCommanders.sc_DeliverSupplies = nil\r\n                                                                                                --                     end)\r\n                                                                                                --                 else\r\n                                                                                                --                     continuation.run(true)\r\n                                                                                                --                 end\r\n                                                                                                --             end)\r\n                                                                                                --         end\r\n                                                                                                --     end\r\n                                                                                                -- elseif MainBoard._hasResource(leader, color, \"solari\", 2) then\r\n                                                                                                --     if MainBoard.sardaukarCommanders.sc_DeliverSupplies ~= nil then\r\n                                                                                                --         Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                --             if confirmed then\r\n                                                                                                --                 local leader = PlayBoard.getLeader(color)\r\n                                                                                                --                 broadcastToAll(I18N(\"recruitSardaukarCommanderDeliverSupplies\"), color)\r\n                                                                                                --                 Combat.recruitSardaukarCommander(color)\r\n                                                                                                --                 Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                --                     leader.resources(color, \"solari\", -2)\r\n                                                                                                --                     MainBoard.sardaukarCommanders.sc_DeliverSupplies.destruct()\r\n                                                                                                --                     MainBoard.sardaukarCommanders.sc_DeliverSupplies = nil\r\n                                                                                                --                 end)\r\n                                                                                                --             else\r\n                                                                                                --                 continuation.run(true)\r\n                                                                                                --             end\r\n                                                                                                --         end)\r\n                                                                                                --     end\r\n                                                                                                -- end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goHeighliner(color, leader, continuation)\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, {spice = 4}) then\r\n                                                                                                        continuation.run(function ()\r\n                                                                                                            leader.resources(color, \"spice\", -4)\r\n                                                                                                            leader.troops(color, \"supply\", \"garrison\", 5)\r\n                                                                                                            leader.influence(color, \"spacingGuild\", 1)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {spice = 5}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"spice\", -5)\r\n                                                                                                        leader.troops(color, \"supply\", \"garrison\", 5)\r\n                                                                                                        leader.influence(color, \"spacingGuild\", 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goDutifulService(color, leader, continuation)\r\n                                                                                                assert(TurnControl.getPlayerCount() < 6)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.pickContract(color)\r\n                                                                                                    leader.influence(color, \"emperor\", 1)\r\n                                                                                                end)\r\n\r\n                                                                                                -- bloodlines sardaukar commander\r\n                                                                                                -- if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                --     if MainBoard._hasResource(leader, color, \"solari\", 1) then\r\n                                                                                                --         if MainBoard.sardaukarCommanders.sc_DutifulService ~= nil then\r\n                                                                                                --             Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                --                 if confirmed then\r\n                                                                                                --                     local leader = PlayBoard.getLeader(color)\r\n                                                                                                --                     broadcastToAll(I18N(\"recruitSardaukarCommanderDutifulService\"), color)\r\n                                                                                                --                     Combat.recruitSardaukarCommander(color)\r\n                                                                                                --                     Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                --                         leader.resources(color, \"solari\", -1)\r\n                                                                                                --                         MainBoard.sardaukarCommanders.sc_DutifulService.destruct()\r\n                                                                                                --                         MainBoard.sardaukarCommanders.sc_DutifulService = nil\r\n                                                                                                --                     end)\r\n                                                                                                --                 else\r\n                                                                                                --                     continuation.run(true)\r\n                                                                                                --                 end\r\n                                                                                                --             end)\r\n                                                                                                --         end\r\n                                                                                                --     end\r\n                                                                                                -- elseif MainBoard._hasResource(leader, color, \"solari\", 2) then\r\n                                                                                                --     if MainBoard.sardaukarCommanders.sc_DutifulService ~= nil then\r\n                                                                                                --         Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                --             if confirmed then\r\n                                                                                                --                 local leader = PlayBoard.getLeader(color)\r\n                                                                                                --                 broadcastToAll(I18N(\"recruitSardaukarCommanderDutifulService\"), color)\r\n                                                                                                --                 Combat.recruitSardaukarCommander(color)\r\n                                                                                                --                 Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                --                     leader.resources(color, \"solari\", -2)\r\n                                                                                                --                     MainBoard.sardaukarCommanders.sc_DutifulService.destruct()\r\n                                                                                                --                     MainBoard.sardaukarCommanders.sc_DutifulService = nil\r\n                                                                                                --                 end)\r\n                                                                                                --             else\r\n                                                                                                --                 continuation.run(true)\r\n                                                                                                --             end\r\n                                                                                                --         end)\r\n                                                                                                --     end\r\n                                                                                                -- end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goSardaukar(color, leader, continuation)\r\n                                                                                                -- Used in both 4P and 6P modes.\r\n                                                                                                if TurnControl.getPlayerCount() < 6 or Commander.isShaddam(color) then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, {spice = MainBoard.getSardaukarCost()}) then\r\n                                                                                                        continuation.run(function ()\r\n                                                                                                            leader.resources(color, \"spice\", -MainBoard.getSardaukarCost())\r\n                                                                                                            leader.troops(color, \"supply\", \"garrison\", 4)\r\n                                                                                                            leader.drawIntrigues(color, 1)\r\n                                                                                                            leader.influence(color, \"emperor\", 1)\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        continuation.run()\r\n                                                                                                    end\r\n                                                                                                else\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"forbiddenAccess\"), color, \"Purple\")\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n\r\n                                                                                                -- bloodlines sardaukar commander\r\n                                                                                                -- if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                --     if MainBoard._hasResource(leader, color, \"solari\", 1) then\r\n                                                                                                --         if MainBoard.sardaukarCommanders.sc_Sardaukar ~= nil then\r\n                                                                                                --             Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                --                 if confirmed then\r\n                                                                                                --                     local leader = PlayBoard.getLeader(color)\r\n                                                                                                --                     broadcastToAll(I18N(\"recruitSardaukarCommanderSardaukar\"), color)\r\n                                                                                                --                     Combat.recruitSardaukarCommander(color)\r\n                                                                                                --                     Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                --                         leader.resources(color, \"solari\", -1)\r\n                                                                                                --                         MainBoard.sardaukarCommanders.sc_Sardaukar.destruct()\r\n                                                                                                --                         MainBoard.sardaukarCommanders.sc_Sardaukar = nil\r\n                                                                                                --                     end)\r\n                                                                                                --                 else\r\n                                                                                                --                     continuation.run(true)\r\n                                                                                                --                 end\r\n                                                                                                --             end)\r\n                                                                                                --         end\r\n                                                                                                --     end\r\n                                                                                                -- elseif MainBoard._hasResource(leader, color, \"solari\", 2) then\r\n                                                                                                --     if MainBoard.sardaukarCommanders.sc_Sardaukar ~= nil then\r\n                                                                                                --         Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                --             if confirmed then\r\n                                                                                                --                 local leader = PlayBoard.getLeader(color)\r\n                                                                                                --                 broadcastToAll(I18N(\"recruitSardaukarCommanderSardaukar\"), color)\r\n                                                                                                --                 Combat.recruitSardaukarCommander(color)\r\n                                                                                                --                 Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                --                     leader.resources(color, \"solari\", -2)\r\n                                                                                                --                     MainBoard.sardaukarCommanders.sc_Sardaukar.destruct()\r\n                                                                                                --                     MainBoard.sardaukarCommanders.sc_Sardaukar = nil\r\n                                                                                                --                 end)\r\n                                                                                                --             else\r\n                                                                                                --                 continuation.run(true)\r\n                                                                                                --             end\r\n                                                                                                --         end)\r\n                                                                                                --     end\r\n                                                                                                -- end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getSardaukarCost()\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                local color = TurnControl.players[TurnControl.currentPlayerLuaIndex]\r\n\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    return TurnControl.getPlayerCount() == 6 and 2 or 3\r\n                                                                                                else\r\n                                                                                                    return TurnControl.getPlayerCount() == 6 and 3 or 4\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goVastWealth(color, leader, continuation)\r\n                                                                                                assert(TurnControl.getPlayerCount() == 6)\r\n                                                                                                if Commander.isShaddam(color) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"solari\", 3)\r\n                                                                                                        leader.influence(color, \"emperor\", 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"forbiddenAccess\"), color, \"Purple\")\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goMilitarySupport(color, leader, continuation)\r\n                                                                                                assert(TurnControl.getPlayerCount() == 6)\r\n                                                                                                if MainBoard._checkGenericAccess(color, leader, {spice = 2}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"spice\", -2)\r\n                                                                                                        leader.influence(color, \"greatHouses\", 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goEconomicSupport(color, leader, continuation)\r\n                                                                                                assert(TurnControl.getPlayerCount() == 6)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.resources(color, \"spice\", 1)\r\n                                                                                                    leader.influence(color, \"greatHouses\", 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goControversialTechnology(color, leader, continuation)\r\n                                                                                                assert(TurnControl.getPlayerCount() == 6)\r\n                                                                                                if MainBoard._checkGenericAccess(color, leader, {spice = 2}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"spice\", -2)\r\n                                                                                                        leader.drawImperiumCards(color, 1)\r\n                                                                                                        leader.drawIntrigues(color, 1)\r\n                                                                                                        leader.influence(color, \"fringeWorlds\", 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goExpedition(color, leader, continuation)\r\n                                                                                                assert(TurnControl.getPlayerCount() == 6)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.influence(color, \"fringeWorlds\", 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goHardyWarriors(color, leader, continuation)\r\n                                                                                                assert(TurnControl.getPlayerCount() == 6)\r\n                                                                                                if not Commander.isMuadDib(color) then\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"forbiddenAccess\"), color, \"Purple\")\r\n                                                                                                    continuation.run()\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {water = 1}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"water\", -1)\r\n                                                                                                        leader.troops(color, \"supply\", \"garrison\", 2)\r\n                                                                                                        leader.influence(color, \"fremen\", 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            function MainBoard._goDesertMastery(color, leader, continuation)\r\n                                                                                                assert(TurnControl.getPlayerCount() == 6)\r\n                                                                                                if Commander.isMuadDib(color) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.drawImperiumCards(color, 1)\r\n                                                                                                        leader.resources(color, \"spice\", 1)\r\n                                                                                                        leader.influence(color, \"fremen\", 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"forbiddenAccess\"), color, \"Purple\")\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goHighCouncil(color, leader, continuation)\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, {solari = 4}) then\r\n                                                                                                        continuation.run(function ()\r\n                                                                                                            leader.resources(color, \"solari\", -4)\r\n                                                                                                            -- bloodlines tech buy space\r\n                                                                                                            TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 1)\r\n                                                                                                            if PlayBoard.hasHighCouncilSeat(color) then\r\n                                                                                                                leader.resources(color, \"spice\", 2)\r\n                                                                                                                leader.drawIntrigues(color, 1)\r\n                                                                                                                leader.troops(color, \"supply\", \"garrison\", 3)\r\n                                                                                                            else\r\n                                                                                                                leader.takeHighCouncilSeat(color)\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {solari = 5}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"solari\", -5)\r\n                                                                                                        -- bloodlines tech buy space\r\n                                                                                                        TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 1)\r\n                                                                                                        if PlayBoard.hasHighCouncilSeat(color) then\r\n                                                                                                            leader.resources(color, \"spice\", 2)\r\n                                                                                                            leader.drawIntrigues(color, 1)\r\n                                                                                                            leader.troops(color, \"supply\", \"garrison\", 3)\r\n                                                                                                        else\r\n                                                                                                            leader.takeHighCouncilSeat(color)\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n\r\n                                                                                                -- bloodlines sardaukar commander\r\n                                                                                                -- Helper.onceTimeElapsed(1).doAfter(function ()\r\n                                                                                                --     if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                --         if MainBoard._hasResource(leader, color, \"solari\", 1) then\r\n                                                                                                --             if MainBoard.sardaukarCommanders.sc_HighCouncil ~= nil then\r\n                                                                                                --                 Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                --                     if confirmed then\r\n                                                                                                --                         local leader = PlayBoard.getLeader(color)\r\n                                                                                                --                         broadcastToAll(I18N(\"recruitSardaukarCommanderHighCouncil\"), color)\r\n                                                                                                --                         Combat.recruitSardaukarCommander(color)\r\n                                                                                                --                         Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                --                             leader.resources(color, \"solari\", -1)\r\n                                                                                                --                             MainBoard.sardaukarCommanders.sc_HighCouncil.destruct()\r\n                                                                                                --                             MainBoard.sardaukarCommanders.sc_HighCouncil = nil\r\n                                                                                                --                         end)\r\n                                                                                                --                     else\r\n                                                                                                --                         continuation.run(true)\r\n                                                                                                --                     end\r\n                                                                                                --                 end)\r\n                                                                                                --             end\r\n                                                                                                --         end\r\n                                                                                                --     elseif MainBoard._hasResource(leader, color, \"solari\", 2) then\r\n                                                                                                --         if MainBoard.sardaukarCommanders.sc_HighCouncil ~= nil then\r\n                                                                                                --             Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                --                 if confirmed then\r\n                                                                                                --                     local leader = PlayBoard.getLeader(color)\r\n                                                                                                --                     broadcastToAll(I18N(\"recruitSardaukarCommanderHighCouncil\"), color)\r\n                                                                                                --                     Combat.recruitSardaukarCommander(color)\r\n                                                                                                --                     Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                --                         leader.resources(color, \"solari\", -2)\r\n                                                                                                --                         MainBoard.sardaukarCommanders.sc_HighCouncil.destruct()\r\n                                                                                                --                         MainBoard.sardaukarCommanders.sc_HighCouncil = nil\r\n                                                                                                --                     end)\r\n                                                                                                --                 else\r\n                                                                                                --                     continuation.run(true)\r\n                                                                                                --                 end\r\n                                                                                                --             end)\r\n                                                                                                --         end\r\n                                                                                                --     end\r\n                                                                                                -- end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goImperialPrivilege(color, leader, continuation)\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, {solari = 2, friendship = \"emperor\"}) then\r\n                                                                                                        continuation.run(function ()\r\n                                                                                                            leader.resources(color, \"solari\", -2)\r\n                                                                                                            -- bloodlines tech buy space\r\n                                                                                                            if PlayBoard.hasHighCouncilSeat(color) then\r\n                                                                                                                TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 1)\r\n                                                                                                            else\r\n                                                                                                                TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 0)\r\n                                                                                                            end\r\n                                                                                                            leader.drawImperiumCards(color, 1)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {solari = 3, friendship = \"emperor\"}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"solari\", -3)\r\n                                                                                                        -- bloodlines tech buy space\r\n                                                                                                        if PlayBoard.hasHighCouncilSeat(color) then\r\n                                                                                                            TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 1)\r\n                                                                                                        else\r\n                                                                                                            TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 0)\r\n                                                                                                        end\r\n                                                                                                        leader.drawImperiumCards(color, 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goSwordmaster(color, leader, continuation)\r\n                                                                                                if not Hagal.isSwordmasterAvailable() then\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"unavailableSwordmaster\"), color, \"Purple\")\r\n                                                                                                    continuation.run()\r\n                                                                                                elseif PlayBoard.hasSwordmaster(color) then\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"alreadyHaveSwordmaster\"), color, \"Purple\")\r\n                                                                                                    continuation.run()\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {solari = MainBoard._getSwordmasterCost()}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"solari\", -MainBoard._getSwordmasterCost())\r\n                                                                                                        -- bloodlines tech buy space\r\n                                                                                                        if PlayBoard.hasHighCouncilSeat(color) then\r\n                                                                                                            TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 1)\r\n                                                                                                        else\r\n                                                                                                            TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 0)\r\n                                                                                                        end\r\n                                                                                                        -- Wait for the first agent sent to be marked as moving (not resting),\r\n                                                                                                        -- then move the swordmaster. Otherwise, the target agent park will\r\n                                                                                                        -- grab the first agent back to the park when tidying it up.\r\n                                                                                                        Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                                                            leader.recruitSwordmaster(color)\r\n                                                                                                        end)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._getSwordmasterCost()\r\n                                                                                                local firstAccess = #Helper.filter(PlayBoard.getActivePlayBoardColors(), PlayBoard.hasSwordmaster) == 0\r\n                                                                                                -- bloodlines duncan swordmaster cost\r\n                                                                                                local color = TurnControl.players[TurnControl.currentPlayerLuaIndex]\r\n\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    if PlayBoard.getLeader(color).name == \"bl_Duncan\" then\r\n                                                                                                        return firstAccess and 5 or 3\r\n                                                                                                    else\r\n                                                                                                        return firstAccess and 7 or 5\r\n                                                                                                    end\r\n                                                                                                else\r\n                                                                                                    if PlayBoard.getLeader(color).name == \"bl_Duncan\" then\r\n                                                                                                        return firstAccess and 6 or 4\r\n                                                                                                    else\r\n                                                                                                        return firstAccess and 8 or 6\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goAssemblyHall(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    -- bloodlines tech buy space\r\n                                                                                                    if PlayBoard.hasHighCouncilSeat(color) then\r\n                                                                                                        TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 1)\r\n                                                                                                    else\r\n                                                                                                        TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 0)\r\n                                                                                                    end\r\n                                                                                                    leader.drawIntrigues(color, 1)\r\n                                                                                                    leader.resources(color, \"persuasion\", 1)\r\n\r\n                                                                                                    -- bloodlines sardaukar commander\r\n                                                                                                    -- if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                    --     if MainBoard._hasResource(leader, color, \"solari\", 1) then\r\n                                                                                                    --         if MainBoard.sardaukarCommanders.sc_AssemblyHall ~= nil then\r\n                                                                                                    --             Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                    --                 if confirmed then\r\n                                                                                                    --                     local leader = PlayBoard.getLeader(color)\r\n                                                                                                    --                     broadcastToAll(I18N(\"recruitSardaukarCommanderAssemblyHall\"), color)\r\n                                                                                                    --                     Combat.recruitSardaukarCommander(color)\r\n                                                                                                    --                     Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                    --                         leader.resources(color, \"solari\", -1)\r\n                                                                                                    --                         MainBoard.sardaukarCommanders.sc_AssemblyHall.destruct()\r\n                                                                                                    --                         MainBoard.sardaukarCommanders.sc_AssemblyHall = nil\r\n                                                                                                    --                     end)\r\n                                                                                                    --                 else\r\n                                                                                                    --                     continuation.run(true)\r\n                                                                                                    --                 end\r\n                                                                                                    --             end)\r\n                                                                                                    --         end\r\n                                                                                                    --     end\r\n                                                                                                    -- elseif MainBoard._hasResource(leader, color, \"solari\", 2) then\r\n                                                                                                    --     if MainBoard.sardaukarCommanders.sc_AssemblyHall ~= nil then\r\n                                                                                                    --         Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                    --             if confirmed then\r\n                                                                                                    --                 local leader = PlayBoard.getLeader(color)\r\n                                                                                                    --                 broadcastToAll(I18N(\"recruitSardaukarCommanderAssemblyHall\"), color)\r\n                                                                                                    --                 Combat.recruitSardaukarCommander(color)\r\n                                                                                                    --                 Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                    --                     leader.resources(color, \"solari\", -2)\r\n                                                                                                    --                     MainBoard.sardaukarCommanders.sc_AssemblyHall.destruct()\r\n                                                                                                    --                     MainBoard.sardaukarCommanders.sc_AssemblyHall = nil\r\n                                                                                                    --                 end)\r\n                                                                                                    --             else\r\n                                                                                                    --                 continuation.run(true)\r\n                                                                                                    --             end\r\n                                                                                                    --         end)\r\n                                                                                                    --     end\r\n                                                                                                    -- end\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goGatherSupport(color, leader, continuation)\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    if MainBoard._hasResource(leader, color, \"solari\", 1) then\r\n                                                                                                        local options = {\r\n                                                                                                            I18N(\"noWaterOption\"),\r\n                                                                                                            I18N(\"withWaterOption\"),\r\n                                                                                                        }\r\n                                                                                                        Dialog.showOptionsAndCancelDialog(color, I18N(\"goGatherSupport\"), options, continuation, function (index)\r\n                                                                                                            if index == 1 then\r\n                                                                                                                MainBoard._goGatherSupport_NoWater(color, leader, continuation)\r\n                                                                                                            elseif index == 2 then\r\n                                                                                                                MainBoard._goGatherSupport_WithWater(color, leader, continuation)\r\n                                                                                                            else\r\n                                                                                                                assert(index == 0)\r\n                                                                                                                continuation.run()\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        MainBoard._goGatherSupport_NoWater(color, leader, continuation)\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._hasResource(leader, color, \"solari\", 2) then\r\n                                                                                                    local options = {\r\n                                                                                                        I18N(\"noWaterOption\"),\r\n                                                                                                        I18N(\"withWaterOption\"),\r\n                                                                                                    }\r\n                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N(\"goGatherSupport\"), options, continuation, function (index)\r\n                                                                                                        if index == 1 then\r\n                                                                                                            MainBoard._goGatherSupport_NoWater(color, leader, continuation)\r\n                                                                                                        elseif index == 2 then\r\n                                                                                                            MainBoard._goGatherSupport_WithWater(color, leader, continuation)\r\n                                                                                                        else\r\n                                                                                                            assert(index == 0)\r\n                                                                                                            continuation.run()\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    MainBoard._goGatherSupport_NoWater(color, leader, continuation)\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goGatherSupport_WithWater(color, leader, continuation)\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, {solari = 1}) then\r\n                                                                                                        continuation.run(function ()\r\n                                                                                                            leader.resources(color, \"solari\", -1)\r\n                                                                                                            -- bloodlines tech buy space\r\n                                                                                                            if PlayBoard.hasHighCouncilSeat(color) then\r\n                                                                                                                TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 1)\r\n                                                                                                            else\r\n                                                                                                                TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 0)\r\n                                                                                                            end\r\n                                                                                                            leader.troops(color, \"supply\", \"garrison\", 2)\r\n                                                                                                            leader.resources(color, \"water\", 1)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {solari = 2}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"solari\", -2)\r\n                                                                                                        -- bloodlines tech buy space\r\n                                                                                                        if PlayBoard.hasHighCouncilSeat(color) then\r\n                                                                                                            TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 1)\r\n                                                                                                        else\r\n                                                                                                            TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 0)\r\n                                                                                                        end\r\n                                                                                                        leader.troops(color, \"supply\", \"garrison\", 2)\r\n                                                                                                        leader.resources(color, \"water\", 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n\r\n                                                                                                -- bloodlines sardaukar commander\r\n                                                                                                -- Helper.onceTimeElapsed(1).doAfter(function ()\r\n                                                                                                --     if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                --         if MainBoard._hasResource(leader, color, \"solari\", 1) then\r\n                                                                                                --             if MainBoard.sardaukarCommanders.sc_GatherSupport ~= nil then\r\n                                                                                                --                 Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                --                     if confirmed then\r\n                                                                                                --                         local leader = PlayBoard.getLeader(color)\r\n                                                                                                --                         broadcastToAll(I18N(\"recruitSardaukarCommanderGatherSupport\"), color)\r\n                                                                                                --                         Combat.recruitSardaukarCommander(color)\r\n                                                                                                --                         Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                --                             leader.resources(color, \"solari\", -1)\r\n                                                                                                --                             MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()\r\n                                                                                                --                             MainBoard.sardaukarCommanders.sc_GatherSupport = nil\r\n                                                                                                --                         end)\r\n                                                                                                --                     else\r\n                                                                                                --                         continuation.run(true)\r\n                                                                                                --                     end\r\n                                                                                                --                 end)\r\n                                                                                                --             end\r\n                                                                                                --         end\r\n                                                                                                --     elseif MainBoard._hasResource(leader, color, \"solari\", 2) then\r\n                                                                                                --         if MainBoard.sardaukarCommanders.sc_GatherSupport ~= nil then\r\n                                                                                                --             Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                --                 if confirmed then\r\n                                                                                                --                     local leader = PlayBoard.getLeader(color)\r\n                                                                                                --                     broadcastToAll(I18N(\"recruitSardaukarCommanderGatherSupport\"), color)\r\n                                                                                                --                     Combat.recruitSardaukarCommander(color)\r\n                                                                                                --                     Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                --                         leader.resources(color, \"solari\", -2)\r\n                                                                                                --                         MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()\r\n                                                                                                --                         MainBoard.sardaukarCommanders.sc_GatherSupport = nil\r\n                                                                                                --                     end)\r\n                                                                                                --                 else\r\n                                                                                                --                     continuation.run(true)\r\n                                                                                                --                 end\r\n                                                                                                --             end)\r\n                                                                                                --         end\r\n                                                                                                --     end\r\n                                                                                                -- end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goGatherSupport_NoWater(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    -- bloodlines tech buy space\r\n                                                                                                    if PlayBoard.hasHighCouncilSeat(color) then\r\n                                                                                                        TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 1)\r\n                                                                                                    else\r\n                                                                                                        TechMarket.registerAcquireTechOption(color, \"TechBuyOption\", \"spice\", 0)\r\n                                                                                                    end\r\n                                                                                                    leader.troops(color, \"supply\", \"garrison\", 2)\r\n\r\n                                                                                                    -- bloodlines sardaukar commander\r\n                                                                                                    -- if PlayBoard.hasTech(color, \"bl_SardaukarHighCommand\") then\r\n                                                                                                    --     if MainBoard._hasResource(leader, color, \"solari\", 1) then\r\n                                                                                                    --         if MainBoard.sardaukarCommanders.sc_GatherSupport ~= nil then\r\n                                                                                                    --             Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirmOneSolari\"), continuation, function (confirmed)\r\n                                                                                                    --                 if confirmed then\r\n                                                                                                    --                     local leader = PlayBoard.getLeader(color)\r\n                                                                                                    --                     broadcastToAll(I18N(\"recruitSardaukarCommanderGatherSupport\"), color)\r\n                                                                                                    --                     Combat.recruitSardaukarCommander(color)\r\n                                                                                                    --                     Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                    --                         leader.resources(color, \"solari\", -1)\r\n                                                                                                    --                         MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()\r\n                                                                                                    --                         MainBoard.sardaukarCommanders.sc_GatherSupport = nil\r\n                                                                                                    --                     end)\r\n                                                                                                    --                 else\r\n                                                                                                    --                     continuation.run(true)\r\n                                                                                                    --                 end\r\n                                                                                                    --             end)\r\n                                                                                                    --         end\r\n                                                                                                    --     end\r\n                                                                                                    -- elseif MainBoard._hasResource(leader, color, \"solari\", 2) then\r\n                                                                                                    --     if MainBoard.sardaukarCommanders.sc_GatherSupport ~= nil then\r\n                                                                                                    --         Dialog.showYesOrNoDialog(color, I18N(\"recruitSardaukarCommanderConfirm\"), continuation, function (confirmed)\r\n                                                                                                    --             if confirmed then\r\n                                                                                                    --                 local leader = PlayBoard.getLeader(color)\r\n                                                                                                    --                 broadcastToAll(I18N(\"recruitSardaukarCommanderGatherSupport\"), color)\r\n                                                                                                    --                 Combat.recruitSardaukarCommander(color)\r\n                                                                                                    --                 Helper.onceFramesPassed(5).doAfter(function ()\r\n                                                                                                    --                     leader.resources(color, \"solari\", -2)\r\n                                                                                                    --                     MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()\r\n                                                                                                    --                     MainBoard.sardaukarCommanders.sc_GatherSupport = nil\r\n                                                                                                    --                 end)\r\n                                                                                                    --             else\r\n                                                                                                    --                 continuation.run(true)\r\n                                                                                                    --             end\r\n                                                                                                    --         end)\r\n                                                                                                    --     end\r\n                                                                                                    -- end\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goShipping(color, leader, continuation)\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, {spice = 2, friendship = \"spacingGuild\"}) then\r\n                                                                                                        continuation.run(function ()\r\n                                                                                                            leader.resources(color, \"spice\", -2)\r\n                                                                                                            leader.resources(color, \"solari\", 5)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {spice = 3, friendship = \"spacingGuild\"}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"spice\", -3)\r\n                                                                                                        leader.resources(color, \"solari\", 5)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goAcceptContract(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.pickContract(color)\r\n                                                                                                    leader.drawImperiumCards(color, 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goCarthag(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.drawIntrigues(color, 1)\r\n                                                                                                    leader.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goSietchTabr(color, leader, continuation)\r\n                                                                                                -- bloodlines liet sietch access\r\n                                                                                                if PlayBoard.getLeader(color).name == \"bl_Liet\" then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, continuation) then\r\n                                                                                                        local options = {\r\n                                                                                                            PlayBoard.canTakeMakerHook(color) and I18N(\"hookTroopWaterOption\") or I18N(\"troopWaterOption\"),\r\n                                                                                                            I18N(\"waterShieldWallOption\"),\r\n                                                                                                        }\r\n                                                                                                        Dialog.showOptionsAndCancelDialog(color, I18N(\"goSietchTabr\"), options, continuation, function (index)\r\n                                                                                                            if index == 1 then\r\n                                                                                                                MainBoard._goSietchTabr_HookTroopWater(color, leader, continuation)\r\n                                                                                                            elseif index == 2 then\r\n                                                                                                                MainBoard._goSietchTabr_WaterShieldWall(color, leader, continuation)\r\n                                                                                                            else\r\n                                                                                                                assert(index == 0)\r\n                                                                                                                continuation.run()\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        continuation.run()\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {friendship = \"fremen\"}) then\r\n                                                                                                    local options = {\r\n                                                                                                        PlayBoard.canTakeMakerHook(color) and I18N(\"hookTroopWaterOption\") or I18N(\"troopWaterOption\"),\r\n                                                                                                        I18N(\"waterShieldWallOption\"),\r\n                                                                                                    }\r\n                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N(\"goSietchTabr\"), options, continuation, function (index)\r\n                                                                                                        if index == 1 then\r\n                                                                                                            MainBoard._goSietchTabr_HookTroopWater(color, leader, continuation)\r\n                                                                                                        elseif index == 2 then\r\n                                                                                                            MainBoard._goSietchTabr_WaterShieldWall(color, leader, continuation)\r\n                                                                                                        else\r\n                                                                                                            assert(index == 0)\r\n                                                                                                            continuation.run()\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                                -- original\r\n                                                                                                -- if MainBoard._checkGenericAccess(color, leader, { friendship = \"fremen\" }) then\r\n                                                                                                --     local options = {\r\n                                                                                                --         PlayBoard.canTakeMakerHook(color) and I18N(\"hookTroopWaterOption\") or I18N(\"troopWaterOption\"),\r\n                                                                                                --         I18N(\"waterShieldWallOption\"),\r\n                                                                                                --     }\r\n                                                                                                --     Dialog.showOptionsAndCancelDialog(color, I18N(\"goSietchTabr\"), options, continuation, function (index)\r\n                                                                                                --         if index == 1 then\r\n                                                                                                --             MainBoard._goSietchTabr_HookTroopWater(color, leader, continuation)\r\n                                                                                                --         elseif index == 2 then\r\n                                                                                                --             MainBoard._goSietchTabr_WaterShieldWall(color, leader, continuation)\r\n                                                                                                --         else\r\n                                                                                                --             assert(index == 0)\r\n                                                                                                --             continuation.run()\r\n                                                                                                --         end\r\n                                                                                                --     end)\r\n                                                                                                -- else\r\n                                                                                                --     continuation.run()\r\n                                                                                                -- end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goSietchTabr_HookTroopWater(color, leader, continuation)\r\n                                                                                                -- bloodlines liet sietch access\r\n                                                                                                if PlayBoard.getLeader(color).name == \"bl_Liet\" then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, continuation) then\r\n                                                                                                        continuation.run(function ()\r\n                                                                                                            leader.takeMakerHook(color)\r\n                                                                                                            leader.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                                                            leader.resources(color, \"water\", 1)\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        continuation.run()\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {friendship = \"fremen\"}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.takeMakerHook(color)\r\n                                                                                                        leader.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                                                        leader.resources(color, \"water\", 1)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                                -- original\r\n                                                                                                -- if MainBoard._checkGenericAccess(color, leader, { friendship = \"fremen\" }) then\r\n                                                                                                --     continuation.run(function ()\r\n                                                                                                --         leader.takeMakerHook(color)\r\n                                                                                                --         leader.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                                                --         leader.resources(color, \"water\", 1)\r\n                                                                                                --     end)\r\n                                                                                                -- else\r\n                                                                                                --     continuation.run()\r\n                                                                                                -- end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goSietchTabr_WaterShieldWall(color, leader, continuation)\r\n                                                                                                -- bloodlines liet sietch access\r\n                                                                                                if PlayBoard.getLeader(color).name == \"bl_Liet\" then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, continuation) then\r\n                                                                                                        continuation.run(function ()\r\n                                                                                                            leader.resources(color, \"water\", 1)\r\n                                                                                                            MainBoard.blowUpShieldWall(color, true)\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        continuation.run()\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {friendship = \"fremen\"}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"water\", 1)\r\n                                                                                                        MainBoard.blowUpShieldWall(color, true)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                                -- original\r\n                                                                                                -- if MainBoard._checkGenericAccess(color, leader, { friendship = \"fremen\" }) then\r\n                                                                                                --     continuation.run(function ()\r\n                                                                                                --         leader.resources(color, \"water\", 1)\r\n                                                                                                --         MainBoard.blowUpShieldWall(color, true)\r\n                                                                                                --     end)\r\n                                                                                                -- else\r\n                                                                                                --     continuation.run()\r\n                                                                                                -- end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goResearchStation(color, leader, continuation)\r\n                                                                                                if MainBoard._checkGenericAccess(color, leader, {water = 2}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"water\", -2)\r\n                                                                                                        leader.drawImperiumCards(color, 2)\r\n                                                                                                        if MainBoard.immortalityPatch then\r\n                                                                                                            leader.research(color, nil)\r\n                                                                                                        else\r\n                                                                                                            leader.troops(color, \"supply\", \"garrison\", 2)\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goSpiceRefinery(color, leader, continuation)\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    if MainBoard._hasResource(leader, color, \"spice\", 0) then\r\n                                                                                                        MainBoard._goSpiceRefinery_WithSpice(color, leader, continuation)\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._hasResource(leader, color, \"spice\", 1) then\r\n                                                                                                    local options = {\r\n                                                                                                        I18N(\"noSpiceOption\"),\r\n                                                                                                        I18N(\"withSpiceOption\"),\r\n                                                                                                    }\r\n                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N(\"goSpiceRefinery\"), options, continuation, function (index)\r\n                                                                                                        if index == 1 then\r\n                                                                                                            MainBoard._goSpiceRefinery_NoSpice(color, leader, continuation)\r\n                                                                                                        elseif index == 2 then\r\n                                                                                                            MainBoard._goSpiceRefinery_WithSpice(color, leader, continuation)\r\n                                                                                                        else\r\n                                                                                                            assert(index == 0)\r\n                                                                                                            continuation.run()\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    MainBoard._goSpiceRefinery_NoSpice(color, leader, continuation)\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goSpiceRefinery_WithSpice(color, leader, continuation)\r\n                                                                                                -- bloodlines tech navigation chamber\r\n                                                                                                if PlayBoard.hasTech(color, \"bl_NavigationChamber\") then\r\n                                                                                                    if MainBoard._checkGenericAccess(color, leader, {spice = 0}) then\r\n                                                                                                        continuation.run(function ()\r\n                                                                                                            leader.resources(color, \"spice\", 0)\r\n                                                                                                            leader.resources(color, \"solari\", 4)\r\n                                                                                                            MainBoard._applyControlOfAnySpace(MainBoard.banners.spiceRefineryBannerZone, \"solari\")\r\n                                                                                                        end)\r\n                                                                                                    end\r\n                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {spice = 1}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"spice\", -1)\r\n                                                                                                        leader.resources(color, \"solari\", 4)\r\n                                                                                                        MainBoard._applyControlOfAnySpace(MainBoard.banners.spiceRefineryBannerZone, \"solari\")\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goSpiceRefinery_NoSpice(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.resources(color, \"solari\", 2)\r\n                                                                                                    MainBoard._applyControlOfAnySpace(MainBoard.banners.spiceRefineryBannerZone, \"solari\")\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goArrakeen(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                                                    leader.drawImperiumCards(color, 1)\r\n                                                                                                    MainBoard._applyControlOfAnySpace(MainBoard.banners.arrakeenBannerZone, \"solari\")\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goDeepDesert(color, leader, continuation)\r\n                                                                                                -- bloodlines liet deep desert\r\n                                                                                                if PlayBoard.getLeader(color).name == \"bl_Liet\" then\r\n                                                                                                    if PlayBoard.hasMakerHook(color) then\r\n                                                                                                        local options = {\r\n                                                                                                            I18N(\"fourSpicesOption\"),\r\n                                                                                                            I18N(\"twoWormsOption\"),\r\n                                                                                                        }\r\n                                                                                                        Dialog.showOptionsAndCancelDialog(color, I18N(\"goDeepDesert\"), options, continuation, function (index)\r\n                                                                                                            if index == 1 then\r\n                                                                                                                MainBoard._goDeepDesert_Spice(color, leader, continuation)\r\n                                                                                                            elseif index == 2 then\r\n                                                                                                                MainBoard._goDeepDesert_WormsIfHook(color, leader, continuation)\r\n                                                                                                            else\r\n                                                                                                                assert(index == 0)\r\n                                                                                                                continuation.run()\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        MainBoard._goDeepDesert_Spice(color, leader, continuation)\r\n                                                                                                    end\r\n                                                                                                elseif PlayBoard.hasMakerHook(color) and (not MainBoard.shieldWallIsStanding() or not Combat.isCurrentConflictBehindTheWall()) then\r\n                                                                                                    local options = {\r\n                                                                                                        I18N(\"fourSpicesOption\"),\r\n                                                                                                        I18N(\"twoWormsOption\"),\r\n                                                                                                    }\r\n                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N(\"goDeepDesert\"), options, continuation, function (index)\r\n                                                                                                        if index == 1 then\r\n                                                                                                            MainBoard._goDeepDesert_Spice(color, leader, continuation)\r\n                                                                                                        elseif index == 2 then\r\n                                                                                                            MainBoard._goDeepDesert_WormsIfHook(color, leader, continuation)\r\n                                                                                                        else\r\n                                                                                                            assert(index == 0)\r\n                                                                                                            continuation.run()\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    MainBoard._goDeepDesert_Spice(color, leader, continuation)\r\n                                                                                                end\r\n                                                                                                -- original\r\n                                                                                                -- if PlayBoard.hasMakerHook(color) and (not MainBoard.shieldWallIsStanding() or not Combat.isCurrentConflictBehindTheWall()) then\r\n                                                                                                --     local options = {\r\n                                                                                                --         I18N(\"fourSpicesOption\"),\r\n                                                                                                --         I18N(\"twoWormsOption\"),\r\n                                                                                                --     }\r\n                                                                                                --     Dialog.showOptionsAndCancelDialog(color, I18N(\"goDeepDesert\"), options, continuation, function (index)\r\n                                                                                                --         if index == 1 then\r\n                                                                                                --             MainBoard._goDeepDesert_Spice(color, leader, continuation)\r\n                                                                                                --         elseif index == 2 then\r\n                                                                                                --             MainBoard._goDeepDesert_WormsIfHook(color, leader, continuation)\r\n                                                                                                --         else\r\n                                                                                                --             assert(index == 0)\r\n                                                                                                --             continuation.run()\r\n                                                                                                --         end\r\n                                                                                                --     end)\r\n                                                                                                -- else\r\n                                                                                                --     MainBoard._goDeepDesert_Spice(color, leader, continuation)\r\n                                                                                                -- end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goDeepDesert_Spice(color, leader, continuation)\r\n                                                                                                MainBoard._anySpiceSpace(color, leader, 3, 4, MainBoard.spiceBonuses.deepDesert, continuation)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goDeepDesert_WormsIfHook(color, leader, continuation)\r\n                                                                                                -- bloodlines liet deep desert\r\n                                                                                                if PlayBoard.getLeader(color).name == \"bl_Liet\" then\r\n                                                                                                    if not PlayBoard.hasMakerHook(color) then\r\n                                                                                                        Dialog.broadcastToColor(I18N(\"noMakerHook\"), color, \"Purple\")\r\n                                                                                                        continuation.run()\r\n                                                                                                    else\r\n                                                                                                        MainBoard._anySpiceSpace(color, leader, 3, 0, MainBoard.spiceBonuses.deepDesert, continuation, function ()\r\n                                                                                                            broadcastToAll(I18N(\"lietHatesTheMakerDeepDesert\"), color)\r\n                                                                                                            leader.resources(color, \"spice\", 2)\r\n                                                                                                            leader.drawIntrigues(color, 2)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n                                                                                                elseif not PlayBoard.hasMakerHook(color) then\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"noMakerHook\"), color, \"Purple\")\r\n                                                                                                    continuation.run()\r\n                                                                                                elseif MainBoard.shieldWallIsStanding() and Combat.isCurrentConflictBehindTheWall() then\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"shieldWallIsStanding\"), color, \"Purple\")\r\n                                                                                                    continuation.run()\r\n                                                                                                else\r\n                                                                                                    MainBoard._anySpiceSpace(color, leader, 3, 0, MainBoard.spiceBonuses.deepDesert, continuation, function ()\r\n                                                                                                        leader.callSandworm(color, 2)\r\n                                                                                                    end)\r\n                                                                                                end\r\n                                                                                                -- original\r\n                                                                                                -- if not PlayBoard.hasMakerHook(color) then\r\n                                                                                                --     Dialog.broadcastToColor(I18N(\"noMakerHook\"), color, \"Purple\")\r\n                                                                                                --     continuation.run()\r\n                                                                                                -- elseif MainBoard.shieldWallIsStanding() and Combat.isCurrentConflictBehindTheWall() then\r\n                                                                                                --     Dialog.broadcastToColor(I18N(\"shieldWallIsStanding\"), color, \"Purple\")\r\n                                                                                                --     continuation.run()\r\n                                                                                                -- else\r\n                                                                                                --     MainBoard._anySpiceSpace(color, leader, 3, 0, MainBoard.spiceBonuses.deepDesert, continuation, function ()\r\n                                                                                                --         leader.callSandworm(color, 2)\r\n                                                                                                --     end)\r\n                                                                                                -- end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goHabbanyaErg(color, leader, continuation)\r\n                                                                                                assert(TurnControl.getPlayerCount() == 6)\r\n                                                                                                MainBoard._anySpiceSpace(color, leader, 1, 2, MainBoard.spiceBonuses.habbanyaErg, continuation, function ()\r\n                                                                                                    leader.drawImperiumCards(color, 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goHaggaBasin(color, leader, continuation)\r\n                                                                                                -- bloodlines liet hagga\r\n                                                                                                if PlayBoard.getLeader(color).name == \"bl_Liet\" then\r\n                                                                                                    if PlayBoard.hasMakerHook(color) then\r\n                                                                                                        local options = {\r\n                                                                                                            I18N(\"twoSpicesOption\"),\r\n                                                                                                            I18N(\"oneWormOption\"),\r\n                                                                                                        }\r\n                                                                                                        Dialog.showOptionsAndCancelDialog(color, I18N(\"goHaggaBasin\"), options, continuation, function (index)\r\n                                                                                                            if index == 1 then\r\n                                                                                                                MainBoard._goHaggaBasin_Spice(color, leader, continuation)\r\n                                                                                                            elseif index == 2 then\r\n                                                                                                                MainBoard._goHaggaBasin_WormIfHook(color, leader, continuation)\r\n                                                                                                            else\r\n                                                                                                                assert(index == 0)\r\n                                                                                                                continuation.run()\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    else\r\n                                                                                                        MainBoard._goHaggaBasin_Spice(color, leader, continuation)\r\n                                                                                                    end\r\n                                                                                                elseif PlayBoard.hasMakerHook(color) and (not MainBoard.shieldWallIsStanding() or not Combat.isCurrentConflictBehindTheWall()) then\r\n                                                                                                    local options = {\r\n                                                                                                        I18N(\"twoSpicesOption\"),\r\n                                                                                                        I18N(\"oneWormOption\"),\r\n                                                                                                    }\r\n                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N(\"goHaggaBasin\"), options, continuation, function (index)\r\n                                                                                                        if index == 1 then\r\n                                                                                                            MainBoard._goHaggaBasin_Spice(color, leader, continuation)\r\n                                                                                                        elseif index == 2 then\r\n                                                                                                            MainBoard._goHaggaBasin_WormIfHook(color, leader, continuation)\r\n                                                                                                        else\r\n                                                                                                            assert(index == 0)\r\n                                                                                                            continuation.run()\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    MainBoard._goHaggaBasin_Spice(color, leader, continuation)\r\n                                                                                                end\r\n                                                                                                -- original\r\n                                                                                                -- if PlayBoard.hasMakerHook(color) and (not MainBoard.shieldWallIsStanding() or not Combat.isCurrentConflictBehindTheWall()) then\r\n                                                                                                --     local options = {\r\n                                                                                                --         I18N(\"twoSpicesOption\"),\r\n                                                                                                --         I18N(\"oneWormOption\"),\r\n                                                                                                --     }\r\n                                                                                                --     Dialog.showOptionsAndCancelDialog(color, I18N(\"goHaggaBasin\"), options, continuation, function (index)\r\n                                                                                                --         if index == 1 then\r\n                                                                                                --             MainBoard._goHaggaBasin_Spice(color, leader, continuation)\r\n                                                                                                --         elseif index == 2 then\r\n                                                                                                --             MainBoard._goHaggaBasin_WormIfHook(color, leader, continuation)\r\n                                                                                                --         else\r\n                                                                                                --             assert(index == 0)\r\n                                                                                                --             continuation.run()\r\n                                                                                                --         end\r\n                                                                                                --     end)\r\n                                                                                                -- else\r\n                                                                                                --     MainBoard._goHaggaBasin_Spice(color, leader, continuation)\r\n                                                                                                -- end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goHaggaBasin_Spice(color, leader, continuation)\r\n                                                                                                return MainBoard._anySpiceSpace(color, leader, 1, 2, MainBoard.spiceBonuses.haggaBasin, continuation)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goHaggaBasin_WormIfHook(color, leader, continuation)\r\n                                                                                                -- bloodlines liet hagga\r\n                                                                                                if PlayBoard.getLeader(color).name == \"bl_Liet\" then\r\n                                                                                                    if not PlayBoard.hasMakerHook(color) then\r\n                                                                                                        Dialog.broadcastToColor(I18N(\"noMakerHook\"), color, \"Purple\")\r\n                                                                                                        continuation.run()\r\n                                                                                                    else\r\n                                                                                                        MainBoard._anySpiceSpace(color, leader, 1, 0, MainBoard.spiceBonuses.haggaBasin, continuation, function ()\r\n                                                                                                            broadcastToAll(I18N(\"lietHatesTheMaker\"), color)\r\n                                                                                                            leader.resources(color, \"spice\", 1)\r\n                                                                                                            leader.drawIntrigues(color, 1)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n                                                                                                elseif not PlayBoard.hasMakerHook(color) then\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"noMakerHook\"), color, \"Purple\")\r\n                                                                                                    continuation.run()\r\n                                                                                                elseif MainBoard.shieldWallIsStanding() and Combat.isCurrentConflictBehindTheWall() then\r\n                                                                                                    Dialog.broadcastToColor(I18N(\"shieldWallIsStanding\"), color, \"Purple\")\r\n                                                                                                    continuation.run()\r\n                                                                                                else\r\n                                                                                                    MainBoard._anySpiceSpace(color, leader, 1, 0, MainBoard.spiceBonuses.haggaBasin, continuation, function ()\r\n                                                                                                        leader.callSandworm(color, 1)\r\n                                                                                                    end)\r\n                                                                                                end\r\n                                                                                                -- original\r\n                                                                                                -- if not PlayBoard.hasMakerHook(color) then\r\n                                                                                                --     Dialog.broadcastToColor(I18N(\"noMakerHook\"), color, \"Purple\")\r\n                                                                                                --     continuation.run()\r\n                                                                                                -- elseif MainBoard.shieldWallIsStanding() and Combat.isCurrentConflictBehindTheWall() then\r\n                                                                                                --     Dialog.broadcastToColor(I18N(\"shieldWallIsStanding\"), color, \"Purple\")\r\n                                                                                                --     continuation.run()\r\n                                                                                                -- else\r\n                                                                                                --     MainBoard._anySpiceSpace(color, leader, 1, 0, MainBoard.spiceBonuses.haggaBasin, continuation, function ()\r\n                                                                                                --         leader.callSandworm(color, 1)\r\n                                                                                                --     end)\r\n                                                                                                -- end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            -- bloodlines tuek's sietch\r\n                                                                                            function MainBoard._goTueksSietch(color, leader, continuation)\r\n                                                                                                local options = {\r\n                                                                                                    I18N(\"tueksSpiceOption\"),\r\n                                                                                                    I18N(\"tueksDrawOption\"),\r\n                                                                                                }\r\n                                                                                                Dialog.showOptionsAndCancelDialog(color, I18N(\"goTueksSietch\"), options, continuation, function (index)\r\n                                                                                                    if index == 1 then\r\n                                                                                                        MainBoard._goTueksSietch_Spice(color, leader, continuation)\r\n                                                                                                    elseif index == 2 then\r\n                                                                                                        MainBoard._goTueksSietch_Draw(color, leader, continuation)\r\n                                                                                                    else\r\n                                                                                                        assert(index == 0)\r\n                                                                                                        continuation.run()\r\n                                                                                                    end\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            -- bloodlines tuek's sietch spice\r\n                                                                                            function MainBoard._goTueksSietch_Spice(color, leader, continuation)\r\n                                                                                                MainBoard._anySpiceSpace(color, leader, 0, 1, MainBoard.spiceBonuses.tueksSietch, continuation, function ()\r\n                                                                                                    -- bloodlines esmar passive - 1 solari\r\n                                                                                                    if PlayBoard.getLeader(color).name == \"bl_Esmar\" then\r\n                                                                                                        leader.resources(color, \"solari\", 1)\r\n                                                                                                    end\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            -- bloodlines tuek's sietch draw\r\n                                                                                            function MainBoard._goTueksSietch_Draw(color, leader, continuation)\r\n                                                                                                MainBoard._anySpiceSpace(color, leader, 0, 0, MainBoard.spiceBonuses.tueksSietch, continuation, function ()\r\n                                                                                                    -- bloodlines esmar passive - 1 solari\r\n                                                                                                    if PlayBoard.getLeader(color).name == \"bl_Esmar\" then\r\n                                                                                                        leader.resources(color, \"solari\", 1)\r\n                                                                                                    end\r\n                                                                                                    leader.drawImperiumCards(color, 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goImperialBasin(color, leader, continuation)\r\n                                                                                                MainBoard._anySpiceSpace(color, leader, 0, 1, MainBoard.spiceBonuses.imperialBasin, continuation, function ()\r\n                                                                                                    MainBoard._applyControlOfAnySpace(MainBoard.banners.imperialBasinBannerZone, \"spice\")\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._anySpiceSpace(color, leader, waterCost, spiceBaseAmount, spiceBonus, continuation, additionalAction)\r\n                                                                                                if MainBoard._checkGenericAccess(color, leader, {water = waterCost}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        local harvestedSpiceAmount = MainBoard._harvestSpice(spiceBaseAmount, spiceBonus)\r\n                                                                                                        leader.resources(color, \"water\", -waterCost)\r\n                                                                                                        leader.resources(color, \"spice\", harvestedSpiceAmount)\r\n                                                                                                        if additionalAction then\r\n                                                                                                            additionalAction()\r\n                                                                                                        end\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getSpiceBonus(desertSpaceName)\r\n                                                                                                assert(MainBoard.isDesertSpace(desertSpaceName))\r\n                                                                                                return MainBoard.spiceBonuses[desertSpaceName]\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._harvestSpice(baseAmount, spiceBonus)\r\n                                                                                                assert(spiceBonus)\r\n                                                                                                local spiceAmount = baseAmount + spiceBonus:get()\r\n                                                                                                spiceBonus:set(0)\r\n                                                                                                return spiceAmount\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._applyControlOfAnySpace(bannerZone, resourceName)\r\n                                                                                                local controllingPlayer = MainBoard.getControllingPlayer(bannerZone)\r\n                                                                                                if controllingPlayer then\r\n                                                                                                    PlayBoard.getLeader(controllingPlayer).resources(controllingPlayer, resourceName, 1)\r\n                                                                                                end\r\n                                                                                                return true\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.applyControlOfAnySpace(name)\r\n                                                                                                local bannerZone = MainBoard.findControlableSpace(name)\r\n                                                                                                if bannerZone then\r\n                                                                                                    local resourceName\r\n                                                                                                    if name == \"arrakeen\" or name == \"spiceRefinery\" then\r\n                                                                                                        resourceName = \"solari\"\r\n                                                                                                    elseif name == \"imperialBasin\" then\r\n                                                                                                        resourceName = \"spice\"\r\n                                                                                                    else\r\n                                                                                                        error(name)\r\n                                                                                                    end\r\n                                                                                                    return MainBoard._applyControlOfAnySpace(bannerZone, resourceName)\r\n                                                                                                else\r\n                                                                                                    return false\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.findControlableSpace(name)\r\n                                                                                                for bannerZoneName, zone in pairs(MainBoard.banners) do\r\n                                                                                                    if Helper.startsWith(bannerZoneName, name) then\r\n                                                                                                        return zone\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return nil\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getControllingPlayer(bannerZone)\r\n                                                                                                local controllingPlayer = nil\r\n\r\n                                                                                                -- Check player dreadnoughts first since they supersede flags.\r\n                                                                                                for _, object in ipairs(bannerZone.getObjects()) do\r\n                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                        if Types.isDreadnought(object, color) then\r\n                                                                                                            assert(not controllingPlayer, \"Too many dreadnoughts\")\r\n                                                                                                            controllingPlayer = color\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n\r\n                                                                                                -- Check player flags otherwise.\r\n                                                                                                if not controllingPlayer then\r\n                                                                                                    for _, object in ipairs(bannerZone.getObjects()) do\r\n                                                                                                        for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                            if Types.isControlMarker(object, color) then\r\n                                                                                                                assert(not controllingPlayer, \"Too many flags around\")\r\n                                                                                                                controllingPlayer = color\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n\r\n                                                                                                return controllingPlayer\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getControllingDreadnought(bannerZone)\r\n                                                                                                for _, object in ipairs(bannerZone.getObjects()) do\r\n                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                        if Types.isDreadnought(object, color) then\r\n                                                                                                            return object\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return nil\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goSmuggling(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.resources(color, \"solari\", 1)\r\n                                                                                                    leader.shipments(color, 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goInterstellarShipping(color, leader, continuation)\r\n                                                                                                if MainBoard._checkGenericAccess(color, leader, {friendship = \"spacingGuild\"}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.shipments(color, 2)\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            function MainBoard._goTechNegotiation(color, leader, continuation)\r\n                                                                                                local options = {\r\n                                                                                                    I18N(\"sendNegotiatorOption\"),\r\n                                                                                                    I18N(\"buyTechWithDiscont1Option\"),\r\n                                                                                                }\r\n                                                                                                Dialog.showOptionsAndCancelDialog(color, I18N(\"goTechNegotiation\"), options, continuation, function (index)\r\n                                                                                                    if index == 1 then\r\n                                                                                                        MainBoard._goTechNegotiation_Negotiate(color, leader, continuation)\r\n                                                                                                    elseif index == 2 then\r\n                                                                                                        MainBoard._goTechNegotiation_Buy(color, leader, continuation)\r\n                                                                                                    else\r\n                                                                                                        assert(index == 0)\r\n                                                                                                        continuation.run()\r\n                                                                                                    end\r\n                                                                                                end)\r\n                                                                                                return continuation\r\n                                                                                            end\r\n\r\n                                                                                            function MainBoard._goTechNegotiation_Buy(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.resources(color, \"persuasion\", 1)\r\n                                                                                                    TechMarket.registerAcquireTechOption(color, \"techNegotiationTechBuyOption\", \"spice\", 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            function MainBoard._goTechNegotiation_Negotiate(color, leader, continuation)\r\n                                                                                                continuation.run(function ()\r\n                                                                                                    leader.resources(color, \"persuasion\", 1)\r\n                                                                                                    leader.troops(color, \"supply\", \"negotiation\", 1)\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._goDreadnought(color, leader, continuation)\r\n                                                                                                if MainBoard._checkGenericAccess(color, leader, {solari = 3}) then\r\n                                                                                                    continuation.run(function ()\r\n                                                                                                        leader.resources(color, \"solari\", -3)\r\n                                                                                                        TechMarket.registerAcquireTechOption(color, \"dreadnoughtTechBuyOption\", \"spice\", 0)\r\n                                                                                                        Park.transfert(1, PlayBoard.getDreadnoughtPark(color), Combat.getDreadnoughtPark(color))\r\n                                                                                                    end)\r\n                                                                                                else\r\n                                                                                                    continuation.run()\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.blowUpShieldWall(color, skipConfirmation)\r\n                                                                                                if MainBoard.shieldWallToken then\r\n                                                                                                    local kaBoom = function (_)\r\n                                                                                                        Music.play(\"atomics\")\r\n                                                                                                        broadcastToAll(I18N('blowUpShieldWall', {leader = PlayBoard.getLeaderName(color)}), color, \"Purple\")\r\n                                                                                                        Helper.onceTimeElapsed(3).doAfter(function ()\r\n                                                                                                            MainBoard.trash(MainBoard.shieldWallToken)\r\n                                                                                                            MainBoard.shieldWallToken = nil\r\n                                                                                                        end)\r\n                                                                                                    end\r\n\r\n                                                                                                    if skipConfirmation then\r\n                                                                                                        kaBoom()\r\n                                                                                                    else\r\n                                                                                                        Dialog.showConfirmDialog(color, I18N(\"confirmShieldWallDestruction\"), kaBoom)\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.shieldWallIsStanding()\r\n                                                                                                return MainBoard.shieldWallToken ~= nil\r\n                                                                                            end\r\n\r\n                                                                                            --- The color could be nil (the same way it could be nil with Types.isAgent)\r\n                                                                                            function MainBoard.hasAgentInSpace(spaceName, color)\r\n                                                                                                local space = MainBoard.spaces[spaceName]\r\n                                                                                                -- Avoid since it depends on the active extensions.\r\n                                                                                                --assert(space, \"Unknow space: \" .. spaceName)\r\n                                                                                                if space then\r\n                                                                                                    for _, object in ipairs(space.zone.getObjects()) do\r\n                                                                                                        if Types.isAgent(object, color) then\r\n                                                                                                            return true\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return false\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.hasEnemyAgentInSpace(spaceName, color)\r\n                                                                                                for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                    if otherColor ~= color and MainBoard.hasAgentInSpace(spaceName, otherColor) then\r\n                                                                                                        return true\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return false\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.observationPostIsOccupied(observationPostName, color)\r\n                                                                                                local observationPost = MainBoard.observationPosts[observationPostName]\r\n                                                                                                assert(observationPost, observationPostName)\r\n                                                                                                for _, spy in ipairs(Park.getObjects(observationPost.park)) do\r\n                                                                                                    if not color or spy.hasTag(color) then\r\n                                                                                                        return true\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return false\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getDeployedSpyCount(color, onlyInMakerSpace)\r\n                                                                                                local count = 0\r\n                                                                                                for observationPostName, observationPost in pairs(MainBoard.observationPosts) do\r\n                                                                                                    local ok = true;\r\n                                                                                                    if onlyInMakerSpace then\r\n                                                                                                        ok = false;\r\n                                                                                                        local spaceNames = MainBoard._getConnectedSpaceNames(observationPostName)\r\n                                                                                                        for _, spaceName in ipairs(spaceNames) do\r\n                                                                                                            if MainBoard.isDesertSpace(spaceName) then\r\n                                                                                                                ok = true;\r\n                                                                                                                break;\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                    if ok then\r\n                                                                                                        for _, spy in ipairs(Park.getObjects(observationPost.park)) do\r\n                                                                                                            if spy.hasTag(color) then\r\n                                                                                                                count = count + 1\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return count\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard._getConnectedSpaceNames(observationPostName)\r\n                                                                                                local connectedSpaceNames = {}\r\n                                                                                                for spaceName, spaceDetail in pairs(MainBoard.spaceDetails) do\r\n                                                                                                    for _, otherObservationPostName in ipairs(spaceDetail.posts) do\r\n                                                                                                        if otherObservationPostName == observationPostName then\r\n                                                                                                            table.insert(connectedSpaceNames, spaceName)\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return connectedSpaceNames\r\n                                                                                            end\r\n\r\n                                                                                            --\r\n                                                                                            function MainBoard.isSpying(spaceName, color)\r\n                                                                                                local spaceDetail = MainBoard.spaceDetails[spaceName]\r\n                                                                                                for _, observationPostName in ipairs(spaceDetail.posts) do\r\n                                                                                                    local observationPost = MainBoard.observationPosts[observationPostName]\r\n                                                                                                    for _, spy in ipairs(Park.getObjects(observationPost.park)) do\r\n                                                                                                        if spy.hasTag(color) then\r\n                                                                                                            return true\r\n                                                                                                        end\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return false\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.hasVoiceToken(spaceName)\r\n                                                                                                local space = MainBoard.spaces[spaceName]\r\n                                                                                                if space then\r\n                                                                                                    return #Helper.filter(space.zone.getObjects(), Types.isVoiceToken) > 0\r\n                                                                                                end\r\n                                                                                                return false\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isEmperorSpace(spaceName)\r\n                                                                                                return MainBoard.spaceDetails[spaceName].group == \"emperor\"\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isSpacingGuildSpace(spaceName)\r\n                                                                                                return MainBoard.spaceDetails[spaceName].group == \"spacingGuild\"\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isBeneGesseritSpace(spaceName)\r\n                                                                                                return MainBoard.spaceDetails[spaceName].group == \"beneGesserit\"\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isFremenSpace(spaceName)\r\n                                                                                                return MainBoard.spaceDetails[spaceName].group == \"fremen\"\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isGreatHouses(spaceName)\r\n                                                                                                return MainBoard.spaceDetails[spaceName].group == \"greatHouses\"\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isFringeWorlds(spaceName)\r\n                                                                                                return MainBoard.spaceDetails[spaceName].group == \"fringeWorlds\"\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isFactionSpace(spaceName)\r\n                                                                                                return MainBoard.isEmperorSpace(spaceName)\r\n                                                                                                or MainBoard.isSpacingGuildSpace(spaceName)\r\n                                                                                                or MainBoard.isBeneGesseritSpace(spaceName)\r\n                                                                                                or MainBoard.isFremenSpace(spaceName)\r\n                                                                                                or MainBoard.isGreatHouses(spaceName)\r\n                                                                                                or MainBoard.isFringeWorlds(spaceName)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isCitySpace(spaceName)\r\n                                                                                                return MainBoard.spaceDetails[spaceName].group == \"city\"\r\n                                                                                            end\r\n\r\n                                                                                            --- aka Maker space\r\n                                                                                            function MainBoard.isDesertSpace(spaceName)\r\n                                                                                                return MainBoard.spaceDetails[spaceName].group == \"desert\"\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isSpiceTradeSpace(spaceName)\r\n                                                                                                return MainBoard.isDesertSpace(spaceName)\r\n                                                                                                or MainBoard.isCHOAMSpace(spaceName)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isCombatSpace(spaceName)\r\n                                                                                                return MainBoard.spaceDetails[spaceName].combat\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getEmperorSpaces()\r\n                                                                                                local emperorSpaces = {}\r\n                                                                                                for space, details in pairs(MainBoard.spaceDetails) do\r\n                                                                                                    if Helper.isElementOf(details.group, {\"emperor\", \"greatHouses\"}) then\r\n                                                                                                        table.insert(emperorSpaces, space)\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return emperorSpaces\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            -- bloodlines sardaukar commander skill - canny\r\n                                                                                            function MainBoard.getLandsraadSpaces()\r\n                                                                                                local landsraadSpaces = {}\r\n                                                                                                for space, details in pairs(MainBoard.spaceDetails) do\r\n                                                                                                    if Helper.isElementOf(details.group, {\"landsraad\"}) then\r\n                                                                                                        table.insert(landsraadSpaces, space)\r\n                                                                                                    end\r\n                                                                                                end\r\n                                                                                                return landsraadSpaces\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getBannerZones()\r\n                                                                                                return {\r\n                                                                                                    MainBoard.banners.imperialBasinBannerZone,\r\n                                                                                                    MainBoard.banners.arrakeenBannerZone,\r\n                                                                                                    MainBoard.banners.spiceRefineryBannerZone,\r\n                                                                                                }\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.addSpaceBonus(spaceName, bonuses)\r\n                                                                                                local space = MainBoard.spaces[spaceName]\r\n                                                                                                assert(space, \"Unknown space: \" .. tostring(spaceName))\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getSnooperTrackPosition(faction)\r\n\r\n                                                                                                local getAveragePosition = function (spaceNames)\r\n                                                                                                    local p = Vector(0, 0, 0)\r\n                                                                                                    local count = 0\r\n                                                                                                    for _, spaceName in ipairs(spaceNames) do\r\n                                                                                                        local space = MainBoard.spaces[spaceName]\r\n                                                                                                        assert(space, spaceName)\r\n                                                                                                        p = p + space.zone.getPosition()\r\n                                                                                                        count = count + 1\r\n                                                                                                    end\r\n                                                                                                    return p * (1 / count)\r\n                                                                                                end\r\n\r\n                                                                                                local positions\r\n                                                                                                if TurnControl.getPlayerCount() == 6 then\r\n                                                                                                    positions = {\r\n                                                                                                        emperor = getAveragePosition({\"militarySupport\", \"economicSupport\"}),\r\n                                                                                                        spacingGuild = getAveragePosition({\"heighliner\", \"deliverSupplies\"}),\r\n                                                                                                        beneGesserit = getAveragePosition({\"espionage\", \"secrets\"}),\r\n                                                                                                        fremen = getAveragePosition({\"controversialTechnology\", \"expedition\"}),\r\n                                                                                                    }\r\n                                                                                                else\r\n                                                                                                    positions = {\r\n                                                                                                        emperor = getAveragePosition({\"sardaukar\", \"dutifulService\"}),\r\n                                                                                                        spacingGuild = getAveragePosition({\"heighliner\", \"deliverSupplies\"}),\r\n                                                                                                        beneGesserit = getAveragePosition({\"espionage\", \"secrets\"}),\r\n                                                                                                        fremen = getAveragePosition({\"desertTactics\", \"fremkit\"}),\r\n                                                                                                    }\r\n                                                                                                end\r\n\r\n                                                                                                return positions[faction]\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.getFirstPlayerMarker()\r\n                                                                                                return MainBoard.firstPlayerMarker\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.trash(object)\r\n                                                                                                MainBoard.trashQueue = MainBoard.trashQueue or Helper.createSpaceQueue()\r\n                                                                                                MainBoard.trashQueue.submit(function (height)\r\n                                                                                                    object.interactable = true\r\n                                                                                                    object.setLock(false)\r\n                                                                                                    object.setPosition(getObjectFromGUID('ef8614').getPosition() + Vector(0, 1 + height * 0.5, 0))\r\n                                                                                                end)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.isInside(object)\r\n                                                                                                local position = object.getPosition()\r\n                                                                                                local center = MainBoard.mainBoard.getPosition()\r\n                                                                                                local offset = position - center\r\n                                                                                                return math.abs(offset.x) < 11 and math.abs(offset.z) < 11\r\n                                                                                            end\r\n\r\n                                                                                            function MainBoard.getMainBoard()\r\n                                                                                                return MainBoard.mainBoard\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function MainBoard.createOtherMemoriesPark(color)\r\n\r\n                                                                                                local origin = MainBoard.spaces.espionage.position + Vector(-0.4, 0, 1.5)\r\n                                                                                                origin:setAt('y', 1.86) -- ground level\r\n                                                                                                local slots = {}\r\n                                                                                                for j = 1, 2 do\r\n                                                                                                    for i = 1, 6 do\r\n                                                                                                        local x = (i - 1.5) * 0.4\r\n                                                                                                        local z = (1.5 - j) * 0.4\r\n                                                                                                        local slot = origin + Vector(x, 0, z)\r\n                                                                                                        table.insert(slots, slot)\r\n                                                                                                    end\r\n                                                                                                end\r\n\r\n                                                                                                local zone = Park.createTransientBoundingZone(0, Vector(0.25, 0.25, 0.25), slots)\r\n\r\n                                                                                                return Park.createPark(\r\n                                                                                                    \"OtherMemories\",\r\n                                                                                                    slots,\r\n                                                                                                    Vector(0, 0, 0),\r\n                                                                                                    {zone},\r\n                                                                                                    {\"Troop\", color},\r\n                                                                                                    nil,\r\n                                                                                                    false,\r\n                                                                                                true)\r\n                                                                                            end\r\n\r\n                                                                                            return MainBoard\r\n\r\n                                                                                        end)\r\n                                                                                        __bundle_register(\"Locale\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                            local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                            local Locale = {}\r\n\r\n                                                                                            ---\r\n                                                                                            function Locale.onLoad(state)\r\n                                                                                                I18N.locales.en = require(\"en.Locale\")\r\n                                                                                                I18N.locales.fr = require(\"fr.Locale\")\r\n                                                                                                -- The state could be undefined when explicitly called from Deck.rebuildPreloadAreas.\r\n                                                                                                if state and state.settings then\r\n                                                                                                    I18N.setLocale(state.settings.language)\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function Locale.setUp(settings)\r\n                                                                                                I18N.setLocale(settings.language)\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function Locale.getAllLocales()\r\n                                                                                                return {\r\n                                                                                                    \"en\",\r\n                                                                                                    \"fr\"\r\n                                                                                                }\r\n                                                                                            end\r\n\r\n                                                                                            return Locale\r\n\r\n                                                                                        end)\r\n                                                                                        __bundle_register(\"fr.Locale\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                            return {\r\n                                                                                                [\"?\"] = \"?\",\r\n\r\n                                                                                                Green = \"vert\",\r\n                                                                                                Yellow = \"jaune\",\r\n                                                                                                Blue = \"bleu\",\r\n                                                                                                Red = \"rouge\",\r\n                                                                                                Purple = \"violet\",\r\n                                                                                                White = \"blanc\",\r\n\r\n                                                                                                -- Setup UI\r\n                                                                                                prolog = \"?? Buvez r??guli??rement et sans attendre d'avoir soif ! ??\",\r\n                                                                                                language = \"Langue\",\r\n                                                                                                players = \"Joueurs\",\r\n                                                                                                virtualHotSeat = \"Sp??cial / Hotseat\",\r\n                                                                                                virtualHotSeatTooltip = \"Permet de jouer en solo, ?? 2 joueurs ou\\nbien en ?? hotseat ?? pour les autres modes.\",\r\n                                                                                                firstPlayer = \"Premier joueur\",\r\n                                                                                                randomizePlayersPositions = \"M??langer les positions des joueurs\",\r\n                                                                                                randomizePlayersPositionTooltip = \"Aucun joueur ne doit utiliser le si??ge noir pendant\\nque les positions des joueurs sont m??lang??es.\",\r\n                                                                                                wormEatsTheCardTooltip = \"LMAO FRENCH PEOPLE TABARNAK\",\r\n                                                                                                extensions = \"Extensions\",\r\n                                                                                                useContracts = \"Contrats de la CHOM\",\r\n                                                                                                legacy = \"Dune : Imperium\",\r\n                                                                                                merakon = \"Choix de cartes de Paul Dennen\",\r\n                                                                                                riseOfIx = \"L???Av??nement de Ix\",\r\n                                                                                                epicMode = \"Mode ??pique\",\r\n                                                                                                immortality = \"Immortalit??\",\r\n                                                                                                goTo11 = \"Pousser jusqu????? 11\",\r\n                                                                                                leaderSelection = \"Dirigeants\",\r\n                                                                                                leaderPoolSize = \"Taille de la s??lection\",\r\n                                                                                                leaderPoolSizeLabel = \"Nombre de dirigeants ({value})\",\r\n                                                                                                tweakLeaderSelection = \"Personnaliser les dirigeants\",\r\n                                                                                                variants = \"Variantes\",\r\n                                                                                                miscellanous = \"Divers\",\r\n                                                                                                horizontalHandLayout = \"Mains ?? l???horizontale ?? 4 joueurs\",\r\n                                                                                                assistedRevelation = \"R??v??lation assist??e\",\r\n                                                                                                soundEnabled = \"Sons activ??s\",\r\n                                                                                                formalCombatPhase = \"Phase de combat formelle\",\r\n                                                                                                formalCombatPhaseTooltip = \"Les joueurs poss??dant une ou plusieurs cartes\\nd???intrigue doivent explicitement finir leur tour\\napr??s en avoir jou?? une ou pour passer.\",\r\n                                                                                                setup = \"Mise en place\",\r\n                                                                                                notEnoughPlayers = \"Pas assez de joueurs\",\r\n                                                                                                playerColorWarning = \"(Les couleurs blanche et violette ne sont valides que dans le mode ?? 6.)\",\r\n                                                                                                english = \"English\",\r\n                                                                                                french = \"Fran??ais\",\r\n                                                                                                random = \"al??atoire\",\r\n                                                                                                reversePick = \"en sens inverse\",\r\n                                                                                                reverseHiddenPick = \"secr??tement en sens inverse\",\r\n                                                                                                altHiddenPick = \"secr??tement + sens 4??3??1??2\",\r\n                                                                                                onePlayerTwoRivals = \"1 (+2)\",\r\n                                                                                                twoPlayersOneRival = \"2 (+1)\",\r\n                                                                                                threePlayers = \"3\",\r\n                                                                                                fourPlayers = \"4\",\r\n                                                                                                twoTeams = \"2 x 3\",\r\n                                                                                                normal = \"normal\",\r\n                                                                                                streamlined = \"simplifi??\",\r\n\r\n                                                                                                -- Solo Setup UI\r\n                                                                                                soloSettings = \"Hagal\",\r\n                                                                                                difficulty = \"Difficult??\",\r\n                                                                                                all = \"tous\",\r\n                                                                                                novice = \"mercenaire\",\r\n                                                                                                veteran = \"sardaukar\",\r\n                                                                                                expert = \"mentat\",\r\n                                                                                                expertPlus = \"kwisatz\",\r\n                                                                                                autoTurnInSoloOption = \"Passage de tour automatique\",\r\n                                                                                                imperiumRowChurnOption = \"Barattage de la rang??e de l???Imperium\",\r\n                                                                                                streamlinedRivalsOption = \"Rivaux simplifi??s\",\r\n                                                                                                brutalEscalationOption = \"Escalade brutale\",\r\n                                                                                                expertDeploymentOption = \"D??ploiement expert\",\r\n                                                                                                smartPoliticsOption = \"Politiques habiles\",\r\n\r\n                                                                                                -- Phases\r\n                                                                                                phaseLeaderSelection = \"Phase : s??lection des dirigeants\",\r\n                                                                                                phaseGameStart = \"Phase : d??but du jeu\",\r\n                                                                                                phaseRoundStart = \"Phase : d??but de la manche n??{round}\\n??????????????????????????????????????????????????????????????????????????????????????????\",\r\n                                                                                                phasePlayerTurns = \"Phase : tours des joueurs\",\r\n                                                                                                phaseCombat = \"Phase : combat\",\r\n                                                                                                phaseCombatEnd = \"Phase : fin du combat\",\r\n                                                                                                phaseMakers = \"Phase : faiseurs\",\r\n                                                                                                phaseRecall = \"Phase : rappel\",\r\n                                                                                                phaseEndgame = \"Phase : fin de jeu\",\r\n                                                                                                phaseArrakeenScouts = \"Phase : ??claireurs d???Arrakeen\",\r\n                                                                                                endgameReached = \"Fin de jeu th??orique atteinte\",\r\n                                                                                                takeHighCouncilSeatByForce = \"Prend de force\",\r\n                                                                                                takeHighCouncilSeatByForceConfirm = \"Prendre de force son si??ge au Haut-Conseil ?\",\r\n                                                                                                notEnoughLeaderLeft = \"Pas assez de dirigeants !\",\r\n\r\n                                                                                                -- Card\r\n                                                                                                acquireButton = \"Acqu??rir\",\r\n                                                                                                notFremenCard = \"Tentative d???ajout d???un pouilleux de Fremen dans la salle du tr??ne !\",\r\n                                                                                                noEnoughSpecimen = \"Vous n???avez pas assez de sp??cimens !\",\r\n\r\n                                                                                                -- Playboards\r\n                                                                                                noTouch = \"Ne touchez pas ?? ce bouton !\",\r\n                                                                                                noLeader = \"Vous n???avez pas encore de dirigeant !\",\r\n                                                                                                noAlly = \"You n???avez pas s??lectionn?? d???alli?? !\",\r\n                                                                                                notYourTurn = \"Ce n???est pas votre tour !\",\r\n                                                                                                noAgent = \"Il ne vous reste plus d???agent !\",\r\n                                                                                                agentAlreadyPresent = \"Vous avez d??j?? un agent pr??sent sur cette case !\",\r\n                                                                                                noFriendship = \"Vous n???avez pas assez d???influence aupr??s {withFaction} !\",\r\n                                                                                                alreadyHaveSwordmaster = \"Vous avez d??j?? un ma??tre d???armes !\",\r\n                                                                                                noResource = \"Vous n?????tes pas assez pourvu en {resource} !\",\r\n                                                                                                forbiddenAccess = \"Vous n???avez pas acc??s ?? cet espace !\",\r\n                                                                                                notShaddamTeam = \"Vous n?????tes pas alli?? ?? l???Empereur de l???univers connu !\",\r\n                                                                                                notMuadDibTeam = \"Vous n?????tes pas alli?? ?? Usul Muad-Dib, le Lisan al-Gaib !\",\r\n                                                                                                sandwormButton = \"Ver des\\nsables : ??1\",\r\n                                                                                                drawOneCardButton = \"Piocher 1 carte\",\r\n                                                                                                drawFiveCardsButton = \"??? Piocher 5 cartes ???\",\r\n                                                                                                resetDiscardButton = \"D??fausse ??? pioche\",\r\n                                                                                                agentTurn = \"Tour d???agent\",\r\n                                                                                                revealHandButton = \"R??v??lation\",\r\n                                                                                                revealHandTooltip = \"Clic droit pour une r??v??lation ??tendue.\",\r\n                                                                                                atomics = \"Atomiser\",\r\n                                                                                                revealNotTurn = \"Vous ne pouvez pas r??v??ler en dehors de votre tour.\",\r\n                                                                                                revealEarlyConfirm = \"R??v??ler votre main ?\",\r\n                                                                                                isDecidingToDraw = \"{leader} est en train de d??cider de piocher des cartes tout de suite ou non car sa d??fausse va ??tre rem??lang??e.\",\r\n                                                                                                warningBeforeDraw = \"Attention : votre d??fausse va ??tre rem??lang??e et/ou vous avez moins de {count} carte(s). Voulez-vous piocher {maxCount} carte(s) tout de suite ? (Vous devrez piocher manuellement si vous annulez)\",\r\n                                                                                                atomicsConfirm = \"Confirmer\",\r\n                                                                                                yes = \"Oui\",\r\n                                                                                                no = \"Non\",\r\n                                                                                                ok = \"Ok\",\r\n                                                                                                cancel = \"Annuler\",\r\n                                                                                                dialogCardAbove = \"Voulez-vous mettre la carte sur le dessus de votre paquet ?\",\r\n                                                                                                endTurn = \"Finir\\ntour\",\r\n                                                                                                activatedAlly = \"??? Alli?? activ??\",\r\n                                                                                                noSeatedPlayer = \"Le joueur {color} est absent !\",\r\n                                                                                                takePlace = \"Piquer\\nla\\nplace\",\r\n                                                                                                forwardMessage = \"Au joueur {color} : {message}\",\r\n\r\n                                                                                                -- Leader selection\r\n                                                                                                leaderSelectionAdjust = \"Ajustez le nombre de dirigeants s??lectionn??s au hasard\\nparmi lesquels les joueurs devront choisir :\",\r\n                                                                                                leaderSelectionExclude = \"Vous pouvez retourner (ou d??truire) n???importe quel dirigeant pour l???exclure.\\nUne fois satisfait, appuyez sur le bouton ?? D??marrer ??.\",\r\n                                                                                                start = \"D??marrer\",\r\n                                                                                                claimLeader = \"Prendre {leader} comme dirigeant\",\r\n                                                                                                incompatibleLeader = \"Ce n???est pas un dirigeant pour un humain !\",\r\n                                                                                                incompatibleRivalLeader = \"Ce n???est pas un dirigeant pour un rival !\",\r\n\r\n                                                                                                -- Instructions\r\n                                                                                                leaderSelectionActiveInstruction = \"S??lectionnez un dirigeant\\nsur le plateau sup??rieur.\",\r\n                                                                                                leaderSelectionInactiveInstruction = \"Attendez que vos adversaires\\naient s??lectionn?? leurs dirigeants.\",\r\n                                                                                                playerTurnsActiveInstruction = \"Envoyez un agent\\nou r??v??lez votre main,\\npuis appuyez sur Finir tour.\",\r\n                                                                                                playerTurnsInactiveInstruction = \"Attendez que vos adversaires\\naient jou?? leurs tours\\nd???agent / r??v??lation.\",\r\n                                                                                                combatActiveInstruction = \"Jouez une intrigue et\\nappuyez sur Finir tour\\nou appuyez directement\\nsur Finir tour pour passer.\",\r\n                                                                                                combatInactiveInstruction = \"Attendez que vos\\nadversaires en combat\\naient jou?? une intrigue\\nou pass?? leur tour.\",\r\n                                                                                                combatEndActiveInstruction = \"Prenez votre butin et\\njouez des cartes d???intrigue\\nle cas ??ch??ant,\\npuis appuyez sur Finir tour.\",\r\n                                                                                                combatEndInactiveInstruction = \"Attendez que vos adversaires\\naient r??colt?? leur butin\\net jou?? des intrigues.\",\r\n                                                                                                endgameActiveInstruction = \"Jouez vos cartes de fin de jeu et\\ntuiles tech que vous poss??dez\\nafin de gagner des PV finaux.\",\r\n                                                                                                endgameInactiveInstruction = \"Attendez que vos adversaires aient\\njou?? leurs cartes de fin de jeu\\net tuiles tech qu???ils poss??dent.\",\r\n                                                                                                -- Special instructions\r\n                                                                                                gameStartActiveInstructionForVladimirHarkonnen = \"Choisissez secr??tement\\ndeux factions.\",\r\n                                                                                                gameStartInactiveInstructionForVladimirHarkonnen = \"Attendez que Vladimir Harkonnen\\nait secr??tement choisi\\nses deux factions.\",\r\n                                                                                                gameStartActiveInstructionForIlesaEcaz = \"Mettez de c??t?? une carte\\nde votre main.\",\r\n                                                                                                gameStartInactiveInstructionForIlesaEcaz = \"Attendez que Ilesa Ecaz\\nait mis de c??t?? une carte\\nde sa main.\",\r\n                                                                                                gameStartActiveInstructionForHundroMoritani = \"Gardez une intrigue\\net reposez l???autre\\nau dessus du paquet d???intrigues.\",\r\n                                                                                                gameStartInactiveInstructionForHundroMoritani = \"Attendez que Hundro Moritani\\nait choisi entre\\nses deux intrigues.\",\r\n\r\n                                                                                                -- Resource\r\n                                                                                                spiceAmount = \"??pice\",\r\n                                                                                                spice = \"unit?? d?????pice\",\r\n                                                                                                spices = \"unit??s d?????pices\",\r\n                                                                                                waterAmount = \"Eau\",\r\n                                                                                                water = \"mesure d???eau\",\r\n                                                                                                waters = \"mesures d???eau\",\r\n                                                                                                solariAmount = \"Solari\",\r\n                                                                                                solari = \"solari\",\r\n                                                                                                solaris = \"solaris\",\r\n                                                                                                persuasionAmount = \"Persuasion\",\r\n                                                                                                persuasion = \"point de persuasion\",\r\n                                                                                                persuasions = \"points de persuasion\",\r\n                                                                                                strengthAmount = \"Force\",\r\n                                                                                                strength = \"??p??e\",\r\n                                                                                                strengths = \"??p??es\",\r\n                                                                                                spendManually = \"??? {leader} d??pense {amount} {resource} manuellement.\",\r\n                                                                                                receiveManually = \"??? {leader} re??oit {amount} {resource} manuellement.\",\r\n                                                                                                fixManually = \"Correction de {amount} {resource} manuellement ({location}).\",\r\n                                                                                                influence = \"influence\",\r\n                                                                                                beetle = \"scarab??e\",\r\n                                                                                                beetles = \"scarab??es\",\r\n                                                                                                card = \"carte\",\r\n                                                                                                cards = \"cartes\",\r\n\r\n                                                                                                -- Actions\r\n                                                                                                playerTurn = \"??? Tour : {leader}\",\r\n                                                                                                drawObjects = \"??? Pioche de {amount} {object}\",\r\n                                                                                                imperiumCard = \"carte\",\r\n                                                                                                imperiumCards = \"cartes\",\r\n                                                                                                intrigueCard = \"carte d???intrigue\",\r\n                                                                                                intrigueCards = \"cartes d???intrigue\",\r\n                                                                                                beetleAdvance = \"??? Progression x{count} sur la piste du Tleilax.\",\r\n                                                                                                beetleRollback = \"??? R??gression sur la piste du Tleilax.\",\r\n                                                                                                researchAdvance = \"??? Progression sur la piste de recherche.\",\r\n                                                                                                researchRollback = \"??? R??gression sur la piste de recherche.\",\r\n                                                                                                credit = \"??? +{amount} {what}\",\r\n                                                                                                debit = \"??? -{amount} {what}\",\r\n                                                                                                transfer = \"??? Transfert de {count} {what} : {from} ??? {to}.\",\r\n                                                                                                troop = \"troupe\",\r\n                                                                                                troops = \"troupes\",\r\n                                                                                                dreadnoughts = \"cuirass??s\",\r\n                                                                                                supplyPark = \"r??serve\",\r\n                                                                                                garrisonPark = \"garnison\",\r\n                                                                                                combatPark = \"champ de bataille\",\r\n                                                                                                negotiationPark = \"n??gociation tech.\",\r\n                                                                                                tanksPark = \"cuves axolotls\",\r\n                                                                                                otherMemoriesPark = \"m??moire seconde\",\r\n                                                                                                advanceFreighter = \"??? Progression sur la piste d???exp??dition.\",\r\n                                                                                                recallFreighter = \"??? Rappel de cargo.\",\r\n                                                                                                recruitSwordmaster = \"??? Recrutement du ma??tre d???armes.\",\r\n                                                                                                takeHighCouncilSeat = \"??? Prise de si??ge au Haut-Conseil.\",\r\n                                                                                                takeMakerHook = \"??? Acquisition d???un hame??on ?? faiseur.\",\r\n                                                                                                gainInfluence = \"??? +{amount} influence aupr??s {withFaction}.\",\r\n                                                                                                loseInfluence = \"??? -{amount} influence aupr??s {withFaction}.\",\r\n                                                                                                acquireTleilaxuCard = \"??? Acquisition carte tleilaxu : ?? {card} ??.\",\r\n                                                                                                acquireImperiumCard = \"??? Acquisition carte Imperium : ?? {card} ??.\",\r\n                                                                                                buyTech = \"??? Acquisition pour {amount} {resource} de la tech. : ?? {name} ??.\",\r\n                                                                                                acquireContract = \"??? Prise du contrat : ?? {name} ??.\",\r\n                                                                                                sendingAgent = \"??? Envoi d???un agent vers : {space} ({cards}).\",\r\n                                                                                                stealIntrigues = \"??? Vol de ?? {card} ?? ?? {victim}.\",\r\n                                                                                                gainVictoryPoint = \"??? Gain de PV ({name}).\",\r\n\r\n                                                                                                -- Rival Actions\r\n                                                                                                triggeringScheme = \"??? Manigance de {leader} !\",\r\n                                                                                                brutalEscalation = \"??? Escalade brutale !\",\r\n                                                                                                smartPolitics = \"??? Applique une politique habile.\",\r\n                                                                                                expertDeploymentLimit = \"??? Limitation du d??ploiement de forces ?? {limit}.\",\r\n\r\n                                                                                                -- Shield Wall\r\n                                                                                                confirmShieldWallDestruction = \"Confirmez-vous cette violation flagrante de la Grande Convention ?\",\r\n                                                                                                blowUpShieldWall = \"{leader} fait exploser le Mur du Bouclier !\",\r\n                                                                                                explosion = \"Ka-Boom !\",\r\n\r\n                                                                                                -- Combat\r\n                                                                                                announceCombat = \"Le combat de la manche est : ?? {combat} ??\",\r\n                                                                                                dreadnoughtMandatoryOccupation = \"Rappel : vous devez envoyer un cuirass?? occuper un espace.\",\r\n                                                                                                troopEdit = \"Troupes : ??1\",\r\n\r\n                                                                                                -- Boards\r\n                                                                                                sendAgentTo = \"Envoyer un agent vers ??? {space}\",\r\n                                                                                                sendSpyTo = \"Envoyer un espion\",\r\n                                                                                                infiltrateWithSpy = \"Espion rappel?? pour s???infiltrer\",\r\n                                                                                                gatherIntelligenceWithSpy = \"Espion rappel?? pour collecter des renseignements\",\r\n                                                                                                noSpyToInfiltrate = \"Vous n???avez pas d???espion pr??sent vous permettant de vous infiltrer !\",\r\n                                                                                                noSpyToRecallOrCardToDraw = \"Vous n???avez pas d???espion ?? rappeler ou de carte ?? tirer !\",\r\n                                                                                                selectSpyToRecall = \"Selectionnez ?? partir de quel poste d???observation vous rappelez votre espion.\",\r\n                                                                                                confirmSpyRecall = \"Voulez-vous rappeler un espion pour piocher une carte ?\",\r\n                                                                                                progressOnInfluenceTrack = \"Progresser sur la piste d???influence {withFaction}\",\r\n                                                                                                recallYourFreighter = \"Rappeler son cargo\",\r\n                                                                                                progressOnShipmentTrack = \"Progresser sur la piste d???exp??dition\",\r\n                                                                                                pickBonus = \"Prendre le bonus : {bonus}\",\r\n                                                                                                troopsAndInfluence = \"troupes et influence\",\r\n                                                                                                forbiddenMove = \"Mouvement interdit. Voulez-vous quand m??me le r??aliser ?\",\r\n                                                                                                progressOnTleilaxTrack = \"Progresser sur la piste du Tleilax\",\r\n                                                                                                specimenEdit = \"Sp??cimen: ??1\",\r\n                                                                                                progressOnResearchTrack = \"Progresser sur la piste de recherche\",\r\n                                                                                                progressAfterResearchTrack = \"Progresser au-del?? de la piste de recherche\",\r\n                                                                                                negotiatorEdit = \"N??gociateur: ??1\",\r\n                                                                                                goGatherSupport = \"Selectionnez une option.\",\r\n                                                                                                noWaterOption = \"Gratuit\",\r\n                                                                                                withWaterOption = \"2 solaris\",\r\n                                                                                                goSietchTabr = \"Selectionnez une option.\",\r\n                                                                                                hookTroopWaterOption = \"Hame??on ?? ver\",\r\n                                                                                                troopWaterOption = \"Troupe\",\r\n                                                                                                waterShieldWallOption = \"Mur du Bouclier\",\r\n                                                                                                goSpiceRefinery = \"Selectionnez une option.\",\r\n                                                                                                noSpiceOption = \"Pas d?????pice\",\r\n                                                                                                withSpiceOption = \"1 ??pice\",\r\n                                                                                                reclaimRewards = \"R??clamer les r??compenses\",\r\n                                                                                                makersAndRecall = \"Faiseurs + Rappel\",\r\n                                                                                                doublingConflictRewards = \"R??compenses doubl??es\",\r\n                                                                                                unavailableSwordmaster = \"Pas de ma??tre d???armes avec ce niveau de difficult?? !\",\r\n\r\n                                                                                                goDeepDesert = \"Selectionnez une option.\",\r\n                                                                                                fourSpicesOption = \"4 ??pices\",\r\n                                                                                                twoWormsOption = \"2 vers des sables\",\r\n                                                                                                goHaggaBasin = \"Selectionnez une option.\",\r\n                                                                                                twoSpicesOption = \"2 ??pices\",\r\n                                                                                                oneWormOption = \"1 ver des sables\",\r\n                                                                                                noMakerHook = \"Vous ne poss??dez pas de hame??on ?? faiseur!\",\r\n                                                                                                shieldWallIsStanding = \"The Mur du Bouclier est toujours debout !\",\r\n\r\n                                                                                                goTechNegotiation = \"S??lectionnez une option.\",\r\n                                                                                                sendNegotiatorOption = \"N??gociateur\",\r\n                                                                                                buyTechWithDiscont1Option = \"Tech. avec un rabais\",\r\n                                                                                                buyTechSelection = \"Selectionnez votre option d???achat de tech.\",\r\n                                                                                                freighterTechBuyOption = \"Piste d???exp??dition\",\r\n                                                                                                techNegotiationTechBuyOption = \"N??gociation tech.\",\r\n                                                                                                dreadnoughtTechBuyOption = \"Cuirass??\",\r\n                                                                                                appropriateTechBuyOption = \"Appropriation\",\r\n                                                                                                ixianEngineerTechBuyOption = \"Ing??nieur Ixien\",\r\n                                                                                                machineCultureTechBuyOption = \"Culture des machines\",\r\n                                                                                                rhomburVerniusTechBuyOption = \"Chevali??re de Rhombur Vernius\",\r\n                                                                                                manuallyBuyTech = \"Acqu??rir manuellement une tech sans en payer le prix ?\",\r\n                                                                                                notAffordableOption = \"Vous n???avez pas les moyens d???utiliser cette option d???achat !\",\r\n                                                                                                pruneTechCard = \"Retrait de la tuile tech. : ?? {card} ??\",\r\n                                                                                                roundNumber = \"Manche n??\",\r\n                                                                                                doYouWantAnotherRound = \"Jouer encore une manche ?\",\r\n\r\n                                                                                                -- Arrakeen Scouts\r\n                                                                                                joinCommittee = \"Rejoindre le sous-comit?? : {committee}\",\r\n                                                                                                appropriations = \"appropriations\",\r\n                                                                                                development = \"d??veloppement\",\r\n                                                                                                information = \"information\",\r\n                                                                                                investigation = \"investigation\",\r\n                                                                                                joinForces = \"forces combin??es\",\r\n                                                                                                politicalAffairs = \"affaires politiques\",\r\n                                                                                                preparation = \"pr??paration\",\r\n                                                                                                relations = \"r??v??lations\",\r\n                                                                                                supervision = \"supervision\",\r\n                                                                                                dataAnalysis = \"analyse des donn??es\",\r\n                                                                                                developmentProject = \"projet de d??veloppement\",\r\n                                                                                                tleilaxuRelations = \"relations tleixlaxu\",\r\n                                                                                                committeeReminder = \"Vous avez maintenant la possibilit?? de rejoindre un sous-comit?? ce tour-ci.\",\r\n                                                                                                first = \"1er\",\r\n                                                                                                firstExAequo = \"1er ex aequo\",\r\n                                                                                                second = \"2nd\",\r\n                                                                                                secondExAequo = \"2nd ex aequo\",\r\n                                                                                                third = \"3??me\",\r\n                                                                                                thirdExAequo = \"3??me ex aequo\",\r\n                                                                                                fourth = \"4??me\",\r\n                                                                                                fourthExAequo = \"4??me ex aequo\",\r\n                                                                                                lose = \"perdu\",\r\n                                                                                                passOption = \"Passer\",\r\n                                                                                                waitOption = \"Attendre\",\r\n                                                                                                refuseOption = \"Refuser\",\r\n                                                                                                acceptOption = \"Accepter\",\r\n                                                                                                discardOption = \"D??fausser\",\r\n                                                                                                discardNonStarterCard = \"D??fausser une carte (hors cartes de d??part)\",\r\n                                                                                                discardACard = \"D??fausser une carte\",\r\n                                                                                                discardAnIntrigue = \"D??fausser une intrigue\",\r\n                                                                                                trashACard = \"D??truire une carte\",\r\n                                                                                                doAResearch = \"R??aliser une recherche\",\r\n                                                                                                destroyACardFromYourHand = \"D??truire 1 carte de sa main\",\r\n                                                                                                spendOption = \"D??penser {amount} {resource}\",\r\n                                                                                                amount = \"{amount} {resource}\",\r\n\r\n                                                                                                -- Ranking\r\n                                                                                                firstInCombat = \"??? 1er : {leader}\",\r\n                                                                                                firstExAequoInCombat = \"??? 1er ex aequo : {leader}\",\r\n                                                                                                secondInCombat = \"??? 2nd : {leader}\",\r\n                                                                                                secondExAequoInCombat = \"??? 2nd ex aequo : {leader}\",\r\n                                                                                                thirdInCombat = \"??? 3??me : {leader}\",\r\n                                                                                                thirdExAequoInCombat = \"??? 3??me ex aequo : {leader}\",\r\n                                                                                                fourthInCombat = \"??? 4??me : {leader}\",\r\n                                                                                                fourthExAequoInCombat = \"??? 4??me ex aequo : {leader}\",\r\n\r\n                                                                                                -- Tleilax board\r\n                                                                                                confirmSolarisToBeetles = \"Voulez-vous payer 7 solaris pour avancer deux fois sur la piste Tleilaxu ?\",\r\n                                                                                                tleilaxTrack = \"Piste du Tleilax\",\r\n\r\n                                                                                                -- Factions\r\n                                                                                                withEmperor = \"de l???Empereur\",\r\n                                                                                                withSpacingGuild = \"de la Guilde spatiale\",\r\n                                                                                                withBeneGesserit = \"du Bene Gesserit\",\r\n                                                                                                withFremen = \"des Fremens\",\r\n                                                                                                withGreatHouses = \"des maisons majeures\",\r\n                                                                                                withFringeWorlds = \"des mondes de l???autre c??t?? du p??riph\",\r\n\r\n                                                                                                -- Leaders\r\n                                                                                                vladimirHarkonnen = \"Baron Vladimir Harkonnen\",\r\n                                                                                                glossuRabban = \"Glossu ?? la b??te ?? Rabban\",\r\n                                                                                                ilbanRichese = \"Comte Ilban Richese\",\r\n                                                                                                helenaRichese = \"Helena Richese\",\r\n                                                                                                letoAtreides = \"Duc Leto Atr??ides\",\r\n                                                                                                paulAtreides = \"Paul Atr??ides\",\r\n                                                                                                arianaThorvald = \"Comtesse Ariana Thorvald\",\r\n                                                                                                memnonThorvald = \"Comte Memnon Thorvald\",\r\n                                                                                                armandEcaz = \"Archiduc Armand Ecaz\",\r\n                                                                                                ilesaEcaz = \"Ilesa Ecaz\",\r\n                                                                                                rhomburVernius = \"Prince Rhombur Vernius\",\r\n                                                                                                tessiaVernius = \"Tessia Vernius\",\r\n                                                                                                yunaMoritani = \"?? Princesse ?? Yuna Moritani\",\r\n                                                                                                hundroMoritani = \"Vicomte Hundro Moritani\",\r\n\r\n                                                                                                -- Leader abilities\r\n                                                                                                schemeTooltip = \"Manigancer un sale tour de derri??re les fagots\",\r\n                                                                                                brutalityTooltip = \"Faut r'conna??tre c'est du brutal\",\r\n                                                                                                manufacturingTooltip = \"Faire des profits\",\r\n                                                                                                prescienceTooltip = \"Inspecter facilement la prochaine carte de votre pioche.\",\r\n                                                                                                prescienceUsed = \"??? Paul Atreides utilise sa prescience used his prescience pour entrevoir l???avenir.\",\r\n                                                                                                prescienceVoid = \"Difficile d???entrevoir l???avenir quand on ne voit m??me pas son deck correctement???\",\r\n                                                                                                prescienceManual = \"Vous devez inspecter manuellement votre pioche (ALT + SHIFT), car elle se r??sume ?? une unique carte.\",\r\n                                                                                                disciplineTooltip = \"Piocher une carte de votre pioche.\",\r\n                                                                                                hiddenReservoirTooltip = \"Siphonner votre r??servoir cach??\",\r\n                                                                                                spiceHoardTooltip = \"Amasser de l?????pice\",\r\n                                                                                                guildContactsTooltip = \"Faire jouer ses contacts aupr??s de la Guilde\",\r\n                                                                                                noAvailableFoldspaceCards = \"Il n???y a plus de cartes (et non de paquet !) ?? Replier l???espace ?? dans votre poubelle.\",\r\n                                                                                                fillCoffersTooltip = \"S???en mettre plein les poches\",\r\n                                                                                                warmasterTooltip = \"Pour survivre ?? la guerre, il faut devenir la guerre\",\r\n                                                                                                spiceAgonyTooltip = \"D??clencher l???agonie de l?????pice\",\r\n                                                                                                confirmOtherMemories = \"Utiliser votre m??moire seconde ?\",\r\n                                                                                                otherMemoriesTooltip = \"Activer la m??moire seconde\",\r\n                                                                                                otherMemoriesUsed = \"??? Dame Jessica a utilis??e sa m??moire seconde.\",\r\n                                                                                                waterOfLifeTooltip = \"Boire l???eau de vie\",\r\n                                                                                                leadTheWayTooltip = \"Montrer la voie\",\r\n                                                                                                firstSnooperRecall = \"??? Tessia Vernius a rappel?? son premier fouineur {withFaction}.\",\r\n                                                                                                secondSnooperRecall = \"??? Tessia Vernius a rappel?? son second fouineur {withFaction}.\",\r\n                                                                                                thirdSnooperRecall = \"??? Tessia Vernius a rappel?? son troisi??me fouineur {withFaction}.\",\r\n                                                                                                fourthSnooperRecall = \"??? Tessia Vernius a rappel?? son quatri??me fouineur {withFaction}.\",\r\n                                                                                                firstSnooperRecallEffectInfo = \"Ayant rappel?? votre premier fouineur, vous pouvez d??fausser une carte pour gagne 1 mesure d?????pice.\",\r\n                                                                                                finalDeliveryTooltip = \"Derni??re livraison.\",\r\n                                                                                                gurneySmile = \"??? Gurney montre ses dents.\",\r\n                                                                                                imperialBirthright = \"??? Irulan exerce son droit de naissance.\",\r\n                                                                                                loyalty = \"??? Margot r??colte les fruits de sa loyaut??\",\r\n                                                                                                stabanSpiceSmuggling = \"??? Staban d??tourne sa part d?????pice.\",\r\n                                                                                                muadDibBeingUnpredictable = \"??? Muad'Dib devient un peu plus impr??visible.\",\r\n\r\n                                                                                                -- Uprising leaders\r\n                                                                                                stabanTuek = \"Staban Tuek\",\r\n                                                                                                amberMetulli = \"Dame Amber Metulli\",\r\n                                                                                                --gurneyHalleck = \"Gurney Halleck\",\r\n                                                                                                margotFenring = \"Dame Margot Fenring\",\r\n                                                                                                irulanCorrino = \"Princesse Irulan\",\r\n                                                                                                reverendMotherJessica = \"R??v??rende M??re Jessica\",\r\n                                                                                                jessica = \"Dame Jessica\",\r\n                                                                                                feydRauthaHarkonnen = \"Feyd-Rautha Harkonnen\",\r\n                                                                                                shaddamCorrino = \"Shaddam IV\",\r\n                                                                                                muadDib = \"Muad???Dib\",\r\n\r\n                                                                                                -- Spaces\r\n                                                                                                conspire = \"Conspirer\",\r\n                                                                                                wealth = \"Richesse\",\r\n                                                                                                heighliner = \"Long-courrier\",\r\n                                                                                                foldspace = \"Replier l???espace\",\r\n                                                                                                selectiveBreeding = \"S??lection g??n??tique\",\r\n                                                                                                secrets = \"Secrets\",\r\n                                                                                                hardyWarriors = \"Guerriers endurcis\",\r\n                                                                                                stillsuits = \"Distilles\",\r\n                                                                                                highCouncil = \"Haut Conseil\",\r\n                                                                                                mentat = \"Mentat\",\r\n                                                                                                swordmaster = \"Ma??tre d???armes\",\r\n                                                                                                rallyTroops = \"Rallier des troupes\",\r\n                                                                                                hallOfOratory = \"Hall de l???oratoire\",\r\n                                                                                                secureContract = \"S??curiser un contrat\",\r\n                                                                                                arrakeen = \"Arrakeen\",\r\n                                                                                                carthag = \"Carthag\",\r\n                                                                                                researchStation = \"Station de recherche\",\r\n                                                                                                researchStationImmortality = \"Station de recherche\",\r\n                                                                                                sietchTabr = \"Sietch Tabr\",\r\n                                                                                                imperialBasin = \"Bassin imp??rial\",\r\n                                                                                                haggaBasin = \"Bassin de Hagga\",\r\n                                                                                                theGreatFlat = \"La grande plaine\",\r\n                                                                                                smuggling = \"Contrebande\",\r\n                                                                                                interstellarShipping = \"Livraison interstellaire\",\r\n                                                                                                techNegotiation = \"N??gociation tech.\",\r\n                                                                                                techNegotiation_Buy = \"Acheter une tech.\",\r\n                                                                                                techNegotiation_Negotiate = \"Envoyer un n??gociateur.\",\r\n                                                                                                dreadnought = \"Cuirass??\",\r\n\r\n                                                                                                fremkit = \"Fremkit\",\r\n                                                                                                desertTactics = \"Tactiques du d??sert\",\r\n                                                                                                --secrets = \"Secrets\",\r\n                                                                                                espionage = \"Espionage\",\r\n                                                                                                deliverSupplies = \"Livrer des fournitures\",\r\n                                                                                                --heighliner = \"Heighliner\",\r\n                                                                                                dutifulService = \"Service assidu\",\r\n                                                                                                sardaukar = \"Sardaukar\",\r\n                                                                                                --highCouncil = \"HighCouncil\",\r\n                                                                                                imperialPrivilege = \"Privil??ge imp??rial\",\r\n                                                                                                --swordmaster = \"Swordmaster\",\r\n                                                                                                assemblyHall = \"Salle de l???assembl??e\",\r\n                                                                                                gatherSupport = \"Rassembler du soutien\",\r\n                                                                                                gatherSupport_NoWater = \"Gratuit\",\r\n                                                                                                gatherSupport_WithWater = \"2 solaris\",\r\n                                                                                                shipping = \"Exp??dition\",\r\n                                                                                                acceptContract = \"Accepter le contrat\",\r\n                                                                                                --sietchTabr = \"SietchTabr\",\r\n                                                                                                sietchTabr_HookTroopWater = \"Provisions\",\r\n                                                                                                sietchTabr_WaterShieldWall = \"Mur du Bouclier\",\r\n                                                                                                --researchStation = \"ResearchStation\",\r\n                                                                                                spiceRefinery = \"Raffinerie d?????pice\",\r\n                                                                                                spiceRefinery_NoSpice = \"2 solaris\",\r\n                                                                                                spiceRefinery_WithSpice = \"4 solaris pour 1 ??pice\",\r\n                                                                                                --arrakeen = \"Arrakeen\",\r\n                                                                                                deepDesert = \"D??sert profond\",\r\n                                                                                                deepDesert_Spice = \"4 unit??s d?????pice\",\r\n                                                                                                deepDesert_WormsIfHook = \"2 vers des sables\",\r\n                                                                                                --haggaBasin = \"HaggaBasin\",\r\n                                                                                                haggaBasin_Spice = \"2 unit??s d?????pice\",\r\n                                                                                                haggaBasin_WormIfHook = \"1 ver des sables\",\r\n                                                                                                --imperialBasin = \"ImperialBasin\",\r\n                                                                                                militarySupport = \"Support militaire\",\r\n                                                                                                economicSupport = \"Support ??conomique\",\r\n                                                                                                controversialTechnology = \"Technologie controvers??e\",\r\n                                                                                                expedition = \"??xpedition\",\r\n                                                                                                habbanyaErg = \"Erg de la Habbanya\",\r\n                                                                                                desertMastery = \"Desert Mastery\",\r\n                                                                                                vastWealth = \"Vaste richesse\",\r\n\r\n                                                                                                -- Hagal\r\n                                                                                                placeSpyYellow = \"Placer un espion\",\r\n                                                                                                placeSpyBlue = \"Placer un espion\",\r\n                                                                                                placeSpyGreen = \"Placer un espion\",\r\n                                                                                                deliverSuppliesAndHeighliner = \"Livrer des fournitures / Long-courrier\",\r\n                                                                                                gatherSupport1 = \"Rassembler du soutien\",\r\n                                                                                                gatherSupport2 = \"Rassembler du soutien\",\r\n                                                                                                acceptContractAndShipping1 = \"Accepter un contract / Exp??dition\",\r\n                                                                                                acceptContractAndShipping2 = \"Accepter un contract / Exp??dition\",\r\n                                                                                                haggaBasinAndImperialBasin = \"Bassin de Hagga / Bassin imperial\",\r\n                                                                                                reshuffle = \"R??m??langer\",\r\n                                                                                                churnImperiumRow = \"Barattage de la rang??e de l???Imperium ({count} {card})\",\r\n                                                                                                deliverSuppliesAndInterstellarShipping = \"Livrer des fournitures / Livraison interstellaire\",\r\n                                                                                                smugglingAndInterstellarShipping = \"Contrebande / Livraison interstellaire\",\r\n                                                                                                dreadnought1p = \"Cuirass??\",\r\n                                                                                                dreadnought2p = \"Cuirass??\",\r\n                                                                                                tleilaxuBonus1 = \"Bonus Tleilaxu\",\r\n                                                                                                tleilaxuBonus2 = \"Bonus Tleilaxu\",\r\n                                                                                                tleilaxuBonus3 = \"Bonus Tleilaxu\",\r\n\r\n                                                                                                -- Objective cards\r\n                                                                                                --crysknife = \"\",\r\n                                                                                                ornithopter1to3p = \"Ornithopt??re\",\r\n                                                                                                muadDib4to6p = \"Muad???Dib\",\r\n                                                                                                crysknife4to6p = \"Krys\",\r\n                                                                                                muadDibFirstPlayer = \"Muad???Dib (premier joueur)\",\r\n\r\n                                                                                                -- Imperium cards\r\n                                                                                                duneTheDesertPlanet = \"Dune, la plan??te d??sertique\",\r\n                                                                                                seekAllies = \"?? la recherche d???alli??s\",\r\n                                                                                                signetRing = \"Chevali??re\",\r\n                                                                                                diplomacy = \"Diplomatie\",\r\n                                                                                                reconnaissance = \"Reconnaissance\",\r\n                                                                                                convincingArgument = \"Argument convaincant\",\r\n                                                                                                dagger = \"Dague\",\r\n                                                                                                controlTheSpice = \"Contr??ler l?????pice\",\r\n                                                                                                experimentation = \"Exp??rimentation\",\r\n                                                                                                jessicaOfArrakis = \"Jessica d???Arrakis\",\r\n                                                                                                sardaukarLegion = \"L??gion Sardaukar\",\r\n                                                                                                drYueh = \"Dr Yueh\",\r\n                                                                                                assassinationMission = \"Mission d???assassination\",\r\n                                                                                                sardaukarInfantry = \"Infantrie Sardaukar\",\r\n                                                                                                beneGesseritInitiate = \"Initi??e Bene Gesserit\",\r\n                                                                                                guildAdministrator = \"Administrateur de la guilde\",\r\n                                                                                                theVoice = \"La Voix\",\r\n                                                                                                scout = \"??claireur\",\r\n                                                                                                imperialSpy = \"Espion imp??rial\",\r\n                                                                                                beneGesseritSister = \"S??ur du Bene Gesserit\",\r\n                                                                                                missionariaProtectiva = \"Missionaria Protectiva\",\r\n                                                                                                spiceHunter = \"Chasseur d?????pice\",\r\n                                                                                                spiceSmugglers = \"Contrebandier d?????pice\",\r\n                                                                                                fedaykinDeathCommando = \"Commando de la mort Fedaykin\",\r\n                                                                                                geneManipulation = \"Manipulation g??n??tique\",\r\n                                                                                                guildBankers = \"Banquiers de la Guilde\",\r\n                                                                                                choamDirectorship = \"Directoire de CHOM\",\r\n                                                                                                crysknife = \"Krys\",\r\n                                                                                                chani = \"Chani\",\r\n                                                                                                spaceTravel = \"Voyage spatial\",\r\n                                                                                                duncanIdaho = \"Duncan Idaho\",\r\n                                                                                                shiftingAllegiances = \"All??giances changeantes\",\r\n                                                                                                kwisatzHaderach = \"Kwisatz Haderach\",\r\n                                                                                                sietchReverendMother = \"R??v??rende m??re de sietch\",\r\n                                                                                                arrakisRecruiter = \"Recruteur d???Arrakis\",\r\n                                                                                                firmGrip = \"Poigne de fer\",\r\n                                                                                                smugglersThopter = \"Orni de contrebandiers\",\r\n                                                                                                carryall = \"Aile portante\",\r\n                                                                                                gunThopter = \"Orni-mitrailleur\",\r\n                                                                                                guildAmbassador = \"Ambassadeur de la Guilde\",\r\n                                                                                                testOfHumanity = \"Test d???humanit??\",\r\n                                                                                                fremenCamp = \"Camp fremen\",\r\n                                                                                                opulence = \"Opulence\",\r\n                                                                                                ladyJessica = \"Dame Jessica\",\r\n                                                                                                stilgar = \"Stilgar\",\r\n                                                                                                piterDeVries = \"Piter de Vries\",\r\n                                                                                                gurneyHalleck = \"Gurney Halleck\",\r\n                                                                                                thufirHawat = \"Thufir Hawat\",\r\n                                                                                                otherMemory = \"M??moire seconde\",\r\n                                                                                                lietKynes = \"Liet Kynes\",\r\n                                                                                                wormRiders = \"Chevaucheurs de ver\",\r\n                                                                                                reverendMotherMohiam = \"R??v??rende m??re Mohiam\",\r\n                                                                                                powerPlay = \"Jeu de pouvoir\",\r\n                                                                                                duncanLoyalBlade = \"Duncan, lame fid??le\",\r\n                                                                                                --thumper = \"Marteleur\",\r\n                                                                                                boundlessAmbition = \"Ambition sans limites\",\r\n                                                                                                guildChiefAdministrator = \"Administrateur en chef de la Guilde\",\r\n                                                                                                guildAccord = \"Accord de la Guilde\",\r\n                                                                                                localFence = \"Receleur local\",\r\n                                                                                                shaiHulud = \"Shai Hulud\",\r\n                                                                                                ixGuildCompact = \"Contrat Ix-Guild\",\r\n                                                                                                choamDelegate = \"D??l??g?? de la CHOM\",\r\n                                                                                                bountyHunter = \"Chasseur de primes\",\r\n                                                                                                embeddedAgent = \"Agent infiltr??\",\r\n                                                                                                --esmarTuek = \"Esmar Tuek\",\r\n                                                                                                courtIntrigue = \"Intrigue de cour\",\r\n                                                                                                sayyadina = \"Sayyadina\",\r\n                                                                                                imperialShockTrooper = \"Troupe de choc imp??riale\",\r\n                                                                                                appropriate = \"Appropriation\",\r\n                                                                                                desertAmbush = \"Embuscade dans le d??sert\",\r\n                                                                                                inTheShadows = \"Parmi les ombres\",\r\n                                                                                                satelliteBan = \"Ban satellitaire\",\r\n                                                                                                freighterFleet = \"Flotte de cargos\",\r\n                                                                                                imperialBashar = \"Bashar imp??rial\",\r\n                                                                                                jamis = \"Jamis\",\r\n                                                                                                landingRights = \"Droits d???atterrissage\",\r\n                                                                                                waterPeddler = \"Porteuse d???eau\",\r\n                                                                                                treachery = \"Trahison\",\r\n                                                                                                truthsayer = \"Diseuse de v??rit??\",\r\n                                                                                                spiceTrader = \"Vendeur d?????pice\",\r\n                                                                                                ixianEngineer = \"Ing??nieurs ixiens\",\r\n                                                                                                webOfPower = \"Toile du pouvoir\",\r\n                                                                                                weirdingWay = \"Art ??trange\",\r\n                                                                                                negotiatedWithdrawal = \"Retait n??goci??\",\r\n                                                                                                fullScaleAssault = \"Assaut plan??taire\",\r\n                                                                                                beneTleilaxLab = \"Laboratoire du Bene Tleilax\",\r\n                                                                                                beneTleilaxResearcher = \"Chercheur du Bene Tleilax\",\r\n                                                                                                blankSlate = \"Ardoise vierge\",\r\n                                                                                                clandestineMeeting = \"R??union clandestine\",\r\n                                                                                                corruptSmuggler = \"Contrebandier corrompu\",\r\n                                                                                                dissectingKit = \"Kit de dissection\",\r\n                                                                                                forHumanity = \"Pour l???Humanit??\",\r\n                                                                                                highPriorityTravel = \"Voyage en haute priorit??\",\r\n                                                                                                imperiumCeremony = \"C??r??monie de l???Imperium\",\r\n                                                                                                interstellarConspiracy = \"Conspiration interstellaire\",\r\n                                                                                                keysToPower = \"Les clefs du pouvoir\",\r\n                                                                                                lisanAlGaib = \"Lisan Al-Gaib\",\r\n                                                                                                longReach = \"Bras long\",\r\n                                                                                                occupation = \"Occupation\",\r\n                                                                                                organMerchants = \"Marchands d???organes\",\r\n                                                                                                plannedCoupling = \"Mariage arrang??\",\r\n                                                                                                replacementEyes = \"Yeux de rechange\",\r\n                                                                                                sardaukarQuartermaster = \"Quartier-ma??tre Sardaukar\",\r\n                                                                                                shadoutMapes = \"Shadout Mapes\",\r\n                                                                                                showOfStrength = \"D??monstration de force\",\r\n                                                                                                spiritualFervor = \"Ferveur spirituel\",\r\n                                                                                                stillsuitManufacturer = \"Fabricant de distilles\",\r\n                                                                                                throneRoomPolitics = \"R??union du conseil\",\r\n                                                                                                tleilaxuMaster = \"Ma??tre tleilaxu\",\r\n                                                                                                tleilaxuSurgeon = \"Chirurgien tleilaxu\",\r\n                                                                                                --foldspace = \"Espace pliss??\",\r\n                                                                                                reclaimedForces = \"Forces reconquises\",\r\n                                                                                                piterGeniusAdvisor = \"Piter, conseiller de g??nie\",\r\n                                                                                                beguilingPheromones = \"Ph??romones ensorcelantes\",\r\n                                                                                                chairdog = \"Canisi??ge\",\r\n                                                                                                contaminator = \"Contaminateur\",\r\n                                                                                                corrinoGenes = \"G??nes Corrino\",\r\n                                                                                                faceDancer = \"Danseur-visage\",\r\n                                                                                                faceDancerInitiate = \"Initi?? danseur visage\",\r\n                                                                                                fromTheTanks = \"N?? des cuves\",\r\n                                                                                                ghola = \"Ghola\",\r\n                                                                                                guildImpersonator = \"Imposteur de la Guilde\",\r\n                                                                                                industrialEspionage = \"Espionnage industriel\",\r\n                                                                                                scientificBreakthrough = \"Perc??e scientifique\",\r\n                                                                                                sligFarmer = \"??leveur de limachons\",\r\n                                                                                                stitchedHorror = \"Amalgame horrifique\",\r\n                                                                                                subjectX137 = \"Sujet X-137\",\r\n                                                                                                tleilaxuInfiltrator = \"Infiltrateur tleilaxu\",\r\n                                                                                                twistedMentat = \"Mentat ?? tordu ??\",\r\n                                                                                                unnaturalReflexes = \"R??flexes anormaux\",\r\n                                                                                                usurp = \"Usurper\",\r\n\r\n                                                                                                unswervingLoyalty = \"Loyaut?? ind??fectible\",\r\n                                                                                                spaceTimeFolding = \"Replier l???espace-temps\",\r\n                                                                                                weirdingWoman = \"Femme de l???art ??trange\",\r\n                                                                                                sardaukarSoldier = \"Soldat Sardaukar\",\r\n                                                                                                smugglerHarvester = \"Moissonneur de contrebande\",\r\n                                                                                                makerKeeper = \"Gardien du Faiseur\",\r\n                                                                                                reliableInformant = \"Informateur fiable\",\r\n                                                                                                hiddenMissive = \"Missive secr??te\",\r\n                                                                                                wheelsWithinWheels = \"Des rouages dans les rouages\",\r\n                                                                                                fedaykinStilltent = \"Abris Fedaykin\",\r\n                                                                                                imperialSpymaster = \"Ma??tre espion imp??rial\",\r\n                                                                                                spyNetwork = \"R??seau d???espionnage\",\r\n                                                                                                desertSurvival = \"Survie dans le d??sert\",\r\n                                                                                                undercoverAsset = \"Agent sous couverture\",\r\n                                                                                                beneGesseritOperative = \"Op??ratrice Bene Gesserit\",\r\n                                                                                                maulaPistol = \"Pistolet Maula\",\r\n                                                                                                thumper = \"Marteleur\",\r\n                                                                                                nothernWatermaster = \"Ma??tre de l???Eau du Nord\",\r\n                                                                                                covertOperation = \"Op??ration clandestine\",\r\n                                                                                                doubleAgent = \"Agent double\",\r\n                                                                                                guildEnvoy = \"??missaire de la Guilde\",\r\n                                                                                                rebelSupplier = \"Fournisseur rebelle\",\r\n                                                                                                calculusOfPower = \"Calcul de la pouvoir\",\r\n                                                                                                guildSpy = \"Espion de la Guilde\",\r\n                                                                                                dangerousRhetoric = \"Rh??torique dangereuse\",\r\n                                                                                                branchingPath = \"Cheminement ramifi??\",\r\n                                                                                                ecologicalTestingStation = \"Station de test ??cologique\",\r\n                                                                                                theBeastSpoils = \"Le butin de la b??te\",\r\n                                                                                                smugglerHaven = \"Repaire de contrebandiers\",\r\n                                                                                                shishakli = \"Shishakli\",\r\n                                                                                                paracompass = \"Paracompas\",\r\n                                                                                                sardaukarCoordination = \"Coordination Sardaukar\",\r\n                                                                                                truthtrance = \"Transe de v??rit??\",\r\n                                                                                                publicSpectable = \"Spectacle public\",\r\n                                                                                                southernElders = \"A??n??s du Sud\",\r\n                                                                                                treadInDarkness = \"Avancer dans l???obscurit??\",\r\n                                                                                                spacingGuildFavor = \"Faveur de la Guilde\",\r\n                                                                                                capturedMentat = \"Mentat captur??\",\r\n                                                                                                subversiveAdvisor = \"Conseiller subversif\",\r\n                                                                                                leadership = \"Commandement\",\r\n                                                                                                inHighPlaces = \"En haut lieu\",\r\n                                                                                                strikeFleet = \"Flotte de frappe\",\r\n                                                                                                trecherousManeuver = \"Man??uvre sournoise\",\r\n                                                                                                chaniCleverTactician = \"Chani, tacticienne rus??e\",\r\n                                                                                                junctionHeadquarters = \"Quartier g??n??ral de Jonction\",\r\n                                                                                                corrinthCity = \"Corrinth\",\r\n                                                                                                stilgarTheDevoted = \"Stilgar, le d??vou??\",\r\n                                                                                                desertPower = \"La puissance du d??sert\",\r\n                                                                                                arrakisRevolt = \"La r??volte d???Arrakis\",\r\n                                                                                                priceIsNoObject = \"L???argent n???est pas un probl??me\",\r\n                                                                                                longLiveTheFighters = \"Vive les combattants\",\r\n                                                                                                overthrow = \"Renversement\",\r\n                                                                                                steersman = \"Timonier\",\r\n                                                                                                cargoRunner = \"Convoyeur de fret\",\r\n                                                                                                deliveryAgreement = \"Accords de livraison\",\r\n                                                                                                priorityContracts = \"Contrats prioritaires\",\r\n                                                                                                interstellarTrade = \"Commerce interstellaire\",\r\n                                                                                                prepareTheWay = \"Pr??parer la voie\",\r\n                                                                                                theSpiceMustFlow = \"L?????pice doit couler\",\r\n\r\n                                                                                                emperorConvincingArgument = \"Argument convaincant\",\r\n                                                                                                emperorCorrinoMight = \"Puissance des Corrino\",\r\n                                                                                                emperorCriticalShipments = \"Livraisons critiques\",\r\n                                                                                                emperorDemandResults = \"Exiger des r??sultats\",\r\n                                                                                                emperorDevastatingAssault = \"Assaut d??vastateur\",\r\n                                                                                                emperorImperialOrnithopter = \"Ornithopt??re imp??rial\",\r\n                                                                                                emperorSignetRing = \"Chevali??re\",\r\n                                                                                                emperorSeekAllies = \"?? la recherche d???alli??s\",\r\n                                                                                                emperorImperialTent = \"Tente imp??riale\",\r\n\r\n                                                                                                muadDibCommandRespect = \"Imposer le respect\",\r\n                                                                                                muadDibConvincingArgument = \"Argument convaincant\",\r\n                                                                                                muadDibDemandAttention = \"Exiger de l'attention\",\r\n                                                                                                muadDibDesertCall = \"Appel du d??sert\",\r\n                                                                                                muadDibLimitedLandsraadAccess = \"Acc??s limit?? au Landsraad\",\r\n                                                                                                muadDibSeekAllies = \"?? la recherche d???alli??s\",\r\n                                                                                                muadDibUsul = \"Usul\",\r\n                                                                                                muadDibThreatenSpiceProduction = \"Menacer la production d?????pice\",\r\n                                                                                                muadDibSignetRing = \"Chevali??re\",\r\n\r\n                                                                                                -- Intrigue\r\n                                                                                                bribery = \"Pot-de-vin\",\r\n                                                                                                refocus = \"recentrage\",\r\n                                                                                                ambush = \"Embuscade\",\r\n                                                                                                alliedArmada = \"Armada alli??e\",\r\n                                                                                                favoredSubject = \"Sujet favori\",\r\n                                                                                                demandRespect = \"Demander le respect\",\r\n                                                                                                poisonSnooper = \"Go??te-poison\",\r\n                                                                                                guildAuthorization = \"Autorisation de la Guilde\",\r\n                                                                                                dispatchAnEnvoy = \"D??p??cher un envoy??\",\r\n                                                                                                infiltrate = \"Infiltrer\",\r\n                                                                                                knowTheirWays = \"Conna??tre leurs coutumes\",\r\n                                                                                                masterTactician = \"Ma??tre tacticien\",\r\n                                                                                                plansWithinPlans = \"Des plans dans des plans\",\r\n                                                                                                privateArmy = \"Arm??e priv??e\",\r\n                                                                                                doubleCross = \"Trahison\",\r\n                                                                                                councilorsDispensation = \"Dispense des conseillers\",\r\n                                                                                                cornerTheMarket = \"Accaparer le march??\",\r\n                                                                                                charisma = \"Charisme\",\r\n                                                                                                calculatedHire = \"Recrutement calcul??\",\r\n                                                                                                choamShares = \"Part de la CHOM\",\r\n                                                                                                bypassProtocol = \"Contourner les proc??dures\",\r\n                                                                                                recruitmentMission = \"Mission de recrutement\",\r\n                                                                                                reinforcements = \"Renforts\",\r\n                                                                                                binduSuspension = \"Suspension bindu\",\r\n                                                                                                secretOfTheSisterhood = \"Secret de la sororit??\",\r\n                                                                                                rapidMobilization = \"Mobilisation ??clair\",\r\n                                                                                                stagedIncident = \"Incident mise en sc??ne\",\r\n                                                                                                theSleeperMustAwaken = \"Le dormeur doit se r??veiller\",\r\n                                                                                                tiebreaker = \"tir au but\",\r\n                                                                                                toTheVictor = \"Au vainqueur\",\r\n                                                                                                waterPeddlersUnion = \"Syndicat des porteurs d???eau\",\r\n                                                                                                windfall = \"Aubaine\",\r\n                                                                                                waterOfLife = \"Eau de la vie\",\r\n                                                                                                urgentMission = \"Mission urgente\",\r\n                                                                                                diversion = \"Diversion\",\r\n                                                                                                warChest = \"Butin de guerre\",\r\n                                                                                                advancedWeaponry = \"Armement avanc??\",\r\n                                                                                                secretForces = \"Forces secr??tes\",\r\n                                                                                                grandConspiracy = \"Grande conspiration\",\r\n                                                                                                cull = \"??limination\",\r\n                                                                                                strategicPush = \"Pouss??e strat??gique\",\r\n                                                                                                blackmail = \"Chantage\",\r\n                                                                                                machineCulture = \"Culte de la machine\",\r\n                                                                                                cannonTurrets = \"Tourelles de canons\",\r\n                                                                                                expedite = \"Acc??l??rer\",\r\n                                                                                                ixianProbe = \"Sonde ixienne\",\r\n                                                                                                secondWave = \"Second vague\",\r\n                                                                                                glimpseThePath = \"Entrevoir le chemin\",\r\n                                                                                                finesse = \"Finesse\",\r\n                                                                                                strongarm = \"Rapport de force\",\r\n                                                                                                quidProQuo = \"Quid Pro Quo\",\r\n                                                                                                breakthrough = \"Perc??e\",\r\n                                                                                                counterattack = \"Contre attaque\",\r\n                                                                                                disguisedBureaucrat = \"D??guisement de bureaucrate\",\r\n                                                                                                economicPositioning = \"Positionnement ??conomique\",\r\n                                                                                                gruesomeSacrifice = \"Sacrifice sanglant\",\r\n                                                                                                harvestCells = \"Pr??l??vement de cellules\",\r\n                                                                                                illicitDealings = \"Transactions illicites\",\r\n                                                                                                shadowyBargain = \"Combine foireuse\",\r\n                                                                                                studyMelange = \"??tudier le m??lange\",\r\n                                                                                                tleilaxuPuppet = \"Marionnette tleilaxu\",\r\n                                                                                                viciousTalents = \"Talents vicieux\",\r\n\r\n                                                                                                sietchRitual = \"Rituel du sietch\",\r\n                                                                                                mercenaries = \"Mercenaires\",\r\n                                                                                                councilorAmbition = \"Ambition du conseiller\",\r\n                                                                                                strategicStockpiling = \"Constitution de stocks strat??giques\",\r\n                                                                                                detonation = \"D??tonation\",\r\n                                                                                                departForArrakis = \"D??part pour Arrakis\",\r\n                                                                                                cunning = \"Ruse\",\r\n                                                                                                opportunism = \"Opportunisme\",\r\n                                                                                                changeAllegiances = \"Changement d???all??geances\",\r\n                                                                                                specialMission = \"Mission sp??ciale\",\r\n                                                                                                unexpectedAllies = \"Alli??s inattendus\",\r\n                                                                                                callToArms = \"Appel aux armes\",\r\n                                                                                                buyAccess = \"Acheter le passage\",\r\n                                                                                                imperiumPolitics = \"Politique de l???Empire\",\r\n                                                                                                shaddamFavor = \"Faveur de Shaddam\",\r\n                                                                                                intelligenceReport = \"Rapport des renseignements\",\r\n                                                                                                manipulate = \"Manipuler\",\r\n                                                                                                distraction = \"D??tourner l???attention\",\r\n                                                                                                marketOpportunity = \"Opportunit?? du march??\",\r\n                                                                                                goToGround = \"Cachette\",\r\n                                                                                                contingencyPlan = \"Plan contingence\",\r\n                                                                                                inspireAwe = \"Inspirer le respect\",\r\n                                                                                                findWeakness = \"Trouver la faiblesse\",\r\n                                                                                                spiceIsPower = \"L?????pice, c???est le pouvoir\",\r\n                                                                                                devour = \"Engloutir\",\r\n                                                                                                impress = \"Impressionner\",\r\n                                                                                                springTheTrap = \"D??clencher le pi??ge\",\r\n                                                                                                weirdingCombat = \"Combat ??trange\",\r\n                                                                                                tacticalOption = \"Option tactique\",\r\n                                                                                                questionableMethods = \"M??thodes douteuses\",\r\n                                                                                                desertMouse = \"Souris du d??sert\",\r\n                                                                                                ornithopter = \"Ornithopt??re\",\r\n                                                                                                --crysknife = \"Krys\",\r\n                                                                                                joker = \"Joker\",\r\n                                                                                                shadowAlliance = \"Alliance de l???ombre\",\r\n                                                                                                secureSpiceTrade = \"S??curiser le commerce de l?????pice\",\r\n\r\n                                                                                                -- Conflicts\r\n                                                                                                skirmishA = \"Escarmouche\",\r\n                                                                                                skirmishB = \"Escarmouche\",\r\n                                                                                                skirmishC = \"Escarmouche\",\r\n                                                                                                choamSecurity = \"S??curit?? de la CHOM\",\r\n                                                                                                spiceFreighters = \"Camtars d?????pice\",\r\n                                                                                                siegeOfArrakeen = \"Si??ge d???Arrakeen\",\r\n                                                                                                seizeSpiceRefinery = \"Capturer la raffinerie d?????pice\",\r\n                                                                                                testOfLoyalty = \"Test de loyaut??\",\r\n                                                                                                shadowContest = \"??preuve de l???ombre\",\r\n                                                                                                secureImperialBasin = \"S??curiser le bassin imp??rial\",\r\n                                                                                                protectTheSietches = \"Prot??ger les sietchs\",\r\n                                                                                                tradeDispute = \"Diff??rend commercial\",\r\n                                                                                                economicSupremacy = \"Supr??macie ??conomique\",\r\n                                                                                                propaganda = \"Propagande\",\r\n                                                                                                battleForImperialBasin = \"Bataille pour le bassin imp??rial\",\r\n                                                                                                battleForArrakeen = \"Battaille pour Arrakeen\",\r\n                                                                                                battleForSpiceRefinery = \"Bataille pour la raffinerie d?????pice\",\r\n\r\n                                                                                                -- Techs\r\n                                                                                                spaceport = \"Spatioport\",\r\n                                                                                                restrictedOrdnance = \"Ordonnance restrictive\",\r\n                                                                                                artillery = \"Artillerie\",\r\n                                                                                                disposalFacility = \"Installation d?????limination\",\r\n                                                                                                holoprojectors = \"Holoprojecteurs\",\r\n                                                                                                minimicFilm = \"Film Minimic\",\r\n                                                                                                windtraps = \"Pi??ges ?? vent\",\r\n                                                                                                detonationDevices = \"Engins de d??tonation\",\r\n                                                                                                memocorders = \"Memocorders\",\r\n                                                                                                flagship = \"Navire amiral\",\r\n                                                                                                shuttleFleet = \"Flotte de navettes\",\r\n                                                                                                spySatellites = \"Satellites espions\",\r\n                                                                                                chaumurky = \"Chaumurky\",\r\n                                                                                                sonicSnoopers = \"Fouineurs soniques\",\r\n                                                                                                trainingDrones = \"Drones d???entra??nement\",\r\n                                                                                                troopTransports = \"Transports de troupes\",\r\n                                                                                                holtzmanEngine = \"Moteur Holtzman\",\r\n                                                                                                invasionShips = \"Vaisseaux d???invasion\",\r\n\r\n                                                                                                -- Contracts\r\n                                                                                                fulfilledContract = \"Contrat ?? {contract} ?? rempli.\",\r\n                                                                                                harvest3orMore = \"R??colter 3+\",\r\n                                                                                                harvest4orMore = \"R??colter 4+\",\r\n                                                                                                --deliverSupplies = \"Livrer des fournitures\",\r\n                                                                                                highCouncilWithSolaris = \"Haut-Conseil (solaris)\",\r\n                                                                                                highCouncilWithInfluence = \"Haut-Conseil (influence)\",\r\n                                                                                                acquireTheSpiceMustFlow = \"Acqu??rir ?? l?????pice doit couler ??\",\r\n                                                                                                immediate = \"Imm??diat\",\r\n                                                                                                --researchStation = \"Station de recherche\",\r\n                                                                                                researchStationWithSpy = \"Station de recherche (espion)\",\r\n                                                                                                --espionage = \"Espionnage\",\r\n                                                                                                heighlinerWithWater = \"Long-courrier (eau)\",\r\n                                                                                                heighlinerWithTroops = \"Long-courrier (troupes)\",\r\n                                                                                                sardaukarWithCards = \"Sardaukar (cartes)\",\r\n                                                                                                sardaukarWithRecall = \"Sardaukar (rappel)\",\r\n                                                                                                spiceRefineryWithCards = \"Raffinerie d?????pice (cartes)\",\r\n                                                                                                spiceRefineryWithWater = \"Raffinerie d?????pice (eau)\",\r\n                                                                                                arrakeenWithWater = \"Arrakeen (eau)\",\r\n                                                                                                arrakeenWithSpy = \"Arrakeen (espion)\",\r\n                                                                                                --dreadnought = \"Cuirass??\",\r\n                                                                                                --techNegotiation = \"N??gociation tech.\",\r\n                                                                                                highCouncilWithTech = \"Haut-Conseil (tech.)\",\r\n                                                                                                --interstellarShipping = \"Livraison interstellaire\",,\r\n                                                                                                harvest3orMoreWithTech = \"R??colter 3+ (tech.)\",\r\n                                                                                                harvest4orMoreWithTech = \"R??colter 4+ (tech.)\",\r\n                                                                                                --smuggling = \"Contrebande\",\r\n                                                                                                heighlinerWithTech = \"Long-courrier (tech.)\",\r\n                                                                                                espionageWithTech = \"Espionnage (tech.)\",\r\n                                                                                                secretsWithTech = \"Secrets (tech.)\",\r\n\r\n                                                                                                -- Specific victory tokens\r\n                                                                                                endgame = \"Carte de fin de partie\",\r\n                                                                                                endgameTech = \"Tech. de fin de partie\",\r\n                                                                                                combat = \"Combat\",\r\n                                                                                                rivalIntrigue = \"Rival - Intrigue\",\r\n                                                                                                rivalSolari = \"Rival - Solari\",\r\n                                                                                                rivalWater = \"Rival - Eau\",\r\n                                                                                                rivalSpice = \"Rival - ??pice\",\r\n                                                                                                --beneTleilax = \"Bene Tleilax\",\r\n                                                                                                objective = \"Objectif\",\r\n                                                                                                priorityContract = \"Contrat prioritaire\",\r\n                                                                                                strategicStockpiling1 = \"Stocks strat??giques (??pice)\",\r\n                                                                                                strategicStockpiling2 = \"Stocks strat??giques (eau)\",\r\n                                                                                                --opportunism = \"Opportunisme\",\r\n                                                                                                emperorAlliance = \"Alliance avec l???Empereur\",\r\n                                                                                                emperorFriendship = \"Amiti?? avec l???Empereur\",\r\n                                                                                                greatHousesAlliance = \"Alliance avec les grandes maisons\",\r\n                                                                                                greatHousesFriendship = \"Amiti?? avec les grandes maisons\",\r\n                                                                                                spacingGuildAlliance = \"Alliance avec la Guilde spatiale\",\r\n                                                                                                spacingGuildFriendship = \"Amiti?? avec la Guilde spatiale\",\r\n                                                                                                beneGesseritAlliance = \"Alliance avec le Bene Gesserit\",\r\n                                                                                                beneGesseritFriendship = \"Amiti?? avec le Bene Gesserit\",\r\n                                                                                                fringeWorldsAlliance = \"Alliance avec les mondes p??riph??riques\",\r\n                                                                                                fringeWorldsFriendship = \"Amiti?? avec les mondes p??riph??riques\",\r\n                                                                                                fremenAlliance = \"Alliance avec les Fremens\",\r\n                                                                                                fremenFriendship = \"Amiti?? avec les Fremens\",\r\n                                                                                                muadDibVictoryPoint = \"Objectif Muad'Dib\",\r\n                                                                                                crysknifeVictoryPoint = \"Objective krys\",\r\n                                                                                                ornithopterVictoryPoint = \"Objective ornithopt??re\",\r\n\r\n                                                                                                -- Submit game\r\n                                                                                                submitGame = \"Soumettre la partie\",\r\n                                                                                                submitGameRankedGame = \"Partie class??e\",\r\n                                                                                                submitGameTournament = \"Partie de tournoi\",\r\n                                                                                                openSubmitScreen = \"Ouvrir l?????cran de soumission\",\r\n                                                                                                placement = \"Classement\",\r\n                                                                                                victoryPoints = \"PV\",\r\n                                                                                                name = \"Nom\",\r\n                                                                                                leaderName = \"Nom du dirigeant\",\r\n                                                                                                submitGameMessage = \"Assurez-vous que tous les ajustements sont effectu??s avant la soumission.\\nLes erreurs dans les scores ne pourront plus ??tre modifi??es apr??s la soumission !\",\r\n                                                                                                close = \"Fermer\",\r\n                                                                                                noPlayerMetEndGameCondition = \"Aucun joueur n???a rempli la condition de fin de partie.\",\r\n                                                                                                gameSubmitted = \"Partie soumise dans Google Sheets\",\r\n                                                                                                gameAlreadySubmitted = \"Jeu d??j?? soumis - Rien a faire.\",\r\n                                                                                            }\r\n\r\n                                                                                        end)\r\n                                                                                        __bundle_register(\"en.Locale\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                            return {\r\n                                                                                                [\"?\"] = \"?\",\r\n\r\n                                                                                                Green = \"green\",\r\n                                                                                                Yellow = \"yellow\",\r\n                                                                                                Blue = \"blue\",\r\n                                                                                                Red = \"red\",\r\n                                                                                                Purple = \"purple\",\r\n                                                                                                White = \"white\",\r\n\r\n                                                                                                -- Setup UI\r\n                                                                                                prolog = '\"A setup is a very delicate time...\"',\r\n                                                                                                language = \"Language\",\r\n                                                                                                players = \"Players\",\r\n                                                                                                virtualHotSeat = \"Special / Hotseat\",\r\n                                                                                                virtualHotSeatTooltip = \"Allows you to play solo, with 2 players\\nor in ???hotseat??? for the other modes.\",\r\n                                                                                                firstPlayer = \"First Player\",\r\n                                                                                                randomizePlayersPositions = \"Randomize players' positions\",\r\n                                                                                                randomizePlayersPositionTooltip = \"No player must use the black seat while\\nthe player positions are shuffled.\",\r\n                                                                                                wormEatsTheCardTooltip = \"Enable Worm Eats The Card mode https://boardgamegeek.com/thread/2577038/the-sand-worms-eats-cards\",\r\n                                                                                                extensions = \"Extensions\",\r\n                                                                                                useContracts = \"CHOAM contracts\",\r\n                                                                                                legacy = \"Dune: Imperium\",\r\n                                                                                                merakon = \"Paul Dennen's House Blend\",\r\n                                                                                                riseOfIx = \"Rise of Ix\",\r\n                                                                                                epicMode = \"Epic mode\",\r\n                                                                                                immortality = \"Immortality\",\r\n                                                                                                goTo11 = \"Go to 11\",\r\n                                                                                                leaderSelection = \"Leader selection\",\r\n                                                                                                leaderPoolSize = \"Leader pool size\",\r\n                                                                                                leaderPoolSizeLabel = \"Leader pool size ({value})\",\r\n                                                                                                tweakLeaderSelection = \"Tweak leader pool\",\r\n                                                                                                variants = \"Variants\",\r\n                                                                                                miscellanous = \"Miscellanous\",\r\n                                                                                                horizontalHandLayout = \"Horizontal hands layout with 4 players\",\r\n                                                                                                assistedRevelation = \"Assisted revelation\",\r\n                                                                                                soundEnabled = \"Sounds enabled\",\r\n                                                                                                formalCombatPhase = \"Formal combat phase\",\r\n                                                                                                formalCombatPhaseTooltip = \"Players with one or more plot cards\\nmust explicitly end their turn after\\nplaying one or to pass.\",\r\n                                                                                                setup = \"Setup\",\r\n                                                                                                notEnoughPlayers = \"Not enough players\",\r\n                                                                                                playerColorWarning = \"(Teal and purple colors are only valid in 6P mode.)\",\r\n                                                                                                english = \"English\",\r\n                                                                                                french = \"Fran??ais\",\r\n                                                                                                random = \"random\",\r\n                                                                                                reversePick = \"hidden pick\",\r\n                                                                                                reverseHiddenPick = \"reverse hidden pick\",\r\n                                                                                                altHiddenPick = \"4??3??1??2 hidden pick\",\r\n                                                                                                onePlayerTwoRivals = \"1 (+2)\",\r\n                                                                                                twoPlayersOneRival = \"2 (+1)\",\r\n                                                                                                threePlayers = \"3\",\r\n                                                                                                fourPlayers = \"4\",\r\n                                                                                                twoTeams = \"2 x 3\",\r\n                                                                                                normal = \"normal\",\r\n                                                                                                streamlined = \"streamlined\",\r\n\r\n                                                                                                -- Solo Setup UI\r\n                                                                                                soloSettings = \"Hagal\",\r\n                                                                                                difficulty = \"Difficulty\",\r\n                                                                                                all = \"all\",\r\n                                                                                                novice = \"mercenary\",\r\n                                                                                                veteran = \"sardaukar\",\r\n                                                                                                expert = \"mentat\",\r\n                                                                                                expertPlus = \"kwisatz\",\r\n                                                                                                autoTurnInSoloOption = \"Automatic turn pass\",\r\n                                                                                                imperiumRowChurnOption = \"Imperium Row Churn\",\r\n                                                                                                streamlinedRivalsOption = \"streamlined Rivals\",\r\n                                                                                                brutalEscalationOption = \"Brutal Escalation\",\r\n                                                                                                expertDeploymentOption = \"Expert Deployment\",\r\n                                                                                                smartPoliticsOption = \"Smart Politics\",\r\n\r\n                                                                                                -- Phases\r\n                                                                                                phaseLeaderSelection = \"Phase: leader selection\",\r\n                                                                                                phaseGameStart = \"Phase: game start\",\r\n                                                                                                phaseRoundStart = \"Phase: round start #{round}\\n??????????????????????????????????????????????????????????????????????????????????????????\",\r\n                                                                                                phasePlayerTurns = \"Phase: player turns\",\r\n                                                                                                phaseCombat = \"Phase: combat\",\r\n                                                                                                phaseCombatEnd = \"Phase: combat end\",\r\n                                                                                                phaseMakers = \"Phase: makers\",\r\n                                                                                                phaseRecall = \"Phase: recall\",\r\n                                                                                                phaseEndgame = \"Phase: endgame\",\r\n                                                                                                phaseArrakeenScouts = \"Phase: Arrakeen scouts\",\r\n                                                                                                notEnoughLeaderLeft = \"Not enough leaders left!\",\r\n\r\n                                                                                                -- Card\r\n                                                                                                acquireButton = \"Acquire\",\r\n                                                                                                notFremenCard = \"Attempting to add a filthy Fremen to the Throne room!\",\r\n                                                                                                noEnoughSpecimen = \"You don't have enough specimens!\",\r\n\r\n                                                                                                -- Playboard\r\n                                                                                                noTouch = \"Don't touch this button!\",\r\n                                                                                                noLeader = \"You don't have a leader yet!\",\r\n                                                                                                noAlly = \"You haven't selected an ally!\",\r\n                                                                                                notYourTurn = \"It's not your turn!\",\r\n                                                                                                noAgent = \"You don't have any agent left\",\r\n                                                                                                agentAlreadyPresent = \"You already have an agent present there!\",\r\n                                                                                                noFriendship = \"You don't have enough influence with {withFaction}!\",\r\n                                                                                                alreadyHaveSwordmaster = \"You already have a swordmaster!\",\r\n                                                                                                noResource = \"You don't have enough {resource}!\",\r\n                                                                                                -- bloodlines no solari\r\n                                                                                                noSolari = \"You don't have enough solari!\",\r\n                                                                                                forbiddenAccess = \"You cannot access this space!\",\r\n                                                                                                notShaddamTeam = \"You are not allied to the Emperor of the Known Universe!\",\r\n                                                                                                notMuadDibTeam = \"You are not allied with Usul Muad-Dib, the Lisan al-Gaib!\",\r\n                                                                                                -- bloodlines changed to sandworm\r\n                                                                                                sandwormButton = \"Sandworm:\\n??1\",\r\n                                                                                                -- bloodlines sardaukar commanders\r\n                                                                                                sardaukarCommanderButton = \"Sardaukar\\nCommander: ??1\",\r\n                                                                                                drawOneCardButton = \"Draw 1 Card\",\r\n                                                                                                drawFiveCardsButton = \"??? Draw 5 Cards ???\",\r\n                                                                                                resetDiscardButton = \"Discard ??? Deck\",\r\n                                                                                                agentTurn = \"Agent Turn\",\r\n                                                                                                revealHandButton = \"Reveal Turn\",\r\n                                                                                                revealHandTooltip = \"Right click for an extended reveal.\",\r\n                                                                                                atomics = \"Atomics\",\r\n                                                                                                revealNotTurn = \"You can't Reveal while it's not your turn.\",\r\n                                                                                                revealEarlyConfirm = \"Reveal Hand ?\",\r\n                                                                                                isDecidingToDraw = \"{leader} is deciding wether to draw cards right away or not cause their discard will be reshuffled.\",\r\n                                                                                                warningBeforeDraw = \"Warning: your discard will be reshuffled and/or you have less than {count} card(s). Do you want to draw {maxCount} card(s) right away ? (You will have to draw manually if you cancel)\",\r\n                                                                                                atomicsConfirm = \"Confirm\",\r\n                                                                                                yes = \"Yes\",\r\n                                                                                                no = \"No\",\r\n                                                                                                ok = \"Ok\",\r\n                                                                                                cancel = \"Cancel\",\r\n                                                                                                dialogCardAbove = \"Do you want to put the card on top of your deck?\",\r\n                                                                                                endTurn = \"End\\nTurn\",\r\n                                                                                                takeHighCouncilSeatByForce = \"Take by force\",\r\n                                                                                                takeHighCouncilSeatByForceConfirm = \"Taking High-Council seat by force?\",\r\n                                                                                                activatedAlly = \"Activated ally\",\r\n                                                                                                noSeatedPlayer = \"The {color} player is missing!\",\r\n                                                                                                takePlace = \"Take\\nPlace\",\r\n                                                                                                forwardMessage = \"To the {color} player: {message}\",\r\n\r\n                                                                                                -- Leader selection\r\n                                                                                                leaderSelectionAdjust = \"Adjust the number of leaders who will be randomly\\nselected for the players to choose among:\",\r\n                                                                                                leaderSelectionExclude = \"You can flip out (or delete) any leader you want to exclude.\\nOnce satisfied, hit the 'Start' button.\",\r\n                                                                                                start = \"Start\",\r\n                                                                                                claimLeader = \"Claim {leader} as leader\",\r\n                                                                                                incompatibleLeader = \"Not a human leader!\",\r\n                                                                                                incompatibleRivalLeader = \"Not a rival leader!\",\r\n\r\n                                                                                                -- Instructions\r\n                                                                                                leaderSelectionActiveInstruction = \"Select a leader\\non the upper board\",\r\n                                                                                                leaderSelectionInactiveInstruction = \"Wait for your opponents\\nto select their leader.\",\r\n                                                                                                playerTurnsActiveInstruction = \"Send an agent\\nor reveal your hand,\\nthen press End of Turn.\",\r\n                                                                                                playerTurnsInactiveInstruction = \"Wait for your opponents\\nto play their\\nagent / reveal turns.\",\r\n                                                                                                combatActiveInstruction = \"Play an intrigue and\\npress End of Turn or simply\\npress End of Turn to pass.\",\r\n                                                                                                combatInactiveInstruction = \"Wait for your opponents\\nin combat to play an\\nintrigue or pass their turns.\",\r\n                                                                                                combatEndActiveInstruction = \"Take your reward and play\\nintrigue cards if you may,\\nthen press End of Turn.\",\r\n                                                                                                combatEndInactiveInstruction = \"Wait for your opponents\\nto collect their rewards\\nand play any intrigue.\",\r\n                                                                                                endgameActiveInstruction = \"Play any Endgame card and\\nTech tile you possess\\nto gain final victory points.\",\r\n                                                                                                endgameInactiveInstruction = \"Wait for your opponents\\nto play any Endgame card\\nor Tech tiles they possess.\",\r\n                                                                                                -- Special instructions\r\n                                                                                                gameStartActiveInstructionForVladimirHarkonnen = \"Secretly choose two factions.\",\r\n                                                                                                gameStartInactiveInstructionForVladimirHarkonnen = \"Wait for Vladimir Harkonnen\\nto secretly choose\\nits two factions.\",\r\n                                                                                                gameStartActiveInstructionForIlesaEcaz = \"Set aside a card\\nfrom your hand.\",\r\n                                                                                                gameStartInactiveInstructionForIlesaEcaz = \"Wait for Ilesa Ecaz\\nto set aside a card\\nfrom her hand.\",\r\n                                                                                                gameStartActiveInstructionForHundroMoritani = \"Keep one intrigue\\nand put the other\\non top of the intrigue deck.\",\r\n                                                                                                gameStartInactiveInstructionForHundroMoritani = \"Wait for Hundro Moritani\\nto choose between\\nits two intrigues.\",\r\n                                                                                                -- bloodlines added kota and y'rkoon\r\n                                                                                                gameStartActiveInstructionForKotaOdax = \"Wait for Kota Odax\\nto choose her secret project.\",\r\n                                                                                                gameStartActiveInstructionForSteersmanYrkoon = \"Wait for Steersman Y'rkoon\\nto plot his course.\",\r\n\r\n                                                                                                -- Resource\r\n                                                                                                spiceAmount = \"Spice\",\r\n                                                                                                spice = \"spice unit\",\r\n                                                                                                spices = \"spice units\",\r\n                                                                                                waterAmount = \"Water\",\r\n                                                                                                water = \"measure of water\",\r\n                                                                                                waters = \"measures of water\",\r\n                                                                                                solariAmount = \"Solari\",\r\n                                                                                                solari = \"solari\",\r\n                                                                                                solaris = \"solaris\",\r\n                                                                                                persuasionAmount = \"Persuasion\",\r\n                                                                                                persuasion = \"Persuasion point\",\r\n                                                                                                persuasions = \"Persuasion points\",\r\n                                                                                                strengthAmount = \"Strength\",\r\n                                                                                                strength = \"Sword\",\r\n                                                                                                strengths = \"Swords\",\r\n                                                                                                spendManually = \"??? {leader} spent {amount} {resource} manually.\",\r\n                                                                                                receiveManually = \"??? {leader} received {amount} {resource} manually.\",\r\n                                                                                                fixManually = \"Fixed {amount} {resource} manually ({location}).\",\r\n                                                                                                influence = \"influence\",\r\n                                                                                                beetle = \"beetle\",\r\n                                                                                                beetles = \"beetles\",\r\n                                                                                                card = \"card\",\r\n                                                                                                cards = \"cards\",\r\n\r\n                                                                                                -- Actions\r\n                                                                                                playerTurn = \"??? Turn: {leader}\",\r\n                                                                                                drawObjects = \"??? Draw {amount} {object}\",\r\n                                                                                                drawObjectsManually = \"??? Draw {amount} {object} manually\",\r\n                                                                                                imperiumCard = \"card\",\r\n                                                                                                imperiumCards = \"cards\",\r\n                                                                                                intrigueCard = \"intrigue card\",\r\n                                                                                                intrigueCards = \"intrigue cards\",\r\n                                                                                                beetleAdvance = \"??? Progress x{count} on the Tleilax track.\",\r\n                                                                                                beetleRollback = \"??? Regress on the Tleilax track.\",\r\n                                                                                                researchAdvance = \"??? Progress on the research track.\",\r\n                                                                                                researchRollback = \"??? R??gress on the research track.\",\r\n                                                                                                credit = \"??? +{amount} {what}\",\r\n                                                                                                debit = \"??? -{amount} {what}\",\r\n                                                                                                transfer = \"??? Transfer of {count} {what}: {from} ??? {to}.\",\r\n                                                                                                troop = \"troop\",\r\n                                                                                                troops = \"troops\",\r\n                                                                                                dreadnoughts = \"dreadnoughts\",\r\n                                                                                                supplyPark = \"reserve\",\r\n                                                                                                garrisonPark = \"garrison\",\r\n                                                                                                combatPark = \"battlefield\",\r\n                                                                                                negotiationPark = \"tech negotiation\",\r\n                                                                                                tanksPark = \"Axolotl tanks\",\r\n                                                                                                otherMemoriesPark = \"Other Memories\",\r\n                                                                                                advanceFreighter = \"??? Progress on the shipment track.\",\r\n                                                                                                recallFreighter = \"??? Recall freighter.\",\r\n                                                                                                recruitSwordmaster = \"??? Recruit Swordmaster.\",\r\n                                                                                                takeHighCouncilSeat = \"??? Take High-Council seat.\",\r\n                                                                                                takeMakerHook = \"??? Learn to use a Maker hook.\",\r\n                                                                                                gainInfluence = \"??? +{amount} influence with {withFaction}.\",\r\n                                                                                                loseInfluence = \"??? -{amount} influence with {withFaction}.\",\r\n                                                                                                acquireTleilaxuCard = '??? Acquire Tleixlaxu card: \"{card}\".',\r\n                                                                                                acquireImperiumCard = '??? Acquire Imperium card: \"{card}\".',\r\n                                                                                                buyTech = '??? Acquire tech for {amount} {resource}: \"{name}\".',\r\n                                                                                                -- bloodlines changed from pick to acquired\r\n                                                                                                acquireContract = '??? Acquired contract: \"{name}\".',\r\n                                                                                                sendingAgent = \"??? Sending an agent to: {space} ({cards}).\",\r\n                                                                                                stealIntrigues = '??? Stealing \"{card}\" from {victim}.',\r\n                                                                                                gainVictoryPoint = \"??? Gaining VP ({name}).\",\r\n                                                                                                -- bloodlines sardaukar commander\r\n                                                                                                acquireSkill = '??? Acquired Sardaukar Commander skill: \"{name}\"',\r\n                                                                                                recruitSupplySardaukarCommander = \"??? Transfer of 1 Sardaukar Commander: Supply ??? Garrison\",\r\n                                                                                                undoSupplySardaukarCommander = \"??? Transfer of 1 Sardaukar Commander: Garrison ??? Supply\",\r\n                                                                                                recruitSardaukarCommanderAssemblyHall = \"??? Recruit Sardaukar Commander: Assembly Hall\",\r\n                                                                                                recruitSardaukarCommanderGatherSupport = \"??? Recruit Sardaukar Commander: Gather Support\",\r\n                                                                                                recruitSardaukarCommanderHighCouncil = \"??? Recruit Sardaukar Commander: High Council\",\r\n                                                                                                recruitSardaukarCommanderSardaukar = \"??? Recruit Sardaukar Commander: Sardaukar\",\r\n                                                                                                recruitSardaukarCommanderDutifulService = \"??? Recruit Sardaukar Commander: Dutiful Service\",\r\n                                                                                                recruitSardaukarCommanderDeliverSupplies = \"??? Recruit Sardaukar Commander: Deliver Supplies\",\r\n                                                                                                recruitSardaukarCommanderStandard = \"??? Recruit Sardaukar Commander: Sardaukar Standard\",\r\n                                                                                                recruitSardaukarCommanderNoPopup = '??? Recruit Sardaukar Commander: \"MANUAL\" IF NEEDED, MAKE PROPER ADJUSTMENT ON BOARD!',\r\n                                                                                                recruitSardaukarCommanderConfirm = \"Recruit Sardaukar Commander?\\n(costs 2 solari)\",\r\n                                                                                                recruitSardaukarCommanderFreeConfirm = \"Recruit Sardaukar Commander?\",\r\n                                                                                                recruitSardaukarCommanderConfirmOneSolari = \"Recruit Sardaukar Commander?\\n(costs 1 solari)\",\r\n                                                                                                sardaukarCommanderAssemblyHall = \"Sardaukar Commander - Assembly Hall\",\r\n                                                                                                sardaukarCommanderGatherSupport = \"Sardaukar Commander - Gather Support\",\r\n                                                                                                sardaukarCommanderHighCouncil = \"Sardaukar Commander - High Council\",\r\n                                                                                                sardaukarCommanderSardaukar = \"Sardaukar Commander - Sardaukar\",\r\n                                                                                                sardaukarCommanderDutifulService = \"Sardaukar Commander - Dutiful Service\",\r\n                                                                                                sardaukarCommanderDeliverSupplies = \"Sardaukar Commander - Deliver Supplies\",\r\n                                                                                                sardaukarCommanderStandard = \"Sardaukar Commander - Sardaukar Standard\",\r\n                                                                                                sardaukarCommanderNoPopup = \"Sardaukar Commander - No Popup\",\r\n                                                                                                noCommanderSupply = \"No Sardaukar Commanders in Supply!\",\r\n                                                                                                noCommanderGarrison = \"No Sardaukar Commanders in Garrison!\",\r\n\r\n                                                                                                -- Rival Actions\r\n                                                                                                triggeringScheme = \"??? Triggering {leader}'s scheme.\",\r\n                                                                                                brutalEscalation = \"??? Brutal Escalation!\",\r\n                                                                                                smartPolitics = \"??? Applying Smart Politics.\",\r\n                                                                                                expertDeploymentLimit = \"??? Limit deployed forces to {limit}.\",\r\n\r\n                                                                                                -- Shield Wall\r\n                                                                                                confirmShieldWallDestruction = \"Do you really want not to obey the forms of the Great Convention?\",\r\n                                                                                                blowUpShieldWall = \"{leader} is blowing up the Shield Wall!\",\r\n                                                                                                explosion = \"Kaboom!\",\r\n\r\n                                                                                                -- Combat\r\n                                                                                                announceCombat = 'Round combat is: \"{combat}\"',\r\n                                                                                                dreadnoughtMandatoryOccupation = \"Reminder: you must sent a dreadnought and occupy a space.\",\r\n                                                                                                troopEdit = \"Troops: ??1\",\r\n\r\n                                                                                                -- Boards\r\n                                                                                                sendAgentTo = \"Send agent to ??? {space}\",\r\n                                                                                                sendSpyTo = \"Send spy\",\r\n                                                                                                infiltrateWithSpy = \"Spy recalled to infiltrate\",\r\n                                                                                                gatherIntelligenceWithSpy = \"Spy recalled to gather intelligence\",\r\n                                                                                                noSpyToInfiltrate = \"No spy present to allow you to infiltrate!\",\r\n                                                                                                noSpyToRecallOrCardToDraw = \"You don't have spies to recall or cards to draw!\",\r\n                                                                                                selectSpyToRecall = \"Select from wich observation post you recall your spy.\",\r\n                                                                                                confirmSpyRecall = \"Do you want to recall a spy to draw a card?\",\r\n                                                                                                progressOnInfluenceTrack = \"Progress on {withFaction} influence track\",\r\n                                                                                                recallYourFreighter = \"Recall your freighter\",\r\n                                                                                                progressOnShipmentTrack = \"Progress on the shipment track\",\r\n                                                                                                pickBonus = \"Pick your bonus: {bonus}\",\r\n                                                                                                troopsAndInfluence = \"troops and influnce\",\r\n                                                                                                forbiddenMove = \"Forbidden move. Do you confirm it neverless?\",\r\n                                                                                                progressOnTleilaxTrack = \"Progress on the Tleilax track\",\r\n                                                                                                specimenEdit = \"Specimen: ??1\",\r\n                                                                                                progressOnResearchTrack = \"Progress on the research track\",\r\n                                                                                                progressAfterResearchTrack = \"Progress beyond the research track\",\r\n                                                                                                negotiatorEdit = \"Negotiator: ??1\",\r\n                                                                                                goGatherSupport = \"Select an option.\",\r\n                                                                                                noWaterOption = \"Without water\",\r\n                                                                                                withWaterOption = \"With water\",\r\n                                                                                                goSietchTabr = \"Select an option.\",\r\n                                                                                                hookTroopWaterOption = \"Hook + Troop + Water\",\r\n                                                                                                troopWaterOption = \"Troop + Water\",\r\n                                                                                                waterShieldWallOption = \"Water + Atomics\",\r\n                                                                                                goSpiceRefinery = \"Select an option.\",\r\n                                                                                                noSpiceOption = \"0 spice unit\",\r\n                                                                                                withSpiceOption = \"1 spice unit\",\r\n                                                                                                reclaimRewards = \"Reclaim Rewards\",\r\n                                                                                                makersAndRecall = \"Makers + Recall\",\r\n                                                                                                doublingConflictRewards = \"Double rewards\",\r\n                                                                                                unavailableSwordmaster = \"No swordmaster with this level of difficulty!\",\r\n\r\n                                                                                                goDeepDesert = \"Select an option.\",\r\n                                                                                                fourSpicesOption = \"4 spice units\",\r\n                                                                                                twoWormsOption = \"2 sandworm\",\r\n                                                                                                goHaggaBasin = \"Select an option.\",\r\n                                                                                                twoSpicesOption = \"2 spice units\",\r\n                                                                                                oneWormOption = \"1 sandworm\",\r\n                                                                                                noMakerHook = \"You don't have a maker's hook!\",\r\n                                                                                                shieldWallIsStanding = \"The Shield Wall is still standing!\",\r\n\r\n                                                                                                goTechNegotiation = \"Select an option.\",\r\n                                                                                                sendNegotiatorOption = \"Negotiator\",\r\n                                                                                                buyTechWithDiscont1Option = \"Discounted tech.\",\r\n                                                                                                buyTechSelection = \"Select which tech acquisition option you want to use.\",\r\n                                                                                                freighterTechBuyOption = \"Shipment track\",\r\n                                                                                                techNegotiationTechBuyOption = \"Tech. negotiation\",\r\n                                                                                                dreadnoughtTechBuyOption = \"Dreadnought\",\r\n                                                                                                appropriateTechBuyOption = \"Appropriate\",\r\n                                                                                                ixianEngineerTechBuyOption = \"Ixian Engineer\",\r\n                                                                                                machineCultureTechBuyOption = \"Machine Culture\",\r\n                                                                                                rhomburVerniusTechBuyOption = \"Rhombur Vernius' ring\",\r\n                                                                                                -- bloodlines changed text\r\n                                                                                                manuallyBuyTech = \"Acquire tech? Pay cost manually.\",\r\n                                                                                                -- bloodlines maybe reword?\r\n                                                                                                notAffordableOption = \"You can't afford this buying option!\",\r\n                                                                                                pruneTechCard = 'Pruning tech tile: \"{card}\"',\r\n                                                                                                roundNumber = \"Round #\",\r\n                                                                                                doYouWantAnotherRound = \"Play another round?\",\r\n                                                                                                -- bloodlines tuek's sietch option\r\n                                                                                                goTueksSietch = \"Select an option.\",\r\n                                                                                                tueksSpiceOption = \"1 spice unit\",\r\n                                                                                                tueksDrawOption = \"1 card draw\",\r\n\r\n                                                                                                -- Arrakeen Scouts\r\n                                                                                                joinCommittee = \"Join the subcommittee: {committee}\",\r\n                                                                                                appropriations = \"Appropriations\",\r\n                                                                                                development = \"Development\",\r\n                                                                                                information = \"Information\",\r\n                                                                                                investigation = \"Investigation\",\r\n                                                                                                joinForces = \"Join Forces\",\r\n                                                                                                politicalAffairs = \"Political Affairs\",\r\n                                                                                                preparation = \"Preparation\",\r\n                                                                                                relations = \"Relations\",\r\n                                                                                                supervision = \"Supervision\",\r\n                                                                                                dataAnalysis = \"Data Analysis\",\r\n                                                                                                developmentProject = \"Development Project\",\r\n                                                                                                tleilaxuRelations = \"Tleilaxu Relations\",\r\n                                                                                                committeeReminder = \"You now have the opportunity to join a subcommittee this turn.\",\r\n                                                                                                first = \"1st\",\r\n                                                                                                firstExAequo = \"1st ex aequo\",\r\n                                                                                                second = \"2nd\",\r\n                                                                                                secondExAequo = \"2nd ex aequo\",\r\n                                                                                                third = \"3rd\",\r\n                                                                                                thirdExAequo = \"3rd ex aequo\",\r\n                                                                                                fourth = \"4th\",\r\n                                                                                                fourthExAequo = \"4th ex aequo\",\r\n                                                                                                lose = \"perdu\",\r\n                                                                                                passOption = \"Pass\",\r\n                                                                                                waitOption = \"Wait\",\r\n                                                                                                refuseOption = \"Refuse\",\r\n                                                                                                acceptOption = \"Accept\",\r\n                                                                                                discardOption = \"Discard\",\r\n                                                                                                discardNonStarterCard = \"Discard a non starter card\",\r\n                                                                                                discardACard = \"Discard a card\",\r\n                                                                                                discardAnIntrigue = \"Discard an intrigue\",\r\n                                                                                                trashACard = \"Trash a card\",\r\n                                                                                                doAResearch = \"Do a research\",\r\n                                                                                                destroyACardFromYourHand = \"Destroy a card from your hand\",\r\n                                                                                                spendOption = \"Spend {amount} {resource}\",\r\n                                                                                                amount = \"{amount} {resource}\",\r\n\r\n                                                                                                -- Ranking\r\n                                                                                                firstInCombat = \"??? 1st: {leader}\",\r\n                                                                                                firstExAequoInCombat = \"??? 1st ex aequo: {leader}\",\r\n                                                                                                secondInCombat = \"??? 2nd: {leader}\",\r\n                                                                                                secondExAequoInCombat = \"??? 2nd ex aequo: {leader}\",\r\n                                                                                                thirdInCombat = \"??? 3rd: {leader}\",\r\n                                                                                                thirdExAequoInCombat = \"??? 3rd ex aequo: {leader}\",\r\n                                                                                                fourthInCombat = \"??? 4th: {leader}\",\r\n                                                                                                fourthExAequoInCombat = \"??? 4th ex aequo: {leader}\",\r\n\r\n                                                                                                -- Tleilax board\r\n                                                                                                confirmSolarisToBeetles = \"Do you want to pay 7 Solaris to Advance Twice on the Tleilaxu Track ?\",\r\n\r\n                                                                                                -- Factions\r\n                                                                                                withEmperor = \"the Emperor\",\r\n                                                                                                withSpacingGuild = \"the Spacing Guild\",\r\n                                                                                                withBeneGesserit = \"the Bene Gesserit\",\r\n                                                                                                withFremen = \"the Fremens\",\r\n                                                                                                withGreatHouses = \"the Great Houses\",\r\n                                                                                                withFringeWorlds = \"the Fringe Worlds\",\r\n\r\n                                                                                                -- Leaders\r\n                                                                                                vladimirHarkonnen = \"Baron Vladimir Harkonnen\",\r\n                                                                                                glossuRabban = 'Glossu \"The Beast\" Rabban',\r\n                                                                                                ilbanRichese = \"Count Ilban Richese\",\r\n                                                                                                helenaRichese = \"Helena Richese\",\r\n                                                                                                letoAtreides = \"Duke Leto Atreides\",\r\n                                                                                                paulAtreides = \"Paul Atreides\",\r\n                                                                                                arianaThorvald = \"Countess Ariana Thorvald\",\r\n                                                                                                memnonThorvald = \"Earl Memnon Thorvald\",\r\n                                                                                                armandEcaz = \"Archduke Armand Ecaz\",\r\n                                                                                                ilesaEcaz = \"Ilesa Ecaz\",\r\n                                                                                                rhomburVernius = \"Prince Rhombur Vernius\",\r\n                                                                                                tessiaVernius = \"Tessia Vernius\",\r\n                                                                                                yunaMoritani = '\"Princess\" Yuna Moritani',\r\n                                                                                                hundroMoritani = \"Viscount Hundro Moritani\",\r\n\r\n                                                                                                -- Leader abilities\r\n                                                                                                schemeTooltip = \"Scheme a plot\",\r\n                                                                                                brutalityTooltip = \"Don't be gentle\",\r\n                                                                                                manufacturingTooltip = \"Make a profit\",\r\n                                                                                                prescienceTooltip = \"Look at top card of your deck easily with this.\",\r\n                                                                                                prescienceUsed = \"??? Paul Atreides used his prescience to look into the future.\",\r\n                                                                                                prescienceVoid = \"All you see is the void ! (Your deck it empty actually???)\",\r\n                                                                                                prescienceManual = \"You need to peek manually (ALT + SHIFT) because there is only one card in your deck.\",\r\n                                                                                                disciplineTooltip = \"Draw a card.\",\r\n                                                                                                hiddenReservoirTooltip = \"Siphon your hidden reservoir\",\r\n                                                                                                spiceHoardTooltip = \"Hoard spice\",\r\n                                                                                                guildContactsTooltip = \"Use your contacts with the Guild\",\r\n                                                                                                noAvailableFoldspaceCards = 'No \"Foldspace\" card (not deck!) found in your trash.',\r\n                                                                                                fillCoffersTooltip = \"Fill coffers\",\r\n                                                                                                warmasterTooltip = \"Warmaster\",\r\n                                                                                                spiceAgonyTooltip = \"Trigger the Spice Agony.\",\r\n                                                                                                confirmOtherMemories = \"Use your Other Memories?\",\r\n                                                                                                otherMemoriesTooltip = \"Use your Other Memories.\",\r\n                                                                                                otherMemoriesUsed = \"??? Lady Jessica used her Other Memories.\",\r\n                                                                                                waterOfLifeTooltip = \"Drink the Water of Life\",\r\n                                                                                                leadTheWayTooltip = \"Lead the Way\",\r\n                                                                                                firstSnooperRecall = \"??? Tessia Vernius has recalled her first snooper from {withFaction}.\",\r\n                                                                                                secondSnooperRecall = \"??? Tessia Vernius has recalled her second snooper from {withFaction}.\",\r\n                                                                                                thirdSnooperRecall = \"??? Tessia Vernius has recalled her third snooper from {withFaction}.\",\r\n                                                                                                fourthSnooperRecall = \"??? Tessia Vernius has recalled her fourth snooper from {withFaction}.\",\r\n                                                                                                firstSnooperRecallEffectInfo = \"Having recalled your first snooper, you may discard a card to get 1 spice unit.\",\r\n                                                                                                finalDeliveryTooltip = \"Final Delivery.\",\r\n                                                                                                gurneySmile = \"??? Gurney is showing his teeths.\",\r\n                                                                                                imperialBirthright = \"??? Irulan exercises his imperial birthright.\",\r\n                                                                                                loyalty = \"??? Margot reaps the rewards of her loyalty\",\r\n                                                                                                stabanSpiceSmuggling = \"??? Staban smuggles away some spice.\",\r\n                                                                                                muadDibBeingUnpredictable = \"??? Muad'Dib becomes a bit more unpredictable.\",\r\n                                                                                                -- bloodlines leader abilities in chat log\r\n                                                                                                harkonnenAdvisorTooltip = \"Harkonnen Advisor\",\r\n                                                                                                reverseEngineeringTooltip = \"Reverse Engineering - 1 spice\",\r\n                                                                                                tueksSietchPayment = \"??? Tuek's Sietch is open for business!\",\r\n                                                                                                piterTwistedGenius = \"??? Piter De Vries is a twisted genius!\",\r\n                                                                                                lietHatesTheMaker = \"??? Liet Kynes hates the Maker! Gets 1 trash, 1 spice and 1 intrigue.\",\r\n                                                                                                lietHatesTheMakerDeepDesert = \"??? Liet Kynes really hates the Maker! Gets 2 trash, 2 spice and 2 intrigue.\",\r\n\r\n                                                                                                -- Uprising leaders\r\n                                                                                                stabanTuek = \"Staban Tuek\",\r\n                                                                                                amberMetulli = \"Lady Amber Metulli\",\r\n                                                                                                gurneyHalleck = \"Gurney Halleck\",\r\n                                                                                                margotFenring = \"Lady Margot Fenring\",\r\n                                                                                                irulanCorrino = \"Princess Irulan\",\r\n                                                                                                reverendMotherJessica = \"Reverend Mother Jessica\",\r\n                                                                                                jessica = \"Lady Jessica\",\r\n                                                                                                feydRauthaHarkonnen = \"Feyd-Rautha Harkonnen\",\r\n                                                                                                shaddamCorrino = \"Shaddam IV\",\r\n                                                                                                muadDib = \"Muad'Dib\",\r\n                                                                                                -- bloodlines leaders\r\n                                                                                                bl_Chani = \"Chani\",\r\n                                                                                                bl_Duncan = \"Duncan Idaho\",\r\n                                                                                                bl_Esmar = \"Esmar Tuek\",\r\n                                                                                                bl_Hasimir = \"Count Hasimir Fenring\",\r\n                                                                                                bl_Kota = \"Kota Odax of Ix\",\r\n                                                                                                bl_Liet = \"Liet Kynes\",\r\n                                                                                                bl_Mohiam = \"Gaius Helen Mohiam\",\r\n                                                                                                bl_Piter = \"Piter De Vries\",\r\n                                                                                                bl_Yrkoon = \"Steersman Y'rkoon\",\r\n\r\n                                                                                                -- Spaces\r\n                                                                                                conspire = \"Conspire\",\r\n                                                                                                wealth = \"Wealth\",\r\n                                                                                                heighliner = \"Heighliner\",\r\n                                                                                                foldspace = \"Foldspace\",\r\n                                                                                                selectiveBreeding = \"Selective Breeding\",\r\n                                                                                                secrets = \"Secrets\",\r\n                                                                                                hardyWarriors = \"Hardy Warriors\",\r\n                                                                                                stillsuits = \"Stillsuits\",\r\n                                                                                                highCouncil = \"High Council\",\r\n                                                                                                mentat = \"Mentat\",\r\n                                                                                                swordmaster = \"Swordmaster\",\r\n                                                                                                rallyTroops = \"Rally Troops\",\r\n                                                                                                hallOfOratory = \"Hall of Oratory\",\r\n                                                                                                secureContract = \"Secure Contract\",\r\n                                                                                                arrakeen = \"Arrakeen\",\r\n                                                                                                carthag = \"Carthag\",\r\n                                                                                                researchStation = \"Research Station\",\r\n                                                                                                researchStationImmortality = \"Research Station\",\r\n                                                                                                sietchTabr = \"Sietch Tabr\",\r\n                                                                                                imperialBasin = \"Imperial Basin\",\r\n                                                                                                haggaBasin = \"Hagga Basin\",\r\n                                                                                                theGreatFlat = \"The Great Flat\",\r\n                                                                                                smuggling = \"Smuggling\",\r\n                                                                                                interstellarShipping = \"Interstellar Shipping\",\r\n                                                                                                techNegotiation = \"Tech Negotiation\",\r\n                                                                                                techNegotiation_Buy = \"Buy Tech\",\r\n                                                                                                techNegotiation_Negotiate = \"Send Negotiator\",\r\n                                                                                                dreadnought = \"Dreadnought\",\r\n\r\n                                                                                                fremkit = \"Fremkit\",\r\n                                                                                                desertTactics = \"Desert Tactics\",\r\n                                                                                                --secrets = \"Secrets\",\r\n                                                                                                espionage = \"Espionage\",\r\n                                                                                                deliverSupplies = \"Deliver Supplies\",\r\n                                                                                                --heighliner = \"Heighliner\",\r\n                                                                                                dutifulService = \"Dutiful Service\",\r\n                                                                                                sardaukar = \"Sardaukar\",\r\n                                                                                                --highCouncil = \"HighCouncil\",\r\n                                                                                                imperialPrivilege = \"Imperial Privilege\",\r\n                                                                                                --swordmaster = \"Swordmaster\",\r\n                                                                                                assemblyHall = \"Assembly Hall\",\r\n                                                                                                gatherSupport = \"Gather Support\",\r\n                                                                                                gatherSupport_NoWater = \"Free and no water\",\r\n                                                                                                gatherSupport_WithWater = \"2 solaris for 1 water measure\",\r\n                                                                                                shipping = \"Shipping\",\r\n                                                                                                acceptContract = \"Accept Contract\",\r\n                                                                                                --sietchTabr = \"SietchTabr\",\r\n                                                                                                sietchTabr_HookTroopWater = \"Taking supplies\",\r\n                                                                                                sietchTabr_WaterShieldWall = \"Breaking the Wall\",\r\n                                                                                                --researchStation = \"ResearchStation\",\r\n                                                                                                spiceRefinery = \"Spice Refinery\",\r\n                                                                                                spiceRefinery_NoSpice = \"2 solaris for no spice\",\r\n                                                                                                spiceRefinery_WithSpice = \"4 solaris for 1 spice unit\",\r\n                                                                                                --arrakeen = \"Arrakeen\",\r\n                                                                                                deepDesert = \"Deep Desert\",\r\n                                                                                                deepDesert_Spice = \"Take the spice\",\r\n                                                                                                deepDesert_WormsIfHook = \"Call two sandworms\",\r\n                                                                                                --haggaBasin = \"HaggaBasin\",\r\n                                                                                                haggaBasin_Spice = \"Take the spice\",\r\n                                                                                                haggaBasin_WormIfHook = \"Call a sandworm\",\r\n                                                                                                --imperialBasin = \"ImperialBasin\",\r\n                                                                                                militarySupport = \"Military Support\",\r\n                                                                                                economicSupport = \"Economic Support\",\r\n                                                                                                controversialTechnology = \"controversial Technology\",\r\n                                                                                                expedition = \"Expedition\",\r\n                                                                                                habbanyaErg = \"Habbanya Erg\",\r\n                                                                                                desertMastery = \"Desert Mastery\",\r\n                                                                                                vastWealth = \"Vast Wealth\",\r\n                                                                                                -- bloodlines spaces\r\n                                                                                                tueksSietch = \"Tuek's Sietch\",\r\n                                                                                                tueksSietch_Spice = \"1 spice unit\",\r\n                                                                                                tueksSietch_Draw = \"1 card draw\",\r\n\r\n                                                                                                -- Hagal\r\n                                                                                                placeSpyYellow = \"Place Spy\",\r\n                                                                                                placeSpyBlue = \"Place Spy\",\r\n                                                                                                placeSpyGreen = \"Place Spy\",\r\n                                                                                                deliverSuppliesAndHeighliner = \"Deliver Supplies / Heighliner\",\r\n                                                                                                gatherSupport1 = \"Gather Support\",\r\n                                                                                                gatherSupport2 = \"Gather Support\",\r\n                                                                                                acceptContractAndShipping1 = \"Accept Contract / Shipping\",\r\n                                                                                                acceptContractAndShipping2 = \"Accept Contract / Shipping\",\r\n                                                                                                haggaBasinAndImperialBasin = \"Hagga Basin / Imperial Basin\",\r\n                                                                                                reshuffle = \"Reshuffle\",\r\n                                                                                                churnImperiumRow = \"Imperium Row Churn ({count} {card})\",\r\n                                                                                                deliverSuppliesAndInterstellarShipping = \"Deliver Supplies / Interstellar Shipping\",\r\n                                                                                                smugglingAndInterstellarShipping = \"Smuggling / Interstellar Shipping\",\r\n                                                                                                dreadnought1p = \"Dreadnought\",\r\n                                                                                                dreadnought2p = \"Dreadnought\",\r\n                                                                                                tleilaxuBonus1 = \"Tleilaxu Bonus\",\r\n                                                                                                tleilaxuBonus2 = \"Tleilaxu Bonus\",\r\n                                                                                                tleilaxuBonus3 = \"Tleilaxu Bonus\",\r\n\r\n                                                                                                -- Objective cards\r\n                                                                                                --crysknife = \"\",\r\n                                                                                                ornithopter1to3p = \"Ornithopter\",\r\n                                                                                                muadDib4to6p = \"Muad'Dib\",\r\n                                                                                                crysknife4to6p = \"Crysknife\",\r\n                                                                                                muadDibFirstPlayer = \"Muad'Dib (First Player)\",\r\n\r\n                                                                                                -- Imperium cards\r\n                                                                                                duneTheDesertPlanet = \"Dune the Desert Planet\",\r\n                                                                                                seekAllies = \"Seek Allies\",\r\n                                                                                                signetRing = \"Signet Ring\",\r\n                                                                                                diplomacy = \"Diplomacy\",\r\n                                                                                                reconnaissance = \"Reconnaissance\",\r\n                                                                                                convincingArgument = \"Convincing Argument\",\r\n                                                                                                dagger = \"Dagger\",\r\n                                                                                                controlTheSpice = \"Control the Spice\",\r\n                                                                                                experimentation = \"Experimentation\",\r\n                                                                                                jessicaOfArrakis = \"Jessica of Arrakis\",\r\n                                                                                                sardaukarLegion = \"Sardaukar Legion\",\r\n                                                                                                drYueh = \"Dr Yueh\",\r\n                                                                                                assassinationMission = \"Assassination Mission\",\r\n                                                                                                sardaukarInfantry = \"Sardaukar Infantry\",\r\n                                                                                                beneGesseritInitiate = \"Bene Gesserit Initiate\",\r\n                                                                                                guildAdministrator = \"Guild Administrator\",\r\n                                                                                                theVoice = \"The Voice\",\r\n                                                                                                scout = \"Scout\",\r\n                                                                                                imperialSpy = \"Imperial Spy\",\r\n                                                                                                beneGesseritSister = \"Bene Gesserit Sister\",\r\n                                                                                                missionariaProtectiva = \"Missionaria Protectiva\",\r\n                                                                                                spiceHunter = \"Spice Hunter\",\r\n                                                                                                spiceSmugglers = \"Spice Smugglers\",\r\n                                                                                                fedaykinDeathCommando = \"Fedaykin Death Commando\",\r\n                                                                                                geneManipulation = \"Gene Manipulation\",\r\n                                                                                                guildBankers = \"Guild Bankers\",\r\n                                                                                                choamDirectorship = \"CHOAM Directorship\",\r\n                                                                                                crysknife = \"Crysknife\",\r\n                                                                                                chani = \"Chani\",\r\n                                                                                                spaceTravel = \"Space Travel\",\r\n                                                                                                duncanIdaho = \"Duncan Idaho\",\r\n                                                                                                shiftingAllegiances = \"Shifting Allegiances\",\r\n                                                                                                kwisatzHaderach = \"Kwisatz Haderach\",\r\n                                                                                                sietchReverendMother = \"Sietch Reverend Mother\",\r\n                                                                                                arrakisRecruiter = \"Arrakis Recruiter\",\r\n                                                                                                firmGrip = \"Firm Grip\",\r\n                                                                                                smugglersThopter = \"Smuggler's Thopter\",\r\n                                                                                                carryall = \"Carryall\",\r\n                                                                                                gunThopter = \"Gun'Thopter\",\r\n                                                                                                guildAmbassador = \"Guild Ambassador\",\r\n                                                                                                testOfHumanity = \"Test of Humanity\",\r\n                                                                                                fremenCamp = \"Fremen Camp\",\r\n                                                                                                opulence = \"Opulence\",\r\n                                                                                                ladyJessica = \"Lady Jessica\",\r\n                                                                                                stilgar = \"Stilgar\",\r\n                                                                                                piterDeVries = \"Piter de Vries\",\r\n                                                                                                --gurneyHalleck = \"Gurney Halleck\",\r\n                                                                                                thufirHawat = \"Thufir Hawat\",\r\n                                                                                                otherMemory = \"Other Memory\",\r\n                                                                                                lietKynes = \"lietKynes\",\r\n                                                                                                wormRiders = \"Worm Riders\",\r\n                                                                                                reverendMotherMohiam = \"Reverend Mother Mohiam\",\r\n                                                                                                powerPlay = \"Power Play\",\r\n                                                                                                duncanLoyalBlade = \"Duncan Loyal Blade\",\r\n                                                                                                --thumper = \"Thumper\",\r\n                                                                                                boundlessAmbition = \"Boundless Ambition\",\r\n                                                                                                guildChiefAdministrator = \"Guild Chief Administrator\",\r\n                                                                                                guildAccord = \"Guild Accord\",\r\n                                                                                                localFence = \"Local Fence\",\r\n                                                                                                shaiHulud = \"Shai Hulud\",\r\n                                                                                                ixGuildCompact = \"Ix-Guild Compact\",\r\n                                                                                                choamDelegate = \"CHOAM Delegate\",\r\n                                                                                                bountyHunter = \"Bounty Hunter\",\r\n                                                                                                embeddedAgent = \"Embedded Agent\",\r\n                                                                                                --esmarTuek = \"esmarTuek\",\r\n                                                                                                courtIntrigue = \"Court Intrigue\",\r\n                                                                                                sayyadina = \"Sayyadina\",\r\n                                                                                                imperialShockTrooper = \"Imperial Shock Trooper\",\r\n                                                                                                appropriate = \"Appropriate\",\r\n                                                                                                desertAmbush = \"Desert Ambush\",\r\n                                                                                                inTheShadows = \"In the Shadows\",\r\n                                                                                                satelliteBan = \"Satellite Ban\",\r\n                                                                                                freighterFleet = \"Freighter Fleet\",\r\n                                                                                                imperialBashar = \"Imperial Bashar\",\r\n                                                                                                jamis = \"Jamis\",\r\n                                                                                                landingRights = \"Landing Rights\",\r\n                                                                                                waterPeddler = \"Water Peddler\",\r\n                                                                                                treachery = \"Treachery\",\r\n                                                                                                truthsayer = \"Truthsayer\",\r\n                                                                                                spiceTrader = \"Spice Trader\",\r\n                                                                                                ixianEngineer = \"Ixian Engineer\",\r\n                                                                                                webOfPower = \"Web of Power\",\r\n                                                                                                weirdingWay = \"Weirding Way\",\r\n                                                                                                negotiatedWithdrawal = \"Negotiated Withdrawal\",\r\n                                                                                                fullScaleAssault = \"Full Scale Assault\",\r\n                                                                                                beneTleilaxLab = \"Bene Tleilax Lab\",\r\n                                                                                                beneTleilaxResearcher = \"Bene Tleilax Researcher\",\r\n                                                                                                blankSlate = \"Blank Slate\",\r\n                                                                                                clandestineMeeting = \"Clandestine Meeting\",\r\n                                                                                                corruptSmuggler = \"Corrupt Smuggler\",\r\n                                                                                                dissectingKit = \"Dissecting Kit\",\r\n                                                                                                forHumanity = \"For Humanity\",\r\n                                                                                                highPriorityTravel = \"High Priority Travel\",\r\n                                                                                                imperiumCeremony = \"Imperium Ceremony\",\r\n                                                                                                interstellarConspiracy = \"Interstellar Conspiracy\",\r\n                                                                                                keysToPower = \"Keys to Power\",\r\n                                                                                                lisanAlGaib = \"Lisan Al-Gaib\",\r\n                                                                                                longReach = \"Long Reach\",\r\n                                                                                                occupation = \"Occupation\",\r\n                                                                                                organMerchants = \"Organ Merchants\",\r\n                                                                                                plannedCoupling = \"Planned Coupling\",\r\n                                                                                                replacementEyes = \"Replacement Eyes\",\r\n                                                                                                sardaukarQuartermaster = \"Sardaukar Quartermaster\",\r\n                                                                                                shadoutMapes = \"Shadout Mapes\",\r\n                                                                                                showOfStrength = \"Show of Strength\",\r\n                                                                                                spiritualFervor = \"Spiritual Fervor\",\r\n                                                                                                stillsuitManufacturer = \"Stillsuit Manufacturer\",\r\n                                                                                                throneRoomPolitics = \"Throne Room Politics\",\r\n                                                                                                tleilaxuMaster = \"Tleilaxu Master\",\r\n                                                                                                tleilaxuSurgeon = \"Tleilaxu Surgeon\",\r\n                                                                                                --foldspace = \"foldspace\",\r\n                                                                                                reclaimedForces = \"Reclaimed Forces\",\r\n                                                                                                piterGeniusAdvisor = \"Piter Genius Advisor\",\r\n                                                                                                beguilingPheromones = \"Beguiling Pheromones\",\r\n                                                                                                chairdog = \"Chairdog\",\r\n                                                                                                contaminator = \"Contaminator\",\r\n                                                                                                corrinoGenes = \"Corrino Genes\",\r\n                                                                                                faceDancer = \"Face Dancer\",\r\n                                                                                                faceDancerInitiate = \"Face Dancer Initiate\",\r\n                                                                                                fromTheTanks = \"From the Tanks\",\r\n                                                                                                ghola = \"Ghola\",\r\n                                                                                                guildImpersonator = \"Guild Impersonator\",\r\n                                                                                                industrialEspionage = \"Industrial Espionage\",\r\n                                                                                                scientificBreakthrough = \"Scientific Breakthrough\",\r\n                                                                                                sligFarmer = \"Slig Farmer\",\r\n                                                                                                stitchedHorror = \"Stitched Horror\",\r\n                                                                                                subjectX137 = \"Subject X-137\",\r\n                                                                                                tleilaxuInfiltrator = \"Tleilaxu Infiltrator\",\r\n                                                                                                twistedMentat = \"Twisted Mentat\",\r\n                                                                                                unnaturalReflexes = \"Unnatural Reflexes\",\r\n                                                                                                usurp = \"Usurp\",\r\n\r\n                                                                                                unswervingLoyalty = \"Unswerving Loyalty\",\r\n                                                                                                spaceTimeFolding = \"Space Time Folding\",\r\n                                                                                                weirdingWoman = \"Weirding Woman\",\r\n                                                                                                sardaukarSoldier = \"Sardaukar Soldier\",\r\n                                                                                                smugglerHarvester = \"Smuggler Harvester\",\r\n                                                                                                makerKeeper = \"Maker Keeper\",\r\n                                                                                                reliableInformant = \"Reliable Informant\",\r\n                                                                                                hiddenMissive = \"Hidden Missive\",\r\n                                                                                                wheelsWithinWheels = \"Wheels within Wheels\",\r\n                                                                                                fedaykinStilltent = \"Fedaykin Stilltent\",\r\n                                                                                                imperialSpymaster = \"Imperial Spymaster\",\r\n                                                                                                spyNetwork = \"Spy Network\",\r\n                                                                                                desertSurvival = \"Desert Survival\",\r\n                                                                                                undercoverAsset = \"Undercover Asset\",\r\n                                                                                                beneGesseritOperative = \"Bene Gesserit Operative\",\r\n                                                                                                maulaPistol = \"Maula Pistol\",\r\n                                                                                                thumper = \"thumper\",\r\n                                                                                                nothernWatermaster = \"Nothern Watermaster\",\r\n                                                                                                covertOperation = \"Covert Operation\",\r\n                                                                                                doubleAgent = \"Double Agent\",\r\n                                                                                                guildEnvoy = \"Guild Envoy\",\r\n                                                                                                rebelSupplier = \"Rebel Supplier\",\r\n                                                                                                calculusOfPower = \"Calculus of Power\",\r\n                                                                                                guildSpy = \"Guild Spy\",\r\n                                                                                                dangerousRhetoric = \"Dangerous Rhetoric\",\r\n                                                                                                branchingPath = \"Branching Path\",\r\n                                                                                                ecologicalTestingStation = \"Ecological Testing Station\",\r\n                                                                                                theBeastSpoils = \"The Beast Spoils\",\r\n                                                                                                smugglerHaven = \"Smuggler Haven\",\r\n                                                                                                shishakli = \"Shishakli\",\r\n                                                                                                paracompass = \"Paracompass\",\r\n                                                                                                sardaukarCoordination = \"Sardaukar Coordination\",\r\n                                                                                                truthtrance = \"Truthtrance\",\r\n                                                                                                publicSpectable = \"Public Spectable\",\r\n                                                                                                southernElders = \"Southern Elders\",\r\n                                                                                                treadInDarkness = \"Tread in Darkness\",\r\n                                                                                                spacingGuildFavor = \"Spacing Guild Favor\",\r\n                                                                                                capturedMentat = \"Captured Mentat\",\r\n                                                                                                subversiveAdvisor = \"Subversive Advisor\",\r\n                                                                                                leadership = \"Leadership\",\r\n                                                                                                inHighPlaces = \"In High Places\",\r\n                                                                                                strikeFleet = \"Strike Fleet\",\r\n                                                                                                trecherousManeuver = \"Trecherous Maneuver\",\r\n                                                                                                chaniCleverTactician = \"Chani Clever Tactician\",\r\n                                                                                                junctionHeadquarters = \"Junction Headquarters\",\r\n                                                                                                corrinthCity = \"Corrinth City\",\r\n                                                                                                stilgarTheDevoted = \"Stilgar the Devoted\",\r\n                                                                                                desertPower = \"Desert Power\",\r\n                                                                                                arrakisRevolt = \"Arrakis Revolt\",\r\n                                                                                                priceIsNoObject = \"Price is no Object\",\r\n                                                                                                longLiveTheFighters = \"Long Live the Fighters\",\r\n                                                                                                overthrow = \"Overthrow\",\r\n                                                                                                steersman = \"Steersman\",\r\n                                                                                                cargoRunner = \"CargoRunner\",\r\n                                                                                                deliveryAgreement = \"Delivery Agreement\",\r\n                                                                                                priorityContracts = \"Priority Contracts\",\r\n                                                                                                interstellarTrade = \"Interstellar Trade\",\r\n                                                                                                prepareTheWay = \"Prepare the Way\",\r\n                                                                                                theSpiceMustFlow = \"The Spice must Flow\",\r\n                                                                                                -- bloodlines imperium cards\r\n                                                                                                bl_Bombast = \"Bombast\",\r\n                                                                                                bl_Sandwalk = \"Sandwalk\",\r\n                                                                                                bl_DisruptionTactics = \"Disruption Tactics\",\r\n                                                                                                bl_UrgentShigawire = \"Urgent Shigawire\",\r\n                                                                                                bl_EliminateAllies = \"Eliminate Allies\",\r\n                                                                                                bl_DeliverLogistics = \"Deliver Logistics\",\r\n                                                                                                bl_CommandCenter = \"Command Center\",\r\n                                                                                                bl_EngineeredMiracle = \"Engineered Miracle\",\r\n                                                                                                bl_IBelieve = \"I Believe\",\r\n                                                                                                bl_LitanyAgainstFear = \"Litany Against Fear\",\r\n                                                                                                bl_EliteForces = \"Elite Forces\",\r\n                                                                                                bl_ArrakisObserver = \"Arrakis Observer\",\r\n                                                                                                bl_IntelligenceTraining = \"Intelligence Training\",\r\n                                                                                                bl_RuthlessLeadership = \"Ruthless Leadership\",\r\n                                                                                                bl_FremenWarName = \"Fremen War Name\",\r\n                                                                                                bl_SardaukarStandard = \"Sardaukar Standard\",\r\n                                                                                                bl_ShroudedCounsel = \"Shrouded Counsel\",\r\n                                                                                                bl_CorruptBureaucrat = \"Corrupt Bureaucrat\",\r\n                                                                                                bl_IxianAmbassador = \"Ixian Ambassador\",\r\n                                                                                                bl_QuashRebellion = \"Quash Rebellion\",\r\n                                                                                                bl_SouthernFaith = \"Southern Faith\",\r\n                                                                                                bl_HolyWar = \"Holy War\",\r\n                                                                                                bl_MercantileAffairs = \"Mercantile Affairs\",\r\n                                                                                                bl_PointingTheWay = \"Pointing The Way\",\r\n                                                                                                bl_ChoamDemands = \"Chaom Demands\",\r\n                                                                                                bl_ImperialThroneship = \"Imperial Throneship\",\r\n                                                                                                bl_PossibleFutures = \"Possible Futures\",\r\n\r\n                                                                                                emperorConvincingArgument = \"Convincing Argument\",\r\n                                                                                                emperorCorrinoMight = \"Corrino Might\",\r\n                                                                                                emperorCriticalShipments = \"Critical Shipments\",\r\n                                                                                                emperorDemandResults = \"Demand Results\",\r\n                                                                                                emperorDevastatingAssault = \"Devastating Assault\",\r\n                                                                                                emperorImperialOrnithopter = \"Imperial Ornithopter\",\r\n                                                                                                emperorSignetRing = \"Signet Ring\",\r\n                                                                                                emperorSeekAllies = \"Seek Allies\",\r\n                                                                                                emperorImperialTent = \"Imperial Tent\",\r\n\r\n                                                                                                muadDibCommandRespect = \"Command Respect\",\r\n                                                                                                muadDibConvincingArgument = \"Convincing Argument\",\r\n                                                                                                muadDibDemandAttention = \"Demand Attention\",\r\n                                                                                                muadDibDesertCall = \"Desert Call\",\r\n                                                                                                muadDibLimitedLandsraadAccess = \"Limited Landsraad Access\",\r\n                                                                                                muadDibSeekAllies = \"Seek Allies\",\r\n                                                                                                muadDibUsul = \"Usul\",\r\n                                                                                                muadDibThreatenSpiceProduction = \"Threaten Spice Production\",\r\n                                                                                                muadDibSignetRing = \"Signet Ring\",\r\n\r\n                                                                                                bl_Bombast = \"Bombast\",\r\n                                                                                                bl_Sandwalk = \"Sandwalk\",\r\n                                                                                                bl_DisruptionTactics = \"Disruption Tactics\",\r\n                                                                                                bl_UrgentShigawire = \"Urgent Shigawire\",\r\n                                                                                                bl_EliminateAllies = \"Eliminate Allies\",\r\n                                                                                                bl_DeliverLogistics = \"Deliver Logistics\",\r\n                                                                                                bl_CommandCenter = \"Command Center\",\r\n                                                                                                bl_EngineeredMiracle = \"Engineered Miracle\",\r\n                                                                                                bl_IBelieve = \"I Believe\",\r\n                                                                                                bl_LitanyAgainstFear = \"Litany Against Fear\",\r\n                                                                                                bl_EliteForces = \"Elite Forces\",\r\n                                                                                                bl_ArrakisObserver = \"Arrakis Observer\",\r\n                                                                                                bl_IntelligenceTraining = \"Intelligence Training\",\r\n                                                                                                bl_RuthlessLeadership = \"Ruthless Leadership\",\r\n                                                                                                bl_FremenWarName = \"Fremen War Name\",\r\n                                                                                                bl_SardaukarStandard = \"Sardaukar Standard\",\r\n                                                                                                bl_ShroudedCounsel = \"Shrouded Counsel\",\r\n                                                                                                bl_CorruptBureaucrat = \"Corrupt Bureaucrat\",\r\n                                                                                                bl_IxianAmbassador = \"Ixian Ambassador\",\r\n                                                                                                bl_QuashRebellion = \"Quash Rebellion\",\r\n                                                                                                bl_SouthernFaith = \"Southern Faith\",\r\n                                                                                                bl_HolyWar = \"Holy War\",\r\n                                                                                                bl_MercantileAffairs = \"Mercantile Affairs\",\r\n                                                                                                bl_PointingTheWay = \"Pointing The Way\",\r\n                                                                                                bl_ChoamDemands = \"Chaom Demands\",\r\n                                                                                                bl_ImperialThroneship = \"Imperial Throneship\",\r\n                                                                                                bl_PossibleFutures = \"Possible Futures\",\r\n\r\n                                                                                                -- Intrigue\r\n                                                                                                bribery = \"Bribery\",\r\n                                                                                                refocus = \"Refocus\",\r\n                                                                                                ambush = \"Ambush\",\r\n                                                                                                alliedArmada = \"Allied Armada\",\r\n                                                                                                favoredSubject = \"Favored Subject\",\r\n                                                                                                demandRespect = \"Demand Respect\",\r\n                                                                                                poisonSnooper = \"PoisonS nooper\",\r\n                                                                                                guildAuthorization = \"Guild Authorization\",\r\n                                                                                                dispatchAnEnvoy = \"Dispatch an Envoy\",\r\n                                                                                                infiltrate = \"Infiltrate\",\r\n                                                                                                knowTheirWays = \"Know their Ways\",\r\n                                                                                                masterTactician = \"Master Tactician\",\r\n                                                                                                plansWithinPlans = \"Plans within Plans\",\r\n                                                                                                privateArmy = \"Private Army\",\r\n                                                                                                doubleCross = \"Double Cross\",\r\n                                                                                                councilorsDispensation = \"Councilors Dispensation\",\r\n                                                                                                cornerTheMarket = \"Corner the Market\",\r\n                                                                                                charisma = \"Charisma\",\r\n                                                                                                calculatedHire = \"Calculated Hire\",\r\n                                                                                                choamShares = \"CHOAM Shares\",\r\n                                                                                                bypassProtocol = \"Bypass Protocol\",\r\n                                                                                                recruitmentMission = \"Recruitment Mission\",\r\n                                                                                                reinforcements = \"Reinforcements\",\r\n                                                                                                binduSuspension = \"Bindu Suspension\",\r\n                                                                                                secretOfTheSisterhood = \"Secret of the Sisterhood\",\r\n                                                                                                rapidMobilization = \"Rapid Mobilization\",\r\n                                                                                                stagedIncident = \"Staged Incident\",\r\n                                                                                                theSleeperMustAwaken = \"The Sleeper must Awaken\",\r\n                                                                                                tiebreaker = \"Tiebreaker\",\r\n                                                                                                toTheVictor = \"To the Victor\",\r\n                                                                                                waterPeddlersUnion = \"Water Peddlers Union\",\r\n                                                                                                windfall = \"Windfall\",\r\n                                                                                                waterOfLife = \"Water of Life\",\r\n                                                                                                urgentMission = \"Urgent Mission\",\r\n                                                                                                diversion = \"Diversion\",\r\n                                                                                                warChest = \"WarChest\",\r\n                                                                                                advancedWeaponry = \"Advanced Weaponry\",\r\n                                                                                                secretForces = \"Secret Forces\",\r\n                                                                                                grandConspiracy = \"Grand Conspiracy\",\r\n                                                                                                cull = \"Cull\",\r\n                                                                                                strategicPush = \"Strategic Push\",\r\n                                                                                                blackmail = \"Blackmail\",\r\n                                                                                                machineCulture = \"Machine Culture\",\r\n                                                                                                cannonTurrets = \"Cannon Turrets\",\r\n                                                                                                expedite = \"Expedite\",\r\n                                                                                                ixianProbe = \"Ixian Probe\",\r\n                                                                                                secondWave = \"Second Wave\",\r\n                                                                                                glimpseThePath = \"Glimpse the Path\",\r\n                                                                                                finesse = \"Finesse\",\r\n                                                                                                strongarm = \"Strongarm\",\r\n                                                                                                quidProQuo = \"Quid Pro Quo\",\r\n                                                                                                breakthrough = \"Breakthrough\",\r\n                                                                                                counterattack = \"Counterattack\",\r\n                                                                                                disguisedBureaucrat = \"Disguised Bureaucrat\",\r\n                                                                                                economicPositioning = \"Economic Positioning\",\r\n                                                                                                gruesomeSacrifice = \"Gruesome Sacrifice\",\r\n                                                                                                harvestCells = \"Harvest Cells\",\r\n                                                                                                illicitDealings = \"Illicit Dealings\",\r\n                                                                                                shadowyBargain = \"Shadowy Bargain\",\r\n                                                                                                studyMelange = \"Study Melange\",\r\n                                                                                                tleilaxuPuppet = \"Tleilaxu Puppet\",\r\n                                                                                                viciousTalents = \"Vicious Talents\",\r\n\r\n                                                                                                sietchRitual = \"Sietch Ritual\",\r\n                                                                                                mercenaries = \"Mercenaries\",\r\n                                                                                                councilorAmbition = \"Councilor Ambition\",\r\n                                                                                                strategicStockpiling = \"Strategic Stockpiling\",\r\n                                                                                                detonation = \"Detonation\",\r\n                                                                                                departForArrakis = \"Depart for Arrakis\",\r\n                                                                                                cunning = \"Cunning\",\r\n                                                                                                opportunism = \"Opportunism\",\r\n                                                                                                changeAllegiances = \"Change Allegiances\",\r\n                                                                                                specialMission = \"Special Mission\",\r\n                                                                                                unexpectedAllies = \"Unexpected Allies\",\r\n                                                                                                callToArms = \"Call to Arms\",\r\n                                                                                                buyAccess = \"Buy Access\",\r\n                                                                                                imperiumPolitics = \"Imperium Politics\",\r\n                                                                                                shaddamFavor = \"Shaddam Favor\",\r\n                                                                                                intelligenceReport = \"Intelligence Report\",\r\n                                                                                                manipulate = \"Manipulate\",\r\n                                                                                                distraction = \"Distraction\",\r\n                                                                                                marketOpportunity = \"Market Opportunity\",\r\n                                                                                                goToGround = \"Go to Ground\",\r\n                                                                                                contingencyPlan = \"Contingency Plan\",\r\n                                                                                                inspireAwe = \"Inspire Awe\",\r\n                                                                                                findWeakness = \"Find Weakness\",\r\n                                                                                                spiceIsPower = \"Spice is Power\",\r\n                                                                                                devour = \"Devour\",\r\n                                                                                                impress = \"Impress\",\r\n                                                                                                springTheTrap = \"Spring the Trap\",\r\n                                                                                                weirdingCombat = \"Weirding Combat\",\r\n                                                                                                tacticalOption = \"Tactical Option\",\r\n                                                                                                questionableMethods = \"Questionable Methods\",\r\n                                                                                                desertMouse = \"Desert Mouse\",\r\n                                                                                                ornithopter = \"Ornithopter\",\r\n                                                                                                --crysknife = \"Crysknife\",\r\n                                                                                                joker = \"Joker\",\r\n                                                                                                shadowAlliance = \"Shadow Alliance\",\r\n                                                                                                secureSpiceTrade = \"Secure Spice Trade\",\r\n                                                                                                -- bloodlines intrigues\r\n                                                                                                bl_AdaptiveTactics = \"Adaptive Tactics\",\r\n                                                                                                bl_DesertSupport = \"Desert Support\",\r\n                                                                                                bl_EmperorsInvitation = \"Emperor's Invitation\",\r\n                                                                                                bl_HonorGuard = \"Honor Guard\",\r\n                                                                                                bl_ReturnTheFavor = \"Return The Favor\",\r\n                                                                                                bl_SacredPools = \"Sacred Pools\",\r\n                                                                                                bl_SeizeProduction = \"Seize Production\",\r\n                                                                                                bl_TheStrongSurvive = \"The Strong Survive\",\r\n                                                                                                bl_TenuousBond = \"Tenuous Bond\",\r\n                                                                                                bl_WithdrawalAgreement = \"Withdrawal Agreement\",\r\n                                                                                                bl_FalseOrders = \"False Orders\",\r\n                                                                                                bl_GraspArrakis = \"Grasp Arrakis\",\r\n                                                                                                bl_InsiderInformation = \"Insider Information\",\r\n                                                                                                bl_RipplesInTheSand = \"Ripples in the Sand\",\r\n                                                                                                bl_SleeperUnit = \"Sleeper Unit\",\r\n                                                                                                bl_CoerciveNegotiation = \"Coercive Negotiation\",\r\n                                                                                                bl_BattlefieldResearch = \"Battlefield Research\",\r\n                                                                                                bl_RapidEngineering = \"Rapid Engineering\",\r\n                                                                                                -- bloodlines piter twisted intrigues\r\n                                                                                                bl_Piter_Withdrawn = \"Withdrawn\",\r\n                                                                                                bl_Piter_Unnatural = \"Unnatural\",\r\n                                                                                                bl_Piter_Ambitious = \"Ambitious\",\r\n                                                                                                bl_Piter_Resourceful = \"Resourceful\",\r\n                                                                                                bl_Piter_Shrewd = \"Shrewd\",\r\n                                                                                                bl_Piter_Sinister = \"Sinister\",\r\n                                                                                                bl_Piter_Sadistic = \"Sadistic\",\r\n                                                                                                bl_Piter_Discerning = \"Discerning\",\r\n                                                                                                bl_Piter_Devious = \"Devious\",\r\n                                                                                                bl_Piter_Controlled = \"Controlled\",\r\n                                                                                                bl_Piter_Calculating = \"Calculating\",\r\n                                                                                                bl_Piter_Insidious = \"Insidious\",\r\n\r\n                                                                                                -- Conflicts\r\n                                                                                                skirmishA = \"Skirmish\",\r\n                                                                                                skirmishB = \"Skirmish\",\r\n                                                                                                skirmishC = \"Skirmish\",\r\n                                                                                                -- bloodlines conflicts\r\n                                                                                                bl_Skirmish = \"Skirmish\",\r\n                                                                                                bl_StormsInTheSouth = \"Storms in the South\",\r\n                                                                                                choamSecurity = \"CHOAM Security\",\r\n                                                                                                spiceFreighters = \"Spice Freighters\",\r\n                                                                                                siegeOfArrakeen = \"Siege of Arrakeen\",\r\n                                                                                                seizeSpiceRefinery = \"Seize Spice Refinery\",\r\n                                                                                                testOfLoyalty = \"Test of Loyalty\",\r\n                                                                                                shadowContest = \"Shadow Contest\",\r\n                                                                                                secureImperialBasin = \"Secure Imperial Basin\",\r\n                                                                                                protectTheSietches = \"Protect the Sietches\",\r\n                                                                                                tradeDispute = \"Trade Dispute\",\r\n                                                                                                economicSupremacy = \"Economic Supremacy\",\r\n                                                                                                propaganda = \"Propaganda\",\r\n                                                                                                battleForImperialBasin = \"Battle for Imperial Basin\",\r\n                                                                                                battleForArrakeen = \"Battle for Arrakeen\",\r\n                                                                                                battleForSpiceRefinery = \"Battle for Spice Refinery\",\r\n\r\n                                                                                                -- Techs\r\n                                                                                                spaceport = \"Spaceport\",\r\n                                                                                                restrictedOrdnance = \"Restricted Ordnance\",\r\n                                                                                                artillery = \"Artillery\",\r\n                                                                                                disposalFacility = \"Disposal Facility\",\r\n                                                                                                holoprojectors = \"Holoprojectors\",\r\n                                                                                                minimicFilm = \"Minimic Film\",\r\n                                                                                                windtraps = \"Windtraps\",\r\n                                                                                                detonationDevices = \"Detonation Devices\",\r\n                                                                                                memocorders = \"Memocorders\",\r\n                                                                                                flagship = \"Flagship\",\r\n                                                                                                shuttleFleet = \"Shuttle Fleet\",\r\n                                                                                                spySatellites = \"Spy Satellites\",\r\n                                                                                                chaumurky = \"Chaumurky\",\r\n                                                                                                sonicSnoopers = \"Sonic Snoopers\",\r\n                                                                                                trainingDrones = \"Training Drones\",\r\n                                                                                                troopTransports = \"Troop Transports\",\r\n                                                                                                holtzmanEngine = \"Holtzman Engine\",\r\n                                                                                                invasionShips = \"Invasion Ships\",\r\n                                                                                                -- bloodlines techs\r\n                                                                                                bl_TrainingDepot = \"Training Depot\",\r\n                                                                                                bl_GeneLockedVault = \"Gene-Locked Vault\",\r\n                                                                                                bl_Glowglobes = \"Glowglobes\",\r\n                                                                                                bl_PlanetaryArray = \"Planetary Array\",\r\n                                                                                                bl_ServoReceivers = \"Servo-Receivers\",\r\n                                                                                                bl_DeliveryBay = \"Delivery Bay\",\r\n                                                                                                bl_PlasteelBlades = \"Plasteel Blades\",\r\n                                                                                                bl_SuspensorSuits = \"Suspensor Suits\",\r\n                                                                                                bl_RapidDropships = \"Rapid Dropships\",\r\n                                                                                                bl_SelfDestroyingMessages = \"Self-Destroying Messages\",\r\n                                                                                                bl_NavigationChamber = \"Navigation Chamber\",\r\n                                                                                                bl_SardaukarHighCommand = \"Sardaukar High Command\",\r\n                                                                                                bl_ForbiddenWeapons = \"Forbidden Weapons\",\r\n                                                                                                bl_AdvancedDataAnalysis = \"Advanced Data Analysis\",\r\n                                                                                                bl_OrnithopterFleet = \"Ornithopter Fleet\",\r\n                                                                                                bl_Panopticon = \"Panopticon\",\r\n                                                                                                bl_SpyDrones = \"Spy Drones\",\r\n                                                                                                bl_ChoamTransports = \"Choam Transports\",\r\n\r\n                                                                                                -- Contracts\r\n                                                                                                fulfilledContract = 'Fulfilled contract \"{contract}\".',\r\n                                                                                                harvest3orMore = \"Harvest 3+\",\r\n                                                                                                harvest4orMore = \"Harvest 4+\",\r\n                                                                                                --deliverSupplies = \"Deliver Supplies\",\r\n                                                                                                highCouncilWithSolaris = \"High Council (solaris)\",\r\n                                                                                                highCouncilWithInfluence = \"High Council (influence)\",\r\n                                                                                                acquireTheSpiceMustFlow = 'Acquire \"The Spice Must Flow\"',\r\n                                                                                                -- bloodlines added (solaris) for distinction\r\n                                                                                                immediate = \"Immediate (solaris)\",\r\n                                                                                                --researchStation = \"ResearchStation\",\r\n                                                                                                researchStationWithSpy = \"Research Station (spy)\",\r\n                                                                                                --espionage = \"Espionage\",\r\n                                                                                                heighlinerWithWater = \"Heighliner (water)\",\r\n                                                                                                heighlinerWithTroops = \"Heighliner (troops)\",\r\n                                                                                                sardaukarWithCards = \"Sardaukar (cards)\",\r\n                                                                                                sardaukarWithRecall = \"Sardaukar (recall)\",\r\n                                                                                                spiceRefineryWithCards = \"SpiceRefinery (cards)\",\r\n                                                                                                spiceRefineryWithWater = \"SpiceRefinery (water)\",\r\n                                                                                                arrakeenWithWater = \"Arrakeen (water)\",\r\n                                                                                                arrakeenWithSpy = \"Arrakeen (spy)\",\r\n                                                                                                --dreadnought = \"Dreadnought\",\r\n                                                                                                --techNegotiation = \"Tech Negotiation\",\r\n                                                                                                highCouncilWithTech = \"HighCouncilWithTech\",\r\n                                                                                                --interstellarShipping = \"Interstellar Shipping\",\r\n                                                                                                harvest3orMoreWithTech = \"Harvest 3+ (with tech)\",\r\n                                                                                                harvest4orMoreWithTech = \"Harvest 4+ (with tech)\",\r\n                                                                                                --smuggling = \"Smuggling\",\r\n                                                                                                heighlinerWithTech = \"Heighliner (with tech)\",\r\n                                                                                                espionageWithTech = \"Espionage (with tech)\",\r\n                                                                                                secretsWithTech = \"Secrets (with tech)\",\r\n                                                                                                -- bloodlines contracts\r\n                                                                                                immediateIntrigue = \"Immediate (intrigue)\",\r\n                                                                                                earnAllianceWithTroops = \"Earn Alliance (troops)\",\r\n                                                                                                highCouncilWithRecall = \"High Council (recall)\",\r\n                                                                                                spiceRefineryWithTroops = \"Spice Refinery (troops)\",\r\n                                                                                                harvest3orMoreWithSpy = \"Harvest 3+ (spy)\",\r\n                                                                                                harvest4orMoreWithSpy = \"Harvest 4+ (spy)\",\r\n                                                                                                deliverSuppliesWithSpy = \"Deliver Supplies (spy)\",\r\n                                                                                                secretsWithCard = \"Secrets (card)\",\r\n\r\n                                                                                                -- bloodlines sardaukar commander skills\r\n                                                                                                sc_Canny = \"Canny\",\r\n                                                                                                sc_Charismatic = \"Charismatic\",\r\n                                                                                                sc_Desperate = \"Desperate\",\r\n                                                                                                sc_Driven = \"Driven\",\r\n                                                                                                sc_Fierce = \"Fierce\",\r\n                                                                                                sc_Hardy = \"Hardy\",\r\n                                                                                                sc_Loyal = \"Loyal\",\r\n\r\n                                                                                                -- Specific victory tokens\r\n                                                                                                endgame = \"Endgame Card\",\r\n                                                                                                endgameTech = \"Endgame Tech\",\r\n                                                                                                combat = \"Combat\",\r\n                                                                                                rivalIntrigue = \"Rival - Intrigue\",\r\n                                                                                                rivalSolari = \"Rival - Solari\",\r\n                                                                                                rivalWater = \"Rival - Water\",\r\n                                                                                                rivalSpice = \"Rival - Spice\",\r\n                                                                                                --beneTleilax = \"Bene Tleilax\",\r\n                                                                                                objective = \"Objective\",\r\n                                                                                                priorityContract = \"Priority Contract\",\r\n                                                                                                strategicStockpiling1 = \"Strategic Stockpiling (Spice)\",\r\n                                                                                                strategicStockpiling2 = \"Strategic Stockpiling (Water)\",\r\n                                                                                                --opportunism = \"Opportunism\",\r\n                                                                                                emperorAlliance = \"Emperor Alliance\",\r\n                                                                                                emperorFriendship = \"Emperor Friendship\",\r\n                                                                                                greatHousesAlliance = \"Great Houses Alliance\",\r\n                                                                                                greatHousesFriendship = \"Great Houses Friendship\",\r\n                                                                                                spacingGuildAlliance = \"Spacing Guild Alliance\",\r\n                                                                                                spacingGuildFriendship = \"Spacing Guild Friendship\",\r\n                                                                                                beneGesseritAlliance = \"Bene Gesserit Alliance\",\r\n                                                                                                beneGesseritFriendship = \"Bene Gesserit Friendship\",\r\n                                                                                                fringeWorldsAlliance = \"Fringe Worlds Alliance\",\r\n                                                                                                fringeWorldsFriendship = \"Fringe Worlds Friendship\",\r\n                                                                                                fremenAlliance = \"Fremen Alliance\",\r\n                                                                                                fremenFriendship = \"Fremen Friendship\",\r\n                                                                                                muadDibVictoryPoint = \"Muad'Dib Objective\",\r\n                                                                                                crysknifeVictoryPoint = \"Crysknife Objective\",\r\n                                                                                                ornithopterVictoryPoint = \"Ornithopter Objective\",\r\n\r\n                                                                                                -- Submit game\r\n                                                                                                submitGame = \"Submit Game\",\r\n                                                                                                submitGameRankedGame = \"Ranked game\",\r\n                                                                                                submitGameTournament = \"Tournament game\",\r\n                                                                                                openSubmitScreen = \"Open submit screen\",\r\n                                                                                                placement = \"Ranking\",\r\n                                                                                                victoryPoints = \"VP\",\r\n                                                                                                name = \"Name\",\r\n                                                                                                leaderName = \"Leader Name\",\r\n                                                                                                submitGameMessage = \"Ensure all adjustments are made before submission. Errors in scores cannot be modified after submission!\",\r\n                                                                                                close = \"Close\",\r\n                                                                                                noPlayerMetEndGameCondition = \"No player met the end game condition.\",\r\n                                                                                                gameSubmitted = \"Game submitted to Google Sheets\",\r\n                                                                                                gameAlreadySubmitted = \"Game already submited - Doing nothing\",\r\n                                                                                            }\r\n\r\n                                                                                        end)\r\n                                                                                        __bundle_register(\"LeaderSelection\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                            local Module = require(\"utils.Module\")\r\n                                                                                            local Helper = require(\"utils.Helper\")\r\n                                                                                            local I18N = require(\"utils.I18N\")\r\n                                                                                            local Dialog = require(\"utils.Dialog\")\r\n\r\n                                                                                            local Deck = Module.lazyRequire(\"Deck\")\r\n                                                                                            local TurnControl = Module.lazyRequire(\"TurnControl\")\r\n                                                                                            local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                            local Hagal = Module.lazyRequire(\"Hagal\")\r\n                                                                                            local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                                            local Board = Module.lazyRequire(\"Board\")\r\n\r\n                                                                                            local LeaderSelection = {\r\n                                                                                                dynamicLeaderSelection = {},\r\n                                                                                                leaderSelectionPoolSize = 8,\r\n                                                                                                turnSequence = {},\r\n                                                                                            }\r\n\r\n                                                                                            local Stage = {\r\n                                                                                                INITIALIZED = 1,\r\n                                                                                                STARTED = 2,\r\n                                                                                                DONE = 3,\r\n                                                                                            }\r\n\r\n                                                                                            ---\r\n                                                                                            function LeaderSelection.getSelectionMethods(numberOfPlayers)\r\n                                                                                                local selectionMode = {\r\n                                                                                                    random = \"random\",\r\n                                                                                                    reversePick = \"reversePick\",\r\n                                                                                                    reverseHiddenPick = \"reverseHiddenPick\",\r\n                                                                                                }\r\n                                                                                                if numberOfPlayers == 4 then\r\n                                                                                                    selectionMode.altHiddenPick = \"altHiddenPick\"\r\n                                                                                                end\r\n                                                                                                return selectionMode\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function LeaderSelection.onLoad(state)\r\n                                                                                                Helper.append(LeaderSelection, Helper.resolveGUIDs(false, {\r\n                                                                                                    deckZone = \"23f2b5\",\r\n                                                                                                    secondaryTable = \"662ced\",\r\n                                                                                                }))\r\n\r\n                                                                                                if state.settings then\r\n                                                                                                    LeaderSelection._transientSetUp(\r\n                                                                                                        state.settings,\r\n                                                                                                        state.LeaderSelection.leaderSelectionPoolSize,\r\n                                                                                                        state.LeaderSelection.players,\r\n                                                                                                    state.LeaderSelection.stage)\r\n                                                                                                end\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function LeaderSelection.onSave(state)\r\n                                                                                                state.LeaderSelection = {\r\n                                                                                                    leaderSelectionPoolSize = LeaderSelection.leaderSelectionPoolSize,\r\n                                                                                                    players = LeaderSelection.players,\r\n                                                                                                    stage = LeaderSelection.stage,\r\n                                                                                                }\r\n                                                                                            end\r\n\r\n                                                                                            ---\r\n                                                                                            function LeaderSelection.setUp(settings, activeOpponents)\r\n                                                                                                LeaderSelection.leaderSelectionPoolSize = settings.leaderPoolSize\r\n\r\n                                                                                                local preContinuation = Helper.createContinuation(\"LeaderSelection.setUp.preContinuation\")\r\n                                                                                                if settings.numberOfPlayers > 2 then\r\n                                                                                                    preContinuation.run()\r\n                                                                                                else\r\n                                                                                                    Deck.generateRivalLeaderDeck(\r\n                                                                                                        LeaderSelection.deckZone,\r\n                                                                                                        settings.streamlinedRivals,\r\n                                                                                                        settings.riseOfIx,\r\n                                                                                                        settings.immortality,\r\n                                                                                                        settings.legacy,\r\n                                                                                                        settings.merakon\r\n                                                                                                        ).doAfter(function (deck)\r\n                                                                                                            LeaderSelection._layoutLeaderDeck(deck, 0).doAfter(preContinuation.run)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n\r\n                                                                                                    local postContinuation = Helper.createContinuation(\"LeaderSelection.setUp.postContinuation\")\r\n\r\n                                                                                                    local free = settings.tweakLeaderSelection and not settings.merakon\r\n\r\n                                                                                                    preContinuation.doAfter(function ()\r\n                                                                                                        -- Temporary tag to avoid counting the rival leader cards.\r\n                                                                                                        LeaderSelection.deckZone.addTag(\"Leader\")\r\n                                                                                                        Deck.generateLeaderDeck(\r\n                                                                                                            LeaderSelection.deckZone,\r\n                                                                                                            settings.useContracts,\r\n                                                                                                            settings.riseOfIx,\r\n                                                                                                            settings.immortality,\r\n                                                                                                            settings.legacy,\r\n                                                                                                            settings.merakon,\r\n                                                                                                            free\r\n                                                                                                            ).doAfter(function (deck)\r\n                                                                                                                LeaderSelection.deckZone.removeTag(\"Leader\")\r\n\r\n                                                                                                                local start = settings.numberOfPlayers > 2 and 0 or 12\r\n                                                                                                                LeaderSelection._layoutLeaderDeck(deck, start).doAfter(function ()\r\n                                                                                                                    local testSetUp = type(settings.leaderSelection) == \"table\"\r\n\r\n                                                                                                                    -- The commander's leaders are always the same. It is not enforced\r\n                                                                                                                    -- in a test set up, but it won't work with different leaders.\r\n                                                                                                                    if settings.numberOfPlayers == 6 and not testSetUp then\r\n                                                                                                                        local leaders = LeaderSelection._grabLeaders()\r\n\r\n                                                                                                                        PlayBoard.setLeader(\"White\", leaders[\"muadDib\"])\r\n                                                                                                                        PlayBoard.setLeader(\"Purple\", leaders[\"shaddamCorrino\"])\r\n                                                                                                                    end\r\n\r\n                                                                                                                    -- Give minimal time to the 2 leaders above to exit the zone.\r\n                                                                                                                    Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                                                                        local players = TurnControl.toCanonicallyOrderedPlayerList(activeOpponents)\r\n                                                                                                                        LeaderSelection._transientSetUp(settings, settings.leaderPoolSize, players, Stage.INITIALIZED)\r\n                                                                                                                    end)\r\n\r\n                                                                                                                    postContinuation.run()\r\n                                                                                                                end)\r\n                                                                                                            end)\r\n                                                                                                        end)\r\n\r\n                                                                                                        return postContinuation\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function LeaderSelection._layoutLeaderDeck(deck, start)\r\n                                                                                                        local continuation = Helper.createContinuation(\"LeaderSelection._layoutLeaderDeck\")\r\n                                                                                                        local numberOfLeaders = deck.getQuantity()\r\n                                                                                                        local count = numberOfLeaders\r\n\r\n                                                                                                        LeaderSelection._layoutLeaders(start, numberOfLeaders, function (_, position)\r\n                                                                                                            deck.takeObject({\r\n                                                                                                                position = position,\r\n                                                                                                                flip = true,\r\n                                                                                                                callback_function = function (card)\r\n                                                                                                                    if card.hasTag(\"Unselected\") then\r\n                                                                                                                        card.flip()\r\n                                                                                                                    end\r\n                                                                                                                    count = count - 1\r\n                                                                                                                    if count == 0 then\r\n                                                                                                                        Helper.onceTimeElapsed(1).doAfter(continuation.run)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            })\r\n                                                                                                        end)\r\n\r\n                                                                                                        return continuation\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function LeaderSelection._transientSetUp(settings, leaderSelectionPoolSize, players, stage)\r\n                                                                                                        LeaderSelection.leaderSelectionPoolSize = leaderSelectionPoolSize\r\n                                                                                                        LeaderSelection.players = players\r\n                                                                                                        LeaderSelection.stage = stage\r\n\r\n                                                                                                        if LeaderSelection.stage == Stage.DONE then\r\n                                                                                                            return\r\n                                                                                                        end\r\n\r\n                                                                                                        -- Do it *before* calling _setUpXxx which could trigger an immediate\r\n                                                                                                        -- TurnControl.start and a subsequent \"leaderSelection\" phase event.\r\n                                                                                                        Helper.registerEventListener(\"phaseStart\", function (phase, firstPlayer)\r\n                                                                                                            if phase == \"leaderSelection\" then\r\n                                                                                                                local turnSequence = Helper.shallowCopy(players)\r\n                                                                                                                while turnSequence[1] ~= firstPlayer do\r\n                                                                                                                    Helper.cycle(turnSequence)\r\n                                                                                                                end\r\n\r\n                                                                                                                if settings.leaderSelection == \"reversePick\" then\r\n                                                                                                                    Helper.reverse(turnSequence)\r\n                                                                                                                elseif settings.leaderSelection == \"reverseHiddenPick\" then\r\n                                                                                                                    Helper.reverse(turnSequence)\r\n                                                                                                                elseif settings.leaderSelection == \"altHiddenPick\" then\r\n                                                                                                                    Helper.reverse(turnSequence)\r\n                                                                                                                    if #turnSequence == 4 then\r\n                                                                                                                        Helper.swap(turnSequence, 4, 3)\r\n                                                                                                                    else\r\n                                                                                                                        Helper.dump(\"Skipping 4 <-> 3 for less than 4 players.\")\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                TurnControl.overridePhaseTurnSequence(turnSequence)\r\n                                                                                                            end\r\n                                                                                                        end)\r\n\r\n                                                                                                        local autoStart = not settings.tweakLeaderSelection\r\n                                                                                                        local testSetUp = type(settings.leaderSelection) == \"table\"\r\n\r\n                                                                                                        if testSetUp then\r\n                                                                                                            LeaderSelection._setUpTest(players, settings.leaderSelection)\r\n                                                                                                        elseif settings.leaderSelection == \"random\" then\r\n                                                                                                            LeaderSelection._setUpPicking(autoStart, true, false)\r\n                                                                                                        elseif settings.leaderSelection == \"reversePick\" then\r\n                                                                                                            LeaderSelection._setUpPicking(autoStart, false, false)\r\n                                                                                                        elseif settings.leaderSelection == \"reverseHiddenPick\" then\r\n                                                                                                            LeaderSelection._setUpPicking(autoStart, false, true)\r\n                                                                                                        elseif settings.leaderSelection == \"altHiddenPick\" then\r\n                                                                                                            LeaderSelection._setUpPicking(autoStart, false, true)\r\n                                                                                                        else\r\n                                                                                                            error(settings.leaderSelection)\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function LeaderSelection._layoutLeaders(start, count, callback)\r\n                                                                                                        local h = LeaderSelection.deckZone.getScale().z\r\n                                                                                                        local colCount = 6\r\n                                                                                                        local origin = LeaderSelection.deckZone.getPosition() - Vector((colCount / 2 - 0.5) * 5, 0, h / 2 - 10)\r\n                                                                                                        for i = start, start + count - 1 do\r\n                                                                                                            local x = (i % colCount) * 5\r\n                                                                                                            local y = math.floor(i / colCount) * 4\r\n                                                                                                            callback(i + 1, origin + Vector(x, 1, y))\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    --- Return all the leaders laid out on the secondary table.\r\n                                                                                                    function LeaderSelection._grabLeaders(rival)\r\n                                                                                                        local leaders = {}\r\n                                                                                                        for _, object in ipairs(LeaderSelection.deckZone.getObjects()) do\r\n                                                                                                            if (not rival and object.hasTag(\"Leader\")) or (rival and object.hasTag(\"RivalLeader\")) then\r\n                                                                                                                leaders[Helper.getID(object)] = object\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        return leaders\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function LeaderSelection._setUpTest(players, leaderNames)\r\n                                                                                                        local leaders = LeaderSelection._grabLeaders(false)\r\n                                                                                                        local rivals = LeaderSelection._grabLeaders(true)\r\n\r\n                                                                                                        for _, color in pairs(players) do\r\n                                                                                                            assert(leaderNames[color], \"No leader for color \" .. color)\r\n                                                                                                            assert(#LeaderSelection.deckZone.getObjects(), \"No leader to select\")\r\n                                                                                                            local leader\r\n                                                                                                            if PlayBoard.isRival(color) then\r\n                                                                                                                local leaderName = leaderNames[color]\r\n                                                                                                                leader = rivals[leaderName]\r\n                                                                                                                assert(leader, \"Unknown rival leader \" .. tostring(leaderName))\r\n                                                                                                            else\r\n                                                                                                                local leaderName = leaderNames[color]\r\n                                                                                                                leader = leaders[leaderName]\r\n                                                                                                                assert(leader, \"Unknown leader \" .. tostring(leaderName))\r\n                                                                                                            end\r\n                                                                                                            PlayBoard.setLeader(color, leader)\r\n                                                                                                        end\r\n\r\n                                                                                                        LeaderSelection.stage = Stage.DONE\r\n                                                                                                        TurnControl.start()\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function LeaderSelection._setUpPicking(autoStart, random, hidden)\r\n                                                                                                        local fontColor = Color(223 / 255, 151 / 255, 48 / 255)\r\n\r\n                                                                                                        if LeaderSelection.stage == Stage.INITIALIZED then\r\n                                                                                                            if not random then\r\n                                                                                                                Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 2, {\r\n                                                                                                                    click_function = Helper.registerGlobalCallback(),\r\n                                                                                                                    label = I18N(\"leaderSelectionAdjust\"),\r\n                                                                                                                    position = LeaderSelection.secondaryTable.getPosition() + Vector(0, 1.8, -28),\r\n                                                                                                                    width = 0,\r\n                                                                                                                    height = 0,\r\n                                                                                                                    font_size = 250,\r\n                                                                                                                    font_color = fontColor\r\n                                                                                                                })\r\n\r\n                                                                                                                local adjustValue = function (value)\r\n                                                                                                                    local numberOfLeaders = #Helper.getKeys(LeaderSelection._grabLeaders())\r\n                                                                                                                    local minValue = #LeaderSelection.players\r\n                                                                                                                    local maxValue = numberOfLeaders\r\n                                                                                                                    LeaderSelection.leaderSelectionPoolSize = math.max(minValue, math.min(maxValue, value))\r\n                                                                                                                    LeaderSelection.secondaryTable.editButton({index = 2, label = tostring(LeaderSelection.leaderSelectionPoolSize)})\r\n                                                                                                                end\r\n\r\n                                                                                                                Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 2, {\r\n                                                                                                                    click_function = Helper.registerGlobalCallback(function ()\r\n                                                                                                                        adjustValue(LeaderSelection.leaderSelectionPoolSize - 1)\r\n                                                                                                                    end),\r\n                                                                                                                    label = \"-\",\r\n                                                                                                                    position = LeaderSelection.secondaryTable.getPosition() + Vector(-1, 1.8, -29),\r\n                                                                                                                    width = 400,\r\n                                                                                                                    height = 400,\r\n                                                                                                                    font_size = 600,\r\n                                                                                                                    color = fontColor,\r\n                                                                                                                font_color = {0, 0, 0, 1}})\r\n\r\n                                                                                                                Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 1, {\r\n                                                                                                                    click_function = Helper.registerGlobalCallback(),\r\n                                                                                                                    label = tostring(LeaderSelection.leaderSelectionPoolSize),\r\n                                                                                                                    position = LeaderSelection.secondaryTable.getPosition() + Vector(0, 1.8, -29),\r\n                                                                                                                    width = 0,\r\n                                                                                                                    height = 0,\r\n                                                                                                                    font_size = 400,\r\n                                                                                                                    font_color = fontColor\r\n                                                                                                                })\r\n\r\n                                                                                                                Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 2, {\r\n                                                                                                                    click_function = Helper.registerGlobalCallback(function ()\r\n                                                                                                                        adjustValue(LeaderSelection.leaderSelectionPoolSize + 1)\r\n                                                                                                                    end),\r\n                                                                                                                    label = \"+\",\r\n                                                                                                                    position = LeaderSelection.secondaryTable.getPosition() + Vector(1, 1.8, -29),\r\n                                                                                                                    width = 400,\r\n                                                                                                                    height = 400,\r\n                                                                                                                    font_size = 600,\r\n                                                                                                                    color = fontColor,\r\n                                                                                                                font_color = {0, 0, 0, 1}})\r\n                                                                                                            end\r\n\r\n                                                                                                            Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 2, {\r\n                                                                                                                click_function = Helper.registerGlobalCallback(),\r\n                                                                                                                label = I18N(\"leaderSelectionExclude\"),\r\n                                                                                                                position = LeaderSelection.secondaryTable.getPosition() + Vector(0, 1.8, -30),\r\n                                                                                                                width = 0,\r\n                                                                                                                height = 0,\r\n                                                                                                                font_size = 250,\r\n                                                                                                                font_color = fontColor\r\n                                                                                                            })\r\n\r\n                                                                                                            local start = function ()\r\n                                                                                                                local availableLeaderCount = #LeaderSelection._getVisibleLeaders()\r\n                                                                                                                local requiredLeaderCount = #LeaderSelection.players\r\n                                                                                                                -- In 6P mode, 2 players are automatically assigned.\r\n                                                                                                                if availableLeaderCount >= math.min(4, requiredLeaderCount) then\r\n                                                                                                                    local visibleLeaders = LeaderSelection._prepareVisibleLeaders(hidden)\r\n                                                                                                                    LeaderSelection._createDynamicLeaderSelection(visibleLeaders)\r\n                                                                                                                    Helper.clearButtons(LeaderSelection.secondaryTable)\r\n                                                                                                                    LeaderSelection.stage = Stage.STARTED\r\n                                                                                                                    TurnControl.start()\r\n                                                                                                                else\r\n                                                                                                                    broadcastToAll(I18N(\"notEnoughLeaderLeft\"), \"Red\")\r\n                                                                                                                end\r\n                                                                                                            end\r\n\r\n                                                                                                            if autoStart then\r\n                                                                                                                start()\r\n                                                                                                            else\r\n                                                                                                                Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 2, {\r\n                                                                                                                    click_function = Helper.registerGlobalCallback(start),\r\n                                                                                                                    label = I18N(\"start\"),\r\n                                                                                                                    position = LeaderSelection.secondaryTable.getPosition() + Vector(0, 1.8, -32),\r\n                                                                                                                    width = 2200,\r\n                                                                                                                    height = 600,\r\n                                                                                                                    font_size = 500,\r\n                                                                                                                    color = fontColor,\r\n                                                                                                                font_color = {0, 0, 0, 1}})\r\n                                                                                                            end\r\n                                                                                                        elseif LeaderSelection.stage == Stage.STARTED then\r\n                                                                                                            local visibleLeaders = LeaderSelection._getVisibleLeaders()\r\n                                                                                                            LeaderSelection._createDynamicLeaderSelection(visibleLeaders)\r\n                                                                                                            Helper.clearButtons(LeaderSelection.secondaryTable)\r\n\r\n                                                                                                            Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                                                                for i, color in ipairs(LeaderSelection.players) do\r\n                                                                                                                    local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                                    if leaderCard then\r\n                                                                                                                        LeaderSelection._setOnlyVisibleFrom(leaderCard, color)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        else\r\n                                                                                                            error(\"Unexpected stage: \" .. tostring(LeaderSelection.stage))\r\n                                                                                                        end\r\n\r\n                                                                                                        if random then\r\n                                                                                                            local selectedLeaders = {}\r\n                                                                                                            Helper.registerEventListener(\"playerTurn\", function (phase, color)\r\n                                                                                                                if phase == 'leaderSelection' then\r\n                                                                                                                    local leader = LeaderSelection._pickAnyLeader(color, PlayBoard.isRival(color), selectedLeaders)\r\n                                                                                                                    selectedLeaders[Helper.getID(leader)] = true\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        end\r\n\r\n                                                                                                        if hidden then\r\n                                                                                                            Helper.registerEventListener(\"playerTurn\", function (phase, color)\r\n                                                                                                                if phase == 'leaderSelection' then\r\n                                                                                                                    local remainingLeaders = {}\r\n                                                                                                                    for leader, selected in pairs(LeaderSelection.dynamicLeaderSelection) do\r\n                                                                                                                        if not selected then\r\n                                                                                                                            LeaderSelection._setOnlyVisibleFrom(leader, color)\r\n                                                                                                                            table.insert(remainingLeaders, leader)\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                    Helper.shuffle(remainingLeaders)\r\n                                                                                                                    LeaderSelection._layoutLeaders(0, #remainingLeaders, function (i, position)\r\n                                                                                                                        remainingLeaders[i].setPosition(position)\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        end\r\n\r\n                                                                                                        Helper.registerEventListener(\"phaseEnd\", function (phase)\r\n                                                                                                            if phase == 'leaderSelection' then\r\n                                                                                                                for leader, selected in pairs(LeaderSelection.dynamicLeaderSelection) do\r\n                                                                                                                    if selected then\r\n                                                                                                                        leader.setInvisibleTo({})\r\n                                                                                                                    else\r\n                                                                                                                        LeaderSelection._destructLeader(leader)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                                LeaderSelection.stage = Stage.DONE\r\n                                                                                                            end\r\n\r\n                                                                                                            if phase == 'gameStart' then\r\n                                                                                                                for _, object in ipairs(LeaderSelection.deckZone.getObjects()) do\r\n                                                                                                                    object.destruct()\r\n                                                                                                                end\r\n\r\n                                                                                                                -- bloodlines tuek's sietch destruct\r\n                                                                                                                if PlayBoard.getLeader(\"Red\").name ~= \"bl_Esmar\" and PlayBoard.getLeader(\"Green\").name ~= \"bl_Esmar\" and PlayBoard.getLeader(\"Yellow\").name ~= \"bl_Esmar\" and PlayBoard.getLeader(\"Blue\").name ~= \"bl_Esmar\" then\r\n                                                                                                                    MainBoard.bl_EsmarBoard.destruct()\r\n                                                                                                                    local position = MainBoard.spiceBonusTokens.tueksSietch.getPosition()\r\n                                                                                                                    MainBoard.spiceBonusTokens.tueksSietch.setPosition(position + Vector(0, -2, 0))\r\n                                                                                                                    LeaderSelection.removeSnapPointsWithTagFromObject(getObjectFromGUID(\"483a1a\"), \"spiceTueksSietch\")\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end)\r\n                                                                                                    end\r\n\r\n                                                                                                    -- bloodlines remove tuek's sietch tag from mainboard\r\n                                                                                                    function LeaderSelection.removeSnapPointsWithTagFromObject(obj, tag)\r\n                                                                                                        local snapPoints = obj.getSnapPoints() or {}\r\n                                                                                                        local newSnapPoints = {}\r\n                                                                                                        for _, snapPoint in ipairs(snapPoints) do\r\n                                                                                                            local allow = true\r\n                                                                                                            for _, snapPointTag in ipairs(snapPoint.tags) do\r\n                                                                                                                if tag == snapPointTag then\r\n                                                                                                                    allow = false\r\n                                                                                                                    break\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                            if allow then table.insert(newSnapPoints, snapPoint) end\r\n                                                                                                        end\r\n                                                                                                        obj.setSnapPoints(newSnapPoints)\r\n                                                                                                    end\r\n\r\n                                                                                                    function LeaderSelection._setOnlyVisibleFrom(object, color)\r\n                                                                                                        local excludedColors = {}\r\n                                                                                                        for _, otherColor in ipairs(TurnControl.getPlayers()) do\r\n                                                                                                            if otherColor ~= color then\r\n                                                                                                                table.insert(excludedColors, otherColor)\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        object.setInvisibleTo(excludedColors)\r\n                                                                                                    end\r\n\r\n                                                                                                    function LeaderSelection._getVisibleLeaders()\r\n                                                                                                        local leaders = {}\r\n                                                                                                        for _, object in ipairs(LeaderSelection.deckZone.getObjects()) do\r\n                                                                                                            if object.hasTag(\"Leader\") or object.hasTag(\"RivalLeader\") then\r\n                                                                                                                if not object.is_face_down then\r\n                                                                                                                    table.insert(leaders, object)\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        return leaders\r\n                                                                                                    end\r\n\r\n                                                                                                    function LeaderSelection._prepareVisibleLeaders(hidden)\r\n                                                                                                        local leaders = {}\r\n                                                                                                        for _, object in ipairs(LeaderSelection.deckZone.getObjects()) do\r\n                                                                                                            if object.hasTag(\"Leader\") or object.hasTag(\"RivalLeader\") then\r\n                                                                                                                if object.is_face_down then\r\n                                                                                                                    LeaderSelection._destructLeader(object)\r\n                                                                                                                else\r\n                                                                                                                    table.insert(leaders, object)\r\n                                                                                                                    if hidden then\r\n                                                                                                                        object.setInvisibleTo(TurnControl.getPlayers())\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        return leaders\r\n                                                                                                    end\r\n\r\n                                                                                                    function LeaderSelection._createDynamicLeaderSelection(leaders)\r\n                                                                                                        Helper.shuffle(leaders)\r\n\r\n                                                                                                        local notRivalLeaderCount = 0\r\n                                                                                                        for i, leader in ipairs(leaders) do\r\n                                                                                                            local ok = true\r\n                                                                                                            if not leader.hasTag(\"RivalLeader\") then\r\n                                                                                                                notRivalLeaderCount = notRivalLeaderCount + 1\r\n                                                                                                                ok = notRivalLeaderCount <= LeaderSelection.leaderSelectionPoolSize\r\n                                                                                                            end\r\n                                                                                                            if ok then\r\n                                                                                                                LeaderSelection.dynamicLeaderSelection[leader] = false\r\n                                                                                                                local position = leader.getPosition()\r\n                                                                                                                Helper.createAbsoluteButtonWithRoundness(leader, 1, {\r\n                                                                                                                    click_function = Helper.registerGlobalCallback(function (_, color, _)\r\n                                                                                                                        if color == TurnControl.getCurrentPlayer() then\r\n                                                                                                                            LeaderSelection.claimLeader(color, leader)\r\n                                                                                                                        end\r\n                                                                                                                    end),\r\n                                                                                                                    position = Vector(position.x, 1.9, position.z),\r\n                                                                                                                    width = 600,\r\n                                                                                                                    height = 900,\r\n                                                                                                                    color = Helper.AREA_BUTTON_COLOR,\r\n                                                                                                                    hover_color = {0.7, 0.7, 0.7, 0.7},\r\n                                                                                                                    press_color = {0.5, 1, 0.5, 0.4},\r\n                                                                                                                    font_color = {1, 1, 1, 100},\r\n                                                                                                                tooltip = I18N(\"claimLeader\", {leader = I18N(Helper.getID(leader))})})\r\n                                                                                                            else\r\n                                                                                                                LeaderSelection._destructLeader(leader)\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function LeaderSelection.getSelectableLeaders(rivalLeader)\r\n                                                                                                        local selectableLeaders = {}\r\n                                                                                                        for leader, selected in pairs(LeaderSelection.dynamicLeaderSelection) do\r\n                                                                                                            if not selected then\r\n                                                                                                                if (rivalLeader and leader.hasTag(\"RivalLeader\")) or (not rivalLeader and leader.hasTag(\"Leader\")) then\r\n                                                                                                                    table.insert(selectableLeaders, leader)\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        return selectableLeaders\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function LeaderSelection._pickAnyLeader(color, rivalLeader, excludedLeaders)\r\n                                                                                                        local allLeaders = LeaderSelection.getSelectableLeaders(rivalLeader)\r\n                                                                                                        local leaders = Helper.filter(allLeaders, function (leader)\r\n                                                                                                            return not excludedLeaders[Helper.getID(leader)]\r\n                                                                                                        end)\r\n                                                                                                        if #leaders == 0 then\r\n                                                                                                            leaders = allLeaders\r\n                                                                                                        end\r\n                                                                                                        assert(#leaders > 0, \"No leaders left!\")\r\n                                                                                                        local leader = Helper.pickAny(leaders)\r\n                                                                                                        LeaderSelection.claimLeader(color, leader)\r\n                                                                                                        return leader\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function LeaderSelection.claimLeader(color, leader)\r\n                                                                                                        if PlayBoard.isRival(color) and not leader.hasTag(\"RivalLeader\") then\r\n                                                                                                            Dialog.broadcastToColor(I18N(\"incompatibleRivalLeader\"), color, \"Purple\")\r\n                                                                                                            return\r\n                                                                                                        end\r\n\r\n                                                                                                        if not PlayBoard.isRival(color) and not leader.hasTag(\"Leader\") then\r\n                                                                                                            Dialog.broadcastToColor(I18N(\"incompatibleLeader\"), color, \"Purple\")\r\n                                                                                                            return\r\n                                                                                                        end\r\n\r\n                                                                                                        Helper.clearButtons(leader)\r\n                                                                                                        LeaderSelection.dynamicLeaderSelection[leader] = true\r\n                                                                                                        PlayBoard.setLeader(color, leader).doAfter(TurnControl.endOfTurn)\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function LeaderSelection._destructLeader(leader)\r\n                                                                                                        leader.destruct()\r\n                                                                                                    end\r\n\r\n                                                                                                    return LeaderSelection\r\n\r\n                                                                                                end)\r\n                                                                                                __bundle_register(\"Leader\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                    local Module = require(\"utils.Module\")\r\n                                                                                                    local Helper = require(\"utils.Helper\")\r\n                                                                                                    local I18N = require(\"utils.I18N\")\r\n                                                                                                    local Dialog = require(\"utils.Dialog\")\r\n                                                                                                    local Park = require(\"utils.Park\")\r\n\r\n                                                                                                    local Action = Module.lazyRequire(\"Action\")\r\n                                                                                                    local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                                                    local ImperiumRow = Module.lazyRequire(\"ImperiumRow\")\r\n                                                                                                    local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n                                                                                                    local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                    local Combat = Module.lazyRequire(\"Combat\")\r\n                                                                                                    local ChoamContractMarket = Module.lazyRequire(\"ChoamContractMarket\")\r\n                                                                                                    local Deck = Module.lazyRequire(\"Deck\")\r\n                                                                                                    local TechMarket = Module.lazyRequire(\"TechMarket\")\r\n                                                                                                    local Intrigue = Module.lazyRequire(\"Intrigue\")\r\n\r\n                                                                                                    local Leader = Helper.createClass(Action)\r\n\r\n                                                                                                    ---\r\n                                                                                                    function Leader.newLeader(name)\r\n                                                                                                        local LeaderClass = Leader[name]\r\n                                                                                                        assert(LeaderClass, \"Unknown leader: \" .. tostring(name))\r\n                                                                                                        LeaderClass.name = name\r\n                                                                                                        return Helper.createClassInstance(LeaderClass)\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n\r\n                                                                                                    function Leader._createRightCardButton(anchors, color, name, tooltip, action)\r\n                                                                                                        Leader._createCardButton(anchors, color, name, tooltip, Vector(1.35, 0, -1.3), action)\r\n                                                                                                    end\r\n\r\n                                                                                                    function Leader._createLeftCardButton(anchors, color, name, tooltip, action)\r\n                                                                                                        Leader._createCardButton(anchors, color, name, tooltip, Vector(-1, 0, -1.3), action)\r\n                                                                                                    end\r\n\r\n                                                                                                    function Leader._createCardButton(anchors, color, name, tooltip, offset, action)\r\n                                                                                                        local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                        local origin = leaderCard.getPosition() + offset\r\n                                                                                                        Helper.createTransientAnchor(name, origin + Vector(0, -0.5, 0)).doAfter(function (anchor)\r\n                                                                                                            if anchors then\r\n                                                                                                                table.insert(anchors, anchor)\r\n                                                                                                            end\r\n                                                                                                            local y = (anchor.getPosition() + offset).y\r\n                                                                                                            Helper.createSizedAreaButton(1000, 380, anchor, origin.y + 0.1, tooltip, function (_, otherColor)\r\n                                                                                                                if otherColor == color then\r\n                                                                                                                    action(color, anchor)\r\n                                                                                                                else\r\n                                                                                                                    Dialog.broadcastToColor(I18N(\"noTouch\"), otherColor, \"Purple\")\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n\r\n                                                                                                    Leader.vladimirHarkonnen = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.vladimirHarkonnen.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"SchemeAnchor\", I18N(\"schemeTooltip\"), Leader.vladimirHarkonnen.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Masterstroke\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n\r\n                                                                                                            local position = Player[color].getHandTransform().position\r\n                                                                                                            local tokenBag = getObjectFromGUID('f89231')\r\n                                                                                                            local tokenCount = #tokenBag.getObjects()\r\n                                                                                                            for _ = 1, tokenCount do\r\n                                                                                                                tokenBag.takeObject({\r\n                                                                                                                    position = position,\r\n                                                                                                                    smooth = false, -- To avoid hand interception.\r\n                                                                                                                    callback_function = function (token)\r\n                                                                                                                        token.flip()\r\n                                                                                                                    end\r\n                                                                                                                })\r\n                                                                                                            end\r\n                                                                                                            Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                                                                tokenBag.destruct()\r\n                                                                                                            end)\r\n                                                                                                        end,\r\n\r\n                                                                                                        tearDown = function ()\r\n                                                                                                            local tokenBag = getObjectFromGUID('f89231')\r\n                                                                                                            tokenBag.destruct()\r\n                                                                                                        end,\r\n\r\n                                                                                                        -- Masterstroke\r\n                                                                                                        instruct = function (phase, isActivePlayer)\r\n                                                                                                            if phase == \"gameStart\" then\r\n                                                                                                                if isActivePlayer then\r\n                                                                                                                    return I18N(\"gameStartActiveInstructionForVladimirHarkonnen\")\r\n                                                                                                                else\r\n                                                                                                                    return I18N(\"gameStartInactiveInstructionForVladimirHarkonnen\")\r\n                                                                                                                end\r\n                                                                                                            else\r\n                                                                                                                return Leader.instruct(phase, isActivePlayer)\r\n                                                                                                            end\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Scheme\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.resources(color, \"solari\", -1) and leader.drawIntrigues(color, 1)\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.glossuRabban = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.glossuRabban.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"BrutalityAnchor\", I18N(\"brutalityTooltip\"), Leader.glossuRabban.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Arrakis fiefdom\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            leader.resources(color, \"spice\", 1)\r\n                                                                                                            leader.resources(color, \"solari\", 1)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Brutality\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.troops(color, \"supply\", \"garrison\", InfluenceTrack.hasAnyAlliance(color) and 2 or 1)\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.ilbanRichese = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.ilbanRichese.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"ManufacturingAnchor\", I18N(\"manufacturingTooltip\"), Leader.ilbanRichese.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Manufacturing\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.resources(color, \"solari\", 1)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Ruthless negotiator\r\n                                                                                                        resources = function (color, resourceName, amount)\r\n                                                                                                            local success = Action.resources(color, resourceName, amount)\r\n                                                                                                            if success\r\n                                                                                                                and resourceName == \"solari\"\r\n                                                                                                                and amount < 0\r\n                                                                                                                and Action.checkContext({phase = \"playerTurns\", color = color, space = MainBoard.isLandsraadSpace}) then\r\n                                                                                                                local leader = PlayBoard.getLeader(color)\r\n                                                                                                                leader.drawImperiumCards(color, 1)\r\n                                                                                                            end\r\n                                                                                                            return success\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.helenaRichese = Helper.createClass(Leader, {\r\n\r\n                                                                                                        --- Eyes everywhere\r\n                                                                                                        sendAgent = function (color, spaceName, recallSpy)\r\n                                                                                                            -- We don't care since it's simpler to let the player apply the rules.\r\n                                                                                                            --local parentSpaceName = MainBoard.findParentSpaceName(spaceName)\r\n                                                                                                            --local force = MainBoard.isLandsraadSpace(parentSpaceName) or MainBoard.isSpiceTradeSpace(parentSpaceName)\r\n                                                                                                            return Action.sendAgent(color, spaceName, recallSpy)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Manipulate\r\n                                                                                                        acquireImperiumCard = function (color, indexInRow)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            if Action.checkContext({phase = \"playerTurns\", color = color}) and PlayBoard.couldSendAgentOrReveal(color) then\r\n                                                                                                                return leader.reserveImperiumCard(color, indexInRow)\r\n                                                                                                            else\r\n                                                                                                                return Action.acquireImperiumCard(color, indexInRow)\r\n                                                                                                            end\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Manipulate\r\n                                                                                                        acquireReservedImperiumCard = function (color)\r\n                                                                                                            --- Be nice.\r\n                                                                                                            if false then\r\n                                                                                                                if Action.checkContext({phase = \"playerTurns\", color = color}) and not PlayBoard.couldSendAgentOrReveal(color) then\r\n                                                                                                                    return ImperiumRow.acquireReservedImperiumCard(color)\r\n                                                                                                                else\r\n                                                                                                                    return Action.acquireReservedImperiumCard(color)\r\n                                                                                                                end\r\n                                                                                                            else\r\n                                                                                                                return ImperiumRow.acquireReservedImperiumCard(color)\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.letoAtreides = Helper.createClass(Leader, {\r\n\r\n                                                                                                        --- Landsraad popularity\r\n                                                                                                        bargain = function (color, resourceName, amount)\r\n                                                                                                            local finalAmount = amount\r\n                                                                                                            if resourceName == \"solari\" and amount > 0 and Action.checkContext({phase = \"playerTurns\", color = color, space = MainBoard.isLandsraadSpace}) then\r\n                                                                                                                finalAmount = amount - 1\r\n                                                                                                            end\r\n                                                                                                            return finalAmount\r\n                                                                                                        end,\r\n\r\n                                                                                                        resources = function (color, resourceName, amount)\r\n                                                                                                            return Action.resources(color, resourceName, -Leader.letoAtreides.bargain(color, resourceName, -amount))\r\n                                                                                                        end,\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.paulAtreides = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.paulAtreides.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Prescience\r\n                                                                                                        transientSetUp = function (color, settings)\r\n\r\n                                                                                                            local prescience = function (_)\r\n                                                                                                                local cardOrDeck = PlayBoard.getDrawDeck(color)\r\n                                                                                                                if cardOrDeck == nil then\r\n                                                                                                                    Dialog.broadcastToColor(I18N(\"prescienceVoid\"), color, \"Purple\")\r\n                                                                                                                elseif cardOrDeck.type == \"Card\" then\r\n                                                                                                                    --broadcastToAll(I18N(\"prescienceUsed\"), color)\r\n                                                                                                                    Dialog.broadcastToColor(I18N(\"prescienceManual\"), color, \"Purple\")\r\n                                                                                                                else\r\n                                                                                                                    cardOrDeck.Container.search(color, 1)\r\n                                                                                                                    --broadcastToAll(I18N(\"prescienceUsed\"), color)\r\n                                                                                                                end\r\n                                                                                                            end\r\n\r\n                                                                                                            Leader._createLeftCardButton(nil, color, \"PrescienceAnchor\", I18N(\"prescienceTooltip\"), prescience)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"DisciplineAnchor\", I18N(\"disciplineTooltip\"), Leader.paulAtreides.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Discipline\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.drawImperiumCards(color, 1, true)\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.arianaThorvald = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.arianaThorvald.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Prescience\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"HiddenReservoirAnchor\", I18N(\"hiddenReservoirTooltip\"), Leader.arianaThorvald.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Hidden reservoir\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.resources(color, \"water\", 1)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Spice addict\r\n                                                                                                        sendAgent = function (color, spaceName, recallSpy)\r\n                                                                                                            local oldSpiceStock = PlayBoard.getResource(color, \"spice\"):get()\r\n                                                                                                            local continuation = Action.sendAgent(color, spaceName, recallSpy)\r\n                                                                                                            continuation.doAfter(function ()\r\n                                                                                                                local newSpiceStock = PlayBoard.getResource(color, \"spice\"):get()\r\n                                                                                                                if MainBoard.isDesertSpace(MainBoard.findParentSpaceName(spaceName)) and newSpiceStock > oldSpiceStock then\r\n                                                                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                                                                    leader.resources(color, \"spice\", -1)\r\n                                                                                                                    leader.drawImperiumCards(color, 1)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                            return continuation\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.memnonThorvald = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.memnonThorvald.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"SpiceHoardAnchor\", I18N(\"spiceHoardTooltip\"), Leader.memnonThorvald.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Connections\r\n                                                                                                        sendAgent = function (color, spaceName, recallSpy)\r\n                                                                                                            local continuation = Action.sendAgent(color, spaceName, recallSpy)\r\n                                                                                                            continuation.doAfter(function ()\r\n                                                                                                                if spaceName == \"highCouncil\" then\r\n                                                                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                                                                    leader.influence(color, nil, 1)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                            return continuation\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Spice hoard\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.resources(color, \"spice\", 1)\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.armandEcaz = Helper.createClass(Leader, {\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.ilesaEcaz = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            local content = PlayBoard.getPlayBoard(color).content\r\n                                                                                                            local zone = content.leaderZone\r\n                                                                                                            -- Temporary tag to avoid counting the leader card.\r\n                                                                                                            zone.addTag(\"Imperium\")\r\n                                                                                                            Deck.generateSpecialDeck(zone, \"legacy\", \"foldspace\").doAfter(function (deck)\r\n                                                                                                                local cardCount = Helper.getCardCount(deck)\r\n                                                                                                                Helper.repeatChainedAction(cardCount, function ()\r\n                                                                                                                    local continuation = Helper.createContinuation(\"Leader.ilesaEcaz.transientSetUp\")\r\n                                                                                                                    Helper.moveCardFromZone(zone, content.trash.getPosition() + Vector(0, 1, 0), nil, false, false).doAfter(function (card)\r\n                                                                                                                        Helper.onceSwallowedUp(card).doAfter(continuation.run)\r\n                                                                                                                    end)\r\n                                                                                                                    return continuation\r\n                                                                                                                end).doAfter(function ()\r\n                                                                                                                    zone.removeTag(\"Imperium\")\r\n                                                                                                                end)\r\n                                                                                                            end)\r\n\r\n                                                                                                            Leader.ilesaEcaz.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"GuildContactsAnchor\", I18N(\"guildContactsTooltip\"), Leader.ilesaEcaz.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Guild contacts\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local content = PlayBoard.getPlayBoard(color).content\r\n                                                                                                            local availableFoldspaceCards = Helper.filter(content.trash.getObjects(), function (object)\r\n                                                                                                                return Helper.getID(object) == \"foldspace\"\r\n                                                                                                            end)\r\n\r\n                                                                                                            if #availableFoldspaceCards > 0 then\r\n                                                                                                                local leader = PlayBoard.getLeader(color)\r\n                                                                                                                if leader.resources(color, \"solari\", -1) then\r\n                                                                                                                    PlayBoard.giveCardFromTrash(color, \"foldspace\")\r\n                                                                                                                    return true\r\n                                                                                                                end\r\n                                                                                                            else\r\n                                                                                                                Dialog.broadcastToColor(I18N(\"noAvailableFoldspaceCards\"), color, \"Purple\")\r\n                                                                                                            end\r\n                                                                                                            return false\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- One step ahead\r\n                                                                                                        instruct = function (phase, isActivePlayer)\r\n                                                                                                            if phase == \"roundStart\" then\r\n                                                                                                                if isActivePlayer then\r\n                                                                                                                    return I18N(\"gameStartActiveInstructionForIlesaEcaz\")\r\n                                                                                                                else\r\n                                                                                                                    return I18N(\"gameStartInactiveInstructionForIlesaEcaz\")\r\n                                                                                                                end\r\n                                                                                                            else\r\n                                                                                                                return Leader.instruct(phase, isActivePlayer)\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.rhomburVernius = Helper.createClass(Leader, {\r\n\r\n                                                                                                        --- Heavy lasgun cannons\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n                                                                                                            Combat.setDreadnoughtStrength(color, 4)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Guild contacts\r\n                                                                                                        sendAgent = function (color, spaceName)\r\n                                                                                                            local continuation = Action.sendAgent(color, spaceName)\r\n                                                                                                            continuation.doAfter(function ()\r\n                                                                                                                if PlayBoard.hasPlayedThisTurn(color, \"signetRing\") or PlayBoard.hasPlayedThisTurn(color, \"boundlessAmbition\") then\r\n                                                                                                                    TechMarket.registerAcquireTechOption(color, \"rhomburVerniusTechBuyOption\", \"spice\", 0)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                            return continuation\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.tessiaVernius = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.tessiaVernius.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                            local snapPoints = {}\r\n                                                                                                            for i = 1, 4 do\r\n                                                                                                                local p = leaderCard.getPosition() + Vector(i / 4 - 2, 0, 1.4 - i / 2)\r\n                                                                                                                table.insert(snapPoints, {\r\n                                                                                                                    position = leaderCard.positionToLocal(p),\r\n                                                                                                                tags = {\"Snooper\"}})\r\n                                                                                                            end\r\n                                                                                                            leaderCard.setSnapPoints(snapPoints)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Careful observation\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n                                                                                                            InfluenceTrack.setUpSnoopers()\r\n                                                                                                        end,\r\n\r\n                                                                                                        tearDown = function ()\r\n                                                                                                            InfluenceTrack.tearDownSnoopers()\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Careful observation\r\n                                                                                                        influence = function (color, faction, amount)\r\n                                                                                                            if faction then\r\n                                                                                                                local noFriendshipBefore = not InfluenceTrack.hasFriendship(color, faction)\r\n                                                                                                                local continuation = Action.influence(color, faction, amount)\r\n                                                                                                                continuation.doAfter(function ()\r\n                                                                                                                    local friendshipAfter = InfluenceTrack.hasFriendship(color, faction)\r\n                                                                                                                    if noFriendshipBefore and friendshipAfter then\r\n                                                                                                                        InfluenceTrack.recallSnooper(faction, color)\r\n                                                                                                                    end\r\n                                                                                                                end)\r\n                                                                                                                return continuation\r\n                                                                                                            else\r\n                                                                                                                return Action.influence(color, faction, amount)\r\n                                                                                                            end\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Duplicity (not used)\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            leader.influence(color, nil, -1)\r\n                                                                                                            leader.influence(color, nil, 1)\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.yunaMoritani = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.yunaMoritani.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"FinalDeliveryAnchor\", I18N(\"finalDeliveryTooltip\"), Leader.yunaMoritani.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Smuggling operation\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            leader.resources(color, \"water\", -1)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Smuggling operation\r\n                                                                                                        resources = function (color, resourceName, amount)\r\n                                                                                                            local finalAmount = amount\r\n                                                                                                            if resourceName == \"solari\" and amount > 0 and Action.checkContext({phase = \"playerTurns\", color = color}) then\r\n                                                                                                                finalAmount = amount + 1\r\n                                                                                                            end\r\n                                                                                                            return Action.resources(color, resourceName, finalAmount)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Final delivery\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.resources(color, \"solari\", -7)\r\n                                                                                                            and leader.influence(color, nil, 1)\r\n                                                                                                            and leader.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                                                            and leader.resources(color, \"spice\", 1)\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.hundroMoritani = Helper.createClass(Leader, {\r\n\r\n                                                                                                        --- Intelligence\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n                                                                                                            Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                                                                -- We don't send it to the player hand to avoid any confusion with the epic mode intrigue.\r\n                                                                                                                local emptySlots = Park.findEmptySlots(PlayBoard.getAgentCardPark(color))\r\n                                                                                                                Intrigue.moveIntrigues({emptySlots[1], emptySlots[2]})\r\n                                                                                                            end)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Intelligence\r\n                                                                                                        instruct = function (phase, isActivePlayer)\r\n                                                                                                            if phase == \"gameStart\" then\r\n                                                                                                                if isActivePlayer then\r\n                                                                                                                    return I18N(\"gameStartActiveInstructionForHundroMoritani\")\r\n                                                                                                                else\r\n                                                                                                                    return I18N(\"gameStartInactiveInstructionForHundroMoritani\")\r\n                                                                                                                end\r\n                                                                                                            else\r\n                                                                                                                return Leader.instruct(phase, isActivePlayer)\r\n                                                                                                            end\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Couriers (not used)\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.resources(color, \"spice\", -1) and leader.shipments(color, 1)\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.stabanTuek = Helper.createClass(Leader, {\r\n\r\n                                                                                                        -- Smuggle spice\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.stabanTuek.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Helper.registerEventListener(\"agentSent\", function (otherColor, spaceName)\r\n                                                                                                                local parentSpaceName = MainBoard.findParentSpaceName(spaceName)\r\n                                                                                                                if otherColor ~= color and MainBoard.isDesertSpace(parentSpaceName) and MainBoard.isSpying(parentSpaceName, color) then\r\n                                                                                                                    Action.log(I18N(\"stabanSpiceSmuggling\"), color)\r\n                                                                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                                                                    leader.resources(color, \"spice\", 1)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Limited allies\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n                                                                                                            local drawDeck = PlayBoard.getDrawDeck(color)\r\n                                                                                                            if drawDeck then\r\n                                                                                                                for i, card in ipairs(drawDeck.getObjects()) do\r\n                                                                                                                    if Helper.getID(card) == \"diplomacy\" then\r\n                                                                                                                        drawDeck.takeObject({\r\n                                                                                                                            index = i - 1,\r\n                                                                                                                            flip = true,\r\n                                                                                                                            position = Vector(drawDeck.getPosition() + Vector(0, 1, 0)),\r\n                                                                                                                            callback_function = function (livingCard)\r\n                                                                                                                                PlayBoard.getPlayBoard(color):trash(livingCard)\r\n                                                                                                                            end\r\n                                                                                                                        })\r\n                                                                                                                        break\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.amberMetulli = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.amberMetulli.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"FillCoffersAnchor\", I18N(\"fillCoffersTooltip\"), Leader.amberMetulli.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Fill Coffers\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            if InfluenceTrack.hasAnyAlliance(color) then\r\n                                                                                                                leader.resources(color, \"spice\", 1)\r\n                                                                                                            end\r\n                                                                                                            leader.resources(color, \"solari\", 1)\r\n                                                                                                            return true\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.gurneyHalleck = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.gurneyHalleck.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Always smiling\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Helper.registerEventListener(\"reveal\", function (otherColor)\r\n                                                                                                                if color == otherColor then\r\n                                                                                                                    local threshold = settings.numberOfPlayers == 6 and 10 or 6\r\n                                                                                                                    if Combat.calculateCombatForce(color) >= threshold then\r\n                                                                                                                        Action.log(I18N(\"gurneySmile\"), color)\r\n                                                                                                                        local leader = PlayBoard.getLeader(color)\r\n                                                                                                                        leader.resources(color, \"persuasion\", 1)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"WarmasterAnchor\", I18N(\"warmasterTooltip\"), Leader.gurneyHalleck.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Warmaster\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.margotFenring = Helper.createClass(Leader, {\r\n\r\n                                                                                                        --- Loyalty\r\n                                                                                                        influence = function (color, faction, amount)\r\n                                                                                                            if faction == \"beneGesserit\" then\r\n                                                                                                                local noFriendshipBefore = not InfluenceTrack.hasFriendship(color, faction)\r\n                                                                                                                local continuation = Action.influence(color, faction, amount)\r\n                                                                                                                continuation.doAfter(function (...)\r\n                                                                                                                    local friendshipAfter = InfluenceTrack.hasFriendship(color, faction)\r\n                                                                                                                    if noFriendshipBefore and friendshipAfter then\r\n                                                                                                                        local leader = PlayBoard.getLeader(color)\r\n                                                                                                                        Action.log(I18N(\"loyalty\"), color)\r\n                                                                                                                        leader.resources(color, \"spice\", 2)\r\n                                                                                                                    end\r\n                                                                                                                end)\r\n                                                                                                                return continuation\r\n                                                                                                            else\r\n                                                                                                                return Action.influence(color, faction, amount)\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.irulanCorrino = Helper.createClass(Leader, {\r\n\r\n                                                                                                        --- Imperial Birthright\r\n                                                                                                        influence = function (color, faction, amount)\r\n                                                                                                            if Helper.isElementOf(faction, {\"emperor\", \"greatHouses\"}) then\r\n                                                                                                                local noFriendshipBefore = not InfluenceTrack.hasFriendship(color, faction)\r\n                                                                                                                local continuation = Action.influence(color, faction, amount)\r\n                                                                                                                continuation.doAfter(function ()\r\n                                                                                                                    local friendshipAfter = InfluenceTrack.hasFriendship(color, faction)\r\n                                                                                                                    if noFriendshipBefore and friendshipAfter then\r\n                                                                                                                        local leader = PlayBoard.getLeader(color)\r\n                                                                                                                        Action.log(I18N(\"imperialBirthright\"), color)\r\n                                                                                                                        leader.drawIntrigues(color, 1)\r\n                                                                                                                    end\r\n                                                                                                                end)\r\n                                                                                                                return continuation\r\n                                                                                                            else\r\n                                                                                                                return Action.influence(color, faction, amount)\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.jessica = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.jessica.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Other memories\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n\r\n                                                                                                            Leader.jessica.otherMemoriesPark = MainBoard.createOtherMemoriesPark(color)\r\n\r\n                                                                                                            local otherMemories = function ()\r\n                                                                                                                Leader.jessica.name = \"reverendMotherJessica\"\r\n                                                                                                                leaderCard.setLock(false)\r\n                                                                                                                leaderCard.setGMNotes(Leader.jessica.name)\r\n                                                                                                                leaderCard.setName(I18N(Leader.jessica.name))\r\n                                                                                                                leaderCard.setRotation(Vector(0, 180, 180))\r\n                                                                                                                Helper.onceMotionless(leaderCard).doAfter(function ()\r\n                                                                                                                    leaderCard.setLock(true)\r\n                                                                                                                end)\r\n                                                                                                                broadcastToAll(I18N(\"otherMemoriesUsed\"), color)\r\n                                                                                                                local count = Park.transfert(12, Leader.jessica.otherMemoriesPark, PlayBoard.getSupplyPark(color))\r\n                                                                                                                Action.drawImperiumCards(color, count, true)\r\n                                                                                                            end\r\n\r\n                                                                                                            if leaderCard.getGMNotes() ~= \"reverendMotherJessica\" then\r\n                                                                                                                local anchors = {}\r\n\r\n                                                                                                                Leader._createLeftCardButton(anchors, color, \"OtherMemoriesAnchor\", I18N(\"otherMemoriesTooltip\"), function ()\r\n                                                                                                                    Dialog.showYesOrNoDialog(color, I18N(\"confirmOtherMemories\"), nil, function (confirmed)\r\n                                                                                                                        if confirmed then\r\n                                                                                                                            otherMemories()\r\n                                                                                                                            for _, anchor in ipairs(anchors) do\r\n                                                                                                                                anchor.destruct()\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                    end)\r\n                                                                                                                end)\r\n\r\n                                                                                                                Leader._createRightCardButton(nil, color, \"SpiceAgonyAnchor\", I18N(\"spiceAgonyTooltip\"), Leader.jessica.signetRing)\r\n                                                                                                            else\r\n                                                                                                                Leader._createRightCardButton(nil, color, \"WaterOfLifeAnchor\", I18N(\"waterOfLifeTooltip\"), Leader.jessica.signetRing)\r\n                                                                                                            end\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Spice Agony / Water of Life\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                            if leaderCard.getGMNotes() ~= \"reverendMotherJessica\" then\r\n                                                                                                                if leader.resources(color, \"spice\", -1) then\r\n                                                                                                                    leader.drawIntrigues(color, 1)\r\n                                                                                                                    local count = Park.transfert(1, PlayBoard.getSupplyPark(color), Leader.jessica.otherMemoriesPark)\r\n                                                                                                                    Action.log(I18N(\"transfer\", {\r\n                                                                                                                        count = count,\r\n                                                                                                                        what = I18N.agree(count, \"troop\"),\r\n                                                                                                                        from = I18N(\"supplyPark\"),\r\n                                                                                                                        to = I18N(\"otherMemoriesPark\"),\r\n                                                                                                                    }), color)\r\n                                                                                                                    return true\r\n                                                                                                                else\r\n                                                                                                                    return false\r\n                                                                                                                end\r\n                                                                                                            else\r\n                                                                                                                return leader.resources(color, \"spice\", -1) and leader.resources(color, \"water\", 1)\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.reverendMotherJessica = Leader.jessica\r\n\r\n                                                                                                    Leader.feydRauthaHarkonnen = Helper.createClass(Leader, {\r\n\r\n                                                                                                        positions = {\r\n                                                                                                            Vector(0.1, 0, 0.55),\r\n                                                                                                            Vector(-0.15, 0, 0.4),\r\n                                                                                                            Vector(-0.15, 0, 0.7),\r\n                                                                                                            Vector(-0.4, 0, 0.55),\r\n                                                                                                            Vector(-0.65, 0, 0.4),\r\n                                                                                                            Vector(-0.55, 0, 0.7),\r\n                                                                                                            Vector(-0.75, 0, 0.7),\r\n                                                                                                            Vector(-0.95, 0, 0.55),\r\n                                                                                                        },\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            local snapPoints = {}\r\n                                                                                                            for _, position in ipairs(Leader.feydRauthaHarkonnen.positions) do\r\n                                                                                                                table.insert(snapPoints, {\r\n                                                                                                                    position = position,\r\n                                                                                                                    tags = {\"FeydRauthaTrainingMarker\"},\r\n                                                                                                                })\r\n                                                                                                            end\r\n\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                            leaderCard.setSnapPoints(snapPoints)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Devious training\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                            local marker = getObjectFromGUID(\"505c31\")\r\n                                                                                                            marker.setPosition(leaderCard.positionToWorld(Leader.feydRauthaHarkonnen.positions[1]) + Vector(0, 0.5, 0))\r\n                                                                                                            marker.setInvisibleTo({})\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.shaddamCorrino = Helper.createClass(Leader, {\r\n\r\n                                                                                                        prepare = function (color, settings, asCommander)\r\n                                                                                                            if not asCommander then\r\n                                                                                                                Action.prepare(color, settings)\r\n                                                                                                            else\r\n                                                                                                                Action.resources(color, \"water\", 1)\r\n                                                                                                                if settings.epicMode then\r\n                                                                                                                    Action.drawIntrigues(color, 1)\r\n                                                                                                                end\r\n                                                                                                            end\r\n\r\n                                                                                                            --- Sardaukar commander\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                            local position = leaderCard.getPosition()\r\n                                                                                                            ChoamContractMarket.takeAnySardaukarContract(position + Vector(-1.2, 1, 0))\r\n                                                                                                            ChoamContractMarket.takeAnySardaukarContract(position + Vector(1.2, 1, 0))\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.muadDib = Helper.createClass(Leader, {\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.muadDib.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Unpredictable foe\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Helper.registerEventListener(\"reveal\", function (otherColor)\r\n                                                                                                                -- Should we consider its allies' sandworms too?\r\n                                                                                                                if color == otherColor and PlayBoard.couldSendAgentOrReveal(color) and Combat.hasSandworms(color) then\r\n                                                                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                                                                    Action.log(I18N(\"muadDibBeingUnpredictable\"), color)\r\n                                                                                                                    leader.drawIntrigues(color, 1)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"LeadTheWayAnchor\", I18N(\"leadTheWayTooltip\"), Leader.muadDib.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        --- Lead the Way\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.drawImperiumCards(color, 1, true)\r\n                                                                                                        end,\r\n\r\n                                                                                                        prepare = function (color, settings, asCommander)\r\n                                                                                                            if not asCommander then\r\n                                                                                                                Action.prepare(color, settings)\r\n                                                                                                            else\r\n                                                                                                                Action.resources(color, \"water\", 1)\r\n                                                                                                                if settings.epicMode then\r\n                                                                                                                    Action.drawIntrigues(color, 1)\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    -- bloodlines leaders\r\n                                                                                                    Leader.bl_Chani = Helper.createClass(Leader, {\r\n                                                                                                        positions = {\r\n                                                                                                            Vector(0.79, 0, 0.63),\r\n                                                                                                            Vector(0.61, 0, 0.63),\r\n                                                                                                            Vector(0.44, 0, 0.63),\r\n                                                                                                            Vector(0.27, 0, 0.63),\r\n                                                                                                            Vector(0.10, 0, 0.63),\r\n                                                                                                            Vector(-0.07, 0, 0.63),\r\n                                                                                                            Vector(-0.25, 0, 0.63),\r\n                                                                                                            Vector(-0.43, 0, 0.63),\r\n                                                                                                            Vector(-0.60, 0, 0.63),\r\n                                                                                                            Vector(-0.77, 0, 0.63),\r\n                                                                                                            Vector(-0.94, 0, 0.63),\r\n                                                                                                        },\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            local snapPoints = {}\r\n                                                                                                            for _, position in ipairs(Leader.bl_Chani.positions) do\r\n                                                                                                                table.insert(snapPoints, {\r\n                                                                                                                    position = position,\r\n                                                                                                                    tags = {\"ChaniTrainingMarker\"},\r\n                                                                                                                })\r\n                                                                                                            end\r\n\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                            leaderCard.setSnapPoints(snapPoints)\r\n                                                                                                        end,\r\n\r\n                                                                                                        -- Passive - Tactician - retreat/lose troops in conflict, advance token. reset token after reaching end of the track.\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                            local marker = getObjectFromGUID(\"759054\")\r\n                                                                                                            marker.setPosition(leaderCard.positionToWorld(Leader.bl_Chani.positions[3]) + Vector(0, 0.5, 0))\r\n                                                                                                            marker.setInvisibleTo({})\r\n                                                                                                        end\r\n                                                                                                        -- Signet - Fedaykin Manuever - retreat any number of troops OR 1 water 2 card draw\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.bl_Duncan = Helper.createClass(Leader, {\r\n                                                                                                        -- Passive - Ginaz Swordmaster - swordmaster costs 2 less\r\n                                                                                                        -- DONE in function MainBoard._getSwordmasterCost()\r\n                                                                                                        -- Signet - Into the Fray - send agent into conflict for 2 strength, 3 strength if you have SM\r\n                                                                                                        -- DONE in function Combat.calculateCombatForce\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.bl_Esmar = Helper.createClass(Leader, {\r\n                                                                                                        -- Passive - tuek's sietch - get 1 solari if you go to tuek's sietch\r\n                                                                                                        -- DONE in function MainBoard._goTueksSietch\r\n                                                                                                        -- Passive - tuek's sietch - get 1 intrigue if another player goes to tuek's sietch\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.bl_Esmar.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Helper.registerEventListener(\"agentSent\", function (otherColor, spaceName)\r\n                                                                                                                if otherColor ~= color and spaceName == \"tueksSietch\" then\r\n                                                                                                                    Action.log(I18N(\"tueksSietchPayment\"), color)\r\n                                                                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                                                                    leader.drawIntrigues(color, 1)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        end,\r\n                                                                                                        -- Signet - Smuggle Spice - place 1 bonus spice on Tuek's Sietch OR take 1 bonus spice from Maker spaces\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.bl_Hasimir = Helper.createClass(Leader, {\r\n                                                                                                        -- Passive - Assassin - 1 solari when trashing a card\r\n                                                                                                        -- MANUAL\r\n                                                                                                        -- Signet - Corrino Liaison - trash card in play area or deep cover spy on emperor\r\n                                                                                                        -- MANUAL\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.bl_Kota = Helper.createClass(Leader, {\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.bl_Kota.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"ReverseEngineeringAnchor\", I18N(\"reverseEngineeringTooltip\"), Leader.bl_Kota.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        -- Passive - Secret Project - game start - look at bottom tile of each stack, place one tech face down on leader, -1 spice for that tech\r\n                                                                                                        -- MANUAL\r\n                                                                                                        instruct = function (phase, isActivePlayer)\r\n                                                                                                            if phase == \"gameStart\" then\r\n                                                                                                                if isActivePlayer then\r\n                                                                                                                    return I18N(\"gameStartActiveInstructionForKotaOdax\")\r\n                                                                                                                else\r\n                                                                                                                    return I18N(\"gameStartActiveInstructionForKotaOdax\")\r\n                                                                                                                end\r\n                                                                                                            else\r\n                                                                                                                return Leader.instruct(phase, isActivePlayer)\r\n                                                                                                            end\r\n                                                                                                        end,\r\n\r\n                                                                                                        -- Signet - Reverse Engineering - 1 spice OR trash tech tile --> 1 intrigue 1 card draw\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.resources(color, \"spice\", 1)\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.bl_Liet = Helper.createClass(Leader, {\r\n                                                                                                        -- Passive - Arrakis Planetologist - sietch access without fremen friendship\r\n                                                                                                        -- DONE in function MainBoard._goSietchTabr\r\n                                                                                                        -- Passive - Arrakis Planetologist - no sandworms, get 1 trash 1 spice and 1 intrigue for each worm\r\n                                                                                                        -- DONE in function MainBoard._goHaggaBasin, function MainBoard._goDeepDesert, function PlayBoard:_createButtons()\r\n                                                                                                        -- Signet - Judge of the Change - if agent went to green AND two emperor influence get 1 water, if blue get 1 solari, if yellow get 1 spice\r\n                                                                                                        -- MANUAL\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.bl_Mohiam = Helper.createClass(Leader, {\r\n                                                                                                        -- Passive - Clandestine - played cards have spy access, must recall spy whenever you can\r\n                                                                                                        -- MANUAL\r\n                                                                                                        -- Signet - Listeners - spy on green OR 1 spice for spy anywhere\r\n                                                                                                        -- MANUAL\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.bl_Piter = Helper.createClass(Leader, {\r\n                                                                                                        -- Passive - Twisted Genius - shuffle and place twisted intrigue deck near you\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                            local twistedIntrigueDeck = getObjectFromGUID(\"e13c0b\")\r\n                                                                                                            twistedIntrigueDeck.setPosition(leaderCard.positionToWorld(Vector(0, 0.5, -0.7)))\r\n                                                                                                            Helper.shuffleDeck(twistedIntrigueDeck)\r\n                                                                                                            Helper.onceTimeElapsed(1).doAfter(function ()\r\n                                                                                                                Helper.shuffleDeck(twistedIntrigueDeck)\r\n                                                                                                                Helper.shuffleDeck(twistedIntrigueDeck)\r\n                                                                                                            end)\r\n                                                                                                            twistedIntrigueDeck.setInvisibleTo({})\r\n                                                                                                        end,\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            Leader.bl_Piter.transientSetUp(color, settings)\r\n                                                                                                        end,\r\n\r\n                                                                                                        -- Passive - Twisted Genius - round start - draw 1 twisted intrigue\r\n                                                                                                        -- DONE in function PlayBoard._transientSetUp(settings)\r\n                                                                                                        -- Signet - Harkonnen Advisor - 1 troop, can't deploy this troop into conflict\r\n                                                                                                        transientSetUp = function (color, settings)\r\n                                                                                                            Leader._createRightCardButton(nil, color, \"HarkonnenAdvisorAnchor\", I18N(\"harkonnenAdvisorTooltip\"), Leader.bl_Piter.signetRing)\r\n                                                                                                        end,\r\n\r\n                                                                                                        signetRing = function (color)\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            return leader.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    Leader.bl_Yrkoon = Helper.createClass(Leader, {\r\n                                                                                                        positions = {\r\n                                                                                                            Vector(0.90, 0, -0.80),\r\n                                                                                                            Vector(0.30, 0, -0.80),\r\n                                                                                                            Vector(-0.30, 0, -0.80),\r\n                                                                                                            Vector(-0.90, 0, -0.80),\r\n                                                                                                        },\r\n\r\n                                                                                                        doSetUp = function (color, settings)\r\n                                                                                                            local snapPoints = {}\r\n                                                                                                            for _, position in ipairs(Leader.bl_Yrkoon.positions) do\r\n                                                                                                                table.insert(snapPoints, {\r\n                                                                                                                    position = position,\r\n                                                                                                                })\r\n                                                                                                            end\r\n\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                            leaderCard.setSnapPoints(snapPoints)\r\n                                                                                                        end,\r\n\r\n                                                                                                        -- Passive - Strange Form - start game with 0 water and without signet\r\n                                                                                                        -- Passive - Plot Course - start game with navigation cards\r\n                                                                                                        instruct = function (phase, isActivePlayer)\r\n                                                                                                            if phase == \"gameStart\" then\r\n                                                                                                                if isActivePlayer then\r\n                                                                                                                    return I18N(\"gameStartActiveInstructionForSteersmanYrkoon\")\r\n                                                                                                                else\r\n                                                                                                                    return I18N(\"gameStartActiveInstructionForSteersmanYrkoon\")\r\n                                                                                                                end\r\n                                                                                                            else\r\n                                                                                                                return Leader.instruct(phase, isActivePlayer)\r\n                                                                                                            end\r\n                                                                                                        end,\r\n\r\n                                                                                                        -- Passive - Plot Course - start game with navigation cards\r\n                                                                                                        prepare = function (color, settings)\r\n                                                                                                            Action.prepare(color, settings)\r\n                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)\r\n                                                                                                            local navigationCards = getObjectFromGUID(\"d1fb34\")\r\n                                                                                                            navigationCards.setPosition(leaderCard.positionToWorld(Vector(0, 0.5, -0.7)))\r\n                                                                                                            Helper.shuffleDeck(navigationCards)\r\n                                                                                                            Helper.onceTimeElapsed(1).doAfter(function ()\r\n                                                                                                                Helper.shuffleDeck(navigationCards)\r\n                                                                                                                Helper.shuffleDeck(navigationCards)\r\n                                                                                                            end)\r\n                                                                                                            Helper.onceTimeElapsed(2).doAfter(function ()\r\n                                                                                                                navigationCards.deal(5, color)\r\n                                                                                                            end)\r\n                                                                                                            Helper.onceTimeElapsed(3).doAfter(function ()\r\n                                                                                                                navigationCards.destruct()\r\n                                                                                                            end)\r\n                                                                                                            navigationCards.setInvisibleTo({})\r\n\r\n                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                            leader.resources(color, \"water\", -1)\r\n\r\n                                                                                                            local drawDeck = PlayBoard.getDrawDeck(color)\r\n                                                                                                            if drawDeck then\r\n                                                                                                                for i, card in ipairs(drawDeck.getObjects()) do\r\n                                                                                                                    if Helper.getID(card) == \"signetRing\" then\r\n                                                                                                                        drawDeck.takeObject({\r\n                                                                                                                            index = i - 1,\r\n                                                                                                                            flip = true,\r\n                                                                                                                            position = Vector(drawDeck.getPosition() + Vector(0, 1, 0)),\r\n                                                                                                                            callback_function = function (livingCard)\r\n                                                                                                                                PlayBoard.getPlayBoard(color):trash(livingCard)\r\n                                                                                                                            end\r\n                                                                                                                        })\r\n                                                                                                                        break\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    })\r\n\r\n                                                                                                    return Leader\r\n\r\n                                                                                                end)\r\n                                                                                                __bundle_register(\"Intrigue\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                    local Module = require(\"utils.Module\")\r\n                                                                                                    local Helper = require(\"utils.Helper\")\r\n                                                                                                    local AcquireCard = require(\"utils.AcquireCard\")\r\n                                                                                                    local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                    local Deck = Module.lazyRequire(\"Deck\")\r\n                                                                                                    local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                    local Types = Module.lazyRequire(\"Types\")\r\n                                                                                                    local Action = Module.lazyRequire(\"Action\")\r\n\r\n                                                                                                    local Intrigue = {}\r\n\r\n                                                                                                    ---\r\n                                                                                                    function Intrigue.onLoad(state)\r\n                                                                                                        Helper.append(Intrigue, Helper.resolveGUIDs(false, {\r\n                                                                                                            deckZone = 'a377d8',\r\n                                                                                                            discardZone = '80642b'\r\n                                                                                                        }))\r\n\r\n                                                                                                        if state.settings then\r\n                                                                                                            Intrigue._transientSetUp(state.settings)\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function Intrigue.setUp(settings)\r\n                                                                                                        local continuation = Helper.createContinuation(\"Intrigue.setUp\")\r\n                                                                                                        Deck.generateIntrigueDeck(Intrigue.deckZone, settings.useContracts, settings.riseOfIx, settings.immortality, settings.legacy, settings.merakon).doAfter(function (deck)\r\n                                                                                                            assert(deck, \"No intrigue deck!\")\r\n                                                                                                            Helper.shuffleDeck(deck)\r\n                                                                                                            Intrigue._transientSetUp(settings)\r\n                                                                                                            continuation.run()\r\n                                                                                                        end)\r\n                                                                                                        return continuation\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function Intrigue._transientSetUp(settings)\r\n                                                                                                        AcquireCard.new(Intrigue.deckZone, \"Intrigue\", PlayBoard.withLeader(Intrigue._acquireIntrigueCard), Deck.getAcquireCardDecalUrl(\"generic\"))\r\n                                                                                                        AcquireCard.new(Intrigue.discardZone, \"Intrigue\", nil, Deck.getAcquireCardDecalUrl(\"generic\"))\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function Intrigue._acquireIntrigueCard(acquireCard, color)\r\n                                                                                                        local leader = PlayBoard.getLeader(color)\r\n                                                                                                        leader.drawIntrigues(color, 1)\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function Intrigue.drawIntrigues(color, amount)\r\n                                                                                                        Types.assertIsPositiveInteger(amount)\r\n                                                                                                        local orientedPosition = PlayBoard.getHandOrientedPosition(color)\r\n                                                                                                        Helper.onceTimeElapsed(0.25, amount).doAfter(function ()\r\n                                                                                                            Helper.moveCardFromZone(Intrigue.deckZone, orientedPosition.position, orientedPosition.rotation, false, true)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function Intrigue.stealIntrigues(color, otherColor, amount)\r\n                                                                                                        Types.assertIsPositiveInteger(amount)\r\n                                                                                                        local victimName = PlayBoard.getLeaderName(otherColor)\r\n\r\n                                                                                                        local intrigues = PlayBoard.getIntrigues(otherColor)\r\n                                                                                                        local realAmount = math.min(amount, #intrigues)\r\n\r\n                                                                                                        Helper.shuffle(intrigues)\r\n\r\n                                                                                                        local orientedPosition = PlayBoard.getHandOrientedPosition(color)\r\n                                                                                                        Helper.onceTimeElapsed(0.25, realAmount).doAfter(function () -- Why?\r\n                                                                                                            local card = table.remove(intrigues, 1)\r\n                                                                                                            card.setPosition(orientedPosition.position)\r\n                                                                                                            card.setRotation(orientedPosition.rotation)\r\n                                                                                                            local cardName = I18N(Helper.getID(card))\r\n                                                                                                            Action.secretLog(I18N(\"stealIntrigues\", {victim = victimName, card = cardName}), color)\r\n                                                                                                        end)\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function Intrigue.moveIntrigues(positions)\r\n                                                                                                        for i = 1, #positions do\r\n                                                                                                            Helper.moveCardFromZone(Intrigue.deckZone, positions[i])\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function Intrigue.discard(card)\r\n                                                                                                        Intrigue.discardQueue = Intrigue.discardQueue or Helper.createSpaceQueue()\r\n                                                                                                        Intrigue.discardQueue.submit(function (height)\r\n                                                                                                            -- Not smooth to avoid being recaptured by the hand zone.\r\n                                                                                                            card.setPosition(Intrigue.discardZone.getPosition() + Vector(0, 1 + height * 0.5, 0))\r\n                                                                                                        end)\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function Intrigue.getDiscardedIntrigues()\r\n                                                                                                        local deckOrCard = Helper.getDeckOrCard(Intrigue.discardZone)\r\n                                                                                                        return Helper.getCards(deckOrCard)\r\n                                                                                                    end\r\n\r\n                                                                                                    return Intrigue\r\n\r\n                                                                                                end)\r\n                                                                                                __bundle_register(\"InfluenceTrack\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                    local Module = require(\"utils.Module\")\r\n                                                                                                    local Helper = require(\"utils.Helper\")\r\n                                                                                                    local I18N = require(\"utils.I18N\")\r\n                                                                                                    local Dialog = require(\"utils.Dialog\")\r\n\r\n                                                                                                    local Types = Module.lazyRequire(\"Types\")\r\n                                                                                                    local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                    local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                                                    local TurnControl = Module.lazyRequire(\"TurnControl\")\r\n                                                                                                    local Commander = Module.lazyRequire(\"Commander\")\r\n\r\n                                                                                                    local InfluenceTrack = {\r\n                                                                                                        influenceTokens = {},\r\n                                                                                                        influenceTokenInitialPositions = {},\r\n                                                                                                        allianceTokenInitialPositions = {},\r\n                                                                                                        influenceLevels = {},\r\n                                                                                                        lockedActions = {\r\n                                                                                                            emperor = {},\r\n                                                                                                            spacingGuild = {},\r\n                                                                                                            beneGesserit = {},\r\n                                                                                                            fremen = {},\r\n                                                                                                            greatHouses = {},\r\n                                                                                                            fringeWorlds = {},\r\n                                                                                                        },\r\n                                                                                                    }\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.onLoad(state)\r\n                                                                                                        Helper.append(InfluenceTrack, Helper.resolveGUIDs(false, {\r\n                                                                                                            snoopers = {\r\n                                                                                                                emperor = \"a58ce8\",\r\n                                                                                                                spacingGuild = \"857f74\",\r\n                                                                                                                beneGesserit = \"bed196\",\r\n                                                                                                                fremen = \"b10897\",\r\n                                                                                                            },\r\n                                                                                                            friendshipBags = {\r\n                                                                                                                emperor = \"7007df\",\r\n                                                                                                                spacingGuild = \"af9795\",\r\n                                                                                                                beneGesserit = \"3ebbd7\",\r\n                                                                                                                fremen = \"f5a7af\",\r\n                                                                                                                greatHouses = \"07e49b\",\r\n                                                                                                                fringeWorlds = \"ff38f9\",\r\n                                                                                                            },\r\n                                                                                                        allianceTokens = {}}))\r\n\r\n                                                                                                        for _, bag in pairs(InfluenceTrack.friendshipBags) do\r\n                                                                                                            --bag.interactable = false\r\n                                                                                                        end\r\n\r\n                                                                                                        if state.settings then\r\n                                                                                                            InfluenceTrack._transientSetUp(state.settings, false)\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.setUp(settings)\r\n                                                                                                        InfluenceTrack._transientSetUp(settings, true)\r\n\r\n                                                                                                        if settings.numberOfPlayers < 6 then\r\n                                                                                                            InfluenceTrack.allianceTokens.greatHouses.destruct()\r\n                                                                                                            InfluenceTrack.allianceTokens.fringeWorlds.destruct()\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._transientSetUp(settings, firstTime)\r\n                                                                                                        InfluenceTrack._processSnapPoints(settings, firstTime)\r\n\r\n                                                                                                        for faction, initialPositions in pairs(InfluenceTrack.influenceTokenInitialPositions) do\r\n                                                                                                            local factionLevels = {}\r\n                                                                                                            local meanStartPosition = Vector(0, 0, 0)\r\n                                                                                                            local meanStep = 0\r\n                                                                                                            local n = 0\r\n                                                                                                            for color, position in pairs(initialPositions) do\r\n                                                                                                                local allianceToken = InfluenceTrack.allianceTokenInitialPositions[faction]\r\n                                                                                                                local step = (allianceToken.z - position.z) / 5 -- The token is centered on the 5th level (but you only need to reach the 4th to get it).\r\n                                                                                                                local zero = position.z - step / 2\r\n                                                                                                                factionLevels[color] = {\r\n                                                                                                                    zero = zero,\r\n                                                                                                                    step = step,\r\n                                                                                                                }\r\n                                                                                                                meanStartPosition = meanStartPosition + position\r\n                                                                                                                meanStep = meanStep + step\r\n                                                                                                                n = n + 1\r\n                                                                                                            end\r\n                                                                                                            meanStartPosition:scale(1 / n)\r\n                                                                                                            meanStep = meanStep / n\r\n                                                                                                            for i = 0, 6 do\r\n                                                                                                                local levelPosition = meanStartPosition + Vector(0, 0, meanStep * i)\r\n                                                                                                                levelPosition:setAt('y', 1.5)\r\n                                                                                                                Helper.createTransientAnchor(faction .. \"Rank\" .. tostring(i), levelPosition).doAfter(function (anchor)\r\n                                                                                                                    local actionName = I18N(\"progressOnInfluenceTrack\", {withFaction = I18N(Helper.toCamelCase(\"with\", faction))})\r\n                                                                                                                    Helper.createSizedAreaButton(1000, 400, anchor, 1.75, actionName, PlayBoard.withLeader(function (_, color, _)\r\n                                                                                                                        if not InfluenceTrack.lockedActions[faction][color] then\r\n                                                                                                                            if InfluenceTrack.hasAccess(color, faction) then\r\n                                                                                                                                local rank = InfluenceTrack._getInfluenceTracksRank(faction, color)\r\n                                                                                                                                InfluenceTrack.lockedActions[faction][color] = true\r\n                                                                                                                                PlayBoard.getLeader(color).influence(color, faction, i - rank).doAfter(function ()\r\n                                                                                                                                    InfluenceTrack.lockedActions[faction][color] = false\r\n                                                                                                                                end)\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                    end))\r\n                                                                                                                end)\r\n                                                                                                            end\r\n                                                                                                            InfluenceTrack.influenceLevels[faction] = factionLevels\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._processSnapPoints(settings, firstTime)\r\n                                                                                                        -- TODO Get rid of the *InitialPositions variables\r\n\r\n                                                                                                        local allColors = {\"Green\", \"Yellow\", \"Blue\", \"Red\", \"White\", \"Purple\"}\r\n                                                                                                        local allActiveColors = PlayBoard.getActivePlayBoardColors()\r\n\r\n                                                                                                        local influenceTokens = {}\r\n                                                                                                        for _, object in ipairs(getObjects()) do\r\n                                                                                                            if object.hasTag(\"AllianceToken\") then\r\n                                                                                                                for faction, _ in pairs(InfluenceTrack.lockedActions) do\r\n                                                                                                                    if object.hasTag(faction) then\r\n                                                                                                                        InfluenceTrack.allianceTokens[faction] = object\r\n                                                                                                                        break\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            elseif object.hasTag(\"InfluenceTokens\") then\r\n                                                                                                                for _, color in ipairs(allColors) do\r\n                                                                                                                    if object.hasTag(color) then\r\n                                                                                                                        if Helper.isElementOf(color, allActiveColors) then\r\n                                                                                                                            table.insert(influenceTokens, object)\r\n                                                                                                                        else\r\n                                                                                                                            object.destruct()\r\n                                                                                                                        end\r\n                                                                                                                        break\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        MainBoard.collectSnapPointsOnAllBoards(settings, {\r\n\r\n                                                                                                            faction = function (faction, position)\r\n                                                                                                                InfluenceTrack.influenceTokens[faction] = {}\r\n                                                                                                                InfluenceTrack.influenceTokenInitialPositions[faction] = {}\r\n\r\n                                                                                                                for _, influenceToken in ipairs(influenceTokens) do\r\n                                                                                                                    local tokenPosition = influenceToken.getPosition()\r\n                                                                                                                    local dz = tokenPosition.z - position.z\r\n                                                                                                                    if - 2 < dz and dz < 3.5 then\r\n                                                                                                                        for _, color in ipairs(allColors) do\r\n                                                                                                                            if influenceToken.hasTag(color) then\r\n                                                                                                                                InfluenceTrack.influenceTokens[faction][color] = influenceToken\r\n                                                                                                                                local xOffsets = {\r\n                                                                                                                                    Blue = -0.66,\r\n                                                                                                                                    Red = -0.22,\r\n                                                                                                                                    Green = 0.22,\r\n                                                                                                                                    Yellow = 0.66,\r\n                                                                                                                                    White = 0,\r\n                                                                                                                                    Purple = 0,\r\n                                                                                                                                }\r\n                                                                                                                                local influenceTokenInitialPosition = position + Vector(xOffsets[color], 0, -1.6)\r\n                                                                                                                                -- Snap point height is weird, so we just keep the natural token position.\r\n                                                                                                                                influenceTokenInitialPosition.y = influenceToken.getPosition().y\r\n                                                                                                                                InfluenceTrack.influenceTokenInitialPositions[faction][color] = influenceTokenInitialPosition\r\n                                                                                                                                if firstTime then\r\n                                                                                                                                    influenceToken.setPosition(influenceTokenInitialPosition)\r\n                                                                                                                                    Helper.noPhysicsNorPlay(influenceToken)\r\n                                                                                                                                end\r\n                                                                                                                                break\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                local allianceTokenInitialPosition = position + Vector(-0.02, 0, 2.32)\r\n                                                                                                                InfluenceTrack.allianceTokenInitialPositions[faction] = allianceTokenInitialPosition\r\n                                                                                                                if firstTime then\r\n                                                                                                                    local token = InfluenceTrack.allianceTokens[faction]\r\n                                                                                                                    token.setInvisibleTo({})\r\n                                                                                                                    token.setPositionSmooth(allianceTokenInitialPosition)\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        })\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.setUpSnoopers()\r\n                                                                                                        for faction, snooper in pairs(InfluenceTrack.snoopers) do\r\n                                                                                                            local position = MainBoard.getSnooperTrackPosition(faction)\r\n                                                                                                            snooper.setPositionSmooth(position, false, false)\r\n                                                                                                            snooper.setInvisibleTo({})\r\n                                                                                                            snooper.setRotationSmooth(Vector(0, 90, 0))\r\n                                                                                                            Helper.onceTimeElapsed(3).doAfter(function ()\r\n                                                                                                                snooper.setLock(true)\r\n                                                                                                            end, 3)\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.tearDownSnoopers()\r\n                                                                                                        for _, snooper in pairs(InfluenceTrack.snoopers) do\r\n                                                                                                            snooper.destruct()\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.recallSnooper(faction, color)\r\n\r\n                                                                                                        local foundSnooper\r\n                                                                                                        local snooperRank = 4\r\n                                                                                                        for otherFaction, snooper in pairs(InfluenceTrack.snoopers) do\r\n                                                                                                            local position = MainBoard.getSnooperTrackPosition(otherFaction)\r\n                                                                                                            local distance = (snooper.getPosition() - position):magnitude()\r\n                                                                                                            if distance < 1 then\r\n                                                                                                                if otherFaction == faction then\r\n                                                                                                                    foundSnooper = snooper\r\n                                                                                                                else\r\n                                                                                                                    snooperRank = snooperRank - 1\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        if foundSnooper then\r\n                                                                                                            local p = PlayBoard.findLeaderCard(color).getPosition() + Vector(snooperRank / 4 - 2, 0.5, 1.4 - snooperRank / 2)\r\n                                                                                                            Helper.noPlay(foundSnooper)\r\n                                                                                                            foundSnooper.setPositionSmooth(p)\r\n\r\n                                                                                                            Helper.onceTimeElapsed(1).doAfter(function ()\r\n                                                                                                                local parameters = {withFaction = I18N(Helper.toCamelCase(\"with\", faction))}\r\n                                                                                                                local leader = PlayBoard.getLeader(color)\r\n                                                                                                                if snooperRank == 1 then\r\n                                                                                                                    broadcastToAll(I18N(\"firstSnooperRecall\", parameters), color)\r\n                                                                                                                    Dialog.showInfoDialog(color, I18N(\"firstSnooperRecallEffectInfo\"))\r\n                                                                                                                elseif snooperRank == 2 then\r\n                                                                                                                    broadcastToAll(I18N(\"secondSnooperRecall\", parameters), color)\r\n                                                                                                                    InfluenceTrack._gainAllianceBonus(faction, color)\r\n                                                                                                                elseif snooperRank == 3 then\r\n                                                                                                                    broadcastToAll(I18N(\"thirdSnooperRecall\", parameters), color)\r\n                                                                                                                    leader.influence(color, faction, 1)\r\n                                                                                                                elseif snooperRank == 4 then\r\n                                                                                                                    broadcastToAll(I18N(\"fourthSnooperRecall\", parameters), color)\r\n                                                                                                                    InfluenceTrack._gainAllianceBonus(faction, color)\r\n                                                                                                                    leader.influence(color, faction, 1)\r\n                                                                                                                else\r\n                                                                                                                    assert(false)\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.hasAccess(color, faction)\r\n                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                        Types.assertIsFaction(faction)\r\n                                                                                                        if TurnControl.getPlayerCount() == 6 then\r\n                                                                                                            if faction == \"emperor\" then\r\n                                                                                                                return Commander.isShaddam(color)\r\n                                                                                                            elseif faction == \"fremen\" then\r\n                                                                                                                return Commander.isMuadDib(color)\r\n                                                                                                            else\r\n                                                                                                                return not Commander.isCommander(color)\r\n                                                                                                            end\r\n                                                                                                        else\r\n                                                                                                            return true\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.hasFriendship(color, faction)\r\n                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                        Types.assertIsFaction(faction)\r\n                                                                                                        return InfluenceTrack.getInfluence(faction, color) >= 2\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.getInfluence(faction, color, direct)\r\n                                                                                                        if TurnControl.getPlayerCount() == 6 and not direct then\r\n                                                                                                            if Commander.isCommander(color) then\r\n                                                                                                                local bestInfluence = 0\r\n                                                                                                                for _, otherColor in ipairs(Commander.getAllies(color)) do\r\n                                                                                                                    bestInfluence = math.max(bestInfluence, InfluenceTrack.getInfluence(faction, otherColor))\r\n                                                                                                                end\r\n                                                                                                                if faction == \"emperor\" and Commander.isShaddam(color) then\r\n                                                                                                                    bestInfluence = math.max(bestInfluence, InfluenceTrack._getInfluenceTracksRank(faction, color))\r\n                                                                                                                end\r\n                                                                                                                if faction == \"fremen\" and Commander.isMuadDib(color) then\r\n                                                                                                                    bestInfluence = math.max(bestInfluence, InfluenceTrack._getInfluenceTracksRank(faction, color))\r\n                                                                                                                end\r\n                                                                                                                return bestInfluence\r\n                                                                                                            else\r\n                                                                                                                local finalFaction = faction\r\n                                                                                                                if faction == \"emperor\" then\r\n                                                                                                                    finalFaction = \"greatHouses\"\r\n                                                                                                                elseif faction == \"fremen\" then\r\n                                                                                                                    finalFaction = \"fringeWorlds\"\r\n                                                                                                                end\r\n                                                                                                                return InfluenceTrack._getInfluenceTracksRank(finalFaction, color)\r\n                                                                                                            end\r\n                                                                                                        else\r\n                                                                                                            return InfluenceTrack._getInfluenceTracksRank(faction, color)\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._getInfluenceTracksRank(faction, color)\r\n                                                                                                        local influenceLevels = InfluenceTrack.influenceLevels[faction][color]\r\n                                                                                                        local token = InfluenceTrack.influenceTokens[faction][color]\r\n                                                                                                        if token then\r\n                                                                                                            local position = token.getPosition()\r\n                                                                                                            return math.floor((position.z - influenceLevels.zero) / influenceLevels.step)\r\n                                                                                                        else\r\n                                                                                                            return 0\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._setInfluenceTracksRank(faction, color, change)\r\n                                                                                                        local levels = InfluenceTrack.influenceLevels[faction][color]\r\n                                                                                                        local token = InfluenceTrack.influenceTokens[faction][color]\r\n                                                                                                        local position = token.getPosition()\r\n                                                                                                        position.z = position.z + levels.step * change\r\n                                                                                                        token.setPositionSmooth(position, false, false)\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.change(color, faction, change)\r\n                                                                                                        local finalColor = color\r\n                                                                                                        local finalFaction = faction\r\n                                                                                                        if TurnControl.getPlayerCount() == 6 then\r\n                                                                                                            if Commander.isCommander(color) then\r\n                                                                                                                if not InfluenceTrack.hasAccess(color, faction) then\r\n                                                                                                                    log(\"Influence bonus low level redirection (should not happen)!\")\r\n                                                                                                                    finalColor = Commander.getActivatedAlly(color)\r\n                                                                                                                    if faction == \"emperor\" then\r\n                                                                                                                        finalFaction = \"greatHouses\"\r\n                                                                                                                    elseif faction == \"fremen\" then\r\n                                                                                                                        finalFaction = \"fringeWorlds\"\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            else\r\n                                                                                                                if faction == \"emperor\" then\r\n                                                                                                                    finalFaction = \"greatHouses\"\r\n                                                                                                                elseif faction == \"fremen\" then\r\n                                                                                                                    finalFaction = \"fringeWorlds\"\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        return InfluenceTrack._changeInfluenceTracksRank(finalColor, finalFaction, change)\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._changeInfluenceTracksRank(color, faction, change)\r\n                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                        Types.assertIsFaction(faction)\r\n                                                                                                        Types.assertIsInteger(change)\r\n\r\n                                                                                                        local token = InfluenceTrack.influenceTokens[faction][color]\r\n\r\n                                                                                                        local oldRank = InfluenceTrack._getInfluenceTracksRank(faction, color)\r\n\r\n                                                                                                        local realChange = math.min(math.max(oldRank + change, 0), 6) - oldRank\r\n\r\n                                                                                                        local continuation = Helper.createContinuation(\"InfluenceTrack._changeInfluenceTracksRank\")\r\n\r\n                                                                                                        Helper.repeatMovingAction(token, math.abs(realChange), function (_)\r\n                                                                                                            InfluenceTrack._setInfluenceTracksRank(faction, color, Helper.signum(change))\r\n                                                                                                        end).doAfter(function (_)\r\n                                                                                                            local newRank = InfluenceTrack._getInfluenceTracksRank(faction, color)\r\n                                                                                                            --[[\r\n            Check alliance before friendship (because friendship tokens come\r\n            from a bag which induces a invisible transit with parks, ending in\r\n            2 stacked tokens in the case a player gain 3+ influences on the\r\n            track in a single move).\r\n        ]]\r\n                                                                                                            if oldRank >= 4 or newRank >= 4 then\r\n                                                                                                                InfluenceTrack._challengeAlliance(faction)\r\n                                                                                                            end\r\n                                                                                                            if oldRank < 4 and newRank >= 4 then\r\n                                                                                                                InfluenceTrack._gainAllianceBonus(faction, color)\r\n                                                                                                            end\r\n                                                                                                            if oldRank < 1 and newRank >= 1 then\r\n                                                                                                                InfluenceTrack._gainCommanderBonus(faction, color, 1)\r\n                                                                                                            end\r\n                                                                                                            if oldRank < 2 and newRank >= 2 then\r\n                                                                                                                InfluenceTrack._gainFriendship(faction, color)\r\n                                                                                                            end\r\n                                                                                                            if oldRank >= 2 and newRank < 2 then\r\n                                                                                                                InfluenceTrack._loseFriendship(faction, color)\r\n                                                                                                            end\r\n                                                                                                            if oldRank < 3 and newRank >= 3 then\r\n                                                                                                                InfluenceTrack._gainCommanderBonus(faction, color, 3)\r\n                                                                                                            end\r\n                                                                                                            continuation.run(realChange)\r\n                                                                                                            Helper.emitEvent(\"influence\", faction, color, newRank)\r\n                                                                                                        end)\r\n\r\n                                                                                                        return continuation\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._gainFriendship(faction, color)\r\n                                                                                                        Types.assertIsFaction(faction)\r\n                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                        local friendshipTokenName = faction .. \"Friendship\"\r\n                                                                                                        PlayBoard.getLeader(color).gainVictoryPoint(color, friendshipTokenName, 1)\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._loseFriendship(faction, color)\r\n                                                                                                        Types.assertIsFaction(faction)\r\n                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                        local friendshipTokenName = faction .. \"Friendship\"\r\n                                                                                                        for _, scoreToken in ipairs(PlayBoard.getScoreTokens(color)) do\r\n                                                                                                            if Helper.getID(scoreToken) == friendshipTokenName then\r\n                                                                                                                scoreToken.destruct()\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._challengeAlliance(faction)\r\n                                                                                                        local bestRankedPlayers = {}\r\n                                                                                                        local bestRank = 4\r\n                                                                                                        local allianceOwner\r\n\r\n                                                                                                        for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                            if InfluenceTrack.hasAlliance(color, faction) then\r\n                                                                                                                allianceOwner = color\r\n                                                                                                            end\r\n                                                                                                            local rank = InfluenceTrack.getInfluence(faction, color, true)\r\n                                                                                                            if rank >= bestRank then\r\n                                                                                                                if rank > bestRank then\r\n                                                                                                                    bestRank = rank\r\n                                                                                                                    bestRankedPlayers = {}\r\n                                                                                                                end\r\n                                                                                                                table.insert(bestRankedPlayers, color)\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        if not Helper.tableContains(bestRankedPlayers, allianceOwner) then\r\n                                                                                                            InfluenceTrack._loseAlliance(faction, allianceOwner)\r\n\r\n                                                                                                            if #bestRankedPlayers > 0 then\r\n                                                                                                                if #bestRankedPlayers == 1 then\r\n                                                                                                                    allianceOwner = bestRankedPlayers[1]\r\n                                                                                                                    InfluenceTrack._gainAlliance(faction, allianceOwner)\r\n                                                                                                                else\r\n                                                                                                                    broadcastToAll(tostring(allianceOwner) .. \" must grant alliance to one of \" .. tostring(bestRankedPlayers), \"Pink\") -- FIXME\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.getAllianceCost(color, faction)\r\n                                                                                                        local rank = InfluenceTrack.getInfluence(faction, color, true)\r\n                                                                                                        for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                            if InfluenceTrack.hasAlliance(otherColor, faction) then\r\n                                                                                                                if otherColor == color then\r\n                                                                                                                    return 0\r\n                                                                                                                else\r\n                                                                                                                    local otherRank = InfluenceTrack.getInfluence(faction, otherColor, true)\r\n                                                                                                                    if otherRank == 6 then\r\n                                                                                                                        return - 1\r\n                                                                                                                    else\r\n                                                                                                                        return otherRank - rank + 1\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        return 4 - rank\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.hasAlliance(color, faction)\r\n                                                                                                        local playerVictoryTokens = PlayBoard.getScoreTokens(color)\r\n                                                                                                        for _, victoryToken in ipairs(playerVictoryTokens) do\r\n                                                                                                            if victoryToken == InfluenceTrack.allianceTokens[faction] then\r\n                                                                                                                return true\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        return false\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack.hasAnyAlliance(color)\r\n                                                                                                        for faction, _ in pairs(InfluenceTrack.influenceTokenInitialPositions) do\r\n                                                                                                            if InfluenceTrack.hasAlliance(color, faction) then\r\n                                                                                                                return true\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        return false\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._gainAlliance(faction, color)\r\n                                                                                                        Types.assertIsFaction(faction)\r\n                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                        local token = InfluenceTrack.allianceTokens[faction]\r\n                                                                                                        assert(token)\r\n                                                                                                        PlayBoard.getLeader(color).gainVictoryPoint(color, Helper.getID(token), 1)\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._gainAllianceBonus(faction, color)\r\n                                                                                                        local leader = PlayBoard.getLeader(color)\r\n                                                                                                        if not PlayBoard.isRival(color) then\r\n                                                                                                            if TurnControl.getPlayerCount() == 6 then\r\n                                                                                                                if faction == \"greatHouses\" then\r\n                                                                                                                    leader.troops(color, \"supply\", \"garrison\", 2)\r\n                                                                                                                elseif faction == \"spacingGuild\" then\r\n                                                                                                                    leader.resources(color, \"solari\", 3)\r\n                                                                                                                elseif faction == \"beneGesserit\" then\r\n                                                                                                                    leader.drawIntrigues(color, 1)\r\n                                                                                                                elseif faction == \"fringeWorlds\" then\r\n                                                                                                                    -- 1 spy\r\n                                                                                                                end\r\n                                                                                                            else\r\n                                                                                                                if faction == \"emperor\" then\r\n                                                                                                                    -- 1??spy\r\n                                                                                                                elseif faction == \"spacingGuild\" then\r\n                                                                                                                    leader.resources(color, \"solari\", 3)\r\n                                                                                                                elseif faction == \"beneGesserit\" then\r\n                                                                                                                    leader.drawIntrigues(color, 1)\r\n                                                                                                                elseif faction == \"fremen\" then\r\n                                                                                                                    leader.resources(color, \"water\", 1)\r\n                                                                                                                else\r\n                                                                                                                    error(\"Unknown faction: \" .. tostring(faction))\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._gainCommanderBonus(faction, color, level)\r\n                                                                                                        if TurnControl.getPlayerCount() == 6 then\r\n                                                                                                            if faction == \"emperor\" then\r\n                                                                                                                for _, otherColor in ipairs(Commander.getShaddamTeam()) do\r\n                                                                                                                    if level == 1 then\r\n                                                                                                                        PlayBoard.getLeader(otherColor).resources(otherColor, \"solari\", 1)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            elseif faction == \"fremen\" then\r\n                                                                                                                for _, otherColor in ipairs(Commander.getMuadDibTeam()) do\r\n                                                                                                                    if level == 1 then\r\n                                                                                                                        PlayBoard.getLeader(otherColor).resources(otherColor, \"spice\", 1)\r\n                                                                                                                    elseif level == 3 then\r\n                                                                                                                        PlayBoard.getLeader(otherColor).resources(otherColor, \"water\", 1)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                    end\r\n\r\n                                                                                                    ---\r\n                                                                                                    function InfluenceTrack._loseAlliance(faction, color)\r\n                                                                                                        local position = InfluenceTrack.allianceTokenInitialPositions[faction]\r\n                                                                                                        InfluenceTrack.allianceTokens[faction].setPositionSmooth(position, false, false)\r\n                                                                                                    end\r\n\r\n                                                                                                    function InfluenceTrack.gainVictoryPoint(color, name, count)\r\n                                                                                                        assert(count == 1)\r\n                                                                                                        for _, friendshipTokenBag in pairs(InfluenceTrack.friendshipBags) do\r\n                                                                                                            if Helper.getID(friendshipTokenBag) == name then\r\n                                                                                                                PlayBoard.grantScoreTokenFromBag(color, friendshipTokenBag)\r\n                                                                                                                return true\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        for _, allianceToken in pairs(InfluenceTrack.allianceTokens) do\r\n                                                                                                            if Helper.getID(allianceToken) == name then\r\n                                                                                                                PlayBoard.grantScoreToken(color, allianceToken)\r\n                                                                                                                return true\r\n                                                                                                            end\r\n                                                                                                        end\r\n                                                                                                        return false\r\n                                                                                                    end\r\n\r\n                                                                                                    return InfluenceTrack\r\n\r\n                                                                                                end)\r\n                                                                                                __bundle_register(\"ImperiumRow\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                    local Module = require(\"utils.Module\")\r\n                                                                                                    local Helper = require(\"utils.Helper\")\r\n                                                                                                    local AcquireCard = require(\"utils.AcquireCard\")\r\n                                                                                                    local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                    local Deck = Module.lazyRequire(\"Deck\")\r\n                                                                                                    local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                    local Music = Module.lazyRequire(\"Music\")\r\n                                                                                                    local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n\r\n                                                                                                    local ImperiumRow = {}\r\n\r\n                                                                                                    ---\r\n                                                                                                    function ImperiumRow.onLoad(state)\r\n                                                                                                        if state.settings then\r\n                                                                                                            ImperiumRow.enableWormEatsTheCard = state.settings.wormEatsTheCard\r\n                                                                                                        else\r\n                                                                                                            ImperiumRow.enableWormEatsTheCard = true\r\n                                                                                                        end\r\n                                                                                                        Helper.append(\r\n                                                                                                            ImperiumRow,\r\n                                                                                                            Helper.resolveGUIDs(\r\n                                                                                                                false,\r\n                                                                                                                {\r\n                                                                                                                    deckZone = \"8bd982\",\r\n                                                                                                                    -- FIXME Confusing \"reserve\" wording.\r\n                                                                                                                    reservationSlotZone = \"473cf7\",\r\n                                                                                                                    slotZones = {\r\n                                                                                                                        '3de1d0',\r\n                                                                                                                        '356e2c',\r\n                                                                                                                        '7edbb3',\r\n                                                                                                                        '641974',\r\n                                                                                                                        'c6dbed'\r\n                                                                                                                    }\r\n                                                                                                                }\r\n                                                                                                            )\r\n                                                                                                        )\r\n\r\n                                                                                                            if state.settings then\r\n                                                                                                                ImperiumRow._transientSetUp()\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        ---\r\n                                                                                                        function ImperiumRow.setUp(settings)\r\n                                                                                                            Helper.createButton(\r\n                                                                                                                getObjectFromGUID(\"aaabbb\"),\r\n                                                                                                                {\r\n                                                                                                                    click_function = Helper.registerGlobalCallback(function ()\r\n                                                                                                                        ImperiumRow.replenishAllEmpty()\r\n                                                                                                                    end),\r\n                                                                                                                    label = \"Replenish Imperium\",\r\n                                                                                                                    position = Vector(0, 0, 0),\r\n                                                                                                                    rotation = Vector(0, 180, 0),\r\n                                                                                                                    width = 200,\r\n                                                                                                                    height = 200,\r\n                                                                                                                    scale = Vector(1, 1, 1),\r\n                                                                                                                    font_size = 50,\r\n                                                                                                                    font_color = {1, 1, 1},\r\n                                                                                                                    color = \"Green\"\r\n                                                                                                                }\r\n                                                                                                            )\r\n\r\n                                                                                                            Helper.createButton(\r\n                                                                                                                getObjectFromGUID(\"aaabbb\"),\r\n                                                                                                                {\r\n                                                                                                                    click_function = Helper.registerGlobalCallback(function ()\r\n                                                                                                                        ImperiumRow.yeet()\r\n                                                                                                                    end),\r\n                                                                                                                    label = \"Are you a retard?\",\r\n                                                                                                                    position = Vector(1.5, 0, 0),\r\n                                                                                                                    rotation = Vector(0, 180, 0),\r\n                                                                                                                    width = 200,\r\n                                                                                                                    height = 200,\r\n                                                                                                                    scale = Vector(1, 1, 1),\r\n                                                                                                                    font_size = 50,\r\n                                                                                                                    font_color = {1, 1, 1},\r\n                                                                                                                    color = \"Red\"\r\n                                                                                                                }\r\n                                                                                                            )\r\n\r\n                                                                                                            local continuation = Helper.createContinuation(\"ImperiumRow.setUp\")\r\n                                                                                                            Deck.generateImperiumDeck(ImperiumRow.deckZone, settings.useContracts, settings.riseOfIx, settings.immortality, settings.legacy, settings.merakon).doAfter(function (deck)\r\n                                                                                                                assert(deck, \"No Imperium deck!\")\r\n                                                                                                                Helper.shuffleDeck(deck)\r\n                                                                                                                for _, zone in ipairs(ImperiumRow.slotZones) do\r\n                                                                                                                    Helper.moveCardFromZone(ImperiumRow.deckZone, zone.getPosition(), Vector(0, 180, 0))\r\n                                                                                                                end\r\n                                                                                                                ImperiumRow._transientSetUp()\r\n                                                                                                                continuation.run()\r\n                                                                                                            end)\r\n                                                                                                            return continuation\r\n                                                                                                        end\r\n\r\n                                                                                                        ---\r\n                                                                                                        function ImperiumRow._transientSetUp()\r\n                                                                                                            for i, zone in ipairs(ImperiumRow.slotZones) do\r\n                                                                                                                AcquireCard.new(zone, \"Imperium\", PlayBoard.withLeader(function (_, color)\r\n                                                                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                                                                    leader.acquireImperiumCard(color, i)\r\n                                                                                                                end), Deck.getAcquireCardDecalUrl(\"generic\"))\r\n                                                                                                            end\r\n\r\n                                                                                                            AcquireCard.new(ImperiumRow.reservationSlotZone, \"Imperium\", PlayBoard.withLeader(function (_, color)\r\n                                                                                                                local leader = PlayBoard.getLeader(color)\r\n                                                                                                                leader.acquireReservedImperiumCard(color)\r\n                                                                                                            end), Deck.getAcquireCardDecalUrl(\"generic\"))\r\n\r\n                                                                                                            Helper.registerEventListener(\"phaseStart\", function (phase)\r\n                                                                                                                if phase == \"recall\" then\r\n                                                                                                                    local cardOrDeck = Helper.getDeckOrCard(ImperiumRow.reservationSlotZone)\r\n                                                                                                                    if cardOrDeck then\r\n                                                                                                                        MainBoard.trash(cardOrDeck)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        end\r\n\r\n                                                                                                        ---\r\n                                                                                                        function ImperiumRow.acquireReservedImperiumCard(color)\r\n                                                                                                            local cardOrDeck = Helper.getDeckOrCard(ImperiumRow.reservationSlotZone)\r\n                                                                                                            if cardOrDeck then\r\n                                                                                                                PlayBoard.giveCardFromZone(color, ImperiumRow.reservationSlotZone, false)\r\n                                                                                                                return true\r\n                                                                                                            else\r\n                                                                                                                return false\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        ---\r\n                                                                                                        function ImperiumRow.reserveImperiumCard(indexInRow)\r\n                                                                                                            local zone = ImperiumRow.slotZones[indexInRow]\r\n                                                                                                            local card = Helper.getCard(zone)\r\n                                                                                                            if card then\r\n                                                                                                                if false then\r\n                                                                                                                    local oldCard = Helper.getCard(ImperiumRow.reservationSlotZone)\r\n                                                                                                                    if oldCard then\r\n                                                                                                                        MainBoard.trash(oldCard)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                                card.setPosition(ImperiumRow.reservationSlotZone.getPosition())\r\n                                                                                                                ImperiumRow._replenish(indexInRow)\r\n                                                                                                                return true\r\n                                                                                                            else\r\n                                                                                                                return false\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        ---\r\n                                                                                                        function ImperiumRow.acquireImperiumCard(indexInRow, color)\r\n                                                                                                            local zone = ImperiumRow.slotZones[indexInRow]\r\n                                                                                                            local card = Helper.getCard(zone)\r\n                                                                                                            if card then\r\n                                                                                                                PlayBoard.giveCard(color, card, false)\r\n                                                                                                                ImperiumRow._replenish(indexInRow)\r\n                                                                                                                return true\r\n                                                                                                            else\r\n                                                                                                                return false\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        ---\r\n                                                                                                        function ImperiumRow.nuke(color)\r\n                                                                                                            Music.play(\"atomics\")\r\n                                                                                                            Helper.onceTimeElapsed(3).doAfter(function ()\r\n                                                                                                                for i, zone in ipairs(ImperiumRow.slotZones) do\r\n                                                                                                                    local card = Helper.getCard(zone)\r\n                                                                                                                    if card then\r\n                                                                                                                        MainBoard.trash(card)\r\n                                                                                                                        ImperiumRow._replenish(i)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end)\r\n                                                                                                        end\r\n\r\n                                                                                                        ---\r\n                                                                                                        function ImperiumRow.churn()\r\n                                                                                                            local firstCardIndex = math.random(6)\r\n                                                                                                            local secondCardIndex = math.random(6)\r\n                                                                                                            local count = 0\r\n                                                                                                            for i, zone in ipairs(ImperiumRow.slotZones) do\r\n                                                                                                                if i == firstCardIndex or i == secondCardIndex then\r\n                                                                                                                    local card = Helper.getCard(zone)\r\n                                                                                                                    MainBoard.trash(card)\r\n                                                                                                                    ImperiumRow._replenish(i)\r\n                                                                                                                    count = count + 1\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                            printToAll(I18N(\"churnImperiumRow\", {count = count, card = I18N.agree(count, \"card\")}), \"Pink\")\r\n                                                                                                        end\r\n\r\n                                                                                                        function ImperiumRow.yeet()\r\n                                                                                                            log(\"ARWIN: yeeeet1!\")\r\n                                                                                                            log(\"ARWIN: yeeeet2!\")\r\n                                                                                                            local cards = Helper.getCards(Helper.getDeckOrCard(ImperiumRow.deckZone))\r\n                                                                                                            for _, card in pairs(cards) do\r\n                                                                                                                if card and not card.held_by_color and (card.type == \"Card\" or card.type == \"Deck\") then\r\n                                                                                                                    log(string.format(\"ARWIN: yeet %s\", card.type))\r\n                                                                                                                    card.addForce(Vector(math.random(-20, 20), math.random(300, 500), 40))\r\n                                                                                                                    card.addTorque(Vector(math.random(-500, 500), math.random(-500, 500), math.random(-500, 500)))\r\n                                                                                                                elif card\r\n                                                                                                                    log(string.format(\"ARWIN: fail for type or some reason %s\", card.type))\r\n                                                                                                                else\r\n                                                                                                                    log(\"ARWIN: null for some reason\")\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        function ImperiumRow.replenishAllEmpty()\r\n                                                                                                            log(\"ARWIN: replenishAllEmpty!\")\r\n                                                                                                            local actions = {}\r\n                                                                                                            for i = 5, 1, -1 do\r\n                                                                                                                local currentZone = ImperiumRow.slotZones[i]  -- Get current zone\r\n                                                                                                                local position = currentZone.getPosition()\r\n\r\n                                                                                                                if #currentZone.getObjects() == 0 then\r\n                                                                                                                    log(string.format(\"ARWIN: Found empty at %d\", i))\r\n                                                                                                                    table.insert(\r\n                                                                                                                        actions,\r\n                                                                                                                        function()\r\n                                                                                                                            return Helper.moveCardFromZone(ImperiumRow.deckZone, position, Vector(0, 180, 0))\r\n                                                                                                                        end\r\n                                                                                                                    )\r\n                                                                                                                end\r\n                                                                                                            end\r\n                                                                                                            return Helper.chainActions(actions)\r\n                                                                                                        end\r\n\r\n                                                                                                        function ImperiumRow.wormEatsTheCard()\r\n                                                                                                            printToAll(\"WORM EATS THE CARD\", \"Pink\")\r\n                                                                                                            local card = Helper.getCard(ImperiumRow.slotZones[5])\r\n                                                                                                            if card then\r\n                                                                                                                -- card.addForce(Vector(math.random(-20, 20), math.random(300, 500), 40))\r\n                                                                                                                -- card.addTorque(Vector(math.random(-500, 500), math.random(-500, 500), math.random(-500, 500)))\r\n\r\n                                                                                                                MainBoard.trash(card)\r\n                                                                                                            end\r\n                                                                                                            return ImperiumRow._replenish(5)\r\n                                                                                                        end\r\n\r\n                                                                                                        ---\r\n                                                                                                        function ImperiumRow._replenish(indexInRow)\r\n                                                                                                            if not ImperiumRow.enableWormEatsTheCard then\r\n                                                                                                                log(string.format(\"ARWIN: ImperiumRow._replenish %d without WormEatsTheCard\", indexInRow))\r\n                                                                                                                local position = ImperiumRow.slotZones[indexInRow].getPosition()\r\n                                                                                                                return Helper.moveCardFromZone(ImperiumRow.deckZone, position, Vector(0, 180, 0))\r\n                                                                                                            end\r\n\r\n                                                                                                            log(string.format(\"ARWIN: ImperiumRow._replenish %d with WormEatsTheCard\", indexInRow))\r\n\r\n                                                                                                            local actions = {}\r\n                                                                                                            for i = indexInRow, 2, -1 do  -- Start at the gap, go backwards to position 2\r\n                                                                                                                local prevZone = ImperiumRow.slotZones[i-1]  -- Get the zone to the left\r\n                                                                                                                local currentZone = ImperiumRow.slotZones[i]  -- Get current zone\r\n\r\n                                                                                                                if #prevZone.getObjects() > 0 then\r\n                                                                                                                    table.insert(\r\n                                                                                                                        actions,\r\n                                                                                                                        function()\r\n                                                                                                                            log(string.format(\"ARWIN: Move Imperium Zone %d to %d\", i-1, i))\r\n                                                                                                                            return Helper.moveCardFromZone(prevZone, currentZone.getPosition(), Vector(0, 180, 0))\r\n                                                                                                                        end\r\n                                                                                                                    )\r\n                                                                                                                end\r\n                                                                                                            end\r\n\r\n                                                                                                            -- Then put new card in leftmost position (slot 1)\r\n                                                                                                            local position = ImperiumRow.slotZones[1].getPosition()\r\n                                                                                                            table.insert(\r\n                                                                                                                actions,\r\n                                                                                                                function()\r\n                                                                                                                    log(\"ARWIN: Imperium Replenish Zone 1\")\r\n                                                                                                                    return Helper.moveCardFromZone(ImperiumRow.deckZone, position, Vector(0, 180, 0))\r\n                                                                                                                end\r\n                                                                                                            )\r\n\r\n                                                                                                            return Helper.chainActions(actions)\r\n                                                                                                        end\r\n\r\n                                                                                                        return ImperiumRow\r\n\r\n                                                                                                    end)\r\n                                                                                                    __bundle_register(\"ImperiumCard\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                        local Module = require(\"utils.Module\")\r\n                                                                                                        local Helper = require(\"utils.Helper\")\r\n\r\n                                                                                                        -- Exceptional Immediate require for the sake of aliasing.\r\n                                                                                                        local CardEffect = require(\"CardEffect\")\r\n\r\n                                                                                                        local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                        local Types = Module.lazyRequire(\"Types\")\r\n\r\n                                                                                                        -- Function aliasing for a more readable code.\r\n                                                                                                        local persuasion = CardEffect.persuasion\r\n                                                                                                        local sword = CardEffect.sword\r\n                                                                                                        local spice = CardEffect.spice\r\n                                                                                                        local water = CardEffect.water\r\n                                                                                                        local solari = CardEffect.solari\r\n                                                                                                        local deploy = CardEffect.deploy\r\n                                                                                                        local troop = CardEffect.troop\r\n                                                                                                        local dreadnought = CardEffect.dreadnought\r\n                                                                                                        local negotiator = CardEffect.negotiator\r\n                                                                                                        local specimen = CardEffect.specimen\r\n                                                                                                        local intrigue = CardEffect.intrigue\r\n                                                                                                        local trash = CardEffect.trash\r\n                                                                                                        local research = CardEffect.research\r\n                                                                                                        local beetle = CardEffect.beetle\r\n                                                                                                        local influence = CardEffect.influence\r\n                                                                                                        local vp = CardEffect.vp\r\n                                                                                                        local draw = CardEffect.draw\r\n                                                                                                        local shipment = CardEffect.shipment\r\n                                                                                                        local control = CardEffect.control\r\n                                                                                                        local spy = CardEffect.spy\r\n                                                                                                        local contract = CardEffect.contract\r\n                                                                                                        local voice = CardEffect.voice\r\n                                                                                                        local perDreadnoughtInConflict = CardEffect.perDreadnoughtInConflict\r\n                                                                                                        local perSwordCard = CardEffect.perSwordCard\r\n                                                                                                        local perFremen = CardEffect.perFremen\r\n                                                                                                        local perEmperor = CardEffect.perEmperor\r\n                                                                                                        local perFulfilledContract = CardEffect.perFulfilledContract\r\n                                                                                                        local choice = CardEffect.choice\r\n                                                                                                        local optional = CardEffect.optional\r\n                                                                                                        local seat = CardEffect.seat\r\n                                                                                                        local fremenBond = CardEffect.fremenBond\r\n                                                                                                        -- bloodlines sardaukar commander in conflict\r\n                                                                                                        local sardaukarCommanderInConflict = CardEffect.sardaukarCommanderInConflict\r\n                                                                                                        -- bloodlines imperial throneship reveal\r\n                                                                                                        local imperialThroneship = CardEffect.imperialThroneship\r\n                                                                                                        local agentInEmperorSpace = CardEffect.agentInEmperorSpace\r\n                                                                                                        local emperorAlliance = CardEffect.emperorAlliance\r\n                                                                                                        local spacingGuildAlliance = CardEffect.spacingGuildAlliance\r\n                                                                                                        local beneGesseritAlliance = CardEffect.beneGesseritAlliance\r\n                                                                                                        local fremenAlliance = CardEffect.fremenAlliance\r\n                                                                                                        local fremenFriendship = CardEffect.fremenFriendship\r\n                                                                                                        local anyAlliance = CardEffect.anyAlliance\r\n                                                                                                        local oneHelix = CardEffect.oneHelix\r\n                                                                                                        local twoHelices = CardEffect.twoHelices\r\n                                                                                                        local winner = CardEffect.winner\r\n                                                                                                        local twoSpies = CardEffect.twoSpies\r\n                                                                                                        local spyMakerSpace = CardEffect.spyMakerSpace\r\n                                                                                                        local swordmaster = CardEffect.swordmaster\r\n                                                                                                        local multiply = CardEffect.multiply\r\n\r\n                                                                                                        local ImperiumCard = {\r\n                                                                                                            -- starter: base\r\n                                                                                                            duneTheDesertPlanet = {agentIcons = {'yellow'}, reveal = {persuasion(1)}, starter = true},\r\n                                                                                                            seekAllies = {agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, starter = true},\r\n                                                                                                            signetRing = {agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}, starter = true},\r\n                                                                                                            diplomacy = {agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1)}, starter = true},\r\n                                                                                                            reconnaissance = {agentIcons = {'blue'}, reveal = {persuasion(1)}, starter = true},\r\n                                                                                                            convincingArgument = {reveal = {persuasion(2)}, starter = true},\r\n                                                                                                            dagger = {agentIcons = {'green', 'blue'}, reveal = {sword(1)}, starter = true},\r\n                                                                                                            -- starter: ix\r\n                                                                                                            controlTheSpice = {agentIcons = {'yellow'}, reveal = {persuasion(1), spice(1)}, starter = true},\r\n                                                                                                            -- starter: immortality\r\n                                                                                                            experimentation = {agentIcons = {'yellow'}, reveal = {persuasion(1), specimen(1)}, starter = true},\r\n                                                                                                            -- reserve\r\n                                                                                                            foldspace = {cost = 0, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen', 'green', 'blue', 'yellow'}},\r\n                                                                                                            prepareTheWay = {factions = {'beneGesserit'}, cost = 2, agentIcons = {'green', 'blue'}, reveal = {persuasion(2)}},\r\n                                                                                                            theSpiceMustFlow = {factions = {'spacingGuild'}, cost = 9, acquireBonus = {vp(1)}, reveal = {spice(1)}},\r\n                                                                                                            -- base\r\n                                                                                                            arrakisRecruiter = {cost = 2, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            assassinationMission = {cost = 1, reveal = {sword(1), solari(1)}},\r\n                                                                                                            beneGesseritInitiate = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}},\r\n                                                                                                            beneGesseritSister = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'beneGesserit', 'green'}, reveal = choice(1, {{sword(2)}, {persuasion(2)}})},\r\n                                                                                                            carryall = {cost = 5, agentIcons = {'yellow'}, reveal = {persuasion(1), spice(1)}},\r\n                                                                                                            chani = {factions = {'fremen'}, cost = 5, acquireBonus = {water(1)}, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(2), 'Retreat any # of troops'}},\r\n                                                                                                            choamDirectorship = {cost = 8, acquireBonus = {'4x inf all'}, reveal = {solari(3)}},\r\n                                                                                                            crysknife = {factions = {'fremen'}, cost = 3, agentIcons = {'fremen', 'yellow'}, reveal = {sword(1), influence(fremenBond(1), 'fremen')}},\r\n                                                                                                            drYueh = {cost = 1, agentIcons = {'blue'}, reveal = {persuasion(1)}},\r\n                                                                                                            duncanIdaho = {cost = 4, agentIcons = {'blue'}, reveal = {sword(2), water(1)}},\r\n                                                                                                            fedaykinDeathCommando = {factions = {'fremen'}, cost = 3, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(fremenBond(3))}},\r\n                                                                                                            firmGrip = {factions = {'emperor'}, cost = 4, agentIcons = {'emperor', 'green'}, reveal = {persuasion(emperorAlliance(4))}},\r\n                                                                                                            fremenCamp = {factions = {'fremen'}, cost = 4, agentIcons = {'yellow'}, reveal = {persuasion(2), sword(1)}},\r\n                                                                                                            geneManipulation = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'green', 'blue'}, reveal = {persuasion(2)}},\r\n                                                                                                            guildAdministrator = {factions = {'spacingGuild'}, cost = 2, agentIcons = {'spacingGuild', 'yellow'}, reveal = {persuasion(1)}},\r\n                                                                                                            guildAmbassador = {factions = {'spacingGuild'}, cost = 4, agentIcons = {'green'}, reveal = {spacingGuildAlliance('-3 Sp -> +1 VP')}},\r\n                                                                                                            guildBankers = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'emperor', 'spacingGuild', 'green'}, reveal = {'SMF costs 3 less this turn'}},\r\n                                                                                                            gunThopter = {cost = 4, agentIcons = {'blue', 'yellow'}, reveal = {sword(3), 'may deploy 1x troop from garrison'}},\r\n                                                                                                            gurneyHalleck = {cost = 6, agentIcons = {'blue'}, reveal = {persuasion(2), '-3 Sol -> +2 troops may deploy to conflict'}},\r\n                                                                                                            imperialSpy = {factions = {'emperor'}, cost = 2, agentIcons = {'emperor'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            kwisatzHaderach = {factions = {'beneGesserit'}, cost = 8, agentIcons = {'any'}, infiltrate = true},\r\n                                                                                                            ladyJessica = {factions = {'beneGesserit'}, cost = 7, acquireBonus = {influence(1)}, agentIcons = {'beneGesserit', 'green', 'blue', 'yellow'}, reveal = {persuasion(3), sword(1)}},\r\n                                                                                                            lietKynes = {factions = {'emperor', 'fremen'}, cost = 5, acquireBonus = {influence(1, 'emperor')}, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(perFremen(2))}},\r\n                                                                                                            missionariaProtectiva = {factions = {'beneGesserit'}, cost = 1, agentIcons = {'blue'}, reveal = {persuasion(1)}},\r\n                                                                                                            otherMemory = {factions = {'beneGesserit'}, cost = 4, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(2)}},\r\n                                                                                                            piterDeVries = {cost = 5, agentIcons = {'green', 'blue'}, reveal = {persuasion(3), sword(1)}},\r\n                                                                                                            powerPlay = {cost = 5, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}},\r\n                                                                                                            reverendMotherMohiam = {factions = {'emperor', 'beneGesserit'}, cost = 6, agentIcons = {'emperor', 'beneGesserit'}, reveal = {persuasion(2), spice(2)}},\r\n                                                                                                            sardaukarInfantry = {factions = {'emperor'}, cost = 1, reveal = {persuasion(1), sword(2)}},\r\n                                                                                                            sardaukarLegion = {factions = {'emperor'}, cost = 5, agentIcons = {'emperor', 'green'}, reveal = {persuasion(1), 'deploy up to 3 troops from garrison'}},\r\n                                                                                                            scout = {cost = 1, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(1), 'Retreat up to 2 troops'}},\r\n                                                                                                            shiftingAllegiances = {cost = 3, agentIcons = {'green', 'yellow'}, reveal = {persuasion(2)}},\r\n                                                                                                            sietchReverendMother = {factions = {'beneGesserit', 'fremen'}, cost = 4, agentIcons = {'beneGesserit', 'fremen'}, reveal = {persuasion(fremenBond(3)), spice(1)}},\r\n                                                                                                            smugglersThopter = {factions = {'spacingGuild'}, cost = 4, agentIcons = {'yellow'}, reveal = {persuasion(1), spice(1)}},\r\n                                                                                                            spaceTravel = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'spacingGuild'}, reveal = {persuasion(2)}},\r\n                                                                                                            spiceHunter = {factions = {'fremen'}, cost = 2, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(1), sword(1), spice(fremenBond(1))}},\r\n                                                                                                            spiceSmugglers = {factions = {'spacingGuild'}, cost = 2, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            stilgar = {factions = {'fremen'}, cost = 5, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(2), sword(3)}},\r\n                                                                                                            testOfHumanity = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'beneGesserit', 'green', 'blue'}, reveal = {persuasion(2)}},\r\n                                                                                                            theVoice = {factions = {'beneGesserit'}, cost = 2, acquireBonus = {voice()}, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(2)}},\r\n                                                                                                            thufirHawat = {cost = 5, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen', 'blue', 'yellow'}, reveal = {persuasion(1), intrigue(1)}},\r\n                                                                                                            wormRiders = {factions = {'fremen'}, cost = 6, agentIcons = {'blue', 'yellow'}, reveal = {sword(fremenFriendship(4)), sword(fremenAlliance(2))}},\r\n                                                                                                            opulence = {factions = {'emperor'}, cost = 6, agentIcons = {'emperor'}, reveal = {persuasion(1), optional({solari(-6), vp(1)})}},\r\n                                                                                                            -- ix\r\n                                                                                                            appropriate = {factions = {'emperor'}, cost = 5, acquireBonus = {shipment(1)}, agentIcons = {'green', 'yellow'}, reveal = {persuasion(2)}},\r\n                                                                                                            bountyHunter = {cost = 1, agentIcons = {'blue'}, infiltrate = true, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            choamDelegate = {cost = 1, agentIcons = {'yellow'}, infiltrate = true, reveal = {solari(3)}},\r\n                                                                                                            courtIntrigue = {factions = {'emperor'}, cost = 2, agentIcons = {'emperor'}, infiltrate = true, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            desertAmbush = {factions = {'fremen'}, cost = 3, agentIcons = {'yellow'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            embeddedAgent = {factions = {'beneGesserit'}, cost = 5, agentIcons = {'green'}, infiltrate = true, reveal = {persuasion(1), intrigue(1)}},\r\n                                                                                                            esmarTuek = {factions = {'spacingGuild'}, cost = 5, agentIcons = {'blue', 'yellow'}, reveal = {spice(2), solari(2)}},\r\n                                                                                                            freighterFleet = {cost = 2, agentIcons = {'yellow'}, reveal = {shipment(1)}},\r\n                                                                                                            fullScaleAssault = {factions = {'emperor'}, cost = 8, acquireBonus = {dreadnought(1)}, agentIcons = {'emperor', 'blue'}, reveal = {persuasion(2), sword(perDreadnoughtInConflict(3))}},\r\n                                                                                                            guildAccord = {factions = {'spacingGuild'}, cost = 6, agentIcons = {'spacingGuild'}, infiltrate = true, reveal = {water(1), spice(spacingGuildAlliance(3))}},\r\n                                                                                                            guildChiefAdministrator = {factions = {'spacingGuild'}, cost = 4, agentIcons = {'spacingGuild', 'blue', 'yellow'}, reveal = {persuasion(1), shipment(1)}},\r\n                                                                                                            imperialBashar = {factions = {'emperor'}, cost = 4, agentIcons = {'blue'}, reveal = {persuasion(1), sword(2), sword(perSwordCard(1, true))}},\r\n                                                                                                            imperialShockTrooper = {factions = {'emperor'}, cost = 3, reveal = {persuasion(1), sword(2), sword(agentInEmperorSpace(3))}},\r\n                                                                                                            inTheShadows = {factions = {'beneGesserit'}, cost = 2, agentIcons = {'green', 'blue'}, reveal = {influence(1, 'spacingGuild')}},\r\n                                                                                                            ixGuildCompact = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'spacingGuild'}, reveal = {negotiator(2)}},\r\n                                                                                                            ixianEngineer = {cost = 5, agentIcons = {'yellow'}, reveal = {'If 3 Tech: Trash this card -> +1 VP'}},\r\n                                                                                                            jamis = {factions = {'fremen'}, cost = 2, agentIcons = {'fremen'}, infiltrate = true, reveal = {persuasion(1), sword(2)}},\r\n                                                                                                            landingRights = {factions = {'spacingGuild'}, cost = 4, agentIcons = {'blue'}, reveal = {persuasion(2)}},\r\n                                                                                                            localFence = {cost = 3, agentIcons = {'blue'}, reveal = {persuasion(2)}},\r\n                                                                                                            negotiatedWithdrawal = {cost = 4, acquireBonus = {troop(1)}, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(2), 'Retreat 3x troops -> +1 inf ?'}},\r\n                                                                                                            satelliteBan = {factions = {'spacingGuild', 'fremen'}, cost = 5, agentIcons = {'spacingGuild', 'fremen'}, reveal = {persuasion(1), 'Retreat up to 2 troops'}},\r\n                                                                                                            sayyadina = {factions = {'beneGesserit', 'fremen'}, cost = 3, agentIcons = {'beneGesserit', 'fremen'}, reveal = {persuasion(fremenBond(3))}},\r\n                                                                                                            shaiHulud = {factions = {'fremen'}, cost = 7, acquireBonus = {trash(1)}, agentIcons = {'yellow'}, reveal = {sword(fremenBond(5))}},\r\n                                                                                                            spiceTrader = {factions = {'fremen'}, cost = 4, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(2), sword(1)}},\r\n                                                                                                            treachery = {cost = 6, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {deploy(2)}},\r\n                                                                                                            truthsayer = {factions = {'emperor', 'beneGesserit'}, cost = 3, agentIcons = {'emperor', 'beneGesserit', 'green'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            waterPeddler = {cost = 1, acquireBonus = {water(1)}, reveal = {water(1)}},\r\n                                                                                                            webOfPower = {factions = {'beneGesserit'}, cost = 4, agentIcons = {'beneGesserit'}, infiltrate = true, reveal = {persuasion(1), influence(1)}},\r\n                                                                                                            weirdingWay = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(2)}},\r\n                                                                                                            -- immortality\r\n                                                                                                            beneTleilaxLab = {cost = 2, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), spice(oneHelix(1))}},\r\n                                                                                                            beneTleilaxResearcher = {cost = 4, agentIcons = {'green'}, reveal = {persuasion(1), persuasion(oneHelix(1)), persuasion(twoHelices(1))}},\r\n                                                                                                            blankSlate = {cost = 1, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}},\r\n                                                                                                            clandestineMeeting = {factions = {'beneGesserit'}, cost = 4, reveal = {persuasion(2)}},\r\n                                                                                                            corruptSmuggler = {factions = {'spacingGuild', 'fremen'}, cost = 3, agentIcons = {'spacingGuild', 'yellow'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            dissectingKit = {cost = 2, agentIcons = {'green', 'blue'}, reveal = {persuasion(1), beetle(oneHelix(1))}},\r\n                                                                                                            forHumanity = {factions = {'beneGesserit'}, cost = 7, agentIcons = {'beneGesserit', 'green', 'yellow'}, reveal = {persuasion(2), beneGesseritAlliance('-2 Inf --> +1 VP')}},\r\n                                                                                                            highPriorityTravel = {factions = {'spacingGuild'}, cost = 1, agentIcons = {'green', 'yellow'}, reveal = {persuasion(1), solari(1)}},\r\n                                                                                                            imperiumCeremony = {factions = {'emperor', 'spacingGuild'}, cost = 6, agentIcons = {'emperor', 'spacingGuild', 'green'}, reveal = {persuasion(3)}},\r\n                                                                                                            interstellarConspiracy = {cost = 4, agentIcons = {'blue'}, reveal = {persuasion(2)}},\r\n                                                                                                            keysToPower = {factions = {'spacingGuild', 'beneGesserit'}, cost = 5, agentIcons = {'spacingGuild', 'beneGesserit', 'green'}, reveal = {persuasion(2)}},\r\n                                                                                                            lisanAlGaib = {factions = {'beneGesserit', 'fremen'}, cost = 4, acquireBonus = {spice(1)}, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(1), sword(fremenBond(2))}},\r\n                                                                                                            longReach = {factions = {'beneGesserit'}, cost = 6, reveal = {persuasion(1), intrigue(1)}},\r\n                                                                                                            occupation = {factions = {'spacingGuild'}, cost = 8, acquireBonus = {troop(3)}, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen', 'blue', 'yellow'}, reveal = {water(1), spice(1), troop(1)}},\r\n                                                                                                            organMerchants = {cost = 3, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), solari(1)}},\r\n                                                                                                            plannedCoupling = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'beneGesserit'}, reveal = {persuasion(1)}},\r\n                                                                                                            replacementEyes = {cost = 5, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            sardaukarQuartermaster = {factions = {'emperor'}, cost = 2, agentIcons = {'green', 'blue'}, reveal = {persuasion(1), sword(2)}},\r\n                                                                                                            shadoutMapes = {factions = {'fremen'}, cost = 2, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(1), sword(1), 'May deploy or retreat 1 of your Troops'}},\r\n                                                                                                            showOfStrength = {factions = {'emperor', 'fremen'}, cost = 3, reveal = {persuasion(1), sword(2)}},\r\n                                                                                                            spiritualFervor = {cost = 3, acquireBonus = {research(1)}, agentIcons = {'yellow'}, reveal = {persuasion(1), specimen(1)}},\r\n                                                                                                            stillsuitManufacturer = {factions = {'fremen'}, cost = 5, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(1), spice(fremenBond(2))}},\r\n                                                                                                            throneRoomPolitics = {factions = {'emperor', 'beneGesserit'}, cost = 4, agentIcons = {'emperor'}, reveal = {persuasion(1), influence(1, 'beneGesserit')}},\r\n                                                                                                            tleilaxuMaster = {cost = 5, agentIcons = {'green', 'yellow'}, reveal = {persuasion(1), research(2)}},\r\n                                                                                                            tleilaxuSurgeon = {cost = 3, agentIcons = {'emperor', 'blue'}, reveal = {persuasion(2), 'Lose 2 Troops--> +2 Specimen'}},\r\n                                                                                                            -- tleilaxu\r\n                                                                                                            reclaimedForces = {cost = 3, tleilaxu = true, acquireBonus = choice(1, {{troop(2)}, {beetle(1)}})},\r\n                                                                                                            usurp = {cost = 4, tleilaxu = true, reveal = {persuasion(1), sword(1), specimen(1)}},\r\n                                                                                                            twistedMentat = {cost = 4, tleilaxu = true, agentIcons = {'green', 'blue'}, reveal = {persuasion(1), sword(1), specimen(1)}},\r\n                                                                                                            beguilingPheromones = {cost = 3, tleilaxu = true, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            stitchedHorror = {cost = 3, tleilaxu = true, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            unnaturalReflexes = {cost = 3, tleilaxu = true, agentIcons = {'yellow'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            ghola = {cost = 3, tleilaxu = true, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            scientificBreakthrough = {cost = 3, tleilaxu = true, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            sligFarmer = {cost = 2, tleilaxu = true, agentIcons = {'green'}, reveal = {persuasion(1)}},\r\n                                                                                                            fromTheTanks = {cost = 2, tleilaxu = true, agentIcons = {'green'}, reveal = {persuasion(1)}},\r\n                                                                                                            faceDancer = {factions = {'emperor', 'spacingGuild', 'fremen'}, cost = 2, tleilaxu = true, agentIcons = {'emperor', 'spacingGuild', 'fremen'}, reveal = {persuasion(1)}},\r\n                                                                                                            guildImpersonator = {factions = {'spacingGuild'}, cost = 2, tleilaxu = true, agentIcons = {'spacingGuild'}, reveal = {persuasion(1)}},\r\n                                                                                                            chairdog = {cost = 2, tleilaxu = true, agentIcons = {'blue'}, reveal = {persuasion(1)}},\r\n                                                                                                            tleilaxuInfiltrator = {cost = 2, tleilaxu = true, agentIcons = {'blue'}, reveal = {persuasion(1)}},\r\n                                                                                                            subjectX137 = {cost = 2, tleilaxu = true, acquireBonus = {beetle(1)}, agentIcons = {'green', 'yellow'}, reveal = {persuasion(1)}},\r\n                                                                                                            corrinoGenes = {factions = {'emperor'}, cost = 1, tleilaxu = true, acquireBonus = {solari(2)}, agentIcons = {'emperor'}, reveal = {persuasion(1)}},\r\n                                                                                                            contaminator = {factions = {'fremen'}, cost = 1, tleilaxu = true, agentIcons = {'fremen'}, reveal = {persuasion(1)}},\r\n                                                                                                            industrialEspionage = {cost = 1, tleilaxu = true, agentIcons = {'green'}, reveal = {persuasion(1)}},\r\n                                                                                                            faceDancerInitiate = {factions = {'emperor', 'spacingGuild', 'fremen'}, cost = 1, tleilaxu = true, agentIcons = {'emperor', 'spacingGuild', 'fremen'}, reveal = {persuasion(1)}},\r\n                                                                                                            -- promo\r\n                                                                                                            boundlessAmbition = {cost = 5, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {'Acquire a card that costs 5 or less'}},\r\n                                                                                                            duncanLoyalBlade = {cost = 5, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(1), sword(2), 'trash this--> deploy/retreat any # of troops'}},\r\n                                                                                                            jessicaOfArrakis = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'yellow'}, reveal = {persuasion(1), sword(2)}},\r\n                                                                                                            piterGeniusAdvisor = {cost = 3, tleilaxu = true, agentIcons = {'green', 'yellow'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            -- uprising\r\n                                                                                                            unswervingLoyalty = {factions = {'fremen'}, cost = 1, reveal = {persuasion(1), troop(1), 'deploy/reply 1 troop if fremen bond'}},\r\n                                                                                                            spaceTimeFolding = {factions = {\"spacingGuild\"}, cost = 1, agentIcons = {\"spacingGuild\"}, reveal = {persuasion(1)}},\r\n                                                                                                            weirdingWoman = {factions = {\"beneGesserit\"}, cost = 1, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            sardaukarSoldier = {factions = {\"emperor\"}, cost = 1, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            smugglerHarvester = {factions = {\"spacingGuild\"}, cost = 1, agentIcons = {'yellow'}, reveal = {persuasion(1)}},\r\n                                                                                                            makerKeeper = {factions = {\"beneGesserit\", \"fremen\"}, cost = 2, agentIcons = {'blue'}, reveal = {persuasion(2)}},\r\n                                                                                                            reliableInformant = {factions = {\"spacingGuild\"}, cost = 2, agentIcons = {\"spacingGuild\"}, reveal = {persuasion(1), solari(1)}},\r\n                                                                                                            hiddenMissive = {factions = {\"beneGesserit\"}, cost = 2, agentIcons = {'green'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            wheelsWithinWheels = {factions = {\"emperor\", \"spacingGuild\"}, cost = 2, spy = true, reveal = {persuasion(1), spy(1)}},\r\n                                                                                                            fedaykinStilltent = {factions = {\"fremen\"}, cost = 2, agentIcons = {'yellow'}, reveal = {water(1)}},\r\n                                                                                                            imperialSpymaster = {factions = {'emperor'}, cost = 2, agentIcons = {'emperor'}, spy = true, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            spyNetwork = {factions = {'emperor', 'spacingGuild'}, cost = 2, acquireBonus = {spy(1)}, reveal = {persuasion(2), sword(1), 'spy --> treachery if 2 spies on board'}},\r\n                                                                                                            desertSurvival = {factions = {'fremen'}, cost = 2, agentIcons = {'yellow'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            undercoverAsset = {factions = {'emperor', 'spacingGuild'}, cost = 2, agentIcons = {'green', 'blue', 'yellow'}, reveal = choice(1, {{spy(1)}, {sword(2)}})},\r\n                                                                                                            beneGesseritOperative = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'beneGesserit'}, reveal = {persuasion(1), persuasion(twoSpies(2))}},\r\n                                                                                                            maulaPistol = {factions = {'fremen'}, cost = 3, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            thumper = {factions = {'fremen'}, cost = 3, agentIcons = {'yellow'}, reveal = {persuasion(1), spice(1)}},\r\n                                                                                                            nothernWatermaster = {factions = {'fremen'}, cost = 3, agentIcons = {'blue'}, reveal = {persuasion(1), spice(fremenBond(2))}},\r\n                                                                                                            covertOperation = {cost = 3, spy = true, reveal = {spy(2)}},\r\n                                                                                                            doubleAgent = {factions = {'emperor', 'spacingGuild'}, cost = 3, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            guildEnvoy = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1)}},\r\n                                                                                                            rebelSupplier = {factions = {'fremen'}, cost = 3, agentIcons = {'blue'}, reveal = {spice(1), sword(1)}},\r\n                                                                                                            calculusOfPower = {factions = {'emperor'}, cost = 3, spy = true, agentIcons = {'blue'}, reveal = {persuasion(2), 'trash emperor card in play --> sword(3)'}},\r\n                                                                                                            guildSpy = {factions = {'spacingGuild'}, cost = 3, acquireBonus = {spy(1)}, spy = true, reveal = {persuasion(2), 'TSMF --> +1 infl / faction with agent'}},\r\n                                                                                                            dangerousRhetoric = {cost = 3, spy = true, agentIcons = {'green'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            branchingPath = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'beneGesserit', \"blue\"}, reveal = {persuasion(2)}},\r\n                                                                                                            ecologicalTestingStation = {factions = {'fremen'}, cost = 3, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(1), water(fremenBond(1))}},\r\n                                                                                                            theBeastSpoils = {factions = {'emperor'}, cost = 3, agentIcons = {'blue'}, reveal = {sword(3)}},\r\n                                                                                                            smugglerHaven = {factions = {'spacingGuild'}, cost = 4, agentIcons = {'spacingGuild', 'yellow'}, reveal = {persuasion(1), spice(spyMakerSpace(2))}},\r\n                                                                                                            shishakli = {factions = {'fremen'}, cost = 4, agentIcons = {'blue', 'yellow'}, reveal = {sword(2), influence(fremenBond(1), 'fremen')}},\r\n                                                                                                            paracompass = {cost = 4, agentIcons = {'blue'}, reveal = {persuasion(seat(2)), persuasion(multiply(seat(1), swordmaster(1)))}},\r\n                                                                                                            sardaukarCoordination = {factions = {'emperor'}, cost = 4, agentIcons = {'emperor', 'green'}, reveal = {persuasion(2), sword(perEmperor(1))}},\r\n                                                                                                            truthtrance = {factions = {'beneGesserit'}, cost = 4, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1)}},\r\n                                                                                                            publicSpectable = {factions = {'emperor'}, cost = 4, spy = true, reveal = {persuasion(1), spy(1)}},\r\n                                                                                                            southernElders = {factions = {'beneGesserit', 'fremen'}, cost = 4, agentIcons = {'beneGesserit', 'fremen'}, reveal = {water(1), persuasion(fremenBond(2))}},\r\n                                                                                                            treadInDarkness = {factions = {'beneGesserit'}, cost = 4, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(2), sword(1)}},\r\n                                                                                                            spacingGuildFavor = {factions = {'spacingGuild'}, cost = 5, agentIcons = {'spacingGuild', 'yellow'}, reveal = {persuasion(2), 'spice(-3) -> influence(1)'}},\r\n                                                                                                            capturedMentat = {cost = 5, agentIcons = {'green', 'yellow'}, reveal = {persuasion(1), 'influence(-1) --> influence(1)'}},\r\n                                                                                                            subversiveAdvisor = {cost = 5, acquireBonus = {spy(1)}, spy = true, reveal = {persuasion(1)}},\r\n                                                                                                            leadership = {factions = {'fremen'}, cost = 5, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(2), sword(1), sword(perSwordCard(1, true))}},\r\n                                                                                                            inHighPlaces = {factions = {'emperor', 'beneGesserit'}, cost = 5, acquireBonus = {spy(1)}, agentIcons = {'emperor', 'beneGesserit'}, reveal = {persuasion(2), optional({spy(-2), persuasion(3)})}},\r\n                                                                                                            strikeFleet = {cost = 5, acquireBonus = {spy(1)}, spy = true, reveal = {persuasion(1), sword(3)}},\r\n                                                                                                            trecherousManeuver = {factions = {'emperor'}, cost = 5, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1), intrigue(1)}},\r\n                                                                                                            chaniCleverTactician = {factions = {'fremen'}, cost = 5, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(fremenBond(2)), 'reply 2 troops --> sword(4)'}},\r\n                                                                                                            junctionHeadquarters = {factions = {'spacingGuild'}, cost = 6, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1), water(1), troop(1)}},\r\n                                                                                                            corrinthCity = {factions = {'emperor'}, cost = 6, agentIcons = {'emperor', 'green'}, reveal = {solari(seat(5)), choice(1, {{solari(5)}, 'solari(-5) --> takeHighCouncilSeat(1)'})}},\r\n                                                                                                            stilgarTheDevoted = {factions = {'fremen'}, cost = 6, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(perFremen(2))}},\r\n                                                                                                            desertPower = {factions = {'fremen'}, cost = 6, agentIcons = {'yellow'}, reveal = {choice(1, {{persuasion(2)}, {'hook: water(1) -> worm(1)'}})}},\r\n                                                                                                            arrakisRevolt = {factions = {'fremen'}, cost = 6, acquireBonus = {troop(1)}, agentIcons = {'blue'}, reveal = {persuasion(1), sword(3)}},\r\n                                                                                                            priceIsNoObject = {factions = {'emperor', 'beneGesserit'}, cost = 6, acquireBonus = {solari(2)}, agentIcons = {'emperor', 'beneGesserit'}, reveal = {persuasion(2), solari(2)}},\r\n                                                                                                            longLiveTheFighters = {factions = {'fremen'}, cost = 7, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(2), sword(3)}},\r\n                                                                                                            overthrow = {cost = 8, acquireBonus = {intrigue(1)}, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(2), sword(2), troop(1)}},\r\n                                                                                                            steersman = {factions = {'spacingGuild'}, cost = 8, acquireBonus = {influence(1, 'spacingGuild')}, agentIcons = {'spacingGuild', 'green', 'blue', 'yellow'}, reveal = {persuasion(2), spice(2)}},\r\n                                                                                                            -- contract\r\n                                                                                                            cargoRunner = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}},\r\n                                                                                                            deliveryAgreement = {factions = {'spacingGuild'}, cost = 5, agentIcons = {'blue'}, reveal = {choice(1, {spice(1), 'contract(4), trash --> vp(1)'})}},\r\n                                                                                                            priorityContracts = {factions = {'spacingGuild'}, cost = 6, agentIcons = {'green', 'yellow'}, reveal = {choice(1, {spice(2), 'contract(4), trash --> vp(1)'})}},\r\n                                                                                                            interstellarTrade = {factions = {'spacingGuild'}, cost = 7, acquireBonus = {contract(1)}, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(perFulfilledContract(1))}},\r\n                                                                                                            -- commander\r\n                                                                                                            emperorConvincingArgument = {reveal = {persuasion(2)}},\r\n                                                                                                            emperorCorrinoMight = {factions = {'emperor'}, agentIcons = {'green'}, reveal = {sword(1), 'spice(3), trash --> troop(2) / ally'}},\r\n                                                                                                            emperorCriticalShipments = {agentIcons = {'yellow'}, reveal = {persuasion(2)}},\r\n                                                                                                            emperorDemandResults = {factions = {'emperor'}, agentIcons = {'green'}, reveal = {sword(1)}},\r\n                                                                                                            emperorDevastatingAssault = {agentIcons = {'yellow'}, reveal = {persuasion(1), 'swordmasterBonus: solari(3) --> sword(5)'}},\r\n                                                                                                            emperorImperialOrnithopter = {factions = {'emperor'}, agentIcons = {'blue'}, reveal = {persuasion(1), solari(1)}},\r\n                                                                                                            emperorSignetRing = {agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}},\r\n                                                                                                            emperorSeekAllies = {agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}},\r\n                                                                                                            emperorImperialTent = {factions = {'emperor'}, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1)}},\r\n                                                                                                            muadDibCommandRespect = {agentIcons = {'blue'}, reveal = {persuasion(1)}},\r\n                                                                                                            muadDibConvincingArgument = {reveal = {persuasion(2)}},\r\n                                                                                                            muadDibDemandAttention = {agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1)}},\r\n                                                                                                            muadDibDesertCall = {agentIcons = {'yellow'}, reveal = {persuasion(1)}},\r\n                                                                                                            muadDibLimitedLandsraadAccess = {agentIcons = {'green'}, reveal = {spice(1), sword(1)}},\r\n                                                                                                            muadDibSeekAllies = {agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}},\r\n                                                                                                            muadDibUsul = {factions = {'fremen'}, agentIcons = {'blue'}, reveal = {persuasion(2)}},\r\n                                                                                                            muadDibThreatenSpiceProduction = {agentIcons = {'yellow'}, reveal = {persuasion(1)}},\r\n                                                                                                            muadDibSignetRing = {agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}},\r\n                                                                                                            -- bloodlines imperium\r\n                                                                                                            -- bloodlines command\r\n                                                                                                            bl_Bombast = {factions = {'emperor'}, cost = 1, agentIcons = {'green'}, reveal = {persuasion(1), 'command: solari(3) and trash this card'}},\r\n                                                                                                            bl_Sandwalk = {factions = {'fremen'}, cost = 1, agentIcons = {'yellow'}, reveal = {persuasion(1), sword(1), persuasion(fremenBond(1))}},\r\n                                                                                                            bl_DisruptionTactics = {factions = {'fremen'}, cost = 2, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(1), 'trash this card --> combat icon'}},\r\n                                                                                                            bl_UrgentShigawire = {factions = {'beneGesserit'}, cost = 2, agentIcons = {'beneGesserit', 'blue'}, reveal = {persuasion(1)}},\r\n                                                                                                            bl_EliminateAllies = {factions = {'emperor'}, cost = 2, spy = true, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            bl_DeliverLogistics = {factions = {'spacingGuild'}, cost = 2, reveal = {choice(1, {persuasion(1), 'contract(1)'})}},\r\n                                                                                                            bl_CommandCenter = {factions = {'emperor'}, cost = 3, agentIcons = {'emperor', 'blue'}, reveal = {persuasion(1), 'retreat 2 troops --> persuasion(2)'}},\r\n                                                                                                            -- bloodlines command\r\n                                                                                                            bl_EngineeredMiracle = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(1), 'command: trash this card --> acquire card on imperium row'}},\r\n                                                                                                            -- bloodlines command\r\n                                                                                                            bl_IBelieve = {factions = {'fremen'}, cost = 3, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(1), 'command: troop(2)'}},\r\n                                                                                                            bl_LitanyAgainstFear = {factions = {'beneGesserit'}, cost = 3, reveal = {persuasion(2)}},\r\n                                                                                                            bl_EliteForces = {factions = {'emperor', 'spacingGuild'}, cost = 3, agentIcons = {'spacingGuild', 'emperor'}, reveal = {persuasion(1), sword(1)}},\r\n                                                                                                            bl_ArrakisObserver = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), 'lift spy --> sword(3)'}},\r\n                                                                                                            -- bloodlines command\r\n                                                                                                            bl_IntelligenceTraining = {factions = {'emperor'}, cost = 3, acquireBonus = {spy(1)}, agentIcons = {'green', 'blue'}, reveal = {persuasion(1), sword(1), 'command: spy(1)'}},\r\n                                                                                                            -- bloodlines command\r\n                                                                                                            bl_RuthlessLeadership = {factions = {'emperor'}, cost = 4, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(1), 'command: combat icon'}},\r\n                                                                                                            bl_FremenWarName = {factions = {'fremen'}, cost = 4, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(2), sword(fremenBond(2))}},\r\n                                                                                                            bl_SardaukarStandard = {factions = {'emperor'}, cost = 4, agentIcons = {'emperor', 'blue'}, reveal = {persuasion(2), troop(1)}},\r\n                                                                                                            -- bloodlines command\r\n                                                                                                            bl_ShroudedCounsel = {factions = {'beneGesserit'}, cost = 4, spy = true, reveal = {persuasion(1), 'command: trash(1)'}},\r\n                                                                                                            bl_CorruptBureaucrat = {factions = {'spacingGuild'}, cost = 4, spy = true, agentIcons = {'spacingGuild', 'green'}, reveal = {persuasion(2)}},\r\n                                                                                                            bl_IxianAmbassador = {cost = 4, spy = true, agentIcons = {'green'}, reveal = {persuasion(1), '2+ tech tiles --> influence(1)'}},\r\n                                                                                                            -- bloodlines sardaukar commander in conflict\r\n                                                                                                            bl_QuashRebellion = {factions = {'emperor'}, cost = 5, agentIcons = {'emperor', 'spacingGuild', 'green'}, reveal = {sword(2), persuasion(sardaukarCommanderInConflict(2))}},\r\n                                                                                                            -- bloodlines command\r\n                                                                                                            bl_SouthernFaith = {factions = {'fremen'}, cost = 5, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(1), sword(2), 'command: spice(2)'}},\r\n                                                                                                            bl_HolyWar = {factions = {'fremen'}, cost = 5, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'green'}, reveal = {persuasion(1), troop(1), 'fremen bond: combat icon'}},\r\n                                                                                                            bl_MercantileAffairs = {factions = {'beneGesserit'}, cost = 5, acquireBonus = {contract(1)}, spy = true, agentIcons = {'beneGesserit', 'blue', 'yellow'}, reveal = {persuasion(2)}},\r\n                                                                                                            -- bloodlines command\r\n                                                                                                            bl_PointingTheWay = {factions = {'fremen'}, cost = 6, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(1), sword(2), 'command: influence(1)'}},\r\n                                                                                                            bl_ChoamDemands = {factions = {'spacingGuild'}, cost = 6, agentIcons = {'green', 'blue', 'yellow'}, reveal = {'contract(4), trash --> influence(1) for all factions'}},\r\n                                                                                                            -- bloodlines 4+ troop in garrison bonus\r\n                                                                                                            bl_ImperialThroneship = {factions = {'emperor'}, cost = 7, acquireBonus = {influence(1, 'emperor')}, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'green', 'blue', 'yellow'}, reveal = {persuasion(2), persuasion(imperialThroneship(1)), solari(imperialThroneship(3))}},\r\n                                                                                                            bl_PossibleFutures = {factions = {'fremen'}, cost = 8, acquireBonus = {water(1)}, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(2), water(1)}},\r\n                                                                                                        }\r\n\r\n                                                                                                        function ImperiumCard._resolveCard(card)\r\n                                                                                                            assert(card)\r\n                                                                                                            local cardName = Helper.getID(card)\r\n                                                                                                            if cardName then\r\n                                                                                                                local cardInfo = ImperiumCard[cardName]\r\n                                                                                                                assert(cardInfo, \"Unknown card (empty name usually means that the card is stacked with another): \" .. tostring(cardName))\r\n                                                                                                                cardInfo.name = cardName\r\n\r\n                                                                                                                -- For identity tests.\r\n                                                                                                                local instantiatedCardInfo = Helper.shallowCopy(cardInfo)\r\n                                                                                                                instantiatedCardInfo.cardObject = card\r\n\r\n                                                                                                                return instantiatedCardInfo\r\n                                                                                                            else\r\n                                                                                                                error(\"No card info!\")\r\n                                                                                                            end\r\n                                                                                                        end\r\n\r\n                                                                                                        function ImperiumCard.evaluateReveal(color, playedCards, revealedCards, artillery)\r\n                                                                                                            return ImperiumCard.evaluateReveal2(\r\n                                                                                                                color,\r\n                                                                                                                Helper.mapValues(playedCards, ImperiumCard._resolveCard),\r\n                                                                                                                Helper.mapValues(revealedCards, ImperiumCard._resolveCard),\r\n                                                                                                            artillery)\r\n                                                                                                        end\r\n\r\n                                                                                                        -- TODO Rework this!\r\n                                                                                                        function ImperiumCard.evaluateReveal2(color, playedCards, revealedCards, artillery)\r\n                                                                                                            local result = {}\r\n\r\n                                                                                                            local context = {\r\n                                                                                                                color = color,\r\n                                                                                                                playedCards = playedCards,\r\n                                                                                                                revealedCards = revealedCards,\r\n                                                                                                                -- This mock up is enough since reveal effects only cover persuasion and strength (or other resources).\r\n                                                                                                                player = {\r\n                                                                                                                    resources = function (_, resourceName, amount)\r\n                                                                                                                        result[resourceName] = (result[resourceName] or 0) + amount\r\n                                                                                                                    end,\r\n\r\n                                                                                                                    drawIntrigues = function (_, amount)\r\n                                                                                                                        result.intrigues = (result.intrigues or 0) + amount\r\n                                                                                                                    end,\r\n\r\n                                                                                                                    troops = function (_, from, to, amount)\r\n                                                                                                                        if from == \"supply\" then\r\n                                                                                                                            if to == \"garrison\" then\r\n                                                                                                                                result.troops = (result.troops or 0) + amount\r\n                                                                                                                            elseif to == \"combat\" then\r\n                                                                                                                                result.fighters = (result.fighters or 0) + amount\r\n                                                                                                                            elseif to == \"negotiation\" then\r\n                                                                                                                                result.negotiators = (result.negotiators or 0) + amount\r\n                                                                                                                            elseif to == \"tanks\" then\r\n                                                                                                                                result.specimens = (result.specimens or 0) + amount\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                }}\r\n\r\n                                                                                                                for cardName, card in ipairs(context.revealedCards) do\r\n                                                                                                                    if card.reveal then\r\n                                                                                                                        context.card = card\r\n                                                                                                                        context.cardName = cardName\r\n                                                                                                                        for _, effect in ipairs(card.reveal) do\r\n                                                                                                                            CardEffect.evaluate(context, effect)\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                if artillery then\r\n                                                                                                                    context.card = nil\r\n                                                                                                                    sword(perSwordCard(1))(context)\r\n                                                                                                                end\r\n\r\n                                                                                                                return result\r\n                                                                                                            end\r\n\r\n                                                                                                            function ImperiumCard.applyAcquireEffect(color, card)\r\n                                                                                                                Types.assertIsPlayerColor(color)\r\n                                                                                                                assert(card)\r\n\r\n                                                                                                                local bonus = ImperiumCard._resolveCard(card).acquireBonus\r\n                                                                                                                if bonus then\r\n                                                                                                                    local context = {\r\n                                                                                                                        color = color,\r\n                                                                                                                        player = PlayBoard.getLeader(color),\r\n                                                                                                                        cardName = Helper.getID(card),\r\n                                                                                                                        card = card,\r\n                                                                                                                    }\r\n\r\n                                                                                                                    for _, bonusItem in ipairs(bonus) do\r\n                                                                                                                        CardEffect.evaluate(context, bonusItem)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n                                                                                                            end\r\n\r\n                                                                                                            function ImperiumCard.getTleilaxuCardCost(card)\r\n                                                                                                                local cardInfo = ImperiumCard._resolveCard(card)\r\n                                                                                                                assert(cardInfo.tleilaxu)\r\n                                                                                                                return cardInfo.cost\r\n                                                                                                            end\r\n\r\n                                                                                                            function ImperiumCard.isStarterCard(card)\r\n                                                                                                                local cardInfo = ImperiumCard._resolveCard(card)\r\n                                                                                                                return cardInfo.starter or false\r\n                                                                                                            end\r\n\r\n                                                                                                            function ImperiumCard.isFactionCard(card, faction)\r\n                                                                                                                if faction then\r\n                                                                                                                    Types.assertIsFaction(faction)\r\n                                                                                                                end\r\n                                                                                                                local cardInfo = ImperiumCard._resolveCard(card)\r\n                                                                                                                return cardInfo.factions and (not faction or Helper.isElementOf(faction, cardInfo.factions))\r\n                                                                                                            end\r\n\r\n                                                                                                            return ImperiumCard\r\n\r\n                                                                                                        end)\r\n                                                                                                        __bundle_register(\"HagalCard\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                            local Module = require(\"utils.Module\")\r\n                                                                                                            local Helper = require(\"utils.Helper\")\r\n                                                                                                            local Park = require(\"utils.Park\")\r\n\r\n                                                                                                            local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                                                            local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                            local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n                                                                                                            local TleilaxuRow = Module.lazyRequire(\"TleilaxuRow\")\r\n                                                                                                            local Types = Module.lazyRequire(\"Types\")\r\n                                                                                                            local Combat = Module.lazyRequire(\"Combat\")\r\n                                                                                                            local TurnControl = Module.lazyRequire(\"TurnControl\")\r\n                                                                                                            local Hagal = Module.lazyRequire(\"Hagal\")\r\n                                                                                                            local TechMarket = Module.lazyRequire(\"TechMarket\")\r\n                                                                                                            local Action = Module.lazyRequire(\"Action\")\r\n\r\n                                                                                                            local HagalCard = {\r\n                                                                                                                cardStrengths = {\r\n                                                                                                                    placeSpyYellow = 2,\r\n                                                                                                                    placeSpyBlue = 2,\r\n                                                                                                                    placeSpyGreen = 2,\r\n                                                                                                                    sardaukar = 4,\r\n                                                                                                                    dutifulService = 2,\r\n                                                                                                                    heighliner = 5,\r\n                                                                                                                    deliverSuppliesAndHeighliner = 1,\r\n                                                                                                                    espionage = 2,\r\n                                                                                                                    secrets = 1,\r\n                                                                                                                    desertTactics = 3,\r\n                                                                                                                    fremkit = 1,\r\n                                                                                                                    assemblyHall = 0,\r\n                                                                                                                    gatherSupport1 = 0,\r\n                                                                                                                    gatherSupport2 = 2,\r\n                                                                                                                    acceptContractAndShipping1 = 2,\r\n                                                                                                                    acceptContractAndShipping2 = 2,\r\n                                                                                                                    researchStation = 2,\r\n                                                                                                                    spiceRefinery = 1,\r\n                                                                                                                    arrakeen = 1,\r\n                                                                                                                    sietchTabr = 3,\r\n                                                                                                                    haggaBasinAndImperialBasin = 2,\r\n                                                                                                                    deepDesert = 2,\r\n                                                                                                                    interstellarShipping = 3,\r\n                                                                                                                    deliverSuppliesAndInterstellarShipping = 0,\r\n                                                                                                                    smugglingAndInterstellarShipping = 2,\r\n                                                                                                                    techNegotiation = 0,\r\n                                                                                                                    dreadnought1p = 3,\r\n                                                                                                                    dreadnought2p = 3,\r\n                                                                                                                    researchStationImmortality = 0,\r\n                                                                                                                    tleilaxuBonus1 = 0,\r\n                                                                                                                    tleilaxuBonus2 = 0,\r\n                                                                                                                    tleilaxuBonus3 = 0,\r\n                                                                                                                }}\r\n\r\n                                                                                                                function HagalCard.setStrength(color, card)\r\n                                                                                                                    Types.assertIsPlayerColor(color)\r\n                                                                                                                    assert(card)\r\n                                                                                                                    local rival = PlayBoard.getLeader(color)\r\n                                                                                                                    local strength = HagalCard.cardStrengths[Helper.getID(card)]\r\n                                                                                                                    if strength then\r\n                                                                                                                        rival.resources(color, \"strength\", strength)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard.activate(color, card, riseOfIx)\r\n                                                                                                                    Types.assertIsPlayerColor(color)\r\n                                                                                                                    assert(card)\r\n                                                                                                                    local cardName = Helper.getID(card)\r\n                                                                                                                    HagalCard.riseOfIx = riseOfIx\r\n                                                                                                                    local rival = PlayBoard.getLeader(color)\r\n                                                                                                                    local actionName = Helper.toCamelCase(\"_activate\", cardName)\r\n                                                                                                                    assert(HagalCard[actionName], actionName)\r\n                                                                                                                    local final = HagalCard[actionName](color, rival, riseOfIx)\r\n                                                                                                                    return final\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard.flushTurnActions(color)\r\n                                                                                                                    HagalCard.acquiredTroopCount = HagalCard.acquiredTroopCount or 0\r\n                                                                                                                    local rival = PlayBoard.getLeader(color)\r\n                                                                                                                    assert(rival, color)\r\n\r\n                                                                                                                    if HagalCard.inCombat then\r\n                                                                                                                        local deploymentLimit = Hagal.getExpertDeploymentLimit(color)\r\n\r\n                                                                                                                        local garrisonedTroopCount = #Park.getObjects(Combat.getGarrisonPark(color))\r\n                                                                                                                        local inSupplyTroopCount = #Park.getObjects(PlayBoard.getSupplyPark(color))\r\n\r\n                                                                                                                        local fromGarrison = math.min(2, garrisonedTroopCount)\r\n                                                                                                                        local fromSupply = HagalCard.acquiredTroopCount\r\n\r\n                                                                                                                        if HagalCard.riseOfIx then\r\n                                                                                                                            -- Dreadnoughts are free and implicit.\r\n                                                                                                                            local count = rival.dreadnought(color, \"garrison\", \"combat\", 2)\r\n                                                                                                                            fromGarrison = math.max(0, fromGarrison - count)\r\n\r\n                                                                                                                            -- Flagship tech.\r\n                                                                                                                            if PlayBoard.hasTech(color, \"flagship\") and\r\n                                                                                                                                deploymentLimit - fromGarrison - fromSupply > 0 and\r\n                                                                                                                                inSupplyTroopCount - fromSupply >= 3 and\r\n                                                                                                                                rival.resources(color, \"solari\", -4)\r\n                                                                                                                                then\r\n                                                                                                                                fromSupply = fromSupply + 3\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n\r\n                                                                                                                        local realFromSupply = math.min(fromSupply, deploymentLimit)\r\n                                                                                                                        deploymentLimit = deploymentLimit - realFromSupply\r\n                                                                                                                        local continuation = Helper.createContinuation(\"HagalCard.flushTurnActions\")\r\n                                                                                                                        if realFromSupply > 0 then\r\n                                                                                                                            rival.troops(color, \"supply\", \"combat\", realFromSupply)\r\n                                                                                                                            Park.onceStabilized(Action.getTroopPark(color, \"combat\")).doAfter(continuation.run)\r\n                                                                                                                        else\r\n                                                                                                                            continuation.run()\r\n                                                                                                                        end\r\n                                                                                                                        if fromSupply > realFromSupply then\r\n                                                                                                                            continuation.doAfter(function ()\r\n                                                                                                                                rival.troops(color, \"supply\", \"garrison\", fromSupply - realFromSupply)\r\n                                                                                                                            end)\r\n                                                                                                                        end\r\n\r\n                                                                                                                        local realFromGarrison = math.min(fromGarrison, deploymentLimit)\r\n                                                                                                                        if realFromGarrison > 0 then\r\n                                                                                                                            rival.troops(color, \"garrison\", \"combat\", realFromGarrison)\r\n                                                                                                                        end\r\n\r\n                                                                                                                        HagalCard.inCombat = false\r\n                                                                                                                    else\r\n                                                                                                                        rival.troops(color, \"supply\", \"garrison\", HagalCard.acquiredTroopCount)\r\n                                                                                                                    end\r\n                                                                                                                    HagalCard.acquiredTroopCount = nil\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard.acquireTroops(color, n, inCombat)\r\n                                                                                                                    if TurnControl.getCurrentPhase() == \"playerTurns\" then\r\n                                                                                                                        HagalCard.inCombat = HagalCard.inCombat or inCombat\r\n                                                                                                                        HagalCard.acquiredTroopCount = (HagalCard.acquiredTroopCount or 0) + n\r\n                                                                                                                    else\r\n                                                                                                                        local rival = PlayBoard.getLeader(color)\r\n                                                                                                                        rival.troops(color, \"supply\", \"garrison\", n)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activatePlaceSpyYellow(color, rival, riseOfIx)\r\n                                                                                                                    -- Order matters: CHOAM, then from right to left.\r\n                                                                                                                    local possiblePosts = {\r\n                                                                                                                        riseOfIx and \"ixChoam\" or \"choam\",\r\n                                                                                                                        \"imperialBasin\",\r\n                                                                                                                        \"haggaBasin\",\r\n                                                                                                                        \"deepDesert\",\r\n                                                                                                                    }\r\n                                                                                                                    for _, observationPostName in ipairs(possiblePosts) do\r\n                                                                                                                        if not MainBoard.observationPostIsOccupied(observationPostName) then\r\n                                                                                                                            rival.sendSpy(color, observationPostName)\r\n                                                                                                                            break\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                    return false\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activatePlaceSpyBlue(color, rival, riseOfIx)\r\n                                                                                                                    -- Order matters: from right to left.\r\n                                                                                                                    local possiblePosts = {\r\n                                                                                                                        \"spiceRefineryArrakeen\",\r\n                                                                                                                        \"researchStationSpiceRefinery\",\r\n                                                                                                                        \"sietchTabrResearchStation\",\r\n                                                                                                                    }\r\n                                                                                                                    for _, observationPostName in ipairs(possiblePosts) do\r\n                                                                                                                        if not MainBoard.observationPostIsOccupied(observationPostName) then\r\n                                                                                                                            rival.sendSpy(color, observationPostName)\r\n                                                                                                                            break\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                    return false\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activatePlaceSpyGreen(color, rival, riseOfIx)\r\n                                                                                                                    -- Order matters: from right to left.\r\n                                                                                                                    local possiblePosts = {\r\n                                                                                                                        riseOfIx and \"ix\" or \"landsraadCouncil2\",\r\n                                                                                                                        \"landsraadCouncil1\",\r\n                                                                                                                    }\r\n                                                                                                                    for _, observationPostName in ipairs(possiblePosts) do\r\n                                                                                                                        if not MainBoard.observationPostIsOccupied(observationPostName) then\r\n                                                                                                                            rival.sendSpy(color, observationPostName)\r\n                                                                                                                            break\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                    return false\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateSardaukar(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"sardaukar\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"sardaukar\")\r\n                                                                                                                        rival.influence(color, \"emperor\", 1)\r\n                                                                                                                        HagalCard.acquireTroops(color, 2)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateDutifulService(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"dutifulService\") and Hagal.isSmartPolitics(color, \"emperor\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"dutifulService\")\r\n                                                                                                                        rival.influence(color, \"emperor\", 1)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateHeighliner(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"heighliner\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"heighliner\")\r\n                                                                                                                        rival.influence(color, \"spacingGuild\", 1)\r\n                                                                                                                        HagalCard.acquireTroops(color, 3, true)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateDeliverSuppliesAndHeighliner(color, rival)\r\n                                                                                                                    if Combat.getCurrentConflictLevel() < 3 then\r\n                                                                                                                        if HagalCard._spaceIsFree(color, \"deliverSupplies\") and Hagal.isSmartPolitics(color, \"spacingGuild\") then\r\n                                                                                                                            HagalCard._sendRivalAgent(color, rival, \"deliverSupplies\")\r\n                                                                                                                            rival.influence(color, \"spacingGuild\", 1)\r\n                                                                                                                            return true\r\n                                                                                                                        else\r\n                                                                                                                            return false\r\n                                                                                                                        end\r\n                                                                                                                    else\r\n                                                                                                                        return HagalCard._activateHeighliner(color, rival)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateEspionage(color, rival)\r\n                                                                                                                    local freeFactionObservationPosts = Helper.filter(\r\n                                                                                                                        {\"emperor\", \"spacingGuild\", \"beneGesserit\", \"fremen\"},\r\n                                                                                                                    Helper.negate(MainBoard.observationPostIsOccupied))\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"espionage\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"espionage\")\r\n                                                                                                                        rival.influence(color, \"beneGesserit\", 1)\r\n                                                                                                                        if not Helper.isEmpty(freeFactionObservationPosts) then\r\n                                                                                                                            rival.sendSpy(color)\r\n                                                                                                                        end\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateSecrets(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"secrets\") and Hagal.isSmartPolitics(color, \"beneGesserit\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"secrets\")\r\n                                                                                                                        rival.influence(color, \"beneGesserit\", 1)\r\n                                                                                                                        for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                            if otherColor ~= color then\r\n                                                                                                                                if #PlayBoard.getIntrigues(otherColor) > 3 then\r\n                                                                                                                                    rival.stealIntrigues(color, otherColor, 1)\r\n                                                                                                                                end\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateDesertTactics(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"desertTactics\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"desertTactics\")\r\n                                                                                                                        rival.influence(color, \"fremen\", 1)\r\n                                                                                                                        HagalCard.acquireTroops(color, 1, true)\r\n                                                                                                                        if PlayBoard.hasMakerHook(color) then\r\n                                                                                                                            MainBoard.blowUpShieldWall(color, true)\r\n                                                                                                                        end\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateFremkit(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"fremkit\") and Hagal.isSmartPolitics(color, \"fremen\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"fremkit\")\r\n                                                                                                                        rival.influence(color, \"fremen\", 1)\r\n                                                                                                                        HagalCard.acquireTroops(color, 0, true)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateAssemblyHall(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"assemblyHall\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"assemblyHall\")\r\n                                                                                                                        rival.drawIntrigues(color, 1)\r\n                                                                                                                        if InfluenceTrack.hasFriendship(color, \"emperor\") then\r\n                                                                                                                            rival.influence(color, 1, 1)\r\n                                                                                                                        end\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateGatherSupport1(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"gatherSupport\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"gatherSupport\")\r\n                                                                                                                        HagalCard.acquireTroops(color, 1)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateGatherSupport2(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"gatherSupport\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"gatherSupport\")\r\n                                                                                                                        HagalCard.acquireTroops(color, 1)\r\n                                                                                                                        if InfluenceTrack.hasFriendship(color, \"emperor\") then\r\n                                                                                                                            rival.influence(color, 2, 1)\r\n                                                                                                                        end\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateAcceptContractAndShipping1(color, rival)\r\n                                                                                                                    if InfluenceTrack.hasFriendship(color, \"spacingGuild\") then\r\n                                                                                                                        if HagalCard._spaceIsFree(color, \"shipping\") then\r\n                                                                                                                            HagalCard._sendRivalAgent(color, rival, \"shipping\")\r\n                                                                                                                            rival.resources(color, \"solari\", 2)\r\n                                                                                                                            rival.influence(color, 3, 1)\r\n                                                                                                                            return true\r\n                                                                                                                        else\r\n                                                                                                                            return false\r\n                                                                                                                        end\r\n                                                                                                                    else\r\n                                                                                                                        if HagalCard._spaceIsFree(color, \"acceptContract\") then\r\n                                                                                                                            HagalCard._sendRivalAgent(color, rival, \"acceptContract\")\r\n                                                                                                                            rival.resources(color, \"solari\", 2)\r\n                                                                                                                            return true\r\n                                                                                                                        else\r\n                                                                                                                            return false\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateAcceptContractAndShipping2(color, rival)\r\n                                                                                                                    if InfluenceTrack.hasFriendship(color, \"spacingGuild\") then\r\n                                                                                                                        if HagalCard._spaceIsFree(color, \"shipping\") then\r\n                                                                                                                            HagalCard._sendRivalAgent(color, rival, \"shipping\")\r\n                                                                                                                            rival.resources(color, \"solari\", 2)\r\n                                                                                                                            rival.influence(color, 1, 1)\r\n                                                                                                                            return true\r\n                                                                                                                        else\r\n                                                                                                                            return false\r\n                                                                                                                        end\r\n                                                                                                                    else\r\n                                                                                                                        if HagalCard._spaceIsFree(color, \"acceptContract\") then\r\n                                                                                                                            HagalCard._sendRivalAgent(color, rival, \"acceptContract\")\r\n                                                                                                                            rival.resources(color, \"solari\", 2)\r\n                                                                                                                            return true\r\n                                                                                                                        else\r\n                                                                                                                            return false\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateResearchStation(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"researchStation\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"researchStation\")\r\n                                                                                                                        HagalCard.acquireTroops(color, 2, true)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateSpiceRefinery(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"spiceRefinery\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"spiceRefinery\")\r\n                                                                                                                        HagalCard.acquireTroops(color, 0, true)\r\n                                                                                                                        rival.signetRing(color)\r\n                                                                                                                        MainBoard.applyControlOfAnySpace(\"spiceRefinery\")\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateArrakeen(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"arrakeen\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"arrakeen\")\r\n                                                                                                                        rival.signetRing(color)\r\n                                                                                                                        HagalCard.acquireTroops(color, 1, true)\r\n                                                                                                                        MainBoard.applyControlOfAnySpace(\"arrakeen\")\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateSietchTabr(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"sietchTabr\") and InfluenceTrack.hasFriendship(color, \"fremen\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"sietchTabr\")\r\n                                                                                                                        rival.takeMakerHook(color)\r\n                                                                                                                        HagalCard.acquireTroops(color, 1, true)\r\n                                                                                                                        rival.resources(color, \"water\", 1)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateHaggaBasinAndImperialBasin(color, rival)\r\n                                                                                                                    -- Note: order matters.\r\n                                                                                                                    local desertSpaces = {\r\n                                                                                                                        haggaBasin = 2,\r\n                                                                                                                        imperialBasin = 1,\r\n                                                                                                                    }\r\n\r\n                                                                                                                    local bestDesertSpace\r\n                                                                                                                    local bestSpiceBonus = 0.5\r\n                                                                                                                    local bestTotalSpice = 0\r\n                                                                                                                    for desertSpace, baseSpice in pairs(desertSpaces) do\r\n                                                                                                                        if HagalCard._spaceIsFree(desertSpace) then\r\n                                                                                                                            local spiceBonus = MainBoard.getSpiceBonus(desertSpace):get()\r\n                                                                                                                            local totalSpice = baseSpice + spiceBonus\r\n                                                                                                                            if spiceBonus > bestSpiceBonus then\r\n                                                                                                                                bestDesertSpace = desertSpace\r\n                                                                                                                                bestSpiceBonus = spiceBonus\r\n                                                                                                                                bestTotalSpice = totalSpice\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n\r\n                                                                                                                    if bestDesertSpace then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, bestDesertSpace)\r\n                                                                                                                        MainBoard.getSpiceBonus(bestDesertSpace):set(0)\r\n                                                                                                                        if PlayBoard.hasMakerHook(color) then\r\n                                                                                                                            MainBoard.blowUpShieldWall(color, true)\r\n                                                                                                                        end\r\n                                                                                                                        HagalCard.acquireTroops(color, 0, true)\r\n                                                                                                                        if bestDesertSpace == \"haggaBasin\" and PlayBoard.hasMakerHook(color) then\r\n                                                                                                                            rival.resources(color, \"spice\", bestSpiceBonus)\r\n                                                                                                                            rival.callSandworm(color, 1)\r\n                                                                                                                        elseif bestDesertSpace == \"imperialBasin\" then\r\n                                                                                                                            rival.resources(color, \"spice\", bestTotalSpice)\r\n                                                                                                                            MainBoard.applyControlOfAnySpace(bestDesertSpace)\r\n                                                                                                                        else\r\n                                                                                                                            rival.resources(color, \"spice\", bestTotalSpice)\r\n                                                                                                                        end\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateDeepDesert(color, rival)\r\n                                                                                                                    local spiceBonus = MainBoard.getSpiceBonus(\"deepDesert\"):get()\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"deepDesert\") and spiceBonus > 0 then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"deepDesert\")\r\n                                                                                                                        MainBoard.getSpiceBonus(\"deepDesert\"):set(0)\r\n                                                                                                                        HagalCard.acquireTroops(color, 0, true)\r\n                                                                                                                        if not MainBoard.shieldWallIsStanding() and PlayBoard.hasMakerHook(color) then\r\n                                                                                                                            rival.resources(color, \"spice\", spiceBonus)\r\n                                                                                                                            rival.callSandworm(color, 2)\r\n                                                                                                                        else\r\n                                                                                                                            rival.resources(color, \"spice\", 4 + spiceBonus)\r\n                                                                                                                        end\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                -- ***\r\n\r\n                                                                                                                function HagalCard._activateInterstellarShipping(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"interstellarShipping\") and InfluenceTrack.hasFriendship(color, \"spacingGuild\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"interstellarShipping\")\r\n                                                                                                                        rival.shipments(color, 2)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateDeliverSuppliesAndInterstellarShipping(color, rival)\r\n                                                                                                                    if InfluenceTrack.hasFriendship(color, \"spacingGuild\") then\r\n                                                                                                                        return HagalCard._activateInterstellarShipping(color, rival)\r\n                                                                                                                    else\r\n                                                                                                                        if HagalCard._spaceIsFree(color, \"deliverSupplies\") then\r\n                                                                                                                            HagalCard._sendRivalAgent(color, rival, \"deliverSupplies\")\r\n                                                                                                                            rival.influence(color, \"spacingGuild\", 1)\r\n                                                                                                                            return true\r\n                                                                                                                        else\r\n                                                                                                                            return false\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateSmugglingAndInterstellarShipping(color, rival)\r\n                                                                                                                    if InfluenceTrack.hasFriendship(color, \"spacingGuild\") then\r\n                                                                                                                        return HagalCard._activateInterstellarShipping(color, rival)\r\n                                                                                                                    else\r\n                                                                                                                        if HagalCard._spaceIsFree(color, \"smuggling\") then\r\n                                                                                                                            HagalCard._sendRivalAgent(color, rival, \"smuggling\")\r\n                                                                                                                            rival.shipments(color, 1)\r\n                                                                                                                            return true\r\n                                                                                                                        else\r\n                                                                                                                            return false\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateTechNegotiation(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"techNegotiation\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"techNegotiation\")\r\n                                                                                                                        TechMarket.registerAcquireTechOption(color, \"techNegotiationTechBuyOption\", \"spice\", 1)\r\n                                                                                                                        if not rival.acquireTech(color, nil, 1) then\r\n                                                                                                                            rival.troops(color, \"supply\", \"negotiation\", 1)\r\n                                                                                                                        end\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateDreadnought1p(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"dreadnought\") and PlayBoard.getAquiredDreadnoughtCount(color) < 2 then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"dreadnought\")\r\n                                                                                                                        rival.dreadnought(color, \"supply\", \"garrison\", 1)\r\n                                                                                                                        TechMarket.registerAcquireTechOption(color, \"dreadnoughtTechBuyOption\", \"spice\", 0)\r\n                                                                                                                        rival.acquireTech(color, nil, 0)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateDreadnought2p(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"dreadnought\") and PlayBoard.getAquiredDreadnoughtCount(color) < 2 then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"dreadnought\")\r\n                                                                                                                        rival.dreadnought(color, \"supply\", \"garrison\", 1)\r\n                                                                                                                        HagalCard.acquireTroops(color, 2)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                -- ***\r\n\r\n                                                                                                                function HagalCard._activateResearchStationImmortality(color, rival)\r\n                                                                                                                    if HagalCard._spaceIsFree(color, \"researchStation\") then\r\n                                                                                                                        HagalCard._sendRivalAgent(color, rival, \"researchStation\")\r\n                                                                                                                        HagalCard.acquireTroops(color, 0, true)\r\n                                                                                                                        rival.beetle(color, 2)\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateTleilaxuBonus1(color, rival)\r\n                                                                                                                    rival.beetle(color, 1)\r\n                                                                                                                    TleilaxuRow.trash(1)\r\n                                                                                                                    return false\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateTleilaxuBonus2(color, rival)\r\n                                                                                                                    rival.beetle(color, 1)\r\n                                                                                                                    return false\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._activateTleilaxuBonus3(color, rival)\r\n                                                                                                                    rival.beetle(color, 1)\r\n                                                                                                                    TleilaxuRow.trash(2)\r\n                                                                                                                    return false\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._sendRivalAgent(color, rival, spaceName)\r\n                                                                                                                    if MainBoard.sendRivalAgent(color, spaceName) then\r\n                                                                                                                        if PlayBoard.useTech(color, \"trainingDrones\") then\r\n                                                                                                                            HagalCard.acquireTroops(color, 0)\r\n                                                                                                                        end\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                function HagalCard._spaceIsFree(color, spaceName)\r\n                                                                                                                    if not MainBoard.hasVoiceToken(spaceName) and not MainBoard.hasAgentInSpace(spaceName, color) then\r\n                                                                                                                        if MainBoard.hasEnemyAgentInSpace(spaceName, color) then\r\n                                                                                                                            return PlayBoard.useTech(color, \"invasionShips\")\r\n                                                                                                                        else\r\n                                                                                                                            return true\r\n                                                                                                                        end\r\n                                                                                                                    else\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                return HagalCard\r\n\r\n                                                                                                            end)\r\n                                                                                                            __bundle_register(\"Hagal\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                local Module = require(\"utils.Module\")\r\n                                                                                                                local Helper = require(\"utils.Helper\")\r\n                                                                                                                local Park = require(\"utils.Park\")\r\n                                                                                                                local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                                local Deck = Module.lazyRequire(\"Deck\")\r\n                                                                                                                local TurnControl = Module.lazyRequire(\"TurnControl\")\r\n                                                                                                                local LeaderSelection = Module.lazyRequire(\"LeaderSelection\")\r\n                                                                                                                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                                local HagalCard = Module.lazyRequire(\"HagalCard\")\r\n                                                                                                                local Combat = Module.lazyRequire(\"Combat\")\r\n                                                                                                                local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                                                                local ConflictCard = Module.lazyRequire(\"ConflictCard\")\r\n                                                                                                                local Rival = Module.lazyRequire(\"Rival\")\r\n                                                                                                                local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n                                                                                                                local ImperiumRow = Module.lazyRequire(\"ImperiumRow\")\r\n                                                                                                                local Action = Module.lazyRequire(\"Action\")\r\n\r\n                                                                                                                local Hagal = {}\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal.onLoad(state)\r\n                                                                                                                    if not state.settings or state.settings.numberOfPlayers < 3 then\r\n                                                                                                                        Helper.append(Hagal, Helper.resolveGUIDs(true, {\r\n                                                                                                                            deckZone = \"8f49e3\",\r\n                                                                                                                        }))\r\n                                                                                                                    end\r\n\r\n                                                                                                                    if state.settings and state.settings.numberOfPlayers < 3 then\r\n                                                                                                                        Hagal._transientSetUp(state.settings)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal.getDifficulties()\r\n                                                                                                                    return {\r\n                                                                                                                        novice = \"novice\",\r\n                                                                                                                        veteran = \"veteran\",\r\n                                                                                                                        expert = \"expert\",\r\n                                                                                                                        expertPlus = \"expertPlus\",\r\n                                                                                                                    }\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal.setUp(settings)\r\n                                                                                                                    if settings.numberOfPlayers < 3 then\r\n                                                                                                                        Deck.generateHagalDeck(Hagal.deckZone, settings.riseOfIx, settings.immortality, settings.numberOfPlayers).doAfter(function (deck)\r\n                                                                                                                            assert(deck, \"No Hagal deck!\")\r\n                                                                                                                            Helper.shuffleDeck(deck)\r\n                                                                                                                        end)\r\n                                                                                                                        Hagal._transientSetUp(settings)\r\n                                                                                                                    else\r\n                                                                                                                        Hagal._tearDown()\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal._transientSetUp(settings)\r\n                                                                                                                    Hagal.numberOfPlayers = settings.numberOfPlayers\r\n                                                                                                                    Hagal.riseOfIx = settings.riseOfIx\r\n                                                                                                                    Hagal.difficulty = Hagal.numberOfPlayers == 1 and settings.difficulty or nil\r\n                                                                                                                    Hagal.autoTurnInSolo = settings.autoTurnInSolo\r\n                                                                                                                    Hagal.brutalEscalation = settings.brutalEscalation\r\n                                                                                                                    Hagal.expertDeployment = settings.expertDeployment\r\n                                                                                                                    Hagal.smartPolitics = settings.smartPolitics\r\n\r\n                                                                                                                    Helper.registerEventListener(\"phaseStart\", function (phase)\r\n                                                                                                                        if phase == \"combat\" then\r\n                                                                                                                            local actions = {}\r\n                                                                                                                            for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                                if PlayBoard.isRival(color) and Combat.isInCombat(color) then\r\n                                                                                                                                    table.insert(actions, Helper.partialApply(Hagal._setStrengthFromFirstValidCard, color))\r\n                                                                                                                                end\r\n                                                                                                                            end\r\n                                                                                                                            Helper.chainActions(actions)\r\n                                                                                                                        end\r\n                                                                                                                    end)\r\n\r\n                                                                                                                    if settings.imperiumRowChurn then\r\n                                                                                                                        Helper.registerEventListener(\"phaseEnd\", function (phase)\r\n                                                                                                                            if phase == \"playerTurns\" then\r\n                                                                                                                                ImperiumRow.churn()\r\n                                                                                                                            end\r\n                                                                                                                        end)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal._tearDown()\r\n                                                                                                                    Hagal.deckZone.destruct()\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal.newRival(name)\r\n                                                                                                                    return Rival.newRival(name)\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal.activate(phase, color)\r\n                                                                                                                    -- A delay before and after the action, to let the human(s) see the progress.\r\n                                                                                                                    Helper.onceTimeElapsed(1).doAfter(function ()\r\n                                                                                                                        Hagal._lateActivate(phase, color).doAfter(function ()\r\n                                                                                                                            -- The leader selection already has an automatic end of turn when a leader is picked.\r\n                                                                                                                            if phase ~= \"leaderSelection\" then\r\n                                                                                                                                if Hagal.getRivalCount() == 1 or Hagal.autoTurnInSolo then\r\n                                                                                                                                    Helper.onceTimeElapsed(1).doAfter(TurnControl.endOfTurn)\r\n                                                                                                                                else\r\n                                                                                                                                    PlayBoard.createEndOfTurnButton(color)\r\n                                                                                                                                end\r\n                                                                                                                            end\r\n                                                                                                                        end)\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal._lateActivate(phase, color)\r\n                                                                                                                    local continuation = Helper.createContinuation(\"Hagal._lateActivate\")\r\n\r\n                                                                                                                    if phase == \"leaderSelection\" then\r\n                                                                                                                        continuation.run()\r\n                                                                                                                    elseif phase == \"gameStart\" then\r\n                                                                                                                        continuation.run()\r\n                                                                                                                    elseif phase == \"roundStart\" then\r\n                                                                                                                        continuation.run()\r\n                                                                                                                    elseif phase == \"playerTurns\" then\r\n                                                                                                                        Hagal._activateFirstValidActionCard(color).doAfter(continuation.run)\r\n                                                                                                                    elseif phase == \"combat\" then\r\n                                                                                                                        continuation.run()\r\n                                                                                                                    elseif phase == \"combatEnd\" then\r\n                                                                                                                        Hagal._collectReward(color).doAfter(continuation.run)\r\n                                                                                                                    elseif phase == \"endgame\" then\r\n                                                                                                                        continuation.run()\r\n                                                                                                                    else\r\n                                                                                                                        continuation.cancel()\r\n                                                                                                                        error(\"Unknown phase: \" .. tostring(phase))\r\n                                                                                                                    end\r\n\r\n                                                                                                                    return continuation\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal._activateFirstValidActionCard(color)\r\n                                                                                                                    return Hagal._activateFirstValidCard(color, function (card)\r\n                                                                                                                        return HagalCard.activate(color, card, Hagal.riseOfIx)\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal._collectReward(color)\r\n                                                                                                                    local continuation = Helper.createContinuation(\"Hagal._collectReward\")\r\n                                                                                                                    Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                                                                        local rank = Combat.getRank(color).value\r\n                                                                                                                        local conflictName = Combat.getCurrentConflictName()\r\n                                                                                                                        local hasSandworms = Combat.hasSandworms(color)\r\n                                                                                                                        local postAction = Helper.partialApply(Rival.triggerHagalReaction, color)\r\n                                                                                                                        ConflictCard.collectReward(color, conflictName, rank, hasSandworms, postAction).doAfter(function ()\r\n                                                                                                                            if rank == 1 then\r\n                                                                                                                                local leader = PlayBoard.getLeader(color)\r\n                                                                                                                                if PlayBoard.hasTech(color, \"windtraps\") then\r\n                                                                                                                                    leader.resources(color, \"water\", 1)\r\n                                                                                                                                end\r\n\r\n                                                                                                                                local dreadnoughts = Combat.getDreadnoughtsInConflict(color)\r\n\r\n                                                                                                                                if #dreadnoughts > 0 and PlayBoard.hasTech(color, \"detonationDevices\") then\r\n                                                                                                                                    Park.putObject(dreadnoughts[1], PlayBoard.getDreadnoughtPark(color))\r\n                                                                                                                                    table.remove(dreadnoughts, 1)\r\n                                                                                                                                    leader.gainVictoryPoint(color, \"detonationDevices\", 1)\r\n                                                                                                                                end\r\n\r\n                                                                                                                                if #dreadnoughts > 0 then\r\n                                                                                                                                    local bestBannerZone = Hagal._findBestBannerZone(color)\r\n                                                                                                                                    dreadnoughts[1].setPositionSmooth(bestBannerZone.getPosition())\r\n                                                                                                                                end\r\n                                                                                                                            end\r\n                                                                                                                            continuation.run()\r\n                                                                                                                        end)\r\n                                                                                                                    end)\r\n                                                                                                                    return continuation\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal._findBestBannerZone(color)\r\n                                                                                                                    local bestValue\r\n                                                                                                                    local bestBannerZone\r\n                                                                                                                    -- Already properly ordered (CCW from Imperial Basin).\r\n                                                                                                                    for i, bannerZone in ipairs(MainBoard.getBannerZones()) do\r\n                                                                                                                        if not MainBoard.getControllingDreadnought(bannerZone) then\r\n                                                                                                                            local owner = MainBoard.getControllingPlayer(bannerZone)\r\n                                                                                                                            local value\r\n                                                                                                                            if not owner then\r\n                                                                                                                                value = 10\r\n                                                                                                                            elseif owner ~= color then\r\n                                                                                                                                value = 20\r\n                                                                                                                            else\r\n                                                                                                                                value = 0\r\n                                                                                                                            end\r\n                                                                                                                            value = value + i\r\n                                                                                                                            if not bestValue or bestValue < value then\r\n                                                                                                                                bestValue = value\r\n                                                                                                                                bestBannerZone = bannerZone\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                    assert(bestBannerZone)\r\n                                                                                                                    return bestBannerZone\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal._setStrengthFromFirstValidCard(color)\r\n                                                                                                                    local level3Conflict = Combat.getCurrentConflictLevel() == 3\r\n\r\n                                                                                                                    -- Brutal Escalation\r\n                                                                                                                    local n = (level3Conflict and Hagal.brutalEscalation) and 2 or 1\r\n\r\n                                                                                                                    return Hagal._activateFirstValidCard(color, function (card)\r\n                                                                                                                        if HagalCard.setStrength(color, card) then\r\n                                                                                                                            n = n - 1\r\n                                                                                                                            if n > 0 then\r\n                                                                                                                                Action.log(I18N(\"brutalEscalation\"), color)\r\n                                                                                                                            end\r\n                                                                                                                            return n == 0\r\n                                                                                                                        else\r\n                                                                                                                            return false\r\n                                                                                                                        end\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal.getExpertDeploymentLimit(color)\r\n                                                                                                                    local level3Conflict = Combat.getCurrentConflictLevel() == 3\r\n\r\n                                                                                                                    local n\r\n                                                                                                                    if not level3Conflict and Hagal.expertDeployment then\r\n                                                                                                                        local colorUnitCount = 0\r\n                                                                                                                        local otherColorMaxUnitCount = 0\r\n                                                                                                                        for otherColor, unitCount in pairs(Combat.getUnitCounts()) do\r\n                                                                                                                            if otherColor == color then\r\n                                                                                                                                colorUnitCount = unitCount\r\n                                                                                                                            else\r\n                                                                                                                                otherColorMaxUnitCount = math.max(otherColorMaxUnitCount, unitCount)\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                        n = math.max(0, 3 + otherColorMaxUnitCount - colorUnitCount)\r\n                                                                                                                        Action.log(I18N(\"expertDeploymentLimit\", {limit = n}), color)\r\n                                                                                                                    else\r\n                                                                                                                        n = 12\r\n                                                                                                                    end\r\n                                                                                                                    --Helper.dump(\"level3Conflict:\", level3Conflict, \"/ expertDeploymentLimit:\", n)\r\n                                                                                                                    return n\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal.isSmartPolitics(color, faction)\r\n                                                                                                                    if Hagal.smartPolitics then\r\n                                                                                                                        local colorRank = 0\r\n                                                                                                                        local otherColorMaxRank = 0\r\n                                                                                                                        for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                            local rank = InfluenceTrack.getInfluence(faction, otherColor, true)\r\n                                                                                                                            if otherColor == color then\r\n                                                                                                                                colorRank = rank\r\n                                                                                                                            else\r\n                                                                                                                                otherColorMaxRank = math.max(otherColorMaxRank, rank)\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                        local leadMargin = colorRank - otherColorMaxRank\r\n\r\n                                                                                                                        local smart\r\n                                                                                                                        if InfluenceTrack.hasAlliance(color, faction) then\r\n                                                                                                                            smart = leadMargin < 1\r\n                                                                                                                        elseif InfluenceTrack.hasFriendship(color, faction) then\r\n                                                                                                                            smart = leadMargin > -2\r\n                                                                                                                        else\r\n                                                                                                                            smart = true\r\n                                                                                                                        end\r\n\r\n                                                                                                                        --Helper.dump(\"alliance:\", InfluenceTrack.hasAlliance(color, faction), \"/ friendship:\", InfluenceTrack.hasFriendship(color, faction), \"/ lead margin:\", leadMargin)\r\n\r\n                                                                                                                        if not smart then\r\n                                                                                                                            Action.log(I18N(\"smartPolitics\"), color)\r\n                                                                                                                        end\r\n\r\n                                                                                                                        return smart\r\n                                                                                                                    end\r\n\r\n                                                                                                                    return true\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal._activateFirstValidCard(color, action)\r\n                                                                                                                    local continuation = Helper.createContinuation(\"Hagal._activateFirstValidCard\")\r\n\r\n                                                                                                                    local emptySlots = Park.findEmptySlots(PlayBoard.getAgentCardPark(color))\r\n                                                                                                                    assert(emptySlots and #emptySlots > 0)\r\n\r\n                                                                                                                    Hagal._doActivateFirstValidCard(color, action, 0, continuation)\r\n\r\n                                                                                                                    return continuation\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal._doActivateFirstValidCard(color, action, n, continuation)\r\n                                                                                                                    local emptySlots = Park.findEmptySlots(PlayBoard.getRevealCardPark(color))\r\n                                                                                                                    assert(emptySlots and #emptySlots > 0)\r\n                                                                                                                    assert(n < 10, \"Something is not right!\")\r\n\r\n                                                                                                                    Helper.moveCardFromZone(Hagal.deckZone, emptySlots[2] + Vector(0, 1 + 0.4 * n, 0), Vector(0, 180, 0)).doAfter(function (card)\r\n                                                                                                                        if card then\r\n                                                                                                                            Helper.onceTimeElapsed(1).doAfter(function ()\r\n                                                                                                                                if Helper.getID(card) == \"reshuffle\" then\r\n                                                                                                                                    Hagal._reshuffleDeck(color, action, n, continuation)\r\n                                                                                                                                elseif action(card) then\r\n                                                                                                                                    Rival.triggerHagalReaction(color).doAfter(function ()\r\n                                                                                                                                        HagalCard.flushTurnActions(color)\r\n                                                                                                                                        continuation.run(card)\r\n                                                                                                                                    end)\r\n                                                                                                                                else\r\n                                                                                                                                    Rival.triggerHagalReaction(color).doAfter(function ()\r\n                                                                                                                                        Hagal._doActivateFirstValidCard(color, action, n + 1, continuation)\r\n                                                                                                                                    end)\r\n                                                                                                                                end\r\n                                                                                                                            end)\r\n                                                                                                                        else\r\n                                                                                                                            Hagal._reshuffleDeck(color, action, n, continuation)\r\n                                                                                                                        end\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal._reshuffleDeck(color, action, n, continuation)\r\n                                                                                                                    local i = 1\r\n                                                                                                                    for _, object in ipairs(getObjects()) do\r\n                                                                                                                        if object.hasTag(\"Hagal\") and (object.type == \"Deck\" or object.type == \"Card\") then\r\n                                                                                                                            for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                                if (PlayBoard.isInside(otherColor, object)) then\r\n                                                                                                                                    if not object.is_face_down then\r\n                                                                                                                                        object.flip()\r\n                                                                                                                                    end\r\n                                                                                                                                    object.setPosition(Hagal.deckZone.getPosition() + Vector(0, i, 0))\r\n                                                                                                                                    i = i + 1\r\n                                                                                                                                    break\r\n                                                                                                                                end\r\n                                                                                                                            end\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                    Helper.onceTimeElapsed(2).doAfter(function ()\r\n                                                                                                                        local deck = Helper.getDeck(Hagal.deckZone)\r\n                                                                                                                        assert(deck, \"No Hagal deck anymore!\")\r\n                                                                                                                        Helper.shuffleDeck(deck)\r\n                                                                                                                        Helper.onceShuffled(deck).doAfter(function ()\r\n                                                                                                                            Hagal._doActivateFirstValidCard(color, action, n + 1, continuation)\r\n                                                                                                                        end)\r\n                                                                                                                    end)\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal.getRivalCount()\r\n                                                                                                                    if Hagal.numberOfPlayers then\r\n                                                                                                                        return 3 - Hagal.numberOfPlayers\r\n                                                                                                                    else\r\n                                                                                                                        return 0\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function Hagal.isSwordmasterAvailable()\r\n                                                                                                                    return Hagal.difficulty ~= \"expertPlus\"\r\n                                                                                                                end\r\n\r\n                                                                                                                return Hagal\r\n\r\n                                                                                                            end)\r\n                                                                                                            __bundle_register(\"ScoreBoard\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                local Module = require(\"utils.Module\")\r\n                                                                                                                local Helper = require(\"utils.Helper\")\r\n                                                                                                                local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                                local Combat = Module.lazyRequire(\"Combat\")\r\n                                                                                                                local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n                                                                                                                local TleilaxuResearch = Module.lazyRequire(\"TleilaxuResearch\")\r\n\r\n                                                                                                                local ScoreBoard = {\r\n                                                                                                                tokens = {}}\r\n\r\n                                                                                                                ---\r\n                                                                                                                function ScoreBoard.onLoad(state)\r\n\r\n                                                                                                                    ScoreBoard.hiddenZone = Helper.resolveGUIDs(true, \"3848a9\")\r\n\r\n                                                                                                                    for _, object in ipairs(ScoreBoard.hiddenZone.getObjects()) do\r\n                                                                                                                        object.setInvisibleTo(Player.getColors())\r\n                                                                                                                    end\r\n\r\n                                                                                                                    --[[\r\n        4 players tokens -> PlayBoard\r\n        alliance / friendship -> InfluenceTrack\r\n        others -> here\r\n    ]]\r\n                                                                                                                    ScoreBoard.tokens = Helper.resolveGUIDs(false, {\r\n                                                                                                                        friendship = {\r\n                                                                                                                            emperorBag = \"7007df\",\r\n                                                                                                                            spacingGuildBag = \"af9795\",\r\n                                                                                                                            beneGesseritBag = \"3ebbd7\",\r\n                                                                                                                            fremenBag = \"f5a7af\",\r\n                                                                                                                            greatHousesBag = \"07e49b\",\r\n                                                                                                                            fringeWorldsBag = \"ff38f9\",\r\n                                                                                                                        },\r\n                                                                                                                        base = {\r\n                                                                                                                            fourPlayerBag = \"c2290f\",\r\n                                                                                                                            allyBag = \"5140a0\",\r\n                                                                                                                            commanderBag = \"1a42dd\",\r\n                                                                                                                            --\r\n                                                                                                                            theSpiceMustFlowBag = \"a7e06b\",\r\n                                                                                                                            combatVictoryPointBag = \"86dc4e\",\r\n                                                                                                                            muadDibVictoryPointBag = \"9aad55\",\r\n                                                                                                                            ornithopterVictoryPointBag = \"600a38\",\r\n                                                                                                                            crysknifeVictoryPointBag = \"779feb\",\r\n                                                                                                                            jokerVictoryPointBag = \"ab479e\",\r\n                                                                                                                            endgameCardBag = \"182475\",\r\n                                                                                                                            --\r\n                                                                                                                            smugglerHavenBag = \"fe7d43\",\r\n                                                                                                                            corrinthCityBag = \"4e150b\",\r\n                                                                                                                            junctionHeadquartersBag = \"2ff2dc\",\r\n                                                                                                                            objectiveBag = \"fd4468\",\r\n                                                                                                                            priorityContracts = \"732faa\",\r\n                                                                                                                            deliveryAgreement = \"93c9bd\",\r\n                                                                                                                            strategicStockpiling1 = \"008432\",\r\n                                                                                                                            strategicStockpiling2 = \"c070b2\",\r\n                                                                                                                            opportunism = \"504094\",\r\n                                                                                                                        },\r\n                                                                                                                        legacy = {\r\n                                                                                                                            guildAmbassadorBag = \"912d75\",\r\n                                                                                                                            opulenceBag = \"c22e46\",\r\n                                                                                                                            theSleeperMustAwaken = \"9bfd65\",\r\n                                                                                                                            choamShares = \"2da115\",\r\n                                                                                                                            stagedIncident = \"1f98e2\",\r\n                                                                                                                        },\r\n                                                                                                                        hagal = {\r\n                                                                                                                            intrigueBag = \"772594\",\r\n                                                                                                                            solariBag = \"266448\",\r\n                                                                                                                            waterBag = \"3963f0\",\r\n                                                                                                                            spiceBag = \"19c977\",\r\n                                                                                                                        },\r\n                                                                                                                        ix = {\r\n                                                                                                                            sayyadinaBag = \"9193f5\",\r\n                                                                                                                            detonationDevicesBag = \"4cc3d5\",\r\n                                                                                                                            ixianEngineerBag = \"4ae3de\",\r\n                                                                                                                            flagship = \"692480\",\r\n                                                                                                                            spySatellites = \"c94718\",\r\n                                                                                                                            techEndgameBag = \"3e2ce6\",\r\n                                                                                                                        },\r\n                                                                                                                        immortality = {\r\n                                                                                                                            scientificBreakthrough = \"b56adc\",\r\n                                                                                                                            tleilaxBag = \"37ceab\",\r\n                                                                                                                            forHumanityBag = \"6e2a13\"\r\n                                                                                                                        },\r\n                                                                                                                        -- bloodlines VP tokens\r\n                                                                                                                        uprising = {\r\n                                                                                                                            bl_SardaukarHighCommand = \"ccee71\",\r\n                                                                                                                            vp_YrkoonFiveSpice = \"2e7d22\",\r\n                                                                                                                            vp_ThreatenSpiceProduction = \"928d6b\"\r\n                                                                                                                        },\r\n                                                                                                                    })\r\n\r\n                                                                                                                    if state.settings and state.settings.riseOfIx then\r\n                                                                                                                        ScoreBoard._transientSetUp(state.settings)\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function ScoreBoard.setUp(settings)\r\n                                                                                                                    local activateCategories = {\r\n                                                                                                                        base = true,\r\n                                                                                                                        legacy = settings.legacy,\r\n                                                                                                                        hagal = settings.numberOfPlayers <= 2,\r\n                                                                                                                        ix = settings.riseOfIx,\r\n                                                                                                                        immortality = settings.immortality,\r\n                                                                                                                    }\r\n\r\n                                                                                                                    for _, category in ipairs({\"base\", \"legacy\", \"hagal\", \"ix\", \"immortality\"}) do\r\n                                                                                                                        if activateCategories[category] then\r\n                                                                                                                            Helper.forEachRecursively(ScoreBoard.tokens[category], function (name, token)\r\n                                                                                                                                assert(token)\r\n                                                                                                                                local key = Helper.getID(token)\r\n                                                                                                                                if key and key:len() > 0 then\r\n                                                                                                                                    token.setName(I18N(key))\r\n                                                                                                                                end\r\n                                                                                                                                if false then\r\n                                                                                                                                    -- Clumsy workaround to name items in a bag.\r\n                                                                                                                                    -- TODO Recreate the bag?\r\n                                                                                                                                    if token.type == \"Bag\" then\r\n                                                                                                                                        local count = #token.getObjects()\r\n                                                                                                                                        for i = 1, count do\r\n                                                                                                                                            local innerToken = token.takeObject({position = token.getPosition() + Vector(0, i * 0.5, 0)})\r\n                                                                                                                                            innerToken.setLock(true)\r\n                                                                                                                                            Helper.onceTimeElapsed(0.5).doAfter(function ()\r\n                                                                                                                                                innerToken.setName(I18N(Helper.getID(innerToken)))\r\n                                                                                                                                                innerToken.setLock(false)\r\n                                                                                                                                            end)\r\n                                                                                                                                        end\r\n                                                                                                                                    elseif token.type == \"Infinite\" then\r\n                                                                                                                                        -- TODO\r\n                                                                                                                                    end\r\n                                                                                                                                end\r\n                                                                                                                            end)\r\n                                                                                                                        else\r\n                                                                                                                            Helper.forEach(ScoreBoard.tokens[category], function (_, token)\r\n                                                                                                                                token.destruct()\r\n                                                                                                                            end)\r\n                                                                                                                            ScoreBoard.tokens[category] = nil\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n\r\n                                                                                                                    ScoreBoard._transientSetUp(settings)\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function ScoreBoard._transientSetUp(settings)\r\n                                                                                                                    -- NOP\r\n                                                                                                                end\r\n\r\n                                                                                                                ---\r\n                                                                                                                function ScoreBoard.gainVictoryPoint(color, name, count)\r\n                                                                                                                    -- FIXME Useless indirection.\r\n                                                                                                                    local holder = {\r\n                                                                                                                        success = false\r\n                                                                                                                    }\r\n                                                                                                                    Helper.forEachRecursively(ScoreBoard.tokens, function (victoryPointName, victoryPointSource)\r\n                                                                                                                        if name == victoryPointName then\r\n                                                                                                                            PlayBoard.grantScoreToken(color, victoryPointSource)\r\n                                                                                                                            holder.success = true\r\n                                                                                                                        elseif name .. \"Bag\" == victoryPointName then\r\n                                                                                                                            PlayBoard.grantScoreTokenFromBag(color, victoryPointSource, count)\r\n                                                                                                                            holder.success = true\r\n                                                                                                                        end\r\n                                                                                                                    end)\r\n                                                                                                                    if holder.success then\r\n                                                                                                                        return true\r\n                                                                                                                    elseif Combat.gainVictoryPoint(color, name, count) then\r\n                                                                                                                        return true\r\n                                                                                                                    elseif InfluenceTrack.gainVictoryPoint(color, name, count) then\r\n                                                                                                                        return true\r\n                                                                                                                    else\r\n                                                                                                                        Helper.dump(\"No VP named\", name)\r\n                                                                                                                        return false\r\n                                                                                                                    end\r\n                                                                                                                end\r\n\r\n                                                                                                                --- TODO Find a better place and implementation.\r\n                                                                                                                function ScoreBoard.getFreeVoiceToken()\r\n                                                                                                                    for _, object in ipairs(ScoreBoard.hiddenZone.getObjects()) do\r\n                                                                                                                        if Helper.isElementOf(object.getGUID(), {\"516df5\", \"cc0eda\"}) then\r\n                                                                                                                            object.setInvisibleTo({})\r\n                                                                                                                            return object\r\n                                                                                                                        end\r\n                                                                                                                    end\r\n                                                                                                                    return nil\r\n                                                                                                                end\r\n\r\n                                                                                                                return ScoreBoard\r\n\r\n                                                                                                            end)\r\n                                                                                                            __bundle_register(\"Deck\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                local Module = require(\"utils.Module\")\r\n                                                                                                                local Helper = require(\"utils.Helper\")\r\n                                                                                                                local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                                local Locale = Module.lazyRequire(\"Locale\")\r\n\r\n                                                                                                                -- Merakon's House Blend -> https://boardgamegeek.com/thread/3213458/merakons-house-blend\r\n                                                                                                                local Deck = {\r\n                                                                                                                    decals = {\r\n                                                                                                                        corrinoAcquireCard = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141304246/9E9986D0F348F5D23A16745A271FFD28958651FB/\",\r\n                                                                                                                        genericAcquireCard = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141305713/5F7C572489E5E03F3230B012DA0E01A84EDAABF8/\",\r\n                                                                                                                    },\r\n                                                                                                                    customDeckBaseId = 100,\r\n                                                                                                                    backs = {\r\n                                                                                                                        imperiumCardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141326342/C3DC7A02CF378129569B414967C9BE25097C6E77/\",\r\n                                                                                                                        intrigueCardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141342007/D63B92C616541C84A7984026D757DB03E79532DD/\",\r\n                                                                                                                        techCardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363045/1EA614EC832B16BC94811A7FE793344057850409/\",\r\n                                                                                                                        conflictCardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141365665/0423ECA84C0D71CCB38EBD60DEAE641EE72D7933/\", -- a workaround\r\n                                                                                                                        conflict1CardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141365665/0423ECA84C0D71CCB38EBD60DEAE641EE72D7933/\",\r\n                                                                                                                        conflict2CardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141365164/3B3F54DF65F76F0850D0EC683602524806A11E49/\",\r\n                                                                                                                        conflict3CardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141365939/9E194557E37B5C4CA74C7A77CBFB6B8A36043916/\",\r\n                                                                                                                        objectiveCardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141298841/02A61DC439DF213EA61A8CCEC1F545F4D369F2E8/\",\r\n                                                                                                                        hagalCardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141333724/26E28590801800D852F4BCA53E959AAFAAFC8FF3/\",\r\n                                                                                                                        leaderCardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141277039/005244DAC0A29EE68CFF741FC06564969563E8CF/\",\r\n                                                                                                                        rivalLeaderCardBack = \"https://steamusercontent-a.akamaihd.net/ugc/2291837013341174770/EB5ECE9F5373F0B132E93CD5825B89E7F023E9A2/\",\r\n                                                                                                                    },\r\n                                                                                                                    sources = {},\r\n                                                                                                                    starter = {\r\n                                                                                                                        -- per player arity\r\n                                                                                                                        base = {\r\n                                                                                                                            duneTheDesertPlanet = 2,\r\n                                                                                                                            seekAllies = 1,\r\n                                                                                                                            signetRing = 1,\r\n                                                                                                                            diplomacy = 1,\r\n                                                                                                                            reconnaissance = 1,\r\n                                                                                                                            convincingArgument = 2,\r\n                                                                                                                            dagger = 2,\r\n                                                                                                                        },\r\n                                                                                                                        epic = {\r\n                                                                                                                            controlTheSpice = 1,\r\n                                                                                                                        },\r\n                                                                                                                        immortality = {\r\n                                                                                                                            duneTheDesertPlanet = Helper.ERASE,\r\n                                                                                                                            experimentation = 2,\r\n                                                                                                                        },\r\n                                                                                                                        emperor = {\r\n                                                                                                                            emperorConvincingArgument = 1,\r\n                                                                                                                            emperorCorrinoMight = 1,\r\n                                                                                                                            emperorCriticalShipments = 1,\r\n                                                                                                                            emperorDemandResults = 1,\r\n                                                                                                                            emperorDevastatingAssault = 1,\r\n                                                                                                                            emperorImperialOrnithopter = 2,\r\n                                                                                                                            emperorSignetRing = 1,\r\n                                                                                                                            emperorSeekAllies = 1,\r\n                                                                                                                            emperorImperialTent = 1,\r\n                                                                                                                        },\r\n                                                                                                                        muadDib = {\r\n                                                                                                                            muadDibCommandRespect = 1,\r\n                                                                                                                            muadDibConvincingArgument = 1,\r\n                                                                                                                            muadDibDemandAttention = 1,\r\n                                                                                                                            muadDibDesertCall = 1,\r\n                                                                                                                            muadDibLimitedLandsraadAccess = 2,\r\n                                                                                                                            muadDibSeekAllies = 1,\r\n                                                                                                                            muadDibUsul = 1,\r\n                                                                                                                            muadDibThreatenSpiceProduction = 1,\r\n                                                                                                                            muadDibSignetRing = 1,\r\n                                                                                                                        },\r\n                                                                                                                    },\r\n                                                                                                                    imperium = {\r\n                                                                                                                        legacy = {\r\n                                                                                                                            jessicaOfArrakis = 1, -- release promo\r\n                                                                                                                            sardaukarLegion = 2,\r\n                                                                                                                            drYueh = 1,\r\n                                                                                                                            assassinationMission = 2,\r\n                                                                                                                            sardaukarInfantry = 2,\r\n                                                                                                                            beneGesseritInitiate = 2,\r\n                                                                                                                            guildAdministrator = 2,\r\n                                                                                                                            theVoice = 2,\r\n                                                                                                                            scout = 2,\r\n                                                                                                                            imperialSpy = 2,\r\n                                                                                                                            beneGesseritSister = 3,\r\n                                                                                                                            missionariaProtectiva = 2, -- First release fixed in Rise of Ix\r\n                                                                                                                            spiceHunter = 2,\r\n                                                                                                                            spiceSmugglers = 2,\r\n                                                                                                                            fedaykinDeathCommando = 2,\r\n                                                                                                                            geneManipulation = 2,\r\n                                                                                                                            guildBankers = 1,\r\n                                                                                                                            choamDirectorship = 1,\r\n                                                                                                                            crysknife = 1,\r\n                                                                                                                            chani = 1,\r\n                                                                                                                            spaceTravel = 2,\r\n                                                                                                                            duncanIdaho = 1,\r\n                                                                                                                            shiftingAllegiances = 2,\r\n                                                                                                                            kwisatzHaderach = 1,\r\n                                                                                                                            sietchReverendMother = 1,\r\n                                                                                                                            arrakisRecruiter = 2,\r\n                                                                                                                            firmGrip = 1,\r\n                                                                                                                            smugglersThopter = 2,\r\n                                                                                                                            carryall = 1,\r\n                                                                                                                            gunThopter = 2,\r\n                                                                                                                            guildAmbassador = 1,\r\n                                                                                                                            testOfHumanity = 1,\r\n                                                                                                                            fremenCamp = 2,\r\n                                                                                                                            opulence = 1,\r\n                                                                                                                            ladyJessica = 1,\r\n                                                                                                                            stilgar = 1,\r\n                                                                                                                            piterDeVries = 1,\r\n                                                                                                                            gurneyHalleck = 1,\r\n                                                                                                                            thufirHawat = 1,\r\n                                                                                                                            otherMemory = 1,\r\n                                                                                                                            lietKynes = 1,\r\n                                                                                                                            wormRiders = 2,\r\n                                                                                                                            reverendMotherMohiam = 1,\r\n                                                                                                                            powerPlay = 3,\r\n                                                                                                                            duncanLoyalBlade = 1, -- Deluxe upgrade pack release promo\r\n                                                                                                                        },\r\n                                                                                                                        ix = {\r\n                                                                                                                            boundlessAmbition = 1, -- Rise of Ix release promo\r\n                                                                                                                            guildChiefAdministrator = 1,\r\n                                                                                                                            guildAccord = 1,\r\n                                                                                                                            localFence = 1,\r\n                                                                                                                            shaiHulud = 1,\r\n                                                                                                                            ixGuildCompact = 1,\r\n                                                                                                                            choamDelegate = 1,\r\n                                                                                                                            bountyHunter = 1,\r\n                                                                                                                            embeddedAgent = 1,\r\n                                                                                                                            esmarTuek = 1,\r\n                                                                                                                            courtIntrigue = 1,\r\n                                                                                                                            sayyadina = 1,\r\n                                                                                                                            imperialShockTrooper = 1,\r\n                                                                                                                            appropriate = 1,\r\n                                                                                                                            desertAmbush = 1,\r\n                                                                                                                            inTheShadows = 2,\r\n                                                                                                                            satelliteBan = 1,\r\n                                                                                                                            freighterFleet = 2,\r\n                                                                                                                            imperialBashar = 1,\r\n                                                                                                                            jamis = 1,\r\n                                                                                                                            landingRights = 1,\r\n                                                                                                                            waterPeddler = 1,\r\n                                                                                                                            treachery = 2,\r\n                                                                                                                            truthsayer = 2,\r\n                                                                                                                            spiceTrader = 1,\r\n                                                                                                                            ixianEngineer = 2,\r\n                                                                                                                            webOfPower = 1,\r\n                                                                                                                            weirdingWay = 1,\r\n                                                                                                                            negotiatedWithdrawal = 2,\r\n                                                                                                                            fullScaleAssault = 1,\r\n                                                                                                                        },\r\n                                                                                                                        immortality = {\r\n                                                                                                                            beneTleilaxLab = 1,\r\n                                                                                                                            beneTleilaxResearcher = 1,\r\n                                                                                                                            blankSlate = 1,\r\n                                                                                                                            clandestineMeeting = 1,\r\n                                                                                                                            corruptSmuggler = 1,\r\n                                                                                                                            dissectingKit = 2,\r\n                                                                                                                            forHumanity = 1,\r\n                                                                                                                            highPriorityTravel = 2,\r\n                                                                                                                            imperiumCeremony = 1,\r\n                                                                                                                            interstellarConspiracy = 1,\r\n                                                                                                                            keysToPower = 1,\r\n                                                                                                                            lisanAlGaib = 1,\r\n                                                                                                                            longReach = 1,\r\n                                                                                                                            occupation = 1,\r\n                                                                                                                            organMerchants = 1,\r\n                                                                                                                            plannedCoupling = 2,\r\n                                                                                                                            replacementEyes = 1,\r\n                                                                                                                            sardaukarQuartermaster = 1,\r\n                                                                                                                            shadoutMapes = 1,\r\n                                                                                                                            showOfStrength = 1,\r\n                                                                                                                            spiritualFervor = 2,\r\n                                                                                                                            stillsuitManufacturer = 1,\r\n                                                                                                                            throneRoomPolitics = 1,\r\n                                                                                                                            tleilaxuMaster = 2,\r\n                                                                                                                            tleilaxuSurgeon = 1,\r\n                                                                                                                        },\r\n                                                                                                                        uprising = {\r\n                                                                                                                            unswervingLoyalty = 2,\r\n                                                                                                                            spaceTimeFolding = 1,\r\n                                                                                                                            weirdingWoman = 2,\r\n                                                                                                                            sardaukarSoldier = 1,\r\n                                                                                                                            smugglerHarvester = 2,\r\n                                                                                                                            makerKeeper = 2,\r\n                                                                                                                            reliableInformant = 1,\r\n                                                                                                                            hiddenMissive = 1,\r\n                                                                                                                            wheelsWithinWheels = 1,\r\n                                                                                                                            fedaykinStilltent = 1,\r\n                                                                                                                            imperialSpymaster = 1,\r\n                                                                                                                            spyNetwork = 1,\r\n                                                                                                                            desertSurvival = 2,\r\n                                                                                                                            undercoverAsset = 1,\r\n                                                                                                                            beneGesseritOperative = 2,\r\n                                                                                                                            maulaPistol = 2,\r\n                                                                                                                            thumper = 1,\r\n                                                                                                                            nothernWatermaster = 1,\r\n                                                                                                                            covertOperation = 1,\r\n                                                                                                                            doubleAgent = 2,\r\n                                                                                                                            guildEnvoy = 1,\r\n                                                                                                                            rebelSupplier = 2,\r\n                                                                                                                            calculusOfPower = 2,\r\n                                                                                                                            guildSpy = 1,\r\n                                                                                                                            dangerousRhetoric = 1,\r\n                                                                                                                            branchingPath = 1,\r\n                                                                                                                            ecologicalTestingStation = 1,\r\n                                                                                                                            theBeastSpoils = 1,\r\n                                                                                                                            smugglerHaven = 1,\r\n                                                                                                                            shishakli = 1,\r\n                                                                                                                            paracompass = 1,\r\n                                                                                                                            sardaukarCoordination = 2,\r\n                                                                                                                            truthtrance = 2,\r\n                                                                                                                            publicSpectable = 2,\r\n                                                                                                                            southernElders = 1,\r\n                                                                                                                            treadInDarkness = 2,\r\n                                                                                                                            spacingGuildFavor = 2,\r\n                                                                                                                            capturedMentat = 1,\r\n                                                                                                                            subversiveAdvisor = 1,\r\n                                                                                                                            leadership = 1,\r\n                                                                                                                            inHighPlaces = 1,\r\n                                                                                                                            strikeFleet = 1,\r\n                                                                                                                            trecherousManeuver = 1,\r\n                                                                                                                            chaniCleverTactician = 1,\r\n                                                                                                                            junctionHeadquarters = 1,\r\n                                                                                                                            corrinthCity = 1,\r\n                                                                                                                            stilgarTheDevoted = 1,\r\n                                                                                                                            desertPower = 1,\r\n                                                                                                                            arrakisRevolt = 1,\r\n                                                                                                                            priceIsNoObject = 1,\r\n                                                                                                                            longLiveTheFighters = 1,\r\n                                                                                                                            overthrow = 1,\r\n                                                                                                                            steersman = 1,\r\n                                                                                                                            -- bloodlines imperium\r\n                                                                                                                            bl_Bombast = 1,\r\n                                                                                                                            bl_Sandwalk = 2,\r\n                                                                                                                            bl_DisruptionTactics = 1,\r\n                                                                                                                            bl_UrgentShigawire = 2,\r\n                                                                                                                            bl_EliminateAllies = 1,\r\n                                                                                                                            bl_DeliverLogistics = 2,\r\n                                                                                                                            bl_CommandCenter = 1,\r\n                                                                                                                            bl_EngineeredMiracle = 1,\r\n                                                                                                                            bl_IBelieve = 1,\r\n                                                                                                                            bl_LitanyAgainstFear = 1,\r\n                                                                                                                            bl_EliteForces = 1,\r\n                                                                                                                            bl_ArrakisObserver = 1,\r\n                                                                                                                            bl_IntelligenceTraining = 2,\r\n                                                                                                                            bl_RuthlessLeadership = 1,\r\n                                                                                                                            bl_FremenWarName = 1,\r\n                                                                                                                            bl_SardaukarStandard = 1,\r\n                                                                                                                            bl_ShroudedCounsel = 1,\r\n                                                                                                                            bl_CorruptBureaucrat = 1,\r\n                                                                                                                            bl_IxianAmbassador = 2,\r\n                                                                                                                            bl_QuashRebellion = 2,\r\n                                                                                                                            bl_SouthernFaith = 1,\r\n                                                                                                                            bl_HolyWar = 1,\r\n                                                                                                                            bl_MercantileAffairs = 1,\r\n                                                                                                                            bl_PointingTheWay = 1,\r\n                                                                                                                            bl_ChoamDemands = 1,\r\n                                                                                                                            bl_ImperialThroneship = 1,\r\n                                                                                                                            bl_PossibleFutures = 1,\r\n                                                                                                                        },\r\n                                                                                                                        uprisingContract = {\r\n                                                                                                                            cargoRunner = 1,\r\n                                                                                                                            deliveryAgreement = 1,\r\n                                                                                                                            priorityContracts = 1,\r\n                                                                                                                            interstellarTrade = 1,\r\n                                                                                                                        },\r\n                                                                                                                        merakon = {\r\n                                                                                                                            -- Remove one copy of the following cards from the Uprising Imperium deck\r\n                                                                                                                            -- (Uprising comes with 2 each of these cards, so there's still 1 copy left after the removals):\r\n                                                                                                                            weirdingWoman = -1,\r\n                                                                                                                            desertSurvival = -1,\r\n                                                                                                                            makerKeeper = -1,\r\n                                                                                                                            beneGesseritOperative = -1,\r\n                                                                                                                            maulaPistol = -1,\r\n                                                                                                                            treadInDarkness = -1,\r\n                                                                                                                            -- Add the following cards:\r\n                                                                                                                            -- Legacy\r\n                                                                                                                            assassinationMission = 1,\r\n                                                                                                                            sardaukarInfantry = 1,\r\n                                                                                                                            missionariaProtectiva = 1,\r\n                                                                                                                            guildAdministrator = 1,\r\n                                                                                                                            imperialSpy = 1,\r\n                                                                                                                            spiceHunter = 1,\r\n                                                                                                                            spiceSmugglers = 1,\r\n                                                                                                                            theVoice = 1,\r\n                                                                                                                            beneGesseritSister = 1,\r\n                                                                                                                            crysknife = 1,\r\n                                                                                                                            fedaykinDeathCommando = 1,\r\n                                                                                                                            guildBankers = 1,\r\n                                                                                                                            spaceTravel = 1,\r\n                                                                                                                            otherMemory = 1,\r\n                                                                                                                            sietchReverendMother = 1,\r\n                                                                                                                            gunThopter = 1,\r\n                                                                                                                            powerPlay = 1,\r\n                                                                                                                            thufirHawat = 1,\r\n                                                                                                                            reverendMotherMohiam = 1,\r\n                                                                                                                            -- Ix\r\n                                                                                                                            waterPeddler = 1,\r\n                                                                                                                            truthsayer = 1,\r\n                                                                                                                            weirdingWay = 1,\r\n                                                                                                                            fremenCamp = 1,\r\n                                                                                                                            imperialBashar = 1,\r\n                                                                                                                            negotiatedWithdrawal = 1,\r\n                                                                                                                            spiceTrader = 1,\r\n                                                                                                                            esmarTuek = 1,\r\n                                                                                                                            satelliteBan = 1,\r\n                                                                                                                            treachery = 1,\r\n                                                                                                                            shaiHulud = 1,\r\n                                                                                                                            -- 93 Imperium cards total (69-6+30) (Not counting promo cards I guess?)\r\n                                                                                                                        },\r\n                                                                                                                    },\r\n                                                                                                                    special = {\r\n                                                                                                                        legacy = {\r\n                                                                                                                            foldspace = 6,\r\n                                                                                                                        },\r\n                                                                                                                        immortality = {\r\n                                                                                                                            reclaimedForces = 1,\r\n                                                                                                                        },\r\n                                                                                                                        uprising = {\r\n                                                                                                                            prepareTheWay = 8,\r\n                                                                                                                            theSpiceMustFlow = 10,\r\n                                                                                                                        },\r\n                                                                                                                    },\r\n                                                                                                                    tleilaxu = {\r\n                                                                                                                        piterGeniusAdvisor = 1, -- Immortality release promo\r\n                                                                                                                        beguilingPheromones = 1,\r\n                                                                                                                        chairdog = 1,\r\n                                                                                                                        contaminator = 1,\r\n                                                                                                                        corrinoGenes = 1,\r\n                                                                                                                        faceDancer = 1,\r\n                                                                                                                        faceDancerInitiate = 1,\r\n                                                                                                                        fromTheTanks = 1,\r\n                                                                                                                        ghola = 1,\r\n                                                                                                                        guildImpersonator = 1,\r\n                                                                                                                        industrialEspionage = 1,\r\n                                                                                                                        scientificBreakthrough = 1,\r\n                                                                                                                        sligFarmer = 1,\r\n                                                                                                                        stitchedHorror = 1,\r\n                                                                                                                        subjectX137 = 1,\r\n                                                                                                                        tleilaxuInfiltrator = 1,\r\n                                                                                                                        twistedMentat = 1,\r\n                                                                                                                        unnaturalReflexes = 1,\r\n                                                                                                                        usurp = 1\r\n                                                                                                                    },\r\n                                                                                                                    intrigue = {\r\n                                                                                                                        legacy = {\r\n                                                                                                                            bribery = 1,\r\n                                                                                                                            refocus = 1,\r\n                                                                                                                            ambush = 2,\r\n                                                                                                                            alliedArmada = 1,\r\n                                                                                                                            favoredSubject = 1,\r\n                                                                                                                            demandRespect = 1,\r\n                                                                                                                            poisonSnooper = 2,\r\n                                                                                                                            guildAuthorization = 1,\r\n                                                                                                                            dispatchAnEnvoy = 2,\r\n                                                                                                                            infiltrate = 1,\r\n                                                                                                                            knowTheirWays = 1,\r\n                                                                                                                            masterTactician = 3,\r\n                                                                                                                            plansWithinPlans = 1,\r\n                                                                                                                            privateArmy = 2,\r\n                                                                                                                            doubleCross = 1,\r\n                                                                                                                            councilorsDispensation = 1,\r\n                                                                                                                            cornerTheMarket = 1,\r\n                                                                                                                            charisma = 1,\r\n                                                                                                                            --calculatedHire = 1,\r\n                                                                                                                            choamShares = 1,\r\n                                                                                                                            bypassProtocol = 1,\r\n                                                                                                                            recruitmentMission = 1,\r\n                                                                                                                            reinforcements = 1,\r\n                                                                                                                            binduSuspension = 1,\r\n                                                                                                                            secretOfTheSisterhood = 1,\r\n                                                                                                                            rapidMobilization = 1,\r\n                                                                                                                            stagedIncident = 1,\r\n                                                                                                                            theSleeperMustAwaken = 1,\r\n                                                                                                                            tiebreaker = 1,\r\n                                                                                                                            toTheVictor = 1,\r\n                                                                                                                            waterPeddlersUnion = 1,\r\n                                                                                                                            windfall = 1,\r\n                                                                                                                            waterOfLife = 1,\r\n                                                                                                                            urgentMission = 1,\r\n                                                                                                                        },\r\n                                                                                                                        ix = {\r\n                                                                                                                            diversion = 1,\r\n                                                                                                                            warChest = 1,\r\n                                                                                                                            advancedWeaponry = 1,\r\n                                                                                                                            secretForces = 1,\r\n                                                                                                                            grandConspiracy = 1,\r\n                                                                                                                            cull = 1,\r\n                                                                                                                            strategicPush = 1,\r\n                                                                                                                            blackmail = 1,\r\n                                                                                                                            machineCulture = 1,\r\n                                                                                                                            cannonTurrets = 1,\r\n                                                                                                                            expedite = 1,\r\n                                                                                                                            ixianProbe = 1,\r\n                                                                                                                            secondWave = 1,\r\n                                                                                                                            glimpseThePath = 1,\r\n                                                                                                                            finesse = 1,\r\n                                                                                                                            strongarm = 1,\r\n                                                                                                                            quidProQuo = 1,\r\n                                                                                                                        },\r\n                                                                                                                        immortality = {\r\n                                                                                                                            breakthrough = 1,\r\n                                                                                                                            counterattack = 1,\r\n                                                                                                                            disguisedBureaucrat = 1,\r\n                                                                                                                            economicPositioning = 1,\r\n                                                                                                                            gruesomeSacrifice = 2,\r\n                                                                                                                            harvestCells = 2,\r\n                                                                                                                            illicitDealings = 2,\r\n                                                                                                                            shadowyBargain = 1,\r\n                                                                                                                            studyMelange = 1,\r\n                                                                                                                            tleilaxuPuppet = 1,\r\n                                                                                                                            viciousTalents = 2,\r\n                                                                                                                        },\r\n                                                                                                                        uprising = {\r\n                                                                                                                            sietchRitual = 1,\r\n                                                                                                                            mercenaries = 1,\r\n                                                                                                                            councilorAmbition = 1,\r\n                                                                                                                            strategicStockpiling = 1,\r\n                                                                                                                            detonation = 2,\r\n                                                                                                                            departForArrakis = 1,\r\n                                                                                                                            cunning = 1,\r\n                                                                                                                            opportunism = 1,\r\n                                                                                                                            changeAllegiances = 1,\r\n                                                                                                                            specialMission = 2,\r\n                                                                                                                            unexpectedAllies = 1,\r\n                                                                                                                            callToArms = 1,\r\n                                                                                                                            buyAccess = 1,\r\n                                                                                                                            imperiumPolitics = 1,\r\n                                                                                                                            shaddamFavor = 1,\r\n                                                                                                                            intelligenceReport = 1,\r\n                                                                                                                            manipulate = 1,\r\n                                                                                                                            distraction = 2,\r\n                                                                                                                            marketOpportunity = 1,\r\n                                                                                                                            goToGround = 1,\r\n                                                                                                                            contingencyPlan = 3,\r\n                                                                                                                            inspireAwe = 1,\r\n                                                                                                                            findWeakness = 1,\r\n                                                                                                                            spiceIsPower = 1,\r\n                                                                                                                            devour = 1,\r\n                                                                                                                            impress = 1,\r\n                                                                                                                            springTheTrap = 1,\r\n                                                                                                                            weirdingCombat = 1,\r\n                                                                                                                            tacticalOption = 1,\r\n                                                                                                                            questionableMethods = 1,\r\n                                                                                                                            desertMouse = 1,\r\n                                                                                                                            ornithopter = 1,\r\n                                                                                                                            crysknife = 1,\r\n                                                                                                                            shadowAlliance = 1,\r\n                                                                                                                            secureSpiceTrade = 1,\r\n                                                                                                                            -- bloodlines intrigues\r\n                                                                                                                            bl_AdaptiveTactics = 1,\r\n                                                                                                                            bl_DesertSupport = 1,\r\n                                                                                                                            bl_EmperorsInvitation = 1,\r\n                                                                                                                            bl_HonorGuard = 1,\r\n                                                                                                                            bl_ReturnTheFavor = 1,\r\n                                                                                                                            bl_SacredPools = 1,\r\n                                                                                                                            bl_SeizeProduction = 1,\r\n                                                                                                                            bl_TheStrongSurvive = 1,\r\n                                                                                                                            bl_TenuousBond = 1,\r\n                                                                                                                            bl_WithdrawalAgreement = 1,\r\n                                                                                                                            bl_FalseOrders = 1,\r\n                                                                                                                            bl_GraspArrakis = 1,\r\n                                                                                                                            bl_InsiderInformation = 1,\r\n                                                                                                                            bl_RipplesInTheSand = 1,\r\n                                                                                                                            bl_SleeperUnit = 1,\r\n                                                                                                                            bl_CoerciveNegotiation = 1,\r\n                                                                                                                            bl_BattlefieldResearch = 1,\r\n                                                                                                                            bl_RapidEngineering = 1,\r\n                                                                                                                            -- bl_Piter_Withdrawn = 1,\r\n                                                                                                                            -- bl_Piter_Unnatural = 1,\r\n                                                                                                                            -- bl_Piter_Ambitious = 1,\r\n                                                                                                                            -- bl_Piter_Resourceful = 1,\r\n                                                                                                                            -- bl_Piter_Shrewd = 1,\r\n                                                                                                                            -- bl_Piter_Sinister = 1,\r\n                                                                                                                            -- bl_Piter_Sadistic = 1,\r\n                                                                                                                            -- bl_Piter_Discerning = 1,\r\n                                                                                                                            -- bl_Piter_Devious = 1,\r\n                                                                                                                            -- bl_Piter_Controlled = 1,\r\n                                                                                                                            -- bl_Piter_Calculating = 1,\r\n                                                                                                                            -- bl_Piter_Insidious = 1,\r\n                                                                                                                        },\r\n                                                                                                                        uprisingContract = {\r\n                                                                                                                            leverage = 1,\r\n                                                                                                                            backedByChoam = 1,\r\n                                                                                                                            reachAgreement = 1,\r\n                                                                                                                            choamProfits = 1,\r\n                                                                                                                        },\r\n                                                                                                                        merakon = {\r\n                                                                                                                            -- No cuts from Uprising.\r\n                                                                                                                            -- Add the following cards (all from DI):\r\n                                                                                                                            alliedArmada = 1,\r\n                                                                                                                            binduSuspension = 1,\r\n                                                                                                                            bypassProtocol = 1,\r\n                                                                                                                            councilorsDispensation = 1,\r\n                                                                                                                            demandRespect = 1,\r\n                                                                                                                            dispatchAnEnvoy = 1,\r\n                                                                                                                            masterTactician = 1,\r\n                                                                                                                            plansWithinPlans = 1,\r\n                                                                                                                            poisonSnooper = 1,\r\n                                                                                                                            reinforcements = 1,\r\n                                                                                                                            stagedIncident = 1,\r\n                                                                                                                            tiebreaker = 1,\r\n                                                                                                                            -- 56 Intrigue cards total (44+12)\r\n                                                                                                                        },\r\n                                                                                                                    },\r\n                                                                                                                    conflict = {\r\n                                                                                                                        level1 = {\r\n                                                                                                                            uprising = {\r\n                                                                                                                                skirmishA = 1,\r\n                                                                                                                                skirmishB = 1,\r\n                                                                                                                                skirmishC = 1,\r\n                                                                                                                                -- bloodlines conflict\r\n                                                                                                                                bl_Skirmish = 1,\r\n                                                                                                                            },\r\n                                                                                                                        },\r\n                                                                                                                        level2 = {\r\n                                                                                                                            uprising = {\r\n                                                                                                                                choamSecurity = 1,\r\n                                                                                                                                spiceFreighters = 1,\r\n                                                                                                                                siegeOfArrakeen = 1,\r\n                                                                                                                                seizeSpiceRefinery = 1,\r\n                                                                                                                                testOfLoyalty = 1,\r\n                                                                                                                                shadowContest = 1,\r\n                                                                                                                                secureImperialBasin = 1,\r\n                                                                                                                                protectTheSietches = 1,\r\n                                                                                                                                tradeDispute = 1,\r\n                                                                                                                                -- bloodlines conflict\r\n                                                                                                                                bl_StormsInTheSouth = 1,\r\n                                                                                                                            },\r\n                                                                                                                        },\r\n                                                                                                                        level3 = {\r\n                                                                                                                            ix = {\r\n                                                                                                                                economicSupremacy = 1,\r\n                                                                                                                            },\r\n                                                                                                                            uprising = {\r\n                                                                                                                                propaganda = 1,\r\n                                                                                                                                battleForImperialBasin = 1,\r\n                                                                                                                                battleForArrakeen = 1,\r\n                                                                                                                                battleForSpiceRefinery = 1,\r\n                                                                                                                            }},\r\n                                                                                                                        },\r\n                                                                                                                        hagal = {\r\n                                                                                                                            base = {\r\n                                                                                                                                common = {\r\n                                                                                                                                    --churn = 2,\r\n                                                                                                                                    placeSpyYellow = 1,\r\n                                                                                                                                    placeSpyBlue = 1,\r\n                                                                                                                                    placeSpyGreen = 1,\r\n                                                                                                                                    sardaukar = 2,\r\n                                                                                                                                    dutifulService = 1,\r\n                                                                                                                                    heighliner = 1,\r\n                                                                                                                                    deliverSuppliesAndHeighliner = 2,\r\n                                                                                                                                    espionage = 2,\r\n                                                                                                                                    secrets = 1,\r\n                                                                                                                                    desertTactics = 2,\r\n                                                                                                                                    fremkit = 2,\r\n                                                                                                                                    assemblyHall = 1,\r\n                                                                                                                                    gatherSupport1 = 1, -- 1 troop\r\n                                                                                                                                    gatherSupport2 = 1, -- 2 infl\r\n                                                                                                                                    acceptContractAndShipping1 = 1,\r\n                                                                                                                                    acceptContractAndShipping2 = 1, -- 3 infl\r\n                                                                                                                                    researchStation = 2,\r\n                                                                                                                                    spiceRefinery = 3,\r\n                                                                                                                                    arrakeen = 2,\r\n                                                                                                                                    sietchTabr = 3,\r\n                                                                                                                                    haggaBasinAndImperialBasin = 4,\r\n                                                                                                                                    deepDesert = 2,\r\n                                                                                                                                },\r\n                                                                                                                                solo = {},\r\n                                                                                                                                twoPlayers = {\r\n                                                                                                                                    reshuffle = 1,\r\n                                                                                                                                }},\r\n                                                                                                                                ix = {\r\n                                                                                                                                    common = {\r\n                                                                                                                                        assemblyHall = Helper.ERASE,\r\n                                                                                                                                        gatherSupport1 = Helper.ERASE,\r\n                                                                                                                                        gatherSupport2 = Helper.ERASE,\r\n                                                                                                                                        acceptContractAndShipping1 = Helper.ERASE,\r\n                                                                                                                                        acceptContractAndShipping2 = Helper.ERASE,\r\n                                                                                                                                        interstellarShipping = 1,\r\n                                                                                                                                        deliverSuppliesAndInterstellarShipping = 1, -- ex foldspaceAndInterstellarShipping\r\n                                                                                                                                        smugglingAndInterstellarShipping = 1,\r\n                                                                                                                                    },\r\n                                                                                                                                    solo = {\r\n                                                                                                                                        techNegotiation = 2,\r\n                                                                                                                                        dreadnought1p = 2,\r\n                                                                                                                                    },\r\n                                                                                                                                    twoPlayers = {\r\n                                                                                                                                        dreadnought2p = 2,\r\n                                                                                                                                    }},\r\n                                                                                                                                    immortality = {\r\n                                                                                                                                        common = {},\r\n                                                                                                                                        solo = {\r\n                                                                                                                                            researchStation = 1,\r\n                                                                                                                                            researchStationImmortality = 1,\r\n                                                                                                                                            carthag = Helper.ERASE,\r\n                                                                                                                                            tleilaxuBonus1 = 1, -- ex Carthag\r\n                                                                                                                                            tleilaxuBonus2 = 1, -- ex Carthag\r\n                                                                                                                                            tleilaxuBonus3 = 1, -- ex Carthag\r\n                                                                                                                                        },\r\n                                                                                                                                    twoPlayers = {}}},\r\n                                                                                                                                    tech = {\r\n                                                                                                                                        ix = {\r\n                                                                                                                                            spaceport = 1,\r\n                                                                                                                                            restrictedOrdnance = 1,\r\n                                                                                                                                            artillery = 1,\r\n                                                                                                                                            disposalFacility = 1,\r\n                                                                                                                                            holoprojectors = 1,\r\n                                                                                                                                            minimicFilm = 1,\r\n                                                                                                                                            windtraps = 1,\r\n                                                                                                                                            detonationDevices = 1,\r\n                                                                                                                                            memocorders = 1,\r\n                                                                                                                                            flagship = 1,\r\n                                                                                                                                            shuttleFleet = 1,\r\n                                                                                                                                            spySatellites = 1,\r\n                                                                                                                                            chaumurky = 1,\r\n                                                                                                                                            sonicSnoopers = 1,\r\n                                                                                                                                            trainingDrones = 1,\r\n                                                                                                                                            troopTransports = 1,\r\n                                                                                                                                            holtzmanEngine = 1,\r\n                                                                                                                                            invasionShips = 1,\r\n                                                                                                                                        },\r\n                                                                                                                                        -- bloodlines techs\r\n                                                                                                                                        uprising = {\r\n                                                                                                                                            bl_TrainingDepot = 1,\r\n                                                                                                                                            bl_GeneLockedVault = 1,\r\n                                                                                                                                            bl_Glowglobes = 1,\r\n                                                                                                                                            bl_PlanetaryArray = 1,\r\n                                                                                                                                            bl_ServoReceivers = 1,\r\n                                                                                                                                            bl_DeliveryBay = 1,\r\n                                                                                                                                            bl_PlasteelBlades = 1,\r\n                                                                                                                                            bl_SuspensorSuits = 1,\r\n                                                                                                                                            bl_RapidDropships = 1,\r\n                                                                                                                                            bl_SelfDestroyingMessages = 1,\r\n                                                                                                                                            bl_NavigationChamber = 1,\r\n                                                                                                                                            bl_SardaukarHighCommand = 1,\r\n                                                                                                                                            bl_ForbiddenWeapons = 1,\r\n                                                                                                                                            bl_AdvancedDataAnalysis = 1,\r\n                                                                                                                                            bl_OrnithopterFleet = 1,\r\n                                                                                                                                            bl_Panopticon = 1,\r\n                                                                                                                                            bl_SpyDrones = 1,\r\n                                                                                                                                            bl_ChoamTransports = 1,\r\n                                                                                                                                        }},\r\n                                                                                                                                        leaders = {\r\n                                                                                                                                            legacy = {\r\n                                                                                                                                                vladimirHarkonnen = 1,\r\n                                                                                                                                                glossuRabban = 1,\r\n                                                                                                                                                ilbanRichese = 1,\r\n                                                                                                                                                helenaRichese = 1,\r\n                                                                                                                                                letoAtreides = 1,\r\n                                                                                                                                                paulAtreides = 1,\r\n                                                                                                                                                arianaThorvald = 1,\r\n                                                                                                                                                memnonThorvald = 1,\r\n                                                                                                                                            },\r\n                                                                                                                                            ix = {\r\n                                                                                                                                                armandEcaz = 1,\r\n                                                                                                                                                ilesaEcaz = 1,\r\n                                                                                                                                                rhomburVernius = 1,\r\n                                                                                                                                                tessiaVernius = 1,\r\n                                                                                                                                                yunaMoritani = 1,\r\n                                                                                                                                                hundroMoritani = 1,\r\n                                                                                                                                            },\r\n                                                                                                                                            uprising = {\r\n                                                                                                                                                stabanTuek = 1,\r\n                                                                                                                                                amberMetulli = 1,\r\n                                                                                                                                                gurneyHalleck = 1,\r\n                                                                                                                                                margotFenring = 1,\r\n                                                                                                                                                irulanCorrino = 1,\r\n                                                                                                                                                jessica = 1,\r\n                                                                                                                                                feydRauthaHarkonnen = 1,\r\n                                                                                                                                                shaddamCorrino = 1,\r\n                                                                                                                                                muadDib = 1,\r\n                                                                                                                                                -- bloodlines leaders\r\n                                                                                                                                                bl_Chani = 1,\r\n                                                                                                                                                bl_Duncan = 1,\r\n                                                                                                                                                bl_Esmar = 1,\r\n                                                                                                                                                bl_Hasimir = 1,\r\n                                                                                                                                                bl_Kota = 1,\r\n                                                                                                                                                bl_Liet = 1,\r\n                                                                                                                                                bl_Mohiam = 1,\r\n                                                                                                                                                bl_Piter = 1,\r\n                                                                                                                                                bl_Yrkoon = 1,\r\n                                                                                                                                            },\r\n                                                                                                                                            merakon = {\r\n                                                                                                                                                -- Legacy\r\n                                                                                                                                                vladimirHarkonnen = 1,\r\n                                                                                                                                                glossuRabban = 1,\r\n                                                                                                                                                ilbanRichese = 1,\r\n                                                                                                                                                arianaThorvald = 1,\r\n                                                                                                                                                memnonThorvald = 1,\r\n                                                                                                                                                armandEcaz = 1,\r\n                                                                                                                                                ilesaEcaz = 1,\r\n                                                                                                                                                -- Ix\r\n                                                                                                                                                tessiaVernius = 1,\r\n                                                                                                                                                yunaMoritani = 1,\r\n                                                                                                                                            },\r\n                                                                                                                                            free = {\r\n                                                                                                                                                -- Legacy\r\n                                                                                                                                                vladimirHarkonnen = 0.5,\r\n                                                                                                                                                glossuRabban = 0.5,\r\n                                                                                                                                                ilbanRichese = 0.5,\r\n                                                                                                                                                helenaRichese = 0.5,\r\n                                                                                                                                                letoAtreides = 0.5,\r\n                                                                                                                                                paulAtreides = 0.5,\r\n                                                                                                                                                arianaThorvald = 0.5,\r\n                                                                                                                                                memnonThorvald = 0.5,\r\n                                                                                                                                                -- Ix\r\n                                                                                                                                                armandEcaz = 0.5,\r\n                                                                                                                                                ilesaEcaz = 0.5,\r\n                                                                                                                                                tessiaVernius = 0.5,\r\n                                                                                                                                                yunaMoritani = 0.5,\r\n                                                                                                                                                -- Uprising\r\n                                                                                                                                                stabanTuek = 0.5,\r\n                                                                                                                                                amberMetulli = 0.5,\r\n                                                                                                                                                gurneyHalleck = 0.5,\r\n                                                                                                                                                margotFenring = 0.5,\r\n                                                                                                                                                irulanCorrino = 0.5,\r\n                                                                                                                                                jessica = 0.5,\r\n                                                                                                                                                feydRauthaHarkonnen = 0.5,\r\n                                                                                                                                                shaddamCorrino = 0.5,\r\n                                                                                                                                                muadDib = 0.5,\r\n                                                                                                                                            }},\r\n                                                                                                                                            rivalLeaders = {\r\n                                                                                                                                                uprising = {\r\n                                                                                                                                                    vladimirHarkonnen = 1,\r\n                                                                                                                                                    glossuRabban = 1,\r\n                                                                                                                                                    stabanTuek = 1,\r\n                                                                                                                                                    amberMetulli = 1,\r\n                                                                                                                                                    gurneyHalleck = 1,\r\n                                                                                                                                                    margotFenring = 1,\r\n                                                                                                                                                    irulanCorrino = 1,\r\n                                                                                                                                                    jessica = 1,\r\n                                                                                                                                                    feydRauthaHarkonnen = 1,\r\n                                                                                                                                                    muadDib = 1,\r\n                                                                                                                                                },\r\n                                                                                                                                            },\r\n                                                                                                                                        }\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.rebuildPreloadAreas()\r\n                                                                                                                                            Locale.onLoad()\r\n                                                                                                                                            local allSupports = {\r\n                                                                                                                                                en = require(\"en.Deck\"),\r\n                                                                                                                                                fr = require(\"fr.Deck\"),\r\n                                                                                                                                            }\r\n\r\n                                                                                                                                            Deck.prebuildZones = Helper.resolveGUIDs(true, {\r\n                                                                                                                                                en = \"a5a2e6\",\r\n                                                                                                                                                fr = \"db4507\",\r\n                                                                                                                                            })\r\n\r\n                                                                                                                                            for _, prebuildZone in pairs(Deck.prebuildZones) do\r\n                                                                                                                                                for _, object in ipairs(prebuildZone.getObjects()) do\r\n                                                                                                                                                    if object.type == \"Deck\" then\r\n                                                                                                                                                        object.destruct()\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            Helper.onceFramesPassed(1).doAfter(function ()\r\n                                                                                                                                                for language, _ in pairs(allSupports) do\r\n                                                                                                                                                    I18N.setLocale(language)\r\n\r\n                                                                                                                                                    local support = allSupports[language]\r\n                                                                                                                                                    Deck.sources = support.loadCustomDecks(Deck)\r\n\r\n                                                                                                                                                    local areas = getObjectsWithTag(\"deckPreloadArea\" .. language)\r\n                                                                                                                                                    assert(#areas == 1)\r\n                                                                                                                                                    local origin = areas[1].getPosition()\r\n\r\n                                                                                                                                                    local i = 0\r\n                                                                                                                                                    local getNextPosition = function ()\r\n                                                                                                                                                        local p = origin + Vector(math.floor(i / 9) * 4 - 2, 2, 4 * (i % 9) - 16)\r\n                                                                                                                                                        i = i + 1\r\n                                                                                                                                                        return p\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    Deck._prebuildStarterDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildEmperorStarterDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildMuadDibStarterDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildImperiumDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildSpecialDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildTleilaxuDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildIntrigueDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildObjectiveDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildTechDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildConflictDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildHagalDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildLeaderDeck(getNextPosition())\r\n                                                                                                                                                    Deck._prebuildRivalLeaderDeck(getNextPosition())\r\n                                                                                                                                                end\r\n                                                                                                                                            end)\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.onLoad()\r\n                                                                                                                                            Deck.prebuildZones = Helper.resolveGUIDs(true, {\r\n                                                                                                                                                en = \"a5a2e6\",\r\n                                                                                                                                                fr = \"db4507\",\r\n                                                                                                                                            })\r\n\r\n                                                                                                                                            for _, prebuildZone in pairs(Deck.prebuildZones) do\r\n                                                                                                                                                for _, object in ipairs(prebuildZone.getObjects()) do\r\n                                                                                                                                                    object.setInvisibleTo(Player.getColors())\r\n                                                                                                                                                end\r\n                                                                                                                                            end\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.setUp(settings)\r\n                                                                                                                                            -- Not needed anymore since we are relying on prebuild decks now.\r\n                                                                                                                                            -- (But deck sources are still needed in \"rebuildPreloadAreas\".)\r\n                                                                                                                                            if false then\r\n                                                                                                                                                local support\r\n\r\n                                                                                                                                                if settings.language == \"en\" then\r\n                                                                                                                                                    support = require(\"en.Deck\")\r\n                                                                                                                                                elseif settings.language == \"fr\" then\r\n                                                                                                                                                    support = require(\"fr.Deck\")\r\n                                                                                                                                                else\r\n                                                                                                                                                    error(\"Unsupported language: \" .. settings.language)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                Deck.sources = support.loadCustomDecks(Deck)\r\n                                                                                                                                            end\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        function Deck.getAcquireCardDecalUrl(name)\r\n                                                                                                                                            local decalUrl = Deck.decals[name .. \"AcquireCard\"]\r\n                                                                                                                                            assert(decalUrl, name)\r\n                                                                                                                                            return decalUrl\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateObjectiveDeck(deckZone, cardNames)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateObjectiveDeck\")\r\n                                                                                                                                            Deck._generateDeck(\"Objective\", deckZone, cardNames, Deck.sources.objective, 0.5).doAfter(continuation.run)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateStarterDeck(deckZone, immortality, epic)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateStarterDeck\")\r\n                                                                                                                                            local contributionSets = {Deck.starter.base}\r\n                                                                                                                                            if immortality then\r\n                                                                                                                                                table.insert(contributionSets, Deck.starter.immortality)\r\n                                                                                                                                            end\r\n                                                                                                                                            local contributions = Deck._mergeContributionSets(contributionSets)\r\n                                                                                                                                            if not immortality and epic then\r\n                                                                                                                                                contributions[\"duneTheDesertPlanet\"] = 1\r\n                                                                                                                                                contributions[\"controlTheSpice\"] = 1\r\n                                                                                                                                            end\r\n                                                                                                                                            Deck._generateDeck(\"Imperium\", deckZone, contributions, Deck.sources.imperium).doAfter(continuation.run)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateEmperorStarterDeck(deckZone)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateEmperorStarterDeck\")\r\n                                                                                                                                            local contributionSets = {Deck.starter.emperor}\r\n                                                                                                                                            local contributions = Deck._mergeContributionSets(contributionSets)\r\n                                                                                                                                            Deck._generateDeck(\"Imperium\", deckZone, contributions, Deck.sources.imperium).doAfter(continuation.run)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateMuadDibStarterDeck(deckZone)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateMuadDibStarterDeck\")\r\n                                                                                                                                            local contributionSets = {Deck.starter.muadDib}\r\n                                                                                                                                            local contributions = Deck._mergeContributionSets(contributionSets)\r\n                                                                                                                                            Deck._generateDeck(\"Imperium\", deckZone, contributions, Deck.sources.imperium).doAfter(continuation.run)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateStarterDiscard(deckZone, immortality, epic)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateStarterDiscard\")\r\n                                                                                                                                            if immortality and epic then\r\n                                                                                                                                                Deck._generateDeck(\"Imperium\", deckZone, Deck.starter.epic, Deck.sources.imperium).doAfter(function (deck)\r\n                                                                                                                                                    deck.flip()\r\n                                                                                                                                                    continuation.run(deck)\r\n                                                                                                                                                end)\r\n                                                                                                                                            else\r\n                                                                                                                                                continuation.cancel()\r\n                                                                                                                                            end\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateImperiumDeck(deckZone, contracts, ix, immortality, legacy, merakon)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateImperiumDeck\")\r\n                                                                                                                                            local contributions = Deck._mergeStandardContributionSets(Deck.imperium, ix, immortality, legacy, merakon)\r\n                                                                                                                                            if contracts then\r\n                                                                                                                                                contributions = Deck._mergeContributionSets({contributions, Deck.imperium.uprisingContract})\r\n                                                                                                                                            end\r\n                                                                                                                                            Deck._generateDeck(\"Imperium\", deckZone, contributions, Deck.sources.imperium).doAfter(continuation.run)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateSpecialDeck(deckZone, parent, name)\r\n                                                                                                                                            assert(deckZone, name)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateSpecialDeck\")\r\n                                                                                                                                            assert(name)\r\n                                                                                                                                            assert(Deck.special[parent][name], name)\r\n                                                                                                                                            local contributions = {[name] = Deck.special[parent][name]}\r\n                                                                                                                                            Deck._generateDeck(\"Imperium\", deckZone, contributions, Deck.sources.special).doAfter(function (deck)\r\n                                                                                                                                                deck.flip()\r\n                                                                                                                                                Helper.onceMotionless(deck).doAfter(continuation.run)\r\n                                                                                                                                            end)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateTleilaxuDeck(deckZone)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateTleilaxuDeck\")\r\n                                                                                                                                            Deck._generateDeck(\"Imperium\", deckZone, Deck.tleilaxu, Deck.sources.tleilaxu).doAfter(continuation.run)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateIntrigueDeck(deckZone, contracts, ix, immortality, legacy, merakon)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateIntrigueDeck\")\r\n                                                                                                                                            local contributions = Deck._mergeStandardContributionSets(Deck.intrigue, ix, immortality, legacy, merakon)\r\n                                                                                                                                            if contracts then\r\n                                                                                                                                                contributions = Deck._mergeContributionSets({contributions, Deck.intrigue.uprisingContract})\r\n                                                                                                                                            end\r\n                                                                                                                                            Deck._generateDeck(\"Intrigue\", deckZone, contributions, Deck.sources.intrigue).doAfter(continuation.run)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateTechDeck(deckZones)\r\n                                                                                                                                            assert(deckZones)\r\n                                                                                                                                            assert(#deckZones == 3)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateTechDeck\")\r\n                                                                                                                                            -- bloodlines disabled ix techs, used code for bloodlines techs\r\n                                                                                                                                            -- local keys = Helper.getKeys(Deck.tech.ix)\r\n                                                                                                                                            local keys = Helper.getKeys(Deck.tech.uprising)\r\n                                                                                                                                            Helper.shuffle(keys)\r\n\r\n                                                                                                                                            local decks = {}\r\n\r\n                                                                                                                                            local remaining = 0\r\n                                                                                                                                            for i = 1, 3 do\r\n                                                                                                                                                remaining = remaining + 1\r\n                                                                                                                                                local part = {}\r\n                                                                                                                                                for j = (i - 1) * 6 + 1, i * 6 do\r\n                                                                                                                                                    -- bloodlines disabled ix techs, used code for bloodlines techs\r\n                                                                                                                                                    -- part[keys[j]] = Deck.tech.ix[keys[j]]\r\n                                                                                                                                                    part[keys[j]] = Deck.tech.uprising[keys[j]]\r\n                                                                                                                                                end\r\n                                                                                                                                                local zone = deckZones[i]\r\n                                                                                                                                                Deck._generateDeck(\"Tech\", zone, part, Deck.sources.tech).doAfter(function (deck)\r\n                                                                                                                                                    local above = zone.getPosition() + Vector(0, 1, 0)\r\n                                                                                                                                                    Helper.moveCardFromZone(zone, above, nil, true, true)\r\n                                                                                                                                                    table.insert(decks, deck)\r\n                                                                                                                                                    remaining = remaining - 1\r\n                                                                                                                                                    if remaining == 0 then\r\n                                                                                                                                                        continuation.run(decks)\r\n                                                                                                                                                    end\r\n                                                                                                                                                end)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        --\r\n                                                                                                                                        function Deck.generateConflictDeck(deckZone, ix, epic, playerCount)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateConflictDeck\")\r\n\r\n                                                                                                                                            local cardCounts\r\n                                                                                                                                            if playerCount == 6 then\r\n                                                                                                                                                cardCounts = {0, 5, 4}\r\n                                                                                                                                            elseif epic then\r\n                                                                                                                                                cardCounts = {0, 5, 5}\r\n                                                                                                                                            else\r\n                                                                                                                                                cardCounts = {1, 5, 4}\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            local contributions = {}\r\n                                                                                                                                            for level = 3, 1, -1 do\r\n                                                                                                                                                local cardCount = cardCounts[level]\r\n                                                                                                                                                if cardCount > 0 then\r\n                                                                                                                                                    local levelContributions = Deck._mergeStandardContributionSets(Deck.conflict[\"level\" .. tostring(level)], ix and epic and level == 3, false)\r\n                                                                                                                                                    local cardNames = Helper.getKeys(levelContributions)\r\n                                                                                                                                                    assert(#cardNames >= cardCount, \"Not enough level \" .. tostring(level) .. \" conflict cards!\")\r\n                                                                                                                                                    Helper.shuffle(cardNames)\r\n                                                                                                                                                    for i = 1, cardCount do\r\n                                                                                                                                                        contributions[cardNames[i]] = 1\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            Deck._generateDeck(\"Conflict\", deckZone, contributions, Deck.sources.conflict, 0.5).doAfter(continuation.run)\r\n\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateHagalDeck(deckZone, ix, immortality, playerCount)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            assert(not playerCount or playerCount == 1 or playerCount == 2)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateHagalDeck\")\r\n\r\n                                                                                                                                            local contributionSetNames = {\"base\"}\r\n                                                                                                                                            if ix then\r\n                                                                                                                                                table.insert(contributionSetNames, \"ix\")\r\n                                                                                                                                            end\r\n                                                                                                                                            if immortality then\r\n                                                                                                                                                table.insert(contributionSetNames, \"immortality\")\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            local contributionSets = {}\r\n                                                                                                                                            for _, contributionSetName in ipairs(contributionSetNames) do\r\n                                                                                                                                                local root = Deck.hagal[contributionSetName]\r\n                                                                                                                                                table.insert(contributionSets, root.common)\r\n                                                                                                                                                if not playerCount or playerCount == 1 then\r\n                                                                                                                                                    table.insert(contributionSets, root.solo)\r\n                                                                                                                                                elseif not playerCount or playerCount == 2 then\r\n                                                                                                                                                    table.insert(contributionSets, root.twoPlayers)\r\n                                                                                                                                                end\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            local contributions = Deck._mergeContributionSets(contributionSets)\r\n                                                                                                                                            Deck._generateDeck(\"Hagal\", deckZone, contributions, Deck.sources.hagal).doAfter(continuation.run)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateLeaderDeck(deckZone, contracts, ix, immortality, legacy, merakon, free)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateLeaderDeck\")\r\n                                                                                                                                            local contributions = Deck._mergeStandardContributionSets(Deck.leaders, ix, immortality, legacy, merakon, free)\r\n                                                                                                                                            contributions = Helper.mapValues(contributions, function (cardinality)\r\n                                                                                                                                                return math.min(cardinality, 1)\r\n                                                                                                                                            end)\r\n                                                                                                                                            if not contracts then\r\n                                                                                                                                                contributions.shaddamCorrino = nil\r\n                                                                                                                                            end\r\n                                                                                                                                            Deck._generateDeck(\"Leader\", deckZone, contributions, Deck.sources.leaders).doAfter(continuation.run)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck.generateRivalLeaderDeck(deckZone, streamlined, ix, immortality, legacy)\r\n                                                                                                                                            assert(deckZone)\r\n                                                                                                                                            assert(deckZone.getPosition)\r\n                                                                                                                                            local continuation = Helper.createContinuation(\"Deck.generateRivalLeaderDeck\")\r\n                                                                                                                                            local contributions = Deck._mergeStandardContributionSets(Deck.rivalLeaders, ix, immortality, legacy)\r\n                                                                                                                                            for rival, _ in pairs(contributions) do\r\n                                                                                                                                                local streamlinedRival = Helper.isElementOf(rival, {\"amberMetulli\", \"glossuRabban\"})\r\n                                                                                                                                                if (streamlined == true) ~= streamlinedRival then\r\n                                                                                                                                                    contributions[rival] = nil\r\n                                                                                                                                                end\r\n                                                                                                                                            end\r\n                                                                                                                                            Deck._generateDeck(\"RivalLeader\", deckZone, contributions, Deck.sources.rivalLeaders).doAfter(continuation.run)\r\n                                                                                                                                            return continuation\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck._mergeStandardContributionSets(root, ix, immortality, legacy, merakon, free)\r\n                                                                                                                                            local contributionSets = {root.uprising}\r\n                                                                                                                                            if merakon then\r\n                                                                                                                                                table.insert(contributionSets, root.merakon)\r\n                                                                                                                                            else\r\n                                                                                                                                                if ix then\r\n                                                                                                                                                    table.insert(contributionSets, root.ix)\r\n                                                                                                                                                end\r\n                                                                                                                                                if immortality then\r\n                                                                                                                                                    table.insert(contributionSets, root.immortality)\r\n                                                                                                                                                end\r\n                                                                                                                                                if legacy then\r\n                                                                                                                                                    table.insert(contributionSets, root.legacy)\r\n                                                                                                                                                end\r\n                                                                                                                                                if free then\r\n                                                                                                                                                    table.insert(contributionSets, root.free)\r\n                                                                                                                                                end\r\n                                                                                                                                            end\r\n                                                                                                                                            return Deck._mergeContributionSets(contributionSets)\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck._mergeContributionSets(contributionSets, ignoreErasure)\r\n                                                                                                                                            local contributions = {}\r\n                                                                                                                                            for _, contributionSet in ipairs(contributionSets) do\r\n                                                                                                                                                for name, arity in pairs(contributionSet) do\r\n                                                                                                                                                    local currentArity\r\n                                                                                                                                                    if arity == Helper.ERASE then\r\n                                                                                                                                                        if ignoreErasure then\r\n                                                                                                                                                            currentArity = contributions[name]\r\n                                                                                                                                                        else\r\n                                                                                                                                                            currentArity = nil\r\n                                                                                                                                                        end\r\n                                                                                                                                                    else\r\n                                                                                                                                                        currentArity = contributions[name]\r\n                                                                                                                                                        if currentArity then\r\n                                                                                                                                                            currentArity = currentArity + arity\r\n                                                                                                                                                        else\r\n                                                                                                                                                            currentArity = arity\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                    contributions[name] = currentArity\r\n                                                                                                                                                end\r\n                                                                                                                                            end\r\n                                                                                                                                            return contributions\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        --- Load part of a \"custom deck\" (an image made of tiled cards) into a named card\r\n                                                                                                                                        --- collection. Only the cards listed in cardNames are added.\r\n                                                                                                                                        --- The startLuaIndex could be greater than 1 to skip the first cards, whereas\r\n                                                                                                                                        --- empty names (\"\") allows to skip intermediate cards.\r\n                                                                                                                                        ---@param cards any The set where to add the namec cards.\r\n                                                                                                                                        ---@param customDeck any A custom deck (API struct) as returned by Deck.createImperiumCustomDeck.\r\n                                                                                                                                        ---@param startLuaIndex any The Lua start index for the card names.\r\n                                                                                                                                        ---@param cardNames any An list of card names matching those in the custon deck.\r\n                                                                                                                                        function Deck.loadCustomDeck(cards, customDeck, startLuaIndex, cardNames)\r\n                                                                                                                                            assert(cards)\r\n                                                                                                                                            assert(customDeck)\r\n                                                                                                                                            assert(startLuaIndex and startLuaIndex > 0)\r\n                                                                                                                                            assert(cardNames)\r\n                                                                                                                                            for i, name in ipairs(cardNames) do\r\n                                                                                                                                                if name ~= \"\" then\r\n                                                                                                                                                    cards[name] = {customDeck = customDeck, luaIndex = startLuaIndex + i - 1}\r\n                                                                                                                                                end\r\n                                                                                                                                            end\r\n                                                                                                                                        end\r\n\r\n                                                                                                                                        ---\r\n                                                                                                                                        function Deck._generateCardData(customDeck, customDeckId, cardId)\r\n                                                                                                                                            assert(customDeck, \"customDeck\")\r\n                                                                                                                                            assert(customDeckId, \"customDeckId\")\r\n                                                                                                                                            assert(cardId, \"cardId\")\r\n\r\n                                                                                                                                            assert(customDeck.__scale)\r\n\r\n                                                                                                                                            Deck.nextGuid = (Deck.nextGuid or 665) + 1\r\n                                                                                                                                            local guid = string.format(\"%06x\", Deck.nextGuid)\r\n\r\n                                                                                                                                            local data = {\r\n                                                                                                                                                GUID = guid,\r\n                                                                                                                                                Name = \"Card\",\r\n                                                                                                                                                Transform = {\r\n                                                                                                                                                    posX = 0,\r\n                                                                                                                                                    posY = 0,\r\n                                                                                                                                                    posZ = 0,\r\n                                                                                                                                                    rotX = 0,\r\n                                                                                                                                                    rotY = 0,\r\n                                                                                                                                                    rotZ = 0,\r\n                                                                                                                                                    scaleX = customDeck.__scale.x,\r\n                                                                                                                                                    scaleY = customDeck.__scale.y,\r\n                                                                                                                                                    scaleZ = customDeck.__scale.z\r\n                                                                                                                                                },\r\n                                                                                                                                                Nickname = \"\",\r\n                                                                                                                                                Description = \"\",\r\n                                                                                                                                                GMNotes = \"\",\r\n                                                                                                                                                AltLookAngle = {\r\n                                                                                                                                                    x = 0.0,\r\n                                                                                                                                                    y = 0.0,\r\n                                                                                                                                                    z = 0.0\r\n                                                                                                                                                },\r\n                                                                                                                                                ColorDiffuse = {\r\n                                                                                                                                                    r = 0.713235259,\r\n                                                                                                                                                    g = 0.713235259,\r\n                                                                                                                                                    b = 0.713235259\r\n                                                                                                                                                },\r\n                                                                                                                                                Tags = {},\r\n                                                                                                                                                LayoutGroupSortIndex = 0,\r\n                                                                                                                                                Value = 0,\r\n                                                                                                                                                Locked = false,\r\n                                                                                                                                                Grid = true,\r\n                                                                                                                                                Snap = true,\r\n                                                                                                                                                IgnoreFoW = false,\r\n                                                                                                                                                MeasureMovement = false,\r\n                                                                                                                                                DragSelectable = true,\r\n                                                                                                                                                Autoraise = true,\r\n                                                                                                                                                Sticky = true,\r\n                                                                                                                                                Tooltip = false,\r\n                                                                                                                                                GridProjection = false,\r\n                                                                                                                                                HideWhenFaceDown = true,\r\n                                                                                                                                                Hands = true,\r\n                                                                                                                                                CardID = cardId,\r\n                                                                                                                                                SidewaysCard = false,\r\n                                                                                                                                                CustomDeck = {\r\n                                                                                                                                                    [tostring(customDeckId)] = customDeck\r\n                                                                                                                                                }}\r\n\r\n                                                                                                                                                return data\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._generateDeck(deckType, deckZone, contributions, sources, spacing)\r\n                                                                                                                                                assert(deckZone.getPosition)\r\n                                                                                                                                                return Deck._generateFromPrebuildDeck(deckType, deckZone, contributions, sources, spacing)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            --- Add 2 back cards such as to always have a deck to take cards from.\r\n                                                                                                                                            function Deck._generateDynamicDeckWithTwoBackCards(deckType, position, contributions, sources)\r\n                                                                                                                                                local contributions2 = Helper.shallowCopy(contributions)\r\n                                                                                                                                                contributions2.back = 2\r\n                                                                                                                                                local sources2 = Helper.shallowCopy(sources)\r\n                                                                                                                                                local backUrl = Deck.backs[Helper.toCamelCase(deckType, \"CardBack\")]\r\n                                                                                                                                                assert(backUrl, deckType)\r\n                                                                                                                                                local creator = Deck[Helper.toCamelCase(\"create\", deckType, \"CustomDeck\")]\r\n                                                                                                                                                assert(creator, deckType)\r\n                                                                                                                                                sources2.back = {\r\n                                                                                                                                                    customDeck = creator(backUrl, 1, 1),\r\n                                                                                                                                                    luaIndex = 1\r\n                                                                                                                                                }\r\n                                                                                                                                                return Deck._generateDynamicDeck(deckType, position, contributions2, sources2)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._generateDynamicDeck(deckType, position, contributions, sources)\r\n                                                                                                                                                assert(deckType)\r\n                                                                                                                                                assert(position)\r\n                                                                                                                                                assert(contributions)\r\n                                                                                                                                                assert(sources)\r\n\r\n                                                                                                                                                local data = {\r\n                                                                                                                                                    Name = \"Deck\",\r\n                                                                                                                                                    Transform = {\r\n                                                                                                                                                        posX = 0,\r\n                                                                                                                                                        posY = 0,\r\n                                                                                                                                                        posZ = 0,\r\n                                                                                                                                                        rotX = 0,\r\n                                                                                                                                                        rotY = 0,\r\n                                                                                                                                                        rotZ = 0,\r\n                                                                                                                                                        scaleX = 1,\r\n                                                                                                                                                        scaleY = 1,\r\n                                                                                                                                                        scaleZ = 1\r\n                                                                                                                                                    },\r\n                                                                                                                                                    Nickname = \"\",\r\n                                                                                                                                                    Description = \"\",\r\n                                                                                                                                                    GMNotes = \"\",\r\n                                                                                                                                                    AltLookAngle = {\r\n                                                                                                                                                        x = 0.0,\r\n                                                                                                                                                        y = 0.0,\r\n                                                                                                                                                        z = 0.0\r\n                                                                                                                                                    },\r\n                                                                                                                                                    ColorDiffuse = {\r\n                                                                                                                                                        r = 0.713235259,\r\n                                                                                                                                                        g = 0.713235259,\r\n                                                                                                                                                        b = 0.713235259\r\n                                                                                                                                                    },\r\n                                                                                                                                                    Tags = {deckType},\r\n                                                                                                                                                    LayoutGroupSortIndex = 0,\r\n                                                                                                                                                    Value = 0,\r\n                                                                                                                                                    Locked = false,\r\n                                                                                                                                                    Grid = true,\r\n                                                                                                                                                    Snap = true,\r\n                                                                                                                                                    IgnoreFoW = false,\r\n                                                                                                                                                    MeasureMovement = false,\r\n                                                                                                                                                    DragSelectable = true,\r\n                                                                                                                                                    Autoraise = true,\r\n                                                                                                                                                    Sticky = true,\r\n                                                                                                                                                    Tooltip = true,\r\n                                                                                                                                                    GridProjection = false,\r\n                                                                                                                                                    HideWhenFaceDown = true,\r\n                                                                                                                                                    Hands = false,\r\n                                                                                                                                                    SidewaysCard = false,\r\n                                                                                                                                                    DeckIDs = {},\r\n                                                                                                                                                    CustomDeck = {},\r\n                                                                                                                                                    LuaScript = \"\",\r\n                                                                                                                                                    LuaScriptState = \"\",\r\n                                                                                                                                                    XmlUI = \"\",\r\n                                                                                                                                                ContainedObjects = {}}\r\n\r\n                                                                                                                                                local knownCustomDecks = {}\r\n\r\n                                                                                                                                                for name, cardinality in pairs(contributions) do\r\n                                                                                                                                                    local source = sources[name]\r\n                                                                                                                                                    if source then\r\n                                                                                                                                                        assert(source.customDeck, name)\r\n                                                                                                                                                        local customDeckId = knownCustomDecks[source.customDeck]\r\n                                                                                                                                                        if not customDeckId then\r\n                                                                                                                                                            customDeckId = Deck._nextCustomDeckId()\r\n                                                                                                                                                            data.CustomDeck[tostring(customDeckId)] = source.customDeck\r\n                                                                                                                                                            data.Transform.scaleX = source.customDeck.__scale.x\r\n                                                                                                                                                            data.Transform.scaleY = source.customDeck.__scale.y\r\n                                                                                                                                                            data.Transform.scaleZ = source.customDeck.__scale.z\r\n                                                                                                                                                            knownCustomDecks[source.customDeck] = customDeckId\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        for _ = 1, cardinality do\r\n                                                                                                                                                            local index = source.luaIndex - 1\r\n                                                                                                                                                            local cardId = tostring(customDeckId * 100 + index)\r\n                                                                                                                                                            table.insert(data.DeckIDs, tostring(cardId))\r\n                                                                                                                                                            local cardData = Deck._generateCardData(source.customDeck, customDeckId, cardId)\r\n                                                                                                                                                            cardData.Tags = {deckType}\r\n                                                                                                                                                            cardData.Nickname = I18N(name)\r\n                                                                                                                                                            cardData.GMNotes = name\r\n                                                                                                                                                            table.insert(data.ContainedObjects, cardData)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    else\r\n                                                                                                                                                        error(\"No source for card '\" .. name .. \"'\")\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                local continuation = Helper.createContinuation(\"Deck._generateDeck\")\r\n\r\n                                                                                                                                                local spawnParameters = {\r\n                                                                                                                                                    data = #data.ContainedObjects == 1 and data.ContainedObjects[1] or data,\r\n                                                                                                                                                    position = position,\r\n                                                                                                                                                    rotation = Vector(0, 180, 180),\r\n                                                                                                                                                    callback_function = continuation.run\r\n                                                                                                                                                }\r\n\r\n                                                                                                                                                spawnObjectData(spawnParameters)\r\n\r\n                                                                                                                                                return continuation\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._nextCustomDeckId()\r\n                                                                                                                                                Deck.customDeckBaseId = Deck.customDeckBaseId + 1\r\n                                                                                                                                                return Deck.customDeckBaseId\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildObjectiveDeck(deckPosition)\r\n                                                                                                                                                local contributions = {\r\n                                                                                                                                                    muadDibFirstPlayer = 1,\r\n                                                                                                                                                    muadDib4to6p = 1,\r\n                                                                                                                                                    crysknife4to6p = 1,\r\n                                                                                                                                                    crysknife = 1,\r\n                                                                                                                                                    ornithopter1to3p = 1,\r\n                                                                                                                                                }\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Objective\", deckPosition, contributions, Deck.sources.objective)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildStarterDeck(deckPosition)\r\n                                                                                                                                                local contributionSets = {\r\n                                                                                                                                                    Deck.starter.base,\r\n                                                                                                                                                    Deck.starter.epic,\r\n                                                                                                                                                    Deck.starter.immortality,\r\n                                                                                                                                                }\r\n                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)\r\n                                                                                                                                                contributions = Helper.map(contributions, function (_, cardinality)\r\n                                                                                                                                                    return cardinality * 4\r\n                                                                                                                                                end)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Imperium\", deckPosition, contributions, Deck.sources.imperium)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildEmperorStarterDeck(deckPosition)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Imperium\", deckPosition, Deck.starter.emperor, Deck.sources.imperium)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildMuadDibStarterDeck(deckPosition)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Imperium\", deckPosition, Deck.starter.muadDib, Deck.sources.imperium)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildImperiumDeck(deckPosition)\r\n                                                                                                                                                local contributionSets = {\r\n                                                                                                                                                    Deck.imperium.legacy,\r\n                                                                                                                                                    Deck.imperium.ix,\r\n                                                                                                                                                    Deck.imperium.immortality,\r\n                                                                                                                                                    Deck.imperium.uprising,\r\n                                                                                                                                                    Deck.imperium.uprisingContract,\r\n                                                                                                                                                }\r\n                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Imperium\", deckPosition, contributions, Deck.sources.imperium)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildSpecialDeck(deckPosition)\r\n                                                                                                                                                local contributionSets = {\r\n                                                                                                                                                    Deck.special.legacy,\r\n                                                                                                                                                    Deck.special.immortality,\r\n                                                                                                                                                    Deck.special.uprising,\r\n                                                                                                                                                }\r\n                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Imperium\", deckPosition, contributions, Deck.sources.special)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildTleilaxuDeck(deckPosition)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Imperium\", deckPosition, Deck.tleilaxu, Deck.sources.tleilaxu)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildIntrigueDeck(deckPosition)\r\n                                                                                                                                                local contributionSets = {\r\n                                                                                                                                                    Deck.intrigue.legacy,\r\n                                                                                                                                                    Deck.intrigue.ix,\r\n                                                                                                                                                    Deck.intrigue.immortality,\r\n                                                                                                                                                    Deck.intrigue.uprising,\r\n                                                                                                                                                    Deck.intrigue.uprisingContract,\r\n                                                                                                                                                }\r\n                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Intrigue\", deckPosition, contributions, Deck.sources.intrigue)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildTechDeck(deckPosition)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Tech\", deckPosition, Deck.tech.ix, Deck.sources.tech)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            --\r\n                                                                                                                                            function Deck._prebuildConflictDeck(deckPosition)\r\n                                                                                                                                                local contributionSets = {}\r\n                                                                                                                                                for i = 1, 3 do\r\n                                                                                                                                                    for _, extension in ipairs({\"uprising\", \"ix\", \"immortality\"}) do\r\n                                                                                                                                                        local level = \"level\" .. tostring(i)\r\n                                                                                                                                                        local contributionSet = Deck.conflict[level][extension]\r\n                                                                                                                                                        if contributionSet then\r\n                                                                                                                                                            table.insert(contributionSets, contributionSet)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Conflict\", deckPosition, contributions, Deck.sources.conflict)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildHagalDeck(deckPosition)\r\n                                                                                                                                                local contributionSets = {}\r\n                                                                                                                                                for _, extension in ipairs({\"base\", \"ix\", \"immortality\"}) do\r\n                                                                                                                                                    for _, players in ipairs({\"common\", \"solo\", \"twoPlayers\"}) do\r\n                                                                                                                                                        table.insert(contributionSets, Deck.hagal[extension][players])\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Hagal\", deckPosition, contributions, Deck.sources.hagal)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildLeaderDeck(deckPosition)\r\n                                                                                                                                                local contributionSets = {\r\n                                                                                                                                                    Deck.leaders.legacy,\r\n                                                                                                                                                    Deck.leaders.ix,\r\n                                                                                                                                                    Deck.leaders.uprising,\r\n                                                                                                                                                }\r\n                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"Leader\", deckPosition, contributions, Deck.sources.leaders)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._prebuildRivalLeaderDeck(deckPosition)\r\n                                                                                                                                                local contributionSets = {\r\n                                                                                                                                                    Deck.rivalLeaders.uprising,\r\n                                                                                                                                                }\r\n                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)\r\n                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards(\"RivalLeader\", deckPosition, contributions, Deck.sources.rivalLeaders)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck._generateFromPrebuildDeck(deckType, deckZone, contributions, _, spacing)\r\n                                                                                                                                                assert(deckType)\r\n                                                                                                                                                assert(deckZone)\r\n                                                                                                                                                assert(#deckZone.getTags() == 0 or deckZone.hasTag(deckType),\r\n                                                                                                                                                    -- Curiously, the problem doesn't exist for dynamic decks.\r\n                                                                                                                                                \"Trying to generate a static deck in an incompatibly tagged zone will trigger the dreaded 'Unknown Error'.\")\r\n                                                                                                                                                assert(contributions)\r\n\r\n                                                                                                                                                local continuation = Helper.createContinuation(\"Deck._prebuildDeck\")\r\n\r\n                                                                                                                                                local sources = {}\r\n\r\n                                                                                                                                                local prebuildZone = Deck.prebuildZones[I18N.getLocale()]\r\n                                                                                                                                                for _, object in ipairs(prebuildZone.getObjects()) do\r\n                                                                                                                                                    if object.hasTag(deckType) then\r\n                                                                                                                                                        assert(object.type == \"Deck\")\r\n                                                                                                                                                        for _, card in ipairs(object.getObjects()) do\r\n                                                                                                                                                            local id = Helper.getID(card)\r\n                                                                                                                                                            if sources[id] then\r\n                                                                                                                                                                table.insert(sources[id].instances, card.guid)\r\n                                                                                                                                                            else\r\n                                                                                                                                                                sources[id] = {\r\n                                                                                                                                                                    deck = object,\r\n                                                                                                                                                                instances = {card.guid}}\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                local cardCount = 0\r\n                                                                                                                                                for name, cardinality in pairs(contributions) do\r\n                                                                                                                                                    local source = sources[name]\r\n                                                                                                                                                    assert(source, \"No source for card '\" .. deckType .. \".\" .. name .. \"'\")\r\n                                                                                                                                                    for i = 1, math.ceil(cardinality) do\r\n                                                                                                                                                        local firstGuid = source.instances[1]\r\n                                                                                                                                                        assert(firstGuid, \"Not enough instances of the card '\" .. name .. \"'\")\r\n                                                                                                                                                        table.remove(source.instances, 1)\r\n                                                                                                                                                        assert(source.deck, \"Should not happen! Source deck is not properly generated.\")\r\n                                                                                                                                                        source.deck.takeObject({\r\n                                                                                                                                                            guid = firstGuid,\r\n                                                                                                                                                            -- Stacking is needed to preserve input order.\r\n                                                                                                                                                            position = deckZone.getPosition() + Vector(0, 1 + cardCount * (spacing or 0.1), 0),\r\n                                                                                                                                                            smooth = false,\r\n                                                                                                                                                            callback_function = function (card)\r\n                                                                                                                                                                if cardinality - i < 0 then\r\n                                                                                                                                                                    card.setTags(Helper.concatTables(card.getTags(), {\"Unselected\"}))\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        })\r\n                                                                                                                                                        cardCount = cardCount + 1\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                Wait.condition(function ()\r\n                                                                                                                                                    local deckOrCard = Helper.getDeckOrCard(deckZone)\r\n                                                                                                                                                    continuation.run(deckOrCard)\r\n                                                                                                                                                end, function ()\r\n                                                                                                                                                    local deckOrCard = Helper.getDeckOrCard(deckZone)\r\n                                                                                                                                                    return deckOrCard ~= nil\r\n                                                                                                                                                    and not deckOrCard.spawning\r\n                                                                                                                                                    and Helper.getCardCount(deckOrCard) >= cardCount\r\n                                                                                                                                                end)\r\n\r\n                                                                                                                                                return continuation\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createObjectiveCustomDeck(faceUrl, width, height)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.objectiveCardBack, faceUrl, width, height, Vector(1, 1, 1))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createImperiumCustomDeck(faceUrl, width, height)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.imperiumCardBack, faceUrl, width, height, Vector(1.05, 1, 1.05))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createIntrigueCustomDeck(faceUrl, width, height)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.intrigueCardBack, faceUrl, width, height, Vector(1, 1, 1))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createTechCustomDeck(faceUrl, width, height)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.techCardBack, faceUrl, width, height, Vector(0.55, 1, 0.55))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createConflictCustomDeck(faceUrl, width, height)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.conflictCardBack, faceUrl, width, height, Vector(1, 1, 1))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createConflict1CustomDeck(faceUrl, width, height)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.conflict1CardBack, faceUrl, width, height, Vector(1, 1, 1))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createConflict2CustomDeck(faceUrl, width, height)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.conflict2CardBack, faceUrl, width, height, Vector(1, 1, 1))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createConflict3CustomDeck(faceUrl, width, height)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.conflict3CardBack, faceUrl, width, height, Vector(1, 1, 1))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createHagalCustomDeck(faceUrl, width, height, scale)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.hagalCardBack, faceUrl, width, height, scale or Vector(0.83, 1, 0.83))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createLeaderCustomDeck(faceUrl, width, height)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.leaderCardBack, faceUrl, width, height, Vector(1.12, 1, 1.12))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createRivalLeaderCustomDeck(faceUrl, width, height)\r\n                                                                                                                                                return Deck.createCustomDeck(Deck.backs.rivalLeaderCardBack, faceUrl, width, height, Vector(1.05, 1, 1.05))\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.createCustomDeck(backUrl, faceUrl, width, height, scale)\r\n                                                                                                                                                assert(backUrl)\r\n                                                                                                                                                assert(faceUrl)\r\n                                                                                                                                                assert(width)\r\n                                                                                                                                                assert(height)\r\n                                                                                                                                                assert(scale)\r\n                                                                                                                                                return {\r\n                                                                                                                                                    FaceURL = faceUrl,\r\n                                                                                                                                                    BackURL = backUrl,\r\n                                                                                                                                                    NumWidth = width,\r\n                                                                                                                                                    NumHeight = height,\r\n                                                                                                                                                    BackIsHidden = true,\r\n                                                                                                                                                    UniqueBack = false,\r\n                                                                                                                                                    Type = 0,\r\n                                                                                                                                                    __scale = scale\r\n                                                                                                                                                }\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            return Deck\r\n\r\n                                                                                                                                        end)\r\n                                                                                                                                        __bundle_register(\"fr.Deck\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                            local Helper = require(\"utils.Helper\")\r\n\r\n                                                                                                                                            local Deck = {\r\n                                                                                                                                                objective = {\r\n                                                                                                                                                    uprisingObjective = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133399065/31449D20F329E25D1674B822346A5A8EEE052D71/\", 3, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                imperium = {\r\n                                                                                                                                                    -- starter without dune planet\r\n                                                                                                                                                    starter = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141323392/D25AA65312D89EB7CEED36D451618E731A674BED/\", 4, 2},\r\n                                                                                                                                                    starterImperium_emperor = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141287197/6C2EBDBB0DA2CBC4EBE3C91970F4A6C66C4225FD/\", 5, 2},\r\n                                                                                                                                                    starterImperium_muadDib = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141287800/56225166A2ED9BD37EF06E0F83EEC329A35DB1CD/\", 5, 2},\r\n                                                                                                                                                    -- dune planet\r\n                                                                                                                                                    starterDunePlanet = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141327771/98F5861E28F3167495D3F2890879072BF3A84E60/\", 2, 2},\r\n                                                                                                                                                    -- base without foldspace, nor liasion, nor the spice must flow, but with Jessica of Arrakis and Duncan Loyal Blade\r\n                                                                                                                                                    imperium = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141321326/CC2D301CA075930201B3883D82F4C6E1A0837273/\", 10, 7},\r\n                                                                                                                                                    imperiumFoldedSpace = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141324507/AE481C2ED19B085E2669F22420FD282982FD11A9/\", 3, 2},\r\n                                                                                                                                                    -- ix without control the spice, but with Boundless Ambition\r\n                                                                                                                                                    ixImperium = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141329061/C54BCAB79869547E728509123AC47EDB32E79BF5/\", 6, 6},\r\n                                                                                                                                                    ixImperiumControlTheSpice = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141323266/DD5ED3E5FD12F0A1C4F42750E766E83564248E07/\", 1, 1},\r\n                                                                                                                                                    -- tleilax without experimentation\r\n                                                                                                                                                    immortalityImperium = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141325387/142F50245296C2EE1F5ABAD8CE93982AC0592110/\", 6, 5},\r\n                                                                                                                                                    immortalityImperiumExperimentation = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141324061/BF6DF4E8EF5B8C8F5BB6952166C559694A61BA04/\", 2, 2},\r\n                                                                                                                                                    -- tleilax without reclaimed forces\r\n                                                                                                                                                    tleilaxResearch = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141328012/2399494577B270989873BC3A2002B8D99E33E001/\", 4, 5},\r\n                                                                                                                                                    -- reclaimed forces\r\n                                                                                                                                                    tleilaxResearchReclaimedForces = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141323085/60812AEA733FF5558BA9190E47CBD474EBF38C94/\", 1, 1},\r\n                                                                                                                                                    uprisingImperium = {\"https://steamusercontent-a.akamaihd.net/ugc/2499024154440743964/4AFB30174B6A6A4A46E5CE946B8731403F267041/\", 10, 7},\r\n                                                                                                                                                    uprisingImperium_contract = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141289668/F29889245831593A62B3E914EAD5DBC4904BCEE7/\", 2, 2},\r\n                                                                                                                                                    uprisingImperium_prepareTheWay = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141286826/72A71863DE41003FCC454F212FE183937C72C50F/\", 1, 1},\r\n                                                                                                                                                    uprisingImperium_theSpiceMustFlow = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141288717/35C76D798308EEA5D9BF50DB3F8B2E3159B14AF9/\", 5, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                intrigue = {\r\n                                                                                                                                                    intrigue = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141342723/13659DD01D152A8B8055B894B247CB1D254D3752/\", 8, 5},\r\n                                                                                                                                                    ixIntrigue = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141342152/3D33B3E59811CEDC64A53F104D31190E76676C64/\", 5, 4},\r\n                                                                                                                                                    immortalityIntrigue = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141343779/83BA634F05FC7A14933153A18B7AEF83E07E3C14/\", 6, 3},\r\n                                                                                                                                                    uprisingIntrigue = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133407442/099FFE5EDD43C0E39212970D0A4FDBA12CC729BF/\", 10, 4},\r\n                                                                                                                                                    uprisingIntrigue_contract = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141307385/BFDA5F7ABDF2A97F17019C1715DE0F41BF2BF649/\", 2, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                conflict1 = {\r\n                                                                                                                                                    uprisingConflict = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141315604/288CBFF505CD4CE7E283BF2158A816517DD365C1/\", 2, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                conflict2 = {\r\n                                                                                                                                                    uprisingConflict = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141315846/D5CD3A18CBB9DCE0C305AE999213B504F5F3890D/\", 5, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                conflict3 = {\r\n                                                                                                                                                    conflict = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141365294/F1BEAE6266E75B7A2F5DE511DB4FEB25A2CD486B/\", 3, 2},\r\n                                                                                                                                                    uprisingConflict = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141315039/AB1D6A865796D30CD1035C9DEB28002091881B14/\", 2, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                hagal = {\r\n                                                                                                                                                    base = {\"https://steamusercontent-a.akamaihd.net/ugc/2291837013341414524/BB90DF7F9C97680FE16C4D91A1AF0871B2462CB9/\", 5, 5},\r\n                                                                                                                                                    reshuffle = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141333398/66020C11E4FEA2D22744020D27465DCC2BB02BBE/\", 7, 2},\r\n                                                                                                                                                    ix = {\"https://steamusercontent-a.akamaihd.net/ugc/2291837013341435538/E181DED96F81A27405E57F0CF398575C20D73D12/\", 2, 3},\r\n                                                                                                                                                    immortality = {\"https://steamusercontent-a.akamaihd.net/ugc/2291837013341433170/56E0015597F27AB50451E026A8BD95512FA1CE27/\", 2, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                tech = {\r\n                                                                                                                                                    windtraps = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361305/4AD548281EE3633601185ECDE6461BD5E6E67D12/\", 1, 1},\r\n                                                                                                                                                    flagship = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361634/0A8A2BF9A00EE031BB25411F4DED2DD448E68CF2/\", 1, 1},\r\n                                                                                                                                                    sonicSnoopers = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363918/41B99AA2EE39B0218D1A7F101E2F7651B69C81B6/\", 1, 1},\r\n                                                                                                                                                    artillery = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362932/444069DB894789E582661E502BB46024C0220882/\", 1, 1},\r\n                                                                                                                                                    troopTransports = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363383/47909FA9F172C5C52DC364CF7DB461FF74578CD0/\", 1, 1},\r\n                                                                                                                                                    spySatellites = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361398/9E219D6303009CCF196AB048CE9C0E259178D23B/\", 1, 1},\r\n                                                                                                                                                    invasionShips = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360120/B3D102F7337E8D490A6F3F215D9D07ADB0F596A3/\", 1, 1},\r\n                                                                                                                                                    chaumurky = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141364445/4C4AB77E05C060BFF8AFC4BD83F196584D26786F/\", 1, 1},\r\n                                                                                                                                                    detonationDevices = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362536/425FF99976AF8F554B0BE54C32BCAFFAF61FB673/\", 1, 1},\r\n                                                                                                                                                    spaceport = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360547/40F797128394D598A460BD9C0CDA5ED2060635B5/\", 1, 1},\r\n                                                                                                                                                    minimicFilm = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362245/EB6795F95B5EB16A3771985483452A16C03E4F85/\", 1, 1},\r\n                                                                                                                                                    holoprojectors = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363278/BAE44C5A75C26C3D4021FCB1893B88C56A0C1799/\", 1, 1},\r\n                                                                                                                                                    memocorders = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133863964/D2E97A26B1DDC4A451FD11678415ECD7DE990450/\", 1, 1},\r\n                                                                                                                                                    disposalFacility = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362000/6B8306BA918834279302EC16185756C49F852964/\", 1, 1},\r\n                                                                                                                                                    holtzmanEngine = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360423/9069E14122F06892E95192C8E91C4792AA04FB33/\", 1, 1},\r\n                                                                                                                                                    trainingDrones = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141364887/CC314BFCA03F938FD40AA091A22BB0AD050CECCF/\", 1, 1},\r\n                                                                                                                                                    shuttleFleet = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361030/270E363DDF544F9A8B14AC269C193741258FCE41/\", 1, 1},\r\n                                                                                                                                                    restrictedOrdnance = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363646/80CE99F45AED6EF9A249C9BF13E03458D633E8E4/\", 1, 1},\r\n                                                                                                                                                },\r\n                                                                                                                                                contract = {\r\n                                                                                                                                                    spiceRefineryWater = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301711/094E866AD56F70903A03DA8673CD337038C79406/\", 1, 1},\r\n                                                                                                                                                    spiceRefineryCard = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133402000/48DCDFDFFBECF417A7562F821120BD76364C1416/\", 1, 1},\r\n                                                                                                                                                    researchStationSpy = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133405740/11C7E095B6267C4BE875B47AA7D214FC058F62FF/\", 1, 1},\r\n                                                                                                                                                    researchStationSolari = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299807/456BEE0AA5AC91508396967BDF090D6380611B57/\", 1, 1},\r\n                                                                                                                                                    arrakeenSpy = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133404029/4CB29CF8FC8D0BF9A5B575B3E05B31774E59F3CD/\", 1, 1},\r\n                                                                                                                                                    arrakeenWater = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302127/926CFC63532C4D7BC6AA6B9151AFF0221A553B44/\", 1, 1},\r\n                                                                                                                                                    espionage = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302966/48A8C33B4ABEB9C61E8C5EF82218E15368DAC56B/\", 1, 1},\r\n                                                                                                                                                    sardaukarRecall = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301335/E5463C7FFA3426E57F5B07A0DE91602798170C69/\", 1, 1},\r\n                                                                                                                                                    sardaukarCard = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133404238/1711DFB19987B48883EF6B53E1CD62739D70E1A2/\", 1, 1},\r\n                                                                                                                                                    highCouncilSolari = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299253/1C0C3DEEFFF62306A3988CE9128E2A283BDE03DF/\", 1, 1},\r\n                                                                                                                                                    highCouncilInfluence = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141300682/59973420C9AAB73BA6EBA1984C259A600832B340/\", 1, 1},\r\n                                                                                                                                                    immediate = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299433/42A2FE5E39D5EF977BFDF5B9783ED57000DB3F8D/\", 1, 1},\r\n                                                                                                                                                    heighlinerTroop = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299064/FCCBB86CF2E3C36A3C09B5A1635B7557A803BCFB/\", 1, 1},\r\n                                                                                                                                                    heighlinerWater = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299969/C608732CF394D877A424416273FDD34CB1F0387D/\", 1, 1},\r\n                                                                                                                                                    deliverSupplies = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133405549/AE2085FF98F6A4384DA2213AD1F555D9E341B203/\", 1, 1},\r\n                                                                                                                                                    acquire = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302298/6D085EC459F3C659F3B43376C96B1CB607448136/\", 1, 1},\r\n                                                                                                                                                    harvest = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141303217/BADC52B8C0982FFA0DFF095040D3973436AA3149/\", 1, 1},\r\n                                                                                                                                                    harvestMore = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133406086/1E5DF874101D6B6A70DE17B2E1A1DB4119290AAA/\", 1, 1},\r\n                                                                                                                                                },\r\n                                                                                                                                                leader = {\r\n                                                                                                                                                    glossuRabban = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318082/68A9DE7E06DA5857EE51ECB978E13E3921A15B1A/\", 1, 1},\r\n                                                                                                                                                    vladimirHarkonnen = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141320749/6F682C5E5C1ADE0B9B1B8FAC80B9525A6748C351/\", 1, 1},\r\n                                                                                                                                                    memnonThorvald = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318361/36DB26EE194B780C9C879C74FC634C15433CE06A/\", 1, 1},\r\n                                                                                                                                                    arianaThorvald = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318498/3C1CA2B3506FB7AD8B1B40DB1414F7461F6974C8/\", 1, 1},\r\n                                                                                                                                                    paulAtreides = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141319736/008429F21B2898E4C2982EC7FB1AF422FDD85E24/\", 1, 1},\r\n                                                                                                                                                    letoAtreides = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317105/152B626A2D773B224CFFF878E35CEFDBB6F67505/\", 1, 1},\r\n                                                                                                                                                    ilbanRichese = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317254/F0F052CCAB7005F4D30879BF639AFACEDFF70A80/\", 1, 1},\r\n                                                                                                                                                    helenaRichese = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141319602/A069B3ECF1B4E9C42D2453E28EA13257F397B3F3/\", 1, 1},\r\n                                                                                                                                                    -- Ix\r\n                                                                                                                                                    yunaMoritani = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141320605/CDAED205706CD8E32700B8A56C9BD387C5D72696/\", 1, 1},\r\n                                                                                                                                                    hundroMoritani = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317391/A64F2D77C6F482F31B12EC97C2DEEBBDF45AF3F9/\", 1, 1},\r\n                                                                                                                                                    ilesaEcaz = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141320907/7A0FCC4CA1D0CAF19C8066776DC23A9631000997/\", 1, 1},\r\n                                                                                                                                                    armandEcaz = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141319231/98401D1D00D15DB3512E48BBD63B9922EE17EF71/\", 1, 1},\r\n                                                                                                                                                    tessiaVernius = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317697/6C34345ADF23EBD567DE0EE662B4920906F721F0/\", 1, 1},\r\n                                                                                                                                                    rhomburVernius = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141316740/58A6CF3EB6EBDEAC4B5826C0D21408A3CC02E678/\", 1, 1},\r\n                                                                                                                                                    -- uprising\r\n                                                                                                                                                    stabanTuek = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141281600/C1C83545F676ACDC3C63577BED070BD80ABADEED/\", 1, 1},\r\n                                                                                                                                                    amberMetulli = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141281768/CD03E06EFC734492D344B04C385FEF43DC2DF173/\", 1, 1},\r\n                                                                                                                                                    gurneyHalleck = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141284803/09C5E2F178B9F48ED577C7E74FC58C53D7698D7D/\", 1, 1},\r\n                                                                                                                                                    margotFenring = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283726/A3381C2EF2869950BD00E6AE7ADB5B662F883764/\", 1, 1},\r\n                                                                                                                                                    irulanCorrino = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141284991/5D95D6143B4407029C8665AF8E10B20634FEE3A3/\", 1, 1},\r\n                                                                                                                                                    jessica = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141282389/4CB1D17A9AA19831A1C2925FB431DCFDA1EE10B8/\", 1, 1, Vector(1.12, 1, 1.12),\r\n                                                                                                                                                    \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283297/171F9173728A3E031830C1AF989B9B0BAFAA5DAF/\"},\r\n                                                                                                                                                    feydRauthaHarkonnen = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141284619/996AAC7E5AC098A6804153865E8116754B19DDDB/\", 1, 1},\r\n                                                                                                                                                    shaddamCorrino = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141282162/D307B7C2139EC0E0B999900940DC6F5827EB68A8/\", 1, 1},\r\n                                                                                                                                                    muadDib = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141281959/BA1804DF868BF77175777B0FB5B1D109B46E13A9/\", 1, 1},\r\n                                                                                                                                                },\r\n                                                                                                                                                rivalLeader = {\r\n                                                                                                                                                    uprising = {\"https://steamusercontent-a.akamaihd.net/ugc/2291837013341168508/811BF7142774932C8C2FAD7C10BA104F8DAD4299/\", 4, 3},\r\n                                                                                                                                                },\r\n                                                                                                                                            }\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.load(loader, cards, category, customDeckName, startLuaIndex, cardNames)\r\n                                                                                                                                                assert(Deck[category], \"Unknown category: \" .. category)\r\n                                                                                                                                                local desc = Deck[category][customDeckName]\r\n                                                                                                                                                assert(desc, \"No descriptor for: \" .. category .. \".\" .. customDeckName)\r\n                                                                                                                                                local customDeck\r\n                                                                                                                                                if desc[5] then\r\n                                                                                                                                                    customDeck = loader.createCustomDeck(desc[5], desc[1], desc[2], desc[3], desc[4])\r\n                                                                                                                                                else\r\n                                                                                                                                                    local functionName = Helper.toCamelCase(\"create\", category, \"CustomDeck\")\r\n                                                                                                                                                    assert(loader[functionName], \"No loader for: \" .. functionName)\r\n                                                                                                                                                    customDeck = loader[functionName](desc[1], desc[2], desc[3], desc[4])\r\n                                                                                                                                                end\r\n                                                                                                                                                return loader.loadCustomDeck(cards, customDeck, startLuaIndex, cardNames)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.loadWithSubCategory(loader, cards, category, subCategory, customDeckName, startLuaIndex, cardNames)\r\n                                                                                                                                                assert(Deck[category], \"No category: \" .. category)\r\n                                                                                                                                                assert(Deck[category][subCategory], \"No sub category: \" .. category .. \".\" .. subCategory)\r\n                                                                                                                                                local desc = Deck[category][subCategory][customDeckName]\r\n                                                                                                                                                assert(desc, \"No descriptor for: \" .. category .. \".\" .. customDeckName)\r\n                                                                                                                                                local functionName = Helper.toCamelCase(\"create\", category, \"CustomDeck\")\r\n                                                                                                                                                assert(loader[functionName], \"No loader for: \" .. functionName)\r\n                                                                                                                                                local customDeck = loader[functionName](desc[1], desc[2], desc[3], desc[4])\r\n                                                                                                                                                return loader.loadCustomDeck(cards, customDeck, startLuaIndex, cardNames)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.loadCustomDecks(loader)\r\n                                                                                                                                                local cards = {\r\n                                                                                                                                                    objective = {},\r\n                                                                                                                                                    imperium = {},\r\n                                                                                                                                                    special = {},\r\n                                                                                                                                                    tleilaxu = {},\r\n                                                                                                                                                    intrigue = {},\r\n                                                                                                                                                    conflict = {},\r\n                                                                                                                                                    hagal = {},\r\n                                                                                                                                                    tech = {},\r\n                                                                                                                                                    leaders = {},\r\n                                                                                                                                                    rivalLeaders = {},\r\n                                                                                                                                                }\r\n\r\n                                                                                                                                                Deck.load(loader, cards.objective, \"objective\", \"uprisingObjective\", 1, {\r\n                                                                                                                                                    \"ornithopter1to3p\",\r\n                                                                                                                                                    \"muadDibFirstPlayer\",\r\n                                                                                                                                                    \"crysknife\",\r\n                                                                                                                                                    \"muadDib4to6p\",\r\n                                                                                                                                                    \"crysknife4to6p\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"starter\", 1, {\r\n                                                                                                                                                    \"seekAllies\",\r\n                                                                                                                                                    \"signetRing\",\r\n                                                                                                                                                    \"diplomacy\",\r\n                                                                                                                                                    \"reconnaissance\",\r\n                                                                                                                                                    \"convincingArgument\", \"\",\r\n                                                                                                                                                    \"dagger\", \"\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"starterDunePlanet\", 1, {\r\n                                                                                                                                                    \"duneTheDesertPlanet\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"starterImperium_emperor\", 1, {\r\n                                                                                                                                                    \"emperorConvincingArgument\",\r\n                                                                                                                                                    \"emperorCorrinoMight\",\r\n                                                                                                                                                    \"emperorCriticalShipments\",\r\n                                                                                                                                                    \"emperorDemandResults\",\r\n                                                                                                                                                    \"emperorDevastatingAssault\",\r\n                                                                                                                                                    \"emperorImperialOrnithopter\", \"\",\r\n                                                                                                                                                    \"emperorSignetRing\",\r\n                                                                                                                                                    \"emperorSeekAllies\",\r\n                                                                                                                                                    \"emperorImperialTent\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"starterImperium_muadDib\", 1, {\r\n                                                                                                                                                    \"muadDibCommandRespect\",\r\n                                                                                                                                                    \"muadDibConvincingArgument\",\r\n                                                                                                                                                    \"muadDibDemandAttention\",\r\n                                                                                                                                                    \"muadDibDesertCall\",\r\n                                                                                                                                                    \"muadDibLimitedLandsraadAccess\", \"\",\r\n                                                                                                                                                    \"muadDibSeekAllies\",\r\n                                                                                                                                                    \"muadDibUsul\",\r\n                                                                                                                                                    \"muadDibThreatenSpiceProduction\",\r\n                                                                                                                                                    \"muadDibSignetRing\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"imperium\", 1, {\r\n                                                                                                                                                    \"opulence\",\r\n                                                                                                                                                    \"firmGrip\",\r\n                                                                                                                                                    \"guildAmbassador\",\r\n                                                                                                                                                    \"guildBankers\",\r\n                                                                                                                                                    \"otherMemory\",\r\n                                                                                                                                                    \"ladyJessica\",\r\n                                                                                                                                                    \"jessicaOfArrakis\",\r\n                                                                                                                                                    \"kwisatzHaderach\",\r\n                                                                                                                                                    \"reverendMotherMohiam\",\r\n                                                                                                                                                    \"sietchReverendMother\",\r\n                                                                                                                                                    \"testOfHumanity\",\r\n                                                                                                                                                    \"lietKynes\",\r\n                                                                                                                                                    \"chani\",\r\n                                                                                                                                                    \"crysknife\",\r\n                                                                                                                                                    \"stilgar\",\r\n                                                                                                                                                    \"choamDirectorship\",\r\n                                                                                                                                                    \"duncanIdaho\",\r\n                                                                                                                                                    \"drYueh\",\r\n                                                                                                                                                    \"gurneyHalleck\",\r\n                                                                                                                                                    \"piterDeVries\",\r\n                                                                                                                                                    \"carryall\",\r\n                                                                                                                                                    \"thufirHawat\",\r\n                                                                                                                                                    \"beneGesseritSister\", \"\", \"\",\r\n                                                                                                                                                    \"powerPlay\", \"\", \"\",\r\n                                                                                                                                                    \"imperialSpy\", \"\",\r\n                                                                                                                                                    \"sardaukarInfantry\", \"\",\r\n                                                                                                                                                    \"sardaukarLegion\", \"\",\r\n                                                                                                                                                    \"guildAdministrator\", \"\",\r\n                                                                                                                                                    \"spiceSmugglers\", \"\",\r\n                                                                                                                                                    \"smugglersThopter\", \"\",\r\n                                                                                                                                                    \"spaceTravel\", \"\",\r\n                                                                                                                                                    \"beneGesseritInitiate\", \"\",\r\n                                                                                                                                                    \"theVoice\", \"\",\r\n                                                                                                                                                    \"geneManipulation\", \"\",\r\n                                                                                                                                                    \"missionariaProtectiva\", \"\",\r\n                                                                                                                                                    \"fremenCamp\", \"\",\r\n                                                                                                                                                    \"spiceHunter\", \"\",\r\n                                                                                                                                                    \"wormRiders\", \"\",\r\n                                                                                                                                                    \"fedaykinDeathCommando\", \"\",\r\n                                                                                                                                                    \"shiftingAllegiances\", \"\",\r\n                                                                                                                                                    \"scout\", \"\",\r\n                                                                                                                                                    \"assassinationMission\", \"\",\r\n                                                                                                                                                    \"gunThopter\", \"\",\r\n                                                                                                                                                    \"arrakisRecruiter\", \"\",\r\n                                                                                                                                                    \"duncanLoyalBlade\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"ixImperium\", 1, {\r\n                                                                                                                                                    \"appropriate\",\r\n                                                                                                                                                    \"imperialBashar\",\r\n                                                                                                                                                    \"courtIntrigue\",\r\n                                                                                                                                                    \"fullScaleAssault\",\r\n                                                                                                                                                    \"imperialShockTrooper\",\r\n                                                                                                                                                    \"guildAccord\",\r\n                                                                                                                                                    \"guildChiefAdministrator\",\r\n                                                                                                                                                    \"ixGuildCompact\",\r\n                                                                                                                                                    \"landingRights\",\r\n                                                                                                                                                    \"esmarTuek\",\r\n                                                                                                                                                    \"embeddedAgent\",\r\n                                                                                                                                                    \"weirdingWay\",\r\n                                                                                                                                                    \"webOfPower\",\r\n                                                                                                                                                    \"spiceTrader\",\r\n                                                                                                                                                    \"desertAmbush\",\r\n                                                                                                                                                    \"satelliteBan\",\r\n                                                                                                                                                    \"jamis\",\r\n                                                                                                                                                    \"sayyadina\",\r\n                                                                                                                                                    \"shaiHulud\",\r\n                                                                                                                                                    \"boundlessAmbition\",\r\n                                                                                                                                                    \"bountyHunter\",\r\n                                                                                                                                                    \"choamDelegate\",\r\n                                                                                                                                                    \"waterPeddler\",\r\n                                                                                                                                                    \"localFence\",\r\n                                                                                                                                                    \"truthsayer\", \"\",\r\n                                                                                                                                                    \"inTheShadows\", \"\",\r\n                                                                                                                                                    \"freighterFleet\", \"\",\r\n                                                                                                                                                    \"ixianEngineer\", \"\",\r\n                                                                                                                                                    \"negotiatedWithdrawal\", \"\",\r\n                                                                                                                                                    \"treachery\", \"\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"ixImperiumControlTheSpice\", 1, {\r\n                                                                                                                                                    \"controlTheSpice\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"immortalityImperium\", 1, {\r\n                                                                                                                                                    \"beneTleilaxLab\",\r\n                                                                                                                                                    \"beneTleilaxResearcher\",\r\n                                                                                                                                                    \"blankSlate\",\r\n                                                                                                                                                    \"clandestineMeeting\",\r\n                                                                                                                                                    \"corruptSmuggler\",\r\n                                                                                                                                                    \"dissectingKit\", \"\",\r\n                                                                                                                                                    \"forHumanity\",\r\n                                                                                                                                                    \"highPriorityTravel\",\r\n                                                                                                                                                    \"imperiumCeremony\",\r\n                                                                                                                                                    \"interstellarConspiracy\",\r\n                                                                                                                                                    \"keysToPower\",\r\n                                                                                                                                                    \"lisanAlGaib\",\r\n                                                                                                                                                    \"longReach\",\r\n                                                                                                                                                    \"occupation\",\r\n                                                                                                                                                    \"organMerchants\",\r\n                                                                                                                                                    \"plannedCoupling\",\r\n                                                                                                                                                    \"replacementEyes\",\r\n                                                                                                                                                    \"sardaukarQuartermaster\",\r\n                                                                                                                                                    \"shadoutMapes\",\r\n                                                                                                                                                    \"showOfStrength\",\r\n                                                                                                                                                    \"spiritualFervor\",\r\n                                                                                                                                                    \"stillsuitManufacturer\",\r\n                                                                                                                                                    \"throneRoomPolitics\",\r\n                                                                                                                                                    \"tleilaxuMaster\",\r\n                                                                                                                                                    \"tleilaxuSurgeon\",\r\n                                                                                                                                                    -- +4\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"immortalityImperiumExperimentation\", 1, {\r\n                                                                                                                                                    \"experimentation\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                Deck.load(loader, cards.tleilaxu, \"imperium\", \"tleilaxResearch\", 1, {\r\n                                                                                                                                                    \"beguilingPheromones\",\r\n                                                                                                                                                    \"chairdog\",\r\n                                                                                                                                                    \"contaminator\",\r\n                                                                                                                                                    \"corrinoGenes\",\r\n                                                                                                                                                    \"faceDancer\",\r\n                                                                                                                                                    \"faceDancerInitiate\",\r\n                                                                                                                                                    \"fromTheTanks\",\r\n                                                                                                                                                    \"ghola\",\r\n                                                                                                                                                    \"guildImpersonator\",\r\n                                                                                                                                                    \"industrialEspionage\",\r\n                                                                                                                                                    \"piterGeniusAdvisor\",\r\n                                                                                                                                                    \"scientificBreakthrough\",\r\n                                                                                                                                                    \"sligFarmer\",\r\n                                                                                                                                                    \"stitchedHorror\",\r\n                                                                                                                                                    \"subjectX137\",\r\n                                                                                                                                                    \"tleilaxuInfiltrator\",\r\n                                                                                                                                                    \"twistedMentat\",\r\n                                                                                                                                                    \"unnaturalReflexes\",\r\n                                                                                                                                                    \"usurp\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"uprisingImperium\", 1, {\r\n                                                                                                                                                    \"unswervingLoyalty\", \"\",\r\n                                                                                                                                                    \"spaceTimeFolding\",\r\n                                                                                                                                                    \"weirdingWoman\", \"\",\r\n                                                                                                                                                    \"sardaukarSoldier\",\r\n                                                                                                                                                    \"smugglerHarvester\", \"\",\r\n                                                                                                                                                    \"makerKeeper\", \"\",\r\n                                                                                                                                                    \"reliableInformant\",\r\n                                                                                                                                                    \"hiddenMissive\",\r\n                                                                                                                                                    \"wheelsWithinWheels\",\r\n                                                                                                                                                    \"fedaykinStilltent\",\r\n                                                                                                                                                    \"imperialSpymaster\",\r\n                                                                                                                                                    \"spyNetwork\",\r\n                                                                                                                                                    \"desertSurvival\", \"\",\r\n                                                                                                                                                    \"undercoverAsset\",\r\n                                                                                                                                                    \"beneGesseritOperative\", \"\",\r\n                                                                                                                                                    \"maulaPistol\", \"\",\r\n                                                                                                                                                    \"thumper\",\r\n                                                                                                                                                    \"nothernWatermaster\",\r\n                                                                                                                                                    \"covertOperation\",\r\n                                                                                                                                                    \"doubleAgent\", \"\",\r\n                                                                                                                                                    \"guildEnvoy\",\r\n                                                                                                                                                    \"rebelSupplier\", \"\",\r\n                                                                                                                                                    \"calculusOfPower\", \"\",\r\n                                                                                                                                                    \"guildSpy\",\r\n                                                                                                                                                    \"dangerousRhetoric\",\r\n                                                                                                                                                    \"branchingPath\",\r\n                                                                                                                                                    \"ecologicalTestingStation\",\r\n                                                                                                                                                    \"theBeastSpoils\",\r\n                                                                                                                                                    \"smugglerHaven\",\r\n                                                                                                                                                    \"shishakli\",\r\n                                                                                                                                                    \"paracompass\",\r\n                                                                                                                                                    \"sardaukarCoordination\", \"\",\r\n                                                                                                                                                    \"truthtrance\", \"\",\r\n                                                                                                                                                    \"publicSpectable\", \"\",\r\n                                                                                                                                                    \"southernElders\",\r\n                                                                                                                                                    \"treadInDarkness\", \"\",\r\n                                                                                                                                                    \"spacingGuildFavor\", \"\",\r\n                                                                                                                                                    \"capturedMentat\",\r\n                                                                                                                                                    \"subversiveAdvisor\",\r\n                                                                                                                                                    \"leadership\",\r\n                                                                                                                                                    \"inHighPlaces\",\r\n                                                                                                                                                    \"strikeFleet\",\r\n                                                                                                                                                    \"trecherousManeuver\",\r\n                                                                                                                                                    \"chaniCleverTactician\",\r\n                                                                                                                                                    \"junctionHeadquarters\",\r\n                                                                                                                                                    \"corrinthCity\",\r\n                                                                                                                                                    \"stilgarTheDevoted\",\r\n                                                                                                                                                    \"desertPower\",\r\n                                                                                                                                                    \"arrakisRevolt\",\r\n                                                                                                                                                    \"priceIsNoObject\",\r\n                                                                                                                                                    \"longLiveTheFighters\",\r\n                                                                                                                                                    \"overthrow\",\r\n                                                                                                                                                    \"steersman\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"uprisingImperium_contract\", 1, {\r\n                                                                                                                                                    \"cargoRunner\",\r\n                                                                                                                                                    \"deliveryAgreement\",\r\n                                                                                                                                                    \"priorityContracts\",\r\n                                                                                                                                                    \"interstellarTrade\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.special, \"imperium\", \"imperiumFoldedSpace\", 1, {\r\n                                                                                                                                                    \"foldspace\",\r\n                                                                                                                                                    -- +5\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.special, \"imperium\", \"uprisingImperium_prepareTheWay\", 8, {\r\n                                                                                                                                                    \"prepareTheWay\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.special, \"imperium\", \"uprisingImperium_theSpiceMustFlow\", 10, {\r\n                                                                                                                                                    \"theSpiceMustFlow\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.special, \"imperium\", \"tleilaxResearchReclaimedForces\", 11, {\r\n                                                                                                                                                    \"reclaimedForces\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                Deck.load(loader, cards.intrigue, \"intrigue\", \"intrigue\", 1, {\r\n                                                                                                                                                    \"masterTactician\", \"\", \"\",\r\n                                                                                                                                                    \"privateArmy\", \"\",\r\n                                                                                                                                                    \"ambush\", \"\",\r\n                                                                                                                                                    \"dispatchAnEnvoy\", \"\",\r\n                                                                                                                                                    \"poisonSnooper\", \"\",\r\n                                                                                                                                                    \"favoredSubject\",\r\n                                                                                                                                                    \"knowTheirWays\",\r\n                                                                                                                                                    \"secretOfTheSisterhood\",\r\n                                                                                                                                                    \"guildAuthorization\",\r\n                                                                                                                                                    \"stagedIncident\",\r\n                                                                                                                                                    \"theSleeperMustAwaken\",\r\n                                                                                                                                                    \"choamShares\",\r\n                                                                                                                                                    \"cornerTheMarket\",\r\n                                                                                                                                                    \"plansWithinPlans\",\r\n                                                                                                                                                    \"windfall\",\r\n                                                                                                                                                    \"waterPeddlersUnion\",\r\n                                                                                                                                                    \"councilorsDispensation\",\r\n                                                                                                                                                    \"doubleCross\",\r\n                                                                                                                                                    \"rapidMobilization\",\r\n                                                                                                                                                    \"reinforcements\",\r\n                                                                                                                                                    \"recruitmentMission\",\r\n                                                                                                                                                    \"charisma\",\r\n                                                                                                                                                    \"bypassProtocol\",\r\n                                                                                                                                                    \"infiltrate\",\r\n                                                                                                                                                    \"urgentMission\",\r\n                                                                                                                                                    \"calculatedHire\",\r\n                                                                                                                                                    \"binduSuspension\",\r\n                                                                                                                                                    \"waterOfLife\",\r\n                                                                                                                                                    \"refocus\",\r\n                                                                                                                                                    \"bribery\",\r\n                                                                                                                                                    \"toTheVictor\",\r\n                                                                                                                                                    \"demandRespect\",\r\n                                                                                                                                                    \"alliedArmada\",\r\n                                                                                                                                                    \"tiebreaker\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.intrigue, \"intrigue\", \"ixIntrigue\", 1, {\r\n                                                                                                                                                    \"diversion\",\r\n                                                                                                                                                    \"warChest\",\r\n                                                                                                                                                    \"advancedWeaponry\",\r\n                                                                                                                                                    \"secretForces\",\r\n                                                                                                                                                    \"grandConspiracy\",\r\n                                                                                                                                                    \"cull\",\r\n                                                                                                                                                    \"strategicPush\",\r\n                                                                                                                                                    \"blackmail\",\r\n                                                                                                                                                    \"machineCulture\",\r\n                                                                                                                                                    \"cannonTurrets\",\r\n                                                                                                                                                    \"expedite\",\r\n                                                                                                                                                    \"ixianProbe\",\r\n                                                                                                                                                    \"secondWave\",\r\n                                                                                                                                                    \"glimpseThePath\",\r\n                                                                                                                                                    \"finesse\",\r\n                                                                                                                                                    \"strongarm\",\r\n                                                                                                                                                    \"quidProQuo\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.intrigue, \"intrigue\", \"immortalityIntrigue\", 1, {\r\n                                                                                                                                                    \"breakthrough\",\r\n                                                                                                                                                    \"counterattack\",\r\n                                                                                                                                                    \"disguisedBureaucrat\",\r\n                                                                                                                                                    \"economicPositioning\",\r\n                                                                                                                                                    \"gruesomeSacrifice\",\r\n                                                                                                                                                    \"harvestCells\",\r\n                                                                                                                                                    \"illicitDealings\",\r\n                                                                                                                                                    \"shadowyBargain\",\r\n                                                                                                                                                    \"studyMelange\",\r\n                                                                                                                                                    \"tleilaxuPuppet\",\r\n                                                                                                                                                    \"viciousTalents\",\r\n                                                                                                                                                    -- +4\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.intrigue, \"intrigue\", \"uprisingIntrigue\", 1, {\r\n                                                                                                                                                    \"sietchRitual\",\r\n                                                                                                                                                    \"mercenaries\",\r\n                                                                                                                                                    \"councilorAmbition\",\r\n                                                                                                                                                    \"strategicStockpiling\",\r\n                                                                                                                                                    \"detonation\", \"\",\r\n                                                                                                                                                    \"departForArrakis\",\r\n                                                                                                                                                    \"cunning\",\r\n                                                                                                                                                    \"opportunism\",\r\n                                                                                                                                                    \"changeAllegiances\",\r\n                                                                                                                                                    \"specialMission\", \"\",\r\n                                                                                                                                                    \"unexpectedAllies\",\r\n                                                                                                                                                    \"callToArms\",\r\n                                                                                                                                                    \"buyAccess\",\r\n                                                                                                                                                    \"imperiumPolitics\",\r\n                                                                                                                                                    \"shaddamFavor\",\r\n                                                                                                                                                    \"intelligenceReport\",\r\n                                                                                                                                                    \"manipulate\",\r\n                                                                                                                                                    \"distraction\", \"\",\r\n                                                                                                                                                    \"marketOpportunity\",\r\n                                                                                                                                                    \"goToGround\",\r\n                                                                                                                                                    \"contingencyPlan\", \"\", \"\",\r\n                                                                                                                                                    \"inspireAwe\",\r\n                                                                                                                                                    \"findWeakness\",\r\n                                                                                                                                                    \"spiceIsPower\",\r\n                                                                                                                                                    \"devour\",\r\n                                                                                                                                                    \"impress\",\r\n                                                                                                                                                    \"springTheTrap\",\r\n                                                                                                                                                    \"weirdingCombat\",\r\n                                                                                                                                                    \"tacticalOption\",\r\n                                                                                                                                                    \"questionableMethods\",\r\n                                                                                                                                                    \"desertMouse\",\r\n                                                                                                                                                    \"ornithopter\",\r\n                                                                                                                                                    \"crysknife\",\r\n                                                                                                                                                    \"shadowAlliance\",\r\n                                                                                                                                                    \"secureSpiceTrade\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.intrigue, \"intrigue\", \"uprisingIntrigue_contract\", 1, {\r\n                                                                                                                                                    \"leverage\",\r\n                                                                                                                                                    \"backedByChoam\",\r\n                                                                                                                                                    \"reachAgreement\",\r\n                                                                                                                                                    \"choamProfits\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                Deck.load(loader, cards.conflict, \"conflict1\", \"uprisingConflict\", 1, {\r\n                                                                                                                                                    \"skirmishA\",\r\n                                                                                                                                                    \"skirmishB\",\r\n                                                                                                                                                    \"skirmishC\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.conflict, \"conflict2\", \"uprisingConflict\", 1, {\r\n                                                                                                                                                    \"choamSecurity\",\r\n                                                                                                                                                    \"spiceFreighters\",\r\n                                                                                                                                                    \"siegeOfArrakeen\",\r\n                                                                                                                                                    \"seizeSpiceRefinery\",\r\n                                                                                                                                                    \"testOfLoyalty\",\r\n                                                                                                                                                    \"shadowContest\",\r\n                                                                                                                                                    \"secureImperialBasin\",\r\n                                                                                                                                                    \"protectTheSietches\",\r\n                                                                                                                                                    \"tradeDispute\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.conflict, \"conflict3\", \"conflict\", 5, {\r\n                                                                                                                                                    \"economicSupremacy\"\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.conflict, \"conflict3\", \"uprisingConflict\", 1, {\r\n                                                                                                                                                    \"propaganda\",\r\n                                                                                                                                                    \"battleForImperialBasin\",\r\n                                                                                                                                                    \"battleForArrakeen\",\r\n                                                                                                                                                    \"battleForSpiceRefinery\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                Deck.load(loader, cards.hagal, \"hagal\", \"base\", 1, {\r\n                                                                                                                                                    \"churn\",\r\n                                                                                                                                                    \"placeSpyYellow\",\r\n                                                                                                                                                    \"placeSpyBlue\",\r\n                                                                                                                                                    \"placeSpyGreen\",\r\n                                                                                                                                                    \"sardaukar\",\r\n                                                                                                                                                    \"dutifulService\",\r\n                                                                                                                                                    \"heighliner\",\r\n                                                                                                                                                    \"deliverSuppliesAndHeighliner\",\r\n                                                                                                                                                    \"espionage\",\r\n                                                                                                                                                    \"secrets\",\r\n                                                                                                                                                    \"desertTactics\",\r\n                                                                                                                                                    \"fremkit\",\r\n                                                                                                                                                    \"assemblyHall\",\r\n                                                                                                                                                    \"gatherSupport1\",\r\n                                                                                                                                                    \"gatherSupport2\",\r\n                                                                                                                                                    \"acceptContractAndShipping1\",\r\n                                                                                                                                                    \"acceptContractAndShipping2\",\r\n                                                                                                                                                    \"researchStation\",\r\n                                                                                                                                                    \"spiceRefinery\",\r\n                                                                                                                                                    \"arrakeen\",\r\n                                                                                                                                                    \"sietchTabr\",\r\n                                                                                                                                                    \"haggaBasinAndImperialBasin\",\r\n                                                                                                                                                    \"deepDesert\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.hagal, \"hagal\", \"reshuffle\", 10, {\r\n                                                                                                                                                    \"reshuffle\"\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.hagal, \"hagal\", \"ix\", 1, {\r\n                                                                                                                                                    \"interstellarShipping\",\r\n                                                                                                                                                    \"deliverSuppliesAndInterstellarShipping\",\r\n                                                                                                                                                    \"smugglingAndInterstellarShipping\",\r\n                                                                                                                                                    \"techNegotiation\",\r\n                                                                                                                                                    \"dreadnought1p\",\r\n                                                                                                                                                    \"dreadnought2p\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.hagal, \"hagal\", \"immortality\", 1, {\r\n                                                                                                                                                    \"researchStationImmortality\",\r\n                                                                                                                                                    \"tleilaxuBonus1\",\r\n                                                                                                                                                    \"tleilaxuBonus2\",\r\n                                                                                                                                                    \"tleilaxuBonus3\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                -- One tech per custom deck.\r\n                                                                                                                                                for techName, _ in pairs(Deck.tech) do\r\n                                                                                                                                                    Deck.load(loader, cards.tech, \"tech\", techName, 1, {techName})\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                -- One leader per custom deck.\r\n                                                                                                                                                for leaderName, _ in pairs(Deck.leader) do\r\n                                                                                                                                                    Deck.load(loader, cards.leaders, \"leader\", leaderName, 1, {leaderName})\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                Deck.load(loader, cards.rivalLeaders, \"rivalLeader\", \"uprising\", 1, {\r\n                                                                                                                                                    \"vladimirHarkonnen\",\r\n                                                                                                                                                    \"muadDib\",\r\n                                                                                                                                                    \"jessica\",\r\n                                                                                                                                                    \"feydRauthaHarkonnen\",\r\n                                                                                                                                                    \"margotFenring\",\r\n                                                                                                                                                    \"stabanTuek\",\r\n                                                                                                                                                    \"amberMetulli\",\r\n                                                                                                                                                    \"irulanCorrino\",\r\n                                                                                                                                                    \"gurneyHalleck\",\r\n                                                                                                                                                    \"glossuRabban\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                return cards\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            return Deck\r\n\r\n                                                                                                                                        end)\r\n                                                                                                                                        __bundle_register(\"en.Deck\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                            local Helper = require(\"utils.Helper\")\r\n\r\n                                                                                                                                            local Deck = {\r\n                                                                                                                                                objective = {\r\n                                                                                                                                                    uprisingObjective = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133399226/F23014D780D16DDF23D8AF674BDEE3A9CB912F78/\", 3, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                imperium = {\r\n                                                                                                                                                    -- starter with dune the desert planet\r\n                                                                                                                                                    starter = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141325193/BF3BA9C253ED953533B90D94DD56D0BAD4021B3C/\", 4, 2},\r\n                                                                                                                                                    starterImperium_emperor = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141285880/767F540B36884449C0A833D2CF0A25E36651F9AE/\", 5, 2},\r\n                                                                                                                                                    starterImperium_muadDib = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141285600/E73DE11761FD6A911456F07E348ED58BC7B21638/\", 5, 2},\r\n                                                                                                                                                    -- base with foldspace, liasion, and the spice must flow\r\n                                                                                                                                                    imperium = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141326803/6F98BCE051343A3D07D58D6BC62A8FCA2C9AAE1A/\", 8, 6},\r\n                                                                                                                                                    -- ix with control the spice\r\n                                                                                                                                                    ixImperium = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141328204/9DFCC56F20D09D60CF2B9D9050CB9640176F71B6/\", 7, 5},\r\n                                                                                                                                                    -- tleilax with experimentation\r\n                                                                                                                                                    immortalityImperium = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141324694/E758512421B5CB27BBA228EF5F1880A7F3DC564D/\", 6, 5},\r\n                                                                                                                                                    -- tleilax with reclaimed forces\r\n                                                                                                                                                    tleilaxResearch = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141325643/D9BD273651404E7DE7F0E22B36F2D426D82B07A8/\", 4, 5},\r\n                                                                                                                                                    uprisingImperium = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133381992/B5E28000A80DBE32D234C01F31C208A435018954/\", 10, 7},\r\n                                                                                                                                                    uprisingImperium_contract = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141289270/C9C56A8015292829E5F4C65EFB0B3F78A19DCDB4/\", 2, 2},\r\n                                                                                                                                                    uprisingImperium_prepareTheWay = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141288931/3EFF528A17FA160E8C836BCE628875066C791E88/\", 4, 2},\r\n                                                                                                                                                    uprisingImperium_theSpiceMustFlow = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141288456/7EFF5F3E150A3F7E9F8B0DE21E42F42E2F8967D4/\", 5, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                intrigue = {\r\n                                                                                                                                                    intrigue = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141343483/A63AE0E1069DA1279FDA3A5DE6A0E073F45FC8EF/\", 7, 5},\r\n                                                                                                                                                    ixIntrigue = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141342567/CE27F1B6D4D455A2D00D6E13FABEB72E6B9F05F1/\", 5, 4},\r\n                                                                                                                                                    immortalityIntrigue = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141342411/9FED90CD510F26618717CEB63FDA744CE916C6BA/\", 6, 2},\r\n                                                                                                                                                    uprisingIntrigue = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133408513/800A1EDE8EE94FFC4E38A4D428A73701D6DB020F/\", 10, 4},\r\n                                                                                                                                                    uprisingIntrigue_contract = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141307183/4633F67F86EB0AFAE82F5C075A16FE2FF6E2AD96/\", 2, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                conflict1 = {\r\n                                                                                                                                                    uprisingConflict = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141315234/658FE46691E92A3A5A67D11CB09BE85492BAFE87/\", 2, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                conflict2 = {\r\n                                                                                                                                                    uprisingConflict = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141314758/60D88BD461A98569E77321BAC643C6938DBB292E/\", 5, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                conflict3 = {\r\n                                                                                                                                                    conflict = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141365294/F1BEAE6266E75B7A2F5DE511DB4FEB25A2CD486B/\", 3, 2},\r\n                                                                                                                                                    uprisingConflict = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141315402/71EFAC5FF1CC15BC3BF35E613D956BE814964C41/\", 2, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                hagal = {\r\n                                                                                                                                                    base = {\"https://steamusercontent-a.akamaihd.net/ugc/2291837013341414524/BB90DF7F9C97680FE16C4D91A1AF0871B2462CB9/\", 5, 5},\r\n                                                                                                                                                    reshuffle = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141333398/66020C11E4FEA2D22744020D27465DCC2BB02BBE/\", 7, 2},\r\n                                                                                                                                                    ix = {\"https://steamusercontent-a.akamaihd.net/ugc/2291837013341435538/E181DED96F81A27405E57F0CF398575C20D73D12/\", 2, 3},\r\n                                                                                                                                                    immortality = {\"https://steamusercontent-a.akamaihd.net/ugc/2291837013341433170/56E0015597F27AB50451E026A8BD95512FA1CE27/\", 2, 2},\r\n                                                                                                                                                },\r\n                                                                                                                                                tech = {\r\n                                                                                                                                                    windtraps = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361499/1357A12AE8B805DDA4B35054C7A042EB60ED8D93/\", 1, 1},\r\n                                                                                                                                                    flagship = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141364750/3D450BD068CF618EB58032CA790EC8CFB512C6ED/\", 1, 1},\r\n                                                                                                                                                    sonicSnoopers = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363495/735DAD89216E331EE1461EEBC94E579B3F65D898/\", 1, 1},\r\n                                                                                                                                                    artillery = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362120/1DD4BAFBF228984A2AE7D7A04C6BD98E5817CB75/\", 1, 1},\r\n                                                                                                                                                    troopTransports = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363152/5F8994647E6BE9B8DFE12775816BA8634DBEF803/\", 1, 1},\r\n                                                                                                                                                    spySatellites = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363781/A4A7827D2C9E2D084FEF39864C901F858DBAC7A0/\", 1, 1},\r\n                                                                                                                                                    invasionShips = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362661/CA3C07205ECEFC22C759E350C47B58052D1CB3EC/\", 1, 1},\r\n                                                                                                                                                    chaumurky = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141359974/CC1342B27E230372F8A10A0BD35ADF796F0FF6A5/\", 1, 1},\r\n                                                                                                                                                    detonationDevices = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362350/985702313B721E7343ED01C603AF5C8EFF43C2F4/\", 1, 1},\r\n                                                                                                                                                    spaceport = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362796/A906AB650BF19DEA2E39F86F873940143C2CF814/\", 1, 1},\r\n                                                                                                                                                    minimicFilm = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360892/74A896440084439B2C557D8651EB8125A64E85B1/\", 1, 1},\r\n                                                                                                                                                    holoprojectors = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360731/89575580CD49633CE5473B76CDDFA1A0A2503030/\", 1, 1},\r\n                                                                                                                                                    memocorders = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133863837/2644950194120A67CDC6BF7019D951FCF605DBFF/\", 1, 1},\r\n                                                                                                                                                    disposalFacility = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361878/57A51864E207970E7DCB9ACCAE68AFAE48F2CD61/\", 1, 1},\r\n                                                                                                                                                    holtzmanEngine = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361742/B202AC36308C95EF1CA325DAE9318DCB6C5229EE/\", 1, 1},\r\n                                                                                                                                                    trainingDrones = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361140/B877582FA7ECB542E046FB96EB8488D511DEDF1C/\", 1, 1},\r\n                                                                                                                                                    shuttleFleet = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141364620/9E39289A6CED8A977E8206E1B5FD1A14F4BA55F8/\", 1, 1},\r\n                                                                                                                                                    restrictedOrdnance = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360269/1F4181A709E103B8807D6D6FBF3C6BA62A4C20F9/\", 1, 1},\r\n                                                                                                                                                },\r\n                                                                                                                                                contract = {\r\n                                                                                                                                                    spiceRefineryWater = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141300304/7EA3323DDA7E60E1A8AB1119431D2D25187417F7/\", 1, 1},\r\n                                                                                                                                                    spiceRefineryCard = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141300927/78FB61B6A6BE119DEC9E93CC343BE1C199191E89/\", 1, 1},\r\n                                                                                                                                                    researchStationSpy = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141304020/9408609A985B7FFC43C43E0E791694870CB379C7/\", 1, 1},\r\n                                                                                                                                                    researchStationSolari = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299628/C2F0768CD60F9944C16F128F307BA6F8107C0E93/\", 1, 1},\r\n                                                                                                                                                    arrakeenSpy = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133404029/4CB29CF8FC8D0BF9A5B575B3E05B31774E59F3CD/\", 1, 1},\r\n                                                                                                                                                    arrakeenWater = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302127/926CFC63532C4D7BC6AA6B9151AFF0221A553B44/\", 1, 1},\r\n                                                                                                                                                    espionage = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133403318/35C1BFE9773F01181B1280C061914D7CE07BFE71/\", 1, 1},\r\n                                                                                                                                                    sardaukarRecall = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301335/E5463C7FFA3426E57F5B07A0DE91602798170C69/\", 1, 1},\r\n                                                                                                                                                    sardaukarCard = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133404238/1711DFB19987B48883EF6B53E1CD62739D70E1A2/\", 1, 1},\r\n                                                                                                                                                    highCouncilSolari = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301141/33A0566759303798910FF7F7C4414E09BDBBE037/\", 1, 1},\r\n                                                                                                                                                    highCouncilInfluence = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301954/16A847D5CB4EB5E926D4404BB5F30BAF574558F5/\", 1, 1},\r\n                                                                                                                                                    immediate = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133402189/3D848E8CC39986DD283094AC31757997C097F4D7/\", 1, 1},\r\n                                                                                                                                                    heighlinerTroop = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302477/348DAD4630FD7CD067043AFBC5ADCB91733D9D23/\", 1, 1},\r\n                                                                                                                                                    heighlinerWater = {\"https://steamusercontent-a.akamaihd.net/ugc/2488878371133401717/5B022A86311D086273A90DBA7D53DC22DCA9C917/\", 1, 1},\r\n                                                                                                                                                    deliverSupplies = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141300498/B42F88CDC1519A7893668030B695338E7EA18391/\", 1, 1},\r\n                                                                                                                                                    acquire = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302699/94ED4105E316EDD45B0202837A711FF3A99E7CFA/\", 1, 1},\r\n                                                                                                                                                    harvest = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141300124/832069DB1C4F8B9B328876E798D071FFD35F0173/\", 1, 1},\r\n                                                                                                                                                    harvestMore = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301496/B564DA078EA0BE9D2A7AAA8FA4DF105D4AD82A17/\", 1, 1},\r\n                                                                                                                                                },\r\n                                                                                                                                                leader = {\r\n                                                                                                                                                    vladimirHarkonnen = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141316546/B5899377296C2BFAC0CF48E18AA3773AA8E998DE/\", 1, 1},\r\n                                                                                                                                                    glossuRabban = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317845/DCF40F0D8C34B14180DC33B369DCC8AA4FD3FB55/\", 1, 1},\r\n                                                                                                                                                    ilbanRichese = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141316307/15624E52D08F594943A4A6332CBD68B2A1645441/\", 1, 1},\r\n                                                                                                                                                    helenaRichese = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318952/63750F22F1DFBA9D9544587C0B2B8D65E157EC00/\", 1, 1},\r\n                                                                                                                                                    letoAtreides = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318661/8CBD932BE474529D6C14A3AA8C01BD8503EBEBC6/\", 1, 1},\r\n                                                                                                                                                    paulAtreides = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317535/F597DBF1EB750EA14EA03F231D0EBCF07212A5AC/\", 1, 1},\r\n                                                                                                                                                    arianaThorvald = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141320077/2A9043877494A7174A32770C39147FAE941A39A2/\", 1, 1},\r\n                                                                                                                                                    memnonThorvald = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141321067/8431F61C545067A4EADC017E6295CB249A2BD813/\", 1, 1},\r\n                                                                                                                                                    -- ix\r\n                                                                                                                                                    armandEcaz = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141320355/310C6B6E85920F9FC1A94896A335D34C3CFA6C15/\", 1, 1},\r\n                                                                                                                                                    ilesaEcaz = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318208/94B1575474BEEF1F1E0FE0860051932398F47CA5/\", 1, 1},\r\n                                                                                                                                                    rhomburVernius = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141316909/0C06A30D74BD774D9B4F968C00AEC8C0817D4C77/\", 1, 1},\r\n                                                                                                                                                    tessiaVernius = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141319434/29817122A32B50C285EE07E0DAC32FDE9A237CEC/\", 1, 1},\r\n                                                                                                                                                    yunaMoritani = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141319867/FA54B129B168169E3D58BA61536FCC0BB5AB7D34/\", 1, 1},\r\n                                                                                                                                                    hundroMoritani = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141316031/6A89778D9C4BB8AC07FE503D48A4483D13DF6E5B/\", 1, 1},\r\n                                                                                                                                                    -- uprising\r\n                                                                                                                                                    stabanTuek = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283441/E675A8B105716B01D7C1C086102CEBCE0756B4C7/\", 1, 1},\r\n                                                                                                                                                    amberMetulli = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141280903/E525FD044AB8D577752189B9094E795D1F4BC9D5/\", 1, 1},\r\n                                                                                                                                                    gurneyHalleck = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283901/6F7B49241ECB5CB66B0C8F68F05B91DAA2D6E11E/\", 1, 1},\r\n                                                                                                                                                    margotFenring = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141282956/1A4453CC4C74E1F8B58C504243AD495B649DBB07/\", 1, 1},\r\n                                                                                                                                                    irulanCorrino = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141282774/EC550B921EFB707D338F5A45AB39609A9DFDE7BA/\", 1, 1},\r\n                                                                                                                                                    jessica = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283120/1969BB59A8DD3C683E82A2D07D1C41BB2F175313/\", 1, 1, Vector(1.12, 1, 1.12),\r\n                                                                                                                                                    \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141285197/3FA11CDE733EB59839FB85D0328588F28BE43D57/\"},\r\n                                                                                                                                                    feydRauthaHarkonnen = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141282610/C6CC977066E02C55DFA870BF59D42A8DC21F6811/\", 1, 1},\r\n                                                                                                                                                    shaddamCorrino = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141285378/056063BC4E61922C15A7A45DD5093EA6EC04C354/\", 1, 1},\r\n                                                                                                                                                    muadDib = {\"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283595/202B5C036B90D32A408FE938AF0747BAF2DE7DFB/\", 1, 1},\r\n                                                                                                                                                },\r\n                                                                                                                                                rivalLeader = {\r\n                                                                                                                                                    uprising = {\"https://steamusercontent-a.akamaihd.net/ugc/2291837013341168508/811BF7142774932C8C2FAD7C10BA104F8DAD4299/\", 4, 3},\r\n                                                                                                                                                },\r\n                                                                                                                                            }\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.load(loader, cards, category, customDeckName, startLuaIndex, cardNames)\r\n                                                                                                                                                assert(Deck[category], \"Unknown category: \" .. tostring(category))\r\n                                                                                                                                                local desc = Deck[category][customDeckName]\r\n                                                                                                                                                assert(desc, \"No descriptor for: \" .. category .. \".\" .. customDeckName)\r\n                                                                                                                                                local customDeck\r\n                                                                                                                                                if desc[5] then\r\n                                                                                                                                                    customDeck = loader.createCustomDeck(desc[5], desc[1], desc[2], desc[3], desc[4])\r\n                                                                                                                                                else\r\n                                                                                                                                                    local functionName = Helper.toCamelCase(\"create\", category, \"CustomDeck\")\r\n                                                                                                                                                    assert(loader[functionName], \"No loader for: \" .. functionName)\r\n                                                                                                                                                    customDeck = loader[functionName](desc[1], desc[2], desc[3], desc[4])\r\n                                                                                                                                                end\r\n                                                                                                                                                return loader.loadCustomDeck(cards, customDeck, startLuaIndex, cardNames)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.loadWithSubCategory(loader, cards, category, subCategory, customDeckName, startLuaIndex, cardNames)\r\n                                                                                                                                                assert(Deck[category], \"No category: \" .. category)\r\n                                                                                                                                                assert(Deck[category][subCategory], \"No sub category: \" .. category .. \".\" .. subCategory)\r\n                                                                                                                                                local desc = Deck[category][subCategory][customDeckName]\r\n                                                                                                                                                assert(desc, \"No descriptor for: \" .. category .. \".\" .. customDeckName)\r\n                                                                                                                                                local functionName = Helper.toCamelCase(\"create\", category, \"CustomDeck\")\r\n                                                                                                                                                assert(loader[functionName], \"No loader for: \" .. functionName)\r\n                                                                                                                                                local customDeck = loader[functionName](desc[1], desc[2], desc[3], desc[4])\r\n                                                                                                                                                return loader.loadCustomDeck(cards, customDeck, startLuaIndex, cardNames)\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            ---\r\n                                                                                                                                            function Deck.loadCustomDecks(loader)\r\n                                                                                                                                                local cards = {\r\n                                                                                                                                                    objective = {},\r\n                                                                                                                                                    imperium = {},\r\n                                                                                                                                                    special = {},\r\n                                                                                                                                                    tleilaxu = {},\r\n                                                                                                                                                    intrigue = {},\r\n                                                                                                                                                    conflict = {},\r\n                                                                                                                                                    hagal = {},\r\n                                                                                                                                                    tech = {},\r\n                                                                                                                                                    leaders = {},\r\n                                                                                                                                                    rivalLeaders = {},\r\n                                                                                                                                                }\r\n\r\n                                                                                                                                                Deck.load(loader, cards.objective, \"objective\", \"uprisingObjective\", 1, {\r\n                                                                                                                                                    \"ornithopter1to3p\",\r\n                                                                                                                                                    \"muadDibFirstPlayer\",\r\n                                                                                                                                                    \"crysknife\",\r\n                                                                                                                                                    \"muadDib4to6p\",\r\n                                                                                                                                                    \"crysknife4to6p\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"starter\", 1, {\r\n                                                                                                                                                    \"duneTheDesertPlanet\",\r\n                                                                                                                                                    \"dagger\",\r\n                                                                                                                                                    \"reconnaissance\",\r\n                                                                                                                                                    \"convincingArgument\",\r\n                                                                                                                                                    \"seekAllies\",\r\n                                                                                                                                                    \"signetRing\",\r\n                                                                                                                                                    \"diplomacy\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"starterImperium_emperor\", 1, {\r\n                                                                                                                                                    \"emperorConvincingArgument\",\r\n                                                                                                                                                    \"emperorCorrinoMight\",\r\n                                                                                                                                                    \"emperorCriticalShipments\",\r\n                                                                                                                                                    \"emperorDemandResults\",\r\n                                                                                                                                                    \"emperorDevastatingAssault\",\r\n                                                                                                                                                    \"emperorImperialOrnithopter\", \"\",\r\n                                                                                                                                                    \"emperorSignetRing\",\r\n                                                                                                                                                    \"emperorSeekAllies\",\r\n                                                                                                                                                    \"emperorImperialTent\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"starterImperium_muadDib\", 1, {\r\n                                                                                                                                                    \"muadDibCommandRespect\",\r\n                                                                                                                                                    \"muadDibConvincingArgument\",\r\n                                                                                                                                                    \"muadDibDemandAttention\",\r\n                                                                                                                                                    \"muadDibDesertCall\",\r\n                                                                                                                                                    \"muadDibLimitedLandsraadAccess\", \"\",\r\n                                                                                                                                                    \"muadDibSeekAllies\",\r\n                                                                                                                                                    \"muadDibUsul\",\r\n                                                                                                                                                    \"muadDibThreatenSpiceProduction\",\r\n                                                                                                                                                    \"muadDibSignetRing\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"imperium\", 1, {\r\n                                                                                                                                                    \"sardaukarLegion\",\r\n                                                                                                                                                    \"drYueh\",\r\n                                                                                                                                                    \"assassinationMission\",\r\n                                                                                                                                                    \"sardaukarInfantry\",\r\n                                                                                                                                                    \"\", -- foldspace\r\n                                                                                                                                                    \"\", -- arrakisLiaison\r\n                                                                                                                                                    \"\", -- theSpiceMustFlow\r\n                                                                                                                                                    \"beneGesseritInitiate\",\r\n                                                                                                                                                    \"guildAdministrator\",\r\n                                                                                                                                                    \"theVoice\",\r\n                                                                                                                                                    \"scout\",\r\n                                                                                                                                                    \"imperialSpy\",\r\n                                                                                                                                                    \"beneGesseritSister\",\r\n                                                                                                                                                    \"missionariaProtectiva\",\r\n                                                                                                                                                    \"spiceHunter\",\r\n                                                                                                                                                    \"spiceSmugglers\",\r\n                                                                                                                                                    \"fedaykinDeathCommando\",\r\n                                                                                                                                                    \"geneManipulation\",\r\n                                                                                                                                                    \"guildBankers\",\r\n                                                                                                                                                    \"choamDirectorship\",\r\n                                                                                                                                                    \"crysknife\",\r\n                                                                                                                                                    \"chani\",\r\n                                                                                                                                                    \"spaceTravel\",\r\n                                                                                                                                                    \"duncanIdaho\",\r\n                                                                                                                                                    \"shiftingAllegiances\",\r\n                                                                                                                                                    \"kwisatzHaderach\",\r\n                                                                                                                                                    \"sietchReverendMother\",\r\n                                                                                                                                                    \"arrakisRecruiter\",\r\n                                                                                                                                                    \"firmGrip\",\r\n                                                                                                                                                    \"smugglersThopter\",\r\n                                                                                                                                                    \"carryall\",\r\n                                                                                                                                                    \"gunThopter\",\r\n                                                                                                                                                    \"guildAmbassador\",\r\n                                                                                                                                                    \"testOfHumanity\",\r\n                                                                                                                                                    \"fremenCamp\",\r\n                                                                                                                                                    \"opulence\",\r\n                                                                                                                                                    \"ladyJessica\",\r\n                                                                                                                                                    \"stilgar\",\r\n                                                                                                                                                    \"piterDeVries\",\r\n                                                                                                                                                    \"gurneyHalleck\",\r\n                                                                                                                                                    \"thufirHawat\",\r\n                                                                                                                                                    \"otherMemory\",\r\n                                                                                                                                                    \"lietKynes\",\r\n                                                                                                                                                    \"wormRiders\",\r\n                                                                                                                                                    \"reverendMotherMohiam\",\r\n                                                                                                                                                    \"powerPlay\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"ixImperium\", 1, {\r\n                                                                                                                                                    \"boundlessAmbition\",\r\n                                                                                                                                                    \"guildChiefAdministrator\",\r\n                                                                                                                                                    \"guildAccord\",\r\n                                                                                                                                                    \"localFence\",\r\n                                                                                                                                                    \"shaiHulud\",\r\n                                                                                                                                                    \"ixGuildCompact\",\r\n                                                                                                                                                    \"choamDelegate\",\r\n                                                                                                                                                    \"bountyHunter\",\r\n                                                                                                                                                    \"embeddedAgent\",\r\n                                                                                                                                                    \"esmarTuek\",\r\n                                                                                                                                                    \"courtIntrigue\",\r\n                                                                                                                                                    \"sayyadina\",\r\n                                                                                                                                                    \"imperialShockTrooper\",\r\n                                                                                                                                                    \"appropriate\",\r\n                                                                                                                                                    \"desertAmbush\",\r\n                                                                                                                                                    \"inTheShadows\",\r\n                                                                                                                                                    \"satelliteBan\",\r\n                                                                                                                                                    \"freighterFleet\",\r\n                                                                                                                                                    \"imperialBashar\",\r\n                                                                                                                                                    \"jamis\",\r\n                                                                                                                                                    \"landingRights\",\r\n                                                                                                                                                    \"waterPeddler\",\r\n                                                                                                                                                    \"treachery\",\r\n                                                                                                                                                    \"truthsayer\",\r\n                                                                                                                                                    \"spiceTrader\",\r\n                                                                                                                                                    \"ixianEngineer\",\r\n                                                                                                                                                    \"webOfPower\",\r\n                                                                                                                                                    \"weirdingWay\",\r\n                                                                                                                                                    \"negotiatedWithdrawal\",\r\n                                                                                                                                                    \"fullScaleAssault\",\r\n                                                                                                                                                    \"jessicaOfArrakis\",\r\n                                                                                                                                                    \"missionariaProtectiva\",\r\n                                                                                                                                                    \"controlTheSpice\",\r\n                                                                                                                                                    \"duncanLoyalBlade\"\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"immortalityImperium\", 1, {\r\n                                                                                                                                                    \"beneTleilaxLab\",\r\n                                                                                                                                                    \"beneTleilaxResearcher\",\r\n                                                                                                                                                    \"blankSlate\",\r\n                                                                                                                                                    \"clandestineMeeting\",\r\n                                                                                                                                                    \"corruptSmuggler\",\r\n                                                                                                                                                    \"dissectingKit\",\r\n                                                                                                                                                    \"experimentation\",\r\n                                                                                                                                                    \"forHumanity\",\r\n                                                                                                                                                    \"highPriorityTravel\",\r\n                                                                                                                                                    \"imperiumCeremony\",\r\n                                                                                                                                                    \"interstellarConspiracy\",\r\n                                                                                                                                                    \"keysToPower\",\r\n                                                                                                                                                    \"lisanAlGaib\",\r\n                                                                                                                                                    \"longReach\",\r\n                                                                                                                                                    \"occupation\",\r\n                                                                                                                                                    \"organMerchants\",\r\n                                                                                                                                                    \"plannedCoupling\",\r\n                                                                                                                                                    \"replacementEyes\",\r\n                                                                                                                                                    \"sardaukarQuartermaster\",\r\n                                                                                                                                                    \"shadoutMapes\",\r\n                                                                                                                                                    \"showOfStrength\",\r\n                                                                                                                                                    \"spiritualFervor\",\r\n                                                                                                                                                    \"stillsuitManufacturer\",\r\n                                                                                                                                                    \"throneRoomPolitics\",\r\n                                                                                                                                                    \"tleilaxuMaster\",\r\n                                                                                                                                                    \"tleilaxuSurgeon\"\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"uprisingImperium\", 1, {\r\n                                                                                                                                                    \"unswervingLoyalty\", \"\",\r\n                                                                                                                                                    \"spaceTimeFolding\",\r\n                                                                                                                                                    \"weirdingWoman\", \"\",\r\n                                                                                                                                                    \"sardaukarSoldier\",\r\n                                                                                                                                                    \"smugglerHarvester\", \"\",\r\n                                                                                                                                                    \"makerKeeper\", \"\",\r\n                                                                                                                                                    \"reliableInformant\",\r\n                                                                                                                                                    \"hiddenMissive\",\r\n                                                                                                                                                    \"wheelsWithinWheels\",\r\n                                                                                                                                                    \"fedaykinStilltent\",\r\n                                                                                                                                                    \"imperialSpymaster\",\r\n                                                                                                                                                    \"spyNetwork\",\r\n                                                                                                                                                    \"desertSurvival\", \"\",\r\n                                                                                                                                                    \"undercoverAsset\",\r\n                                                                                                                                                    \"beneGesseritOperative\", \"\",\r\n                                                                                                                                                    \"maulaPistol\", \"\",\r\n                                                                                                                                                    \"thumper\",\r\n                                                                                                                                                    \"nothernWatermaster\",\r\n                                                                                                                                                    \"covertOperation\",\r\n                                                                                                                                                    \"doubleAgent\", \"\",\r\n                                                                                                                                                    \"guildEnvoy\",\r\n                                                                                                                                                    \"rebelSupplier\", \"\",\r\n                                                                                                                                                    \"calculusOfPower\", \"\",\r\n                                                                                                                                                    \"guildSpy\",\r\n                                                                                                                                                    \"dangerousRhetoric\",\r\n                                                                                                                                                    \"branchingPath\",\r\n                                                                                                                                                    \"ecologicalTestingStation\",\r\n                                                                                                                                                    \"theBeastSpoils\",\r\n                                                                                                                                                    \"smugglerHaven\",\r\n                                                                                                                                                    \"shishakli\",\r\n                                                                                                                                                    \"paracompass\",\r\n                                                                                                                                                    \"sardaukarCoordination\", \"\",\r\n                                                                                                                                                    \"truthtrance\", \"\",\r\n                                                                                                                                                    \"publicSpectable\", \"\",\r\n                                                                                                                                                    \"southernElders\",\r\n                                                                                                                                                    \"treadInDarkness\", \"\",\r\n                                                                                                                                                    \"spacingGuildFavor\", \"\",\r\n                                                                                                                                                    \"capturedMentat\",\r\n                                                                                                                                                    \"subversiveAdvisor\",\r\n                                                                                                                                                    \"leadership\",\r\n                                                                                                                                                    \"inHighPlaces\",\r\n                                                                                                                                                    \"strikeFleet\",\r\n                                                                                                                                                    \"trecherousManeuver\",\r\n                                                                                                                                                    \"chaniCleverTactician\",\r\n                                                                                                                                                    \"junctionHeadquarters\",\r\n                                                                                                                                                    \"corrinthCity\",\r\n                                                                                                                                                    \"stilgarTheDevoted\",\r\n                                                                                                                                                    \"desertPower\",\r\n                                                                                                                                                    \"arrakisRevolt\",\r\n                                                                                                                                                    \"priceIsNoObject\",\r\n                                                                                                                                                    \"longLiveTheFighters\",\r\n                                                                                                                                                    \"overthrow\",\r\n                                                                                                                                                    \"steersman\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.imperium, \"imperium\", \"uprisingImperium_contract\", 1, {\r\n                                                                                                                                                    \"cargoRunner\",\r\n                                                                                                                                                    \"deliveryAgreement\",\r\n                                                                                                                                                    \"priorityContracts\",\r\n                                                                                                                                                    \"interstellarTrade\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.special, \"imperium\", \"imperium\", 5, {\r\n                                                                                                                                                    \"foldspace\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.special, \"imperium\", \"tleilaxResearch\", 11, {\r\n                                                                                                                                                    \"reclaimedForces\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.special, \"imperium\", \"uprisingImperium_prepareTheWay\", 8, {\r\n                                                                                                                                                    \"prepareTheWay\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.special, \"imperium\", \"uprisingImperium_theSpiceMustFlow\", 10, {\r\n                                                                                                                                                    \"theSpiceMustFlow\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.tleilaxu, \"imperium\", \"tleilaxResearch\", 1, {\r\n                                                                                                                                                    \"beguilingPheromones\",\r\n                                                                                                                                                    \"chairdog\",\r\n                                                                                                                                                    \"contaminator\",\r\n                                                                                                                                                    \"corrinoGenes\",\r\n                                                                                                                                                    \"faceDancer\",\r\n                                                                                                                                                    \"faceDancerInitiate\",\r\n                                                                                                                                                    \"fromTheTanks\",\r\n                                                                                                                                                    \"ghola\",\r\n                                                                                                                                                    \"guildImpersonator\",\r\n                                                                                                                                                    \"industrialEspionage\",\r\n                                                                                                                                                    \"\", -- Reclaimed Forces\r\n                                                                                                                                                    \"scientificBreakthrough\",\r\n                                                                                                                                                    \"sligFarmer\",\r\n                                                                                                                                                    \"stitchedHorror\",\r\n                                                                                                                                                    \"subjectX137\",\r\n                                                                                                                                                    \"tleilaxuInfiltrator\",\r\n                                                                                                                                                    \"twistedMentat\",\r\n                                                                                                                                                    \"unnaturalReflexes\",\r\n                                                                                                                                                    \"usurp\",\r\n                                                                                                                                                    \"piterGeniusAdvisor\"\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                Deck.load(loader, cards.intrigue, \"intrigue\", \"intrigue\", 1, {\r\n                                                                                                                                                    \"bribery\",\r\n                                                                                                                                                    \"refocus\",\r\n                                                                                                                                                    \"ambush\",\r\n                                                                                                                                                    \"alliedArmada\",\r\n                                                                                                                                                    \"favoredSubject\",\r\n                                                                                                                                                    \"demandRespect\",\r\n                                                                                                                                                    \"poisonSnooper\",\r\n                                                                                                                                                    \"guildAuthorization\",\r\n                                                                                                                                                    \"dispatchAnEnvoy\",\r\n                                                                                                                                                    \"infiltrate\",\r\n                                                                                                                                                    \"knowTheirWays\",\r\n                                                                                                                                                    \"masterTactician\",\r\n                                                                                                                                                    \"plansWithinPlans\",\r\n                                                                                                                                                    \"privateArmy\",\r\n                                                                                                                                                    \"doubleCross\",\r\n                                                                                                                                                    \"councilorsDispensation\",\r\n                                                                                                                                                    \"cornerTheMarket\",\r\n                                                                                                                                                    \"charisma\",\r\n                                                                                                                                                    \"calculatedHire\",\r\n                                                                                                                                                    \"choamShares\",\r\n                                                                                                                                                    \"bypassProtocol\",\r\n                                                                                                                                                    \"recruitmentMission\",\r\n                                                                                                                                                    \"reinforcements\",\r\n                                                                                                                                                    \"binduSuspension\",\r\n                                                                                                                                                    \"secretOfTheSisterhood\",\r\n                                                                                                                                                    \"rapidMobilization\",\r\n                                                                                                                                                    \"stagedIncident\",\r\n                                                                                                                                                    \"theSleeperMustAwaken\",\r\n                                                                                                                                                    \"tiebreaker\",\r\n                                                                                                                                                    \"toTheVictor\",\r\n                                                                                                                                                    \"waterPeddlersUnion\",\r\n                                                                                                                                                    \"windfall\",\r\n                                                                                                                                                    \"waterOfLife\",\r\n                                                                                                                                                    \"urgentMission\"\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.intrigue, \"intrigue\", \"ixIntrigue\", 1, {\r\n                                                                                                                                                    \"diversion\",\r\n                                                                                                                                                    \"warChest\",\r\n                                                                                                                                                    \"advancedWeaponry\",\r\n                                                                                                                                                    \"secretForces\",\r\n                                                                                                                                                    \"grandConspiracy\",\r\n                                                                                                                                                    \"cull\",\r\n                                                                                                                                                    \"strategicPush\",\r\n                                                                                                                                                    \"blackmail\",\r\n                                                                                                                                                    \"machineCulture\",\r\n                                                                                                                                                    \"cannonTurrets\",\r\n                                                                                                                                                    \"expedite\",\r\n                                                                                                                                                    \"ixianProbe\",\r\n                                                                                                                                                    \"secondWave\",\r\n                                                                                                                                                    \"glimpseThePath\",\r\n                                                                                                                                                    \"finesse\",\r\n                                                                                                                                                    \"strongarm\",\r\n                                                                                                                                                    \"quidProQuo\"\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.intrigue, \"intrigue\", \"immortalityIntrigue\", 1, {\r\n                                                                                                                                                    \"breakthrough\",\r\n                                                                                                                                                    \"counterattack\",\r\n                                                                                                                                                    \"disguisedBureaucrat\",\r\n                                                                                                                                                    \"economicPositioning\",\r\n                                                                                                                                                    \"gruesomeSacrifice\",\r\n                                                                                                                                                    \"harvestCells\",\r\n                                                                                                                                                    \"illicitDealings\",\r\n                                                                                                                                                    \"shadowyBargain\",\r\n                                                                                                                                                    \"studyMelange\",\r\n                                                                                                                                                    \"tleilaxuPuppet\",\r\n                                                                                                                                                    \"viciousTalents\"\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.intrigue, \"intrigue\", \"uprisingIntrigue\", 1, {\r\n                                                                                                                                                    \"sietchRitual\",\r\n                                                                                                                                                    \"mercenaries\",\r\n                                                                                                                                                    \"councilorAmbition\",\r\n                                                                                                                                                    \"strategicStockpiling\",\r\n                                                                                                                                                    \"detonation\", \"\",\r\n                                                                                                                                                    \"departForArrakis\",\r\n                                                                                                                                                    \"cunning\",\r\n                                                                                                                                                    \"opportunism\",\r\n                                                                                                                                                    \"changeAllegiances\",\r\n                                                                                                                                                    \"specialMission\", \"\",\r\n                                                                                                                                                    \"unexpectedAllies\",\r\n                                                                                                                                                    \"callToArms\",\r\n                                                                                                                                                    \"buyAccess\",\r\n                                                                                                                                                    \"imperiumPolitics\",\r\n                                                                                                                                                    \"shaddamFavor\",\r\n                                                                                                                                                    \"intelligenceReport\",\r\n                                                                                                                                                    \"manipulate\",\r\n                                                                                                                                                    \"distraction\", \"\",\r\n                                                                                                                                                    \"marketOpportunity\",\r\n                                                                                                                                                    \"goToGround\",\r\n                                                                                                                                                    \"contingencyPlan\", \"\", \"\",\r\n                                                                                                                                                    \"inspireAwe\",\r\n                                                                                                                                                    \"findWeakness\",\r\n                                                                                                                                                    \"spiceIsPower\",\r\n                                                                                                                                                    \"devour\",\r\n                                                                                                                                                    \"impress\",\r\n                                                                                                                                                    \"springTheTrap\",\r\n                                                                                                                                                    \"weirdingCombat\",\r\n                                                                                                                                                    \"tacticalOption\",\r\n                                                                                                                                                    \"questionableMethods\",\r\n                                                                                                                                                    \"desertMouse\",\r\n                                                                                                                                                    \"ornithopter\",\r\n                                                                                                                                                    \"crysknife\",\r\n                                                                                                                                                    \"shadowAlliance\",\r\n                                                                                                                                                    \"secureSpiceTrade\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.intrigue, \"intrigue\", \"uprisingIntrigue_contract\", 1, {\r\n                                                                                                                                                    \"leverage\",\r\n                                                                                                                                                    \"backedByChoam\",\r\n                                                                                                                                                    \"reachAgreement\",\r\n                                                                                                                                                    \"choamProfits\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                Deck.load(loader, cards.conflict, \"conflict1\", \"uprisingConflict\", 1, {\r\n                                                                                                                                                    \"skirmishA\",\r\n                                                                                                                                                    \"skirmishB\",\r\n                                                                                                                                                    \"skirmishC\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.conflict, \"conflict2\", \"uprisingConflict\", 1, {\r\n                                                                                                                                                    \"choamSecurity\",\r\n                                                                                                                                                    \"spiceFreighters\",\r\n                                                                                                                                                    \"siegeOfArrakeen\",\r\n                                                                                                                                                    \"seizeSpiceRefinery\",\r\n                                                                                                                                                    \"testOfLoyalty\",\r\n                                                                                                                                                    \"shadowContest\",\r\n                                                                                                                                                    \"secureImperialBasin\",\r\n                                                                                                                                                    \"protectTheSietches\",\r\n                                                                                                                                                    \"tradeDispute\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.conflict, \"conflict3\", \"conflict\", 5, {\r\n                                                                                                                                                    \"economicSupremacy\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.conflict, \"conflict3\", \"uprisingConflict\", 1, {\r\n                                                                                                                                                    \"propaganda\",\r\n                                                                                                                                                    \"battleForImperialBasin\",\r\n                                                                                                                                                    \"battleForArrakeen\",\r\n                                                                                                                                                    \"battleForSpiceRefinery\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                Deck.load(loader, cards.hagal, \"hagal\", \"base\", 1, {\r\n                                                                                                                                                    \"churn\",\r\n                                                                                                                                                    \"placeSpyYellow\",\r\n                                                                                                                                                    \"placeSpyBlue\",\r\n                                                                                                                                                    \"placeSpyGreen\",\r\n                                                                                                                                                    \"sardaukar\",\r\n                                                                                                                                                    \"dutifulService\",\r\n                                                                                                                                                    \"heighliner\",\r\n                                                                                                                                                    \"deliverSuppliesAndHeighliner\",\r\n                                                                                                                                                    \"espionage\",\r\n                                                                                                                                                    \"secrets\",\r\n                                                                                                                                                    \"desertTactics\",\r\n                                                                                                                                                    \"fremkit\",\r\n                                                                                                                                                    \"assemblyHall\",\r\n                                                                                                                                                    \"gatherSupport1\",\r\n                                                                                                                                                    \"gatherSupport2\",\r\n                                                                                                                                                    \"acceptContractAndShipping1\",\r\n                                                                                                                                                    \"acceptContractAndShipping2\",\r\n                                                                                                                                                    \"researchStation\",\r\n                                                                                                                                                    \"spiceRefinery\",\r\n                                                                                                                                                    \"arrakeen\",\r\n                                                                                                                                                    \"sietchTabr\",\r\n                                                                                                                                                    \"haggaBasinAndImperialBasin\",\r\n                                                                                                                                                    \"deepDesert\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.hagal, \"hagal\", \"reshuffle\", 10, {\r\n                                                                                                                                                    \"reshuffle\"\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.hagal, \"hagal\", \"ix\", 1, {\r\n                                                                                                                                                    \"interstellarShipping\",\r\n                                                                                                                                                    \"deliverSuppliesAndInterstellarShipping\",\r\n                                                                                                                                                    \"smugglingAndInterstellarShipping\",\r\n                                                                                                                                                    \"techNegotiation\",\r\n                                                                                                                                                    \"dreadnought1p\",\r\n                                                                                                                                                    \"dreadnought2p\",\r\n                                                                                                                                                })\r\n                                                                                                                                                Deck.load(loader, cards.hagal, \"hagal\", \"immortality\", 1, {\r\n                                                                                                                                                    \"researchStationImmortality\",\r\n                                                                                                                                                    \"tleilaxuBonus1\",\r\n                                                                                                                                                    \"tleilaxuBonus2\",\r\n                                                                                                                                                    \"tleilaxuBonus3\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                -- One tech per custom deck.\r\n                                                                                                                                                for techName, _ in pairs(Deck.tech) do\r\n                                                                                                                                                    Deck.load(loader, cards.tech, \"tech\", techName, 1, {techName})\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                -- One leader per custom deck.\r\n                                                                                                                                                for leaderName, _ in pairs(Deck.leader) do\r\n                                                                                                                                                    Deck.load(loader, cards.leaders, \"leader\", leaderName, 1, {leaderName})\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                Deck.load(loader, cards.rivalLeaders, \"rivalLeader\", \"uprising\", 1, {\r\n                                                                                                                                                    \"vladimirHarkonnen\",\r\n                                                                                                                                                    \"muadDib\",\r\n                                                                                                                                                    \"jessica\",\r\n                                                                                                                                                    \"feydRauthaHarkonnen\",\r\n                                                                                                                                                    \"margotFenring\",\r\n                                                                                                                                                    \"stabanTuek\",\r\n                                                                                                                                                    \"amberMetulli\",\r\n                                                                                                                                                    \"irulanCorrino\",\r\n                                                                                                                                                    \"gurneyHalleck\",\r\n                                                                                                                                                    \"glossuRabban\",\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                return cards\r\n                                                                                                                                            end\r\n\r\n                                                                                                                                            return Deck\r\n\r\n                                                                                                                                        end)\r\n                                                                                                                                        __bundle_register(\"ShippingTrack\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                            local Module = require(\"utils.Module\")\r\n                                                                                                                                            local Helper = require(\"utils.Helper\")\r\n                                                                                                                                            local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                                                            local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                                                            local TechMarket = Module.lazyRequire(\"TechMarket\")\r\n\r\n                                                                                                                                            local ShippingTrack = {\r\n                                                                                                                                                initialFreighterPositions = {\r\n                                                                                                                                                    Yellow = Helper.getHardcodedPositionFromGUID('8fa76f', 9.04999352, 1.7, 2.88),\r\n                                                                                                                                                    Green = Helper.getHardcodedPositionFromGUID('34281d', 8.5, 1.70039737, 2.88000035),\r\n                                                                                                                                                    Blue = Helper.getHardcodedPositionFromGUID('68e424', 7.40390825, 1.70035648, 2.88000059),\r\n                                                                                                                                                Red = Helper.getHardcodedPositionFromGUID('e9096d', 7.957117, 1.70040143, 2.88050866)}}\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack.onLoad(state)\r\n                                                                                                                                                    Helper.append(ShippingTrack, Helper.resolveGUIDs(false, {\r\n                                                                                                                                                        board = \"0b9dfe\",\r\n                                                                                                                                                    }))\r\n\r\n                                                                                                                                                    if state.settings and state.settings.riseOfIx then\r\n                                                                                                                                                        ShippingTrack._transientSetUp(state.settings)\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack.setUp(settings)\r\n                                                                                                                                                    if settings.riseOfIx then\r\n                                                                                                                                                        ShippingTrack._transientSetUp(settings)\r\n                                                                                                                                                    else\r\n                                                                                                                                                        ShippingTrack._tearDown()\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack._transientSetUp(settings)\r\n\r\n                                                                                                                                                    local createZone = function (position, scale)\r\n                                                                                                                                                        return Helper.markAsTransient(spawnObject({\r\n                                                                                                                                                            type = 'ScriptingTrigger',\r\n                                                                                                                                                            position = position,\r\n                                                                                                                                                            scale = scale,\r\n                                                                                                                                                        }))\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    Helper.collectSnapPoints(ShippingTrack.board, {\r\n\r\n                                                                                                                                                        freighterSpace = function (name, position)\r\n                                                                                                                                                            local index = tonumber(name)\r\n                                                                                                                                                            assert(index, \"Not a number: \" .. name)\r\n                                                                                                                                                            local levelSlot = createZone(position, Vector(index > 0 and 2.3 or 3.6, 2, 1))\r\n                                                                                                                                                            ShippingTrack._createLevelButton(index, levelSlot)\r\n                                                                                                                                                        end,\r\n\r\n                                                                                                                                                        freighterBonus = function (name, position)\r\n                                                                                                                                                            local bounds\r\n                                                                                                                                                            if name == \"troopsAndInfluence\" then\r\n                                                                                                                                                                bounds = Vector(1.3, 1, 1)\r\n                                                                                                                                                            elseif name == \"solaris\" then\r\n                                                                                                                                                                bounds = Vector(0.7, 1, 0.7)\r\n                                                                                                                                                            elseif name == \"spice\" then\r\n                                                                                                                                                                bounds = Vector(0.7, 1, 0.7)\r\n                                                                                                                                                            else\r\n                                                                                                                                                                error(name)\r\n                                                                                                                                                            end\r\n                                                                                                                                                            local bonusSlot = createZone(position, bounds)\r\n                                                                                                                                                            ShippingTrack._createBonusButton(name, bonusSlot)\r\n                                                                                                                                                        end,\r\n                                                                                                                                                    })\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack._tearDown()\r\n                                                                                                                                                    ShippingTrack.board.destruct()\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack.getBoard()\r\n                                                                                                                                                    return ShippingTrack.board\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack._createLevelButton(level, levelSlot)\r\n                                                                                                                                                    local tooltip = level == 0\r\n                                                                                                                                                    and I18N(\"recallYourFreighter\")\r\n                                                                                                                                                    or I18N(\"progressOnShipmentTrack\")\r\n                                                                                                                                                    local ground = levelSlot.getPosition().y - 0.1\r\n                                                                                                                                                    Helper.createAnchoredAreaButton(levelSlot, ground, 0.2, tooltip, PlayBoard.withLeader(function (_, color, _)\r\n                                                                                                                                                        local leader = PlayBoard.getLeader(color)\r\n                                                                                                                                                        local freighterLevel = ShippingTrack.getFreighterLevel(color)\r\n                                                                                                                                                        if freighterLevel < level then\r\n                                                                                                                                                            leader.advanceFreighter(color, level - freighterLevel)\r\n                                                                                                                                                        elseif level == 0 then\r\n                                                                                                                                                            leader.recallFreighter(color)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end))\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack._createBonusButton(bonusName, bonusSlot)\r\n                                                                                                                                                    local tooltip = I18N(\"pickBonus\", {bonus = I18N(bonusName)})\r\n                                                                                                                                                    local ground = bonusSlot.getPosition().y - 0.1\r\n                                                                                                                                                    local callbackName = Helper.toCamelCase(\"_pick\", bonusName, \"bonus\")\r\n                                                                                                                                                    local callback = ShippingTrack[callbackName]\r\n                                                                                                                                                    assert(callback, \"No callback named \" .. callbackName)\r\n                                                                                                                                                    Helper.createAnchoredAreaButton(bonusSlot, ground, 0.2, tooltip, PlayBoard.withLeader(function (_, color, _)\r\n                                                                                                                                                        callback(color)\r\n                                                                                                                                                    end))\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack.getFreighterLevel(color)\r\n                                                                                                                                                    local p = PlayBoard.getContent(color).freighter.getPosition()\r\n                                                                                                                                                    return math.floor((p.z - ShippingTrack.initialFreighterPositions[color].z) / 1.1 + 0.5)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack._setFreighterPositionSmooth(color, level)\r\n                                                                                                                                                    local p = ShippingTrack.initialFreighterPositions[color]:copy()\r\n                                                                                                                                                    p:setAt('z', p.z + 1.1 * level)\r\n                                                                                                                                                    PlayBoard.getContent(color).freighter.setPositionSmooth(p, false, true)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack._freighterGoUp(color, count)\r\n                                                                                                                                                    Helper.repeatMovingAction(PlayBoard.getContent(color).freighter, count, function ()\r\n                                                                                                                                                        ShippingTrack.freighterUp(color)\r\n                                                                                                                                                    end)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack.freighterUp(color, baseCount)\r\n                                                                                                                                                    local level = ShippingTrack.getFreighterLevel(color)\r\n                                                                                                                                                    local count = math.min(baseCount or 1, 3 - level)\r\n                                                                                                                                                    if count > 0 then\r\n                                                                                                                                                        ShippingTrack._setFreighterPositionSmooth(color, level + count)\r\n                                                                                                                                                        return true\r\n                                                                                                                                                    else\r\n                                                                                                                                                        return false\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack.freighterReset(color)\r\n                                                                                                                                                    local level = ShippingTrack.getFreighterLevel(color)\r\n                                                                                                                                                    if level > 0 then\r\n                                                                                                                                                        ShippingTrack._setFreighterPositionSmooth(color, 0)\r\n                                                                                                                                                        if level >= 3 then\r\n                                                                                                                                                            TechMarket.registerAcquireTechOption(color, \"freighterTechBuyOption\", \"spice\", 2)\r\n                                                                                                                                                        end\r\n                                                                                                                                                        return true\r\n                                                                                                                                                    else\r\n                                                                                                                                                        return false\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack._pickSolarisBonus(color)\r\n                                                                                                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                                                                                                    leader.resources(color, \"solari\", 5)\r\n                                                                                                                                                    for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                                                        if otherColor ~= color then\r\n                                                                                                                                                            local otherLeader = PlayBoard.getLeader(otherColor)\r\n                                                                                                                                                            otherLeader.resources(otherColor, \"solari\", 1)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack._pickSpiceBonus(color)\r\n                                                                                                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                                                                                                    leader.resources(color, \"spice\", 2)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ShippingTrack._pickTroopsAndInfluenceBonus(color)\r\n                                                                                                                                                    local leader = PlayBoard.getLeader(color)\r\n                                                                                                                                                    local troopAmount = 2\r\n                                                                                                                                                    if PlayBoard.hasTech(color, \"troopTransports\") then\r\n                                                                                                                                                        troopAmount = 3\r\n                                                                                                                                                    end\r\n                                                                                                                                                    leader.setContext(\"troopTransports\")\r\n                                                                                                                                                    leader.troops(color, \"supply\", \"garrison\", troopAmount)\r\n                                                                                                                                                    leader.unsetContext(\"troopTransports\")\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                return ShippingTrack\r\n\r\n                                                                                                                                            end)\r\n                                                                                                                                            __bundle_register(\"ConflictCard\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                                local Module = require(\"utils.Module\")\r\n                                                                                                                                                local Helper = require(\"utils.Helper\")\r\n\r\n                                                                                                                                                -- Exceptional Immediate require for the sake of aliasing.\r\n                                                                                                                                                local CardEffect = require(\"CardEffect\")\r\n\r\n                                                                                                                                                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                                                                local Types = Module.lazyRequire(\"Types\")\r\n                                                                                                                                                local Action = Module.lazyRequire(\"Action\")\r\n\r\n                                                                                                                                                -- Function aliasing for a more readable code.\r\n                                                                                                                                                local persuasion = CardEffect.persuasion\r\n                                                                                                                                                local sword = CardEffect.sword\r\n                                                                                                                                                local spice = CardEffect.spice\r\n                                                                                                                                                local water = CardEffect.water\r\n                                                                                                                                                local solari = CardEffect.solari\r\n                                                                                                                                                local deploy = CardEffect.deploy\r\n                                                                                                                                                local troop = CardEffect.troop\r\n                                                                                                                                                local dreadnought = CardEffect.dreadnought\r\n                                                                                                                                                local negotiator = CardEffect.negotiator\r\n                                                                                                                                                local specimen = CardEffect.specimen\r\n                                                                                                                                                local intrigue = CardEffect.intrigue\r\n                                                                                                                                                local trash = CardEffect.trash\r\n                                                                                                                                                local research = CardEffect.research\r\n                                                                                                                                                local beetle = CardEffect.beetle\r\n                                                                                                                                                local influence = CardEffect.influence\r\n                                                                                                                                                local vp = CardEffect.vp\r\n                                                                                                                                                local draw = CardEffect.draw\r\n                                                                                                                                                local shipment = CardEffect.shipment\r\n                                                                                                                                                local control = CardEffect.control\r\n                                                                                                                                                local spy = CardEffect.spy\r\n                                                                                                                                                local contract = CardEffect.contract\r\n                                                                                                                                                local voice = CardEffect.voice\r\n                                                                                                                                                local perDreadnoughtInConflict = CardEffect.perDreadnoughtInConflict\r\n                                                                                                                                                local perSwordCard = CardEffect.perSwordCard\r\n                                                                                                                                                local perFremen = CardEffect.perFremen\r\n                                                                                                                                                local perEmperor = CardEffect.perEmperor\r\n                                                                                                                                                local perFulfilledContract = CardEffect.perFulfilledContract\r\n                                                                                                                                                local choice = CardEffect.choice\r\n                                                                                                                                                local optional = CardEffect.optional\r\n                                                                                                                                                local seat = CardEffect.seat\r\n                                                                                                                                                local fremenBond = CardEffect.fremenBond\r\n                                                                                                                                                -- bloodlines sardaukar commander in conflict\r\n                                                                                                                                                local sardaukarCommanderInConflict = CardEffect.sardaukarCommanderInConflict\r\n                                                                                                                                                -- bloodlines imperial throneship reveal\r\n                                                                                                                                                local imperialThroneship = CardEffect.imperialThroneship\r\n                                                                                                                                                local agentInEmperorSpace = CardEffect.agentInEmperorSpace\r\n                                                                                                                                                local emperorAlliance = CardEffect.emperorAlliance\r\n                                                                                                                                                local spacingGuildAlliance = CardEffect.spacingGuildAlliance\r\n                                                                                                                                                local beneGesseritAlliance = CardEffect.beneGesseritAlliance\r\n                                                                                                                                                local fremenAlliance = CardEffect.fremenAlliance\r\n                                                                                                                                                local fremenFriendship = CardEffect.fremenFriendship\r\n                                                                                                                                                local anyAlliance = CardEffect.anyAlliance\r\n                                                                                                                                                local oneHelix = CardEffect.oneHelix\r\n                                                                                                                                                local twoHelices = CardEffect.twoHelices\r\n                                                                                                                                                local winner = CardEffect.winner\r\n                                                                                                                                                local twoSpies = CardEffect.twoSpies\r\n                                                                                                                                                local spyMakerSpace = CardEffect.spyMakerSpace\r\n                                                                                                                                                local swordmaster = CardEffect.swordmaster\r\n                                                                                                                                                local multiply = CardEffect.multiply\r\n\r\n                                                                                                                                                local ConflictCard = {\r\n                                                                                                                                                    skirmishA = {level = 1, uprising = true, objective = \"crysknife\", rewards = {{influence(1)}, {intrigue(1), spice(1)}, {spice(1)}}},\r\n                                                                                                                                                    skirmishB = {level = 1, uprising = true, objective = \"ornithopter\", rewards = {{intrigue(1), solari(1)}, {intrigue(1), solari(2)}, {intrigue(1)}}},\r\n                                                                                                                                                    skirmishC = {level = 1, uprising = true, objective = \"muadDib\", rewards = {{solari(2)}, {solari(3)}, {solari(2)}}},\r\n                                                                                                                                                    -- bloodlines conflict rewards\r\n                                                                                                                                                    bl_Skirmish = {level = 1, uprising = true, objective = \"joker\", rewards = {{trash(1)}, {water(1), solari(1)}, {solari(2)}}},\r\n                                                                                                                                                    bl_StormsInTheSouth = {level = 2, uprising = true, objective = \"joker\", rewards = {{spy(1), spice(2)}, {intrigue(2), solari(2)}, {intrigue(1), solari(2)}}},\r\n                                                                                                                                                    --[[\r\n    desertPower = {level = 2, legacy = true, rewards = {{vp(1), water(1)}, {water(1), spice(1)}, {spice(1)}}},\r\n    raidStockpiles = {level = 2, legacy = true, rewards = {{intrigue(1), spice(3)}, {spice(2)}, {spice(1)}}},\r\n    cloakAndDagger = {level = 2, legacy = true, rewards = {{influence(1), intrigue(2)}, {intrigue(1), spice(1)}, {choice(1, {intrigue(1), spice(1)})}}},\r\n    machinations = {level = 2, legacy = true, rewards = {{choice(2, {influence(1, \"emperor\"), influence(1, \"spacingGuild\"), influence(1, \"beneGesserit\"), influence(1, \"fremen\")})}, {water(1), solari(2)}, {water(1)}}},\r\n    sortThroughTheChaos = {level = 2, legacy = true, rewards = {{mentat(), intrigue(1), solari(2)}, {intrigue(1), solari(2)}, {solari(2)}}},\r\n    terriblePurpose = {level = 2, legacy = true, rewards = {{vp(1), trash(1)}, {water(1), spice(1)}, {spice(1)}}},\r\n    guildBankRaid = {level = 2, legacy = true, rewards = {{solari(6)}, {solari(4)}, {solari(2)}}},\r\n    siegeOfArrakeen = {level = 2, legacy = true, rewards = {{vp(1), control(\"arrakeen\")}, {solari(4)}, {solari(2)}}},\r\n    siegeOfCarthag = {level = 2, legacy = true, rewards = {{vp(1), control(\"carthag\")}, {intrigue(1), spice(1)}, {spice(1)}}},\r\n    secureImperialBasin = {level = 2, legacy = true, rewards = {{vp(1), control(\"imperialBasin\")}, {water(2)}, {water(1)}}},\r\n    tradeMonopoly = {level = 2, ix = true, rewards = {{shipment(2), troop(1)}, {intrigue(1), water(1)}, {choice(1, {intrigue(1), water(1)})}}},\r\n    ]]\r\n                                                                                                                                                    choamSecurity = {level = 2, uprising = true, objective = \"crysknife\", rewards = {{influence(1, \"spacingGuild\"), contract(), troop(1)}, {water(1), solari(2), troop(2)}, {intrigue(1), troop(1)}}},\r\n                                                                                                                                                    spiceFreighters = {level = 2, uprising = true, objective = \"crysknife\", rewards = {{influence(1), optional({spice(-3), vp(1)})}, {water(1), spice(1), troop(1)}, {spice(1), troop(1)}}},\r\n                                                                                                                                                    siegeOfArrakeen = {level = 2, uprising = true, objective = \"ornithopter\", rewards = {{control(\"arrakeen\"), solari(2), troop(2)}, {solari(4), troop(1)}, {solari(3)}}},\r\n                                                                                                                                                    seizeSpiceRefinery = {level = 2, uprising = true, objective = \"crysknife\", rewards = {{control(\"spiceRefinery\"), spy(1), spice(2)}, {intrigue(1), spice(1), troop(1)}, {spice(2)}}},\r\n                                                                                                                                                    testOfLoyalty = {level = 2, uprising = true, objective = \"ornithopter\", rewards = {{influence(1, \"emperor\"), spy(1), solari(2)}, {solari(4), troop(1)}, {solari(3)}}},\r\n                                                                                                                                                    shadowContest = {level = 2, uprising = true, objective = \"ornithopter\", rewards = {{influence(1, \"beneGesserit\"), intrigue(1)}, {intrigue(1), spice(1), troop(1)}, {spice(1), troop(1)}}},\r\n                                                                                                                                                    secureImperialBasin = {level = 2, uprising = true, objective = \"muadDib\", rewards = {{control(\"imperialBasin\"), spice(2), troop(1)}, {water(2), troop(1)}, {water(1), troop(1)}}},\r\n                                                                                                                                                    protectTheSietches = {level = 2, uprising = true, objective = \"muadDib\", rewards = {{influence(1, \"fremen\"), water(1), troop(1)}, {spice(3), troop(1)}, {spice(2)}}},\r\n                                                                                                                                                    tradeDispute = {level = 2, uprising = true, objective = \"muadDib\", rewards = {{contract(), water(1), trash(1)}, {water(1), spice(1), trash(1)}, {water(1), troop(1)}}},\r\n                                                                                                                                                    --[[\r\n    battleForImperialBasin = {level = 3, legacy = true, rewards = {{vp(2), control(\"imperialBasin\")}, {spice(5)}, {spice(3)}}},\r\n    grandVision = {level = 3, legacy = true, rewards = {{influence(2), intrigue(1)}, {intrigue(1), spice(3)}, {spice(3)}}},\r\n    battleForCarthag = {level = 3, legacy = true, rewards = {{vp(2), control(\"carthag\")}, {intrigue(1), spice(3)}, {spice(3)}}},\r\n    battleForArrakeen = {level = 3, legacy = true, rewards = {{vp(2), control(\"arrakeen\")}, {choice(2, {intrigue(1), spice(2), solari(3)})}, {intrigue(1), solari(2)}}},\r\n    ]]\r\n                                                                                                                                                    economicSupremacy = {level = 3, ix = true, rewards = {{vp(1), optional({solari(-6), vp(1)}), optional({spice(-4), vp(1)})}, {vp(1)}, {spice(2), solari(2)}}},\r\n                                                                                                                                                    propaganda = {level = 3, uprising = true, objective = \"joker\", rewards = {{choice(2, {influence(1, \"emperor\"), influence(1, \"spacingGuild\"), influence(1, \"beneGesserit\"), influence(1, \"fremen\")})}, {intrigue(1), spice(3)}, {spice(3)}}},\r\n                                                                                                                                                    battleForImperialBasin = {level = 3, uprising = true, objective = \"ornithopter\", rewards = {{vp(1), control(\"imperialBasin\"), optional({spice(-4), vp(1)})}, {spice(5)}, {spice(3)}}},\r\n                                                                                                                                                    battleForArrakeen = {level = 3, uprising = true, objective = \"crysknife\", rewards = {{vp(1), control(\"arrakeen\"), optional({spy(-2), vp(1)})}, {intrigue(1), spice(1), solari(3)}, {spice(2), solari(2)}}},\r\n                                                                                                                                                    battleForSpiceRefinery = {level = 3, uprising = true, objective = \"muadDib\", rewards = {{vp(1), control(\"spiceRefinery\"), optional({solari(-6), vp(1)})}, {intrigue(1), spice(3)}, {spice(3)}}},\r\n                                                                                                                                                }\r\n\r\n                                                                                                                                                function ConflictCard.getObjective(conflictName)\r\n                                                                                                                                                    local conflict = ConflictCard[conflictName]\r\n                                                                                                                                                    assert(conflict, \"Unknown conflict: \" .. tostring(conflictName))\r\n                                                                                                                                                    return conflict.objective\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                function ConflictCard.collectReward(color, conflictName, rank, doubleRewards, postAction)\r\n                                                                                                                                                    Types.assertIsInRange(1, 3, rank)\r\n                                                                                                                                                    local conflict = ConflictCard[conflictName]\r\n                                                                                                                                                    assert(conflict, \"Unknown conflict: \" .. tostring(conflictName))\r\n                                                                                                                                                    local rewards = conflict.rewards[rank]\r\n\r\n                                                                                                                                                    local context = {\r\n                                                                                                                                                        color = color,\r\n                                                                                                                                                        player = PlayBoard.getLeader(color),\r\n                                                                                                                                                        cardName = conflictName,\r\n                                                                                                                                                    }\r\n\r\n                                                                                                                                                    Action.setContext(\"combatEnded\")\r\n\r\n                                                                                                                                                    if rank == 1 and conflict.objective then\r\n                                                                                                                                                        context.player.gainObjective(context.color, conflict.objective)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    local continuation = Helper.createContinuation(\"ConflictCard.collectReward\")\r\n\r\n                                                                                                                                                    local functionHolder = {}\r\n                                                                                                                                                    functionHolder.i = 1\r\n                                                                                                                                                    functionHolder.f = function ()\r\n                                                                                                                                                        for _, reward in ipairs(rewards) do\r\n                                                                                                                                                            CardEffect.evaluate(context, reward)\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        local innerContinuation = postAction and postAction() or Helper.fakeContinuation()\r\n                                                                                                                                                        innerContinuation.doAfter(function ()\r\n                                                                                                                                                            Action.flushTroopTransfer()\r\n                                                                                                                                                            if doubleRewards and functionHolder.i == 1 then\r\n                                                                                                                                                                Helper.onceTimeElapsed(2).doAfter(function ()\r\n                                                                                                                                                                    functionHolder.i = functionHolder.i + 1\r\n                                                                                                                                                                    functionHolder.f()\r\n                                                                                                                                                                end)\r\n                                                                                                                                                            else\r\n                                                                                                                                                                continuation.run()\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    functionHolder.f()\r\n\r\n                                                                                                                                                    return continuation\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                function ConflictCard.getLevel(conflictName)\r\n                                                                                                                                                    local conflict = ConflictCard[conflictName]\r\n                                                                                                                                                    assert(conflict, conflictName)\r\n                                                                                                                                                    return conflict.level\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                function ConflictCard.isBehindTheWall(conflictName)\r\n                                                                                                                                                    local behindTheWallConflictCards = {\r\n                                                                                                                                                        siegeOfArrakeen = \"arrakeen\",\r\n                                                                                                                                                        seizeSpiceRefinery = \"spiceRefinery\",\r\n                                                                                                                                                        secureImperialBasin = \"imperialBasin\",\r\n                                                                                                                                                        battleForImperialBasin = \"imperialBasin\",\r\n                                                                                                                                                        battleForArrakeen = \"arrakeen\",\r\n                                                                                                                                                        battleForSpiceRefinery = \"spiceRefinery\",\r\n                                                                                                                                                    }\r\n                                                                                                                                                    return Helper.isElementOf(conflictName, Helper.getKeys(behindTheWallConflictCards))\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                return ConflictCard\r\n\r\n                                                                                                                                            end)\r\n                                                                                                                                            __bundle_register(\"Commander\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                                local Module = require(\"utils.Module\")\r\n                                                                                                                                                local Helper = require(\"utils.Helper\")\r\n\r\n                                                                                                                                                local Action = Module.lazyRequire(\"Action\")\r\n                                                                                                                                                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                                                                local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n\r\n                                                                                                                                                local Commander = Helper.createClass(Action, {\r\n                                                                                                                                                    leaders = {},\r\n                                                                                                                                                    activatedAllies = {},\r\n                                                                                                                                                })\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.onLoad()\r\n                                                                                                                                                    -- Need to be called to be marked as such in Module, but we don't want\r\n                                                                                                                                                    -- Action.onLoad to be called instead. Hence this empty overload.\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.setUp(settings)\r\n                                                                                                                                                    -- NOP\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.isCommander(color)\r\n                                                                                                                                                    return color == \"Purple\" or color == \"White\"\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.isAlly(color)\r\n                                                                                                                                                    return not Commander.isCommander(color)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.getAllies(color)\r\n                                                                                                                                                    if color == \"Purple\" then\r\n                                                                                                                                                        return {\"Blue\", \"Red\"}\r\n                                                                                                                                                    elseif color == \"White\" then\r\n                                                                                                                                                        return {\"Yellow\", \"Green\"}\r\n                                                                                                                                                    else\r\n                                                                                                                                                        return nil\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.getLeftSeatedAlly(color)\r\n                                                                                                                                                    if color == \"Purple\" then\r\n                                                                                                                                                        return \"Blue\"\r\n                                                                                                                                                    elseif color == \"White\" then\r\n                                                                                                                                                        return \"Green\"\r\n                                                                                                                                                    else\r\n                                                                                                                                                        return nil\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.getRightSeatedAlly(color)\r\n                                                                                                                                                    if color == \"Purple\" then\r\n                                                                                                                                                        return \"Red\"\r\n                                                                                                                                                    elseif color == \"White\" then\r\n                                                                                                                                                        return \"Yellow\"\r\n                                                                                                                                                    else\r\n                                                                                                                                                        return nil\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.getOtherAlly(color)\r\n                                                                                                                                                    if color == \"Blue\" then\r\n                                                                                                                                                        return \"Red\"\r\n                                                                                                                                                    elseif color == \"Red\" then\r\n                                                                                                                                                        return \"Blue\"\r\n                                                                                                                                                    elseif color == \"Yellow\" then\r\n                                                                                                                                                        return \"Green\"\r\n                                                                                                                                                    elseif color == \"Green\" then\r\n                                                                                                                                                        return \"Yellow\"\r\n                                                                                                                                                    else\r\n                                                                                                                                                        return nil\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.getCommander(color)\r\n                                                                                                                                                    if Helper.isElementOf(color, {\"Blue\", \"Red\"}) then\r\n                                                                                                                                                        return \"Purple\"\r\n                                                                                                                                                    elseif Helper.isElementOf(color, {\"Yellow\", \"Green\"}) then\r\n                                                                                                                                                        return \"White\"\r\n                                                                                                                                                    else\r\n                                                                                                                                                        return nil\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.isShaddam(color)\r\n                                                                                                                                                    return color == \"Purple\"\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.isTeamShaddam(color)\r\n                                                                                                                                                    return color == \"Red\" or color == \"Blue\" or color == \"Purple\"\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.getShaddamTeam()\r\n                                                                                                                                                    return {\"Purple\", \"Red\", \"Blue\"}\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.isMuadDib(color)\r\n                                                                                                                                                    return color == \"White\"\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.isTeamMuadDib(color)\r\n                                                                                                                                                    return color == \"Green\" or color == \"Yellow\" or color == \"White\"\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.getMuadDibTeam()\r\n                                                                                                                                                    return {\"White\", \"Green\", \"Yellow\"}\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.inSameTeam(...)\r\n                                                                                                                                                    assert(#{...} > 1)\r\n                                                                                                                                                    local shaddamTeamMemberCount = #Helper.filter({...}, Commander.isTeamShaddam)\r\n                                                                                                                                                    local muadDibTeamMemberCount = #Helper.filter({...}, Commander.isTeamMuadDib)\r\n                                                                                                                                                    return shaddamTeamMemberCount == 0 or muadDibTeamMemberCount == 0\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.newCommander(color, leader)\r\n                                                                                                                                                    assert(Commander.isCommander(color))\r\n                                                                                                                                                    local commander = Helper.createClassInstance(Commander, {})\r\n                                                                                                                                                    Commander.leaders[color] = leader\r\n                                                                                                                                                    commander.name = leader.name\r\n                                                                                                                                                    return commander\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.setActivatedAlly(color, allyColor)\r\n                                                                                                                                                    assert(Commander.isCommander(color))\r\n                                                                                                                                                    assert(not allyColor or Commander.isAlly(allyColor))\r\n                                                                                                                                                    Commander.activatedAllies[color] = allyColor\r\n                                                                                                                                                    Helper.emitEvent(\"selectAlly\", color, allyColor)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.getActivatedAlly(color)\r\n                                                                                                                                                    return Commander.activatedAllies[color]\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.doSetUp(color, settings)\r\n                                                                                                                                                    Helper.dumpFunction(\"Commander.doSetUp\", color)\r\n                                                                                                                                                    local leader = Commander.leaders[color]\r\n                                                                                                                                                    assert(leader)\r\n                                                                                                                                                    leader.doSetUp(color, settings, true)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.prepare(color, settings)\r\n                                                                                                                                                    local leader = Commander.leaders[color]\r\n                                                                                                                                                    assert(leader)\r\n                                                                                                                                                    leader.prepare(color, settings, true)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.callSandworm(color, count)\r\n                                                                                                                                                    return Commander._forwardToActivatedAlly(color, \"callSandworm\", count)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.influence(color, faction, amount)\r\n                                                                                                                                                    if InfluenceTrack.hasAccess(color, faction) then\r\n                                                                                                                                                        return Action.influence(color, faction, amount)\r\n                                                                                                                                                    else\r\n                                                                                                                                                        return Commander._forwardToActivatedAlly(color, \"influence\", faction, amount)\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.troops(color, from, to, amount)\r\n                                                                                                                                                    return Commander._forwardToActivatedAlly(color, \"troops\", from, to, amount)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.advanceFreighter(color, positiveAmount)\r\n                                                                                                                                                    return Commander._forwardToActivatedAlly(color, \"advanceFreighter\", positiveAmount)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.recallFreighter(color)\r\n                                                                                                                                                    return Commander._forwardToActivatedAlly(color, \"recallFreighter\")\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.shipments(color, amount)\r\n                                                                                                                                                    return Commander._forwardToActivatedAlly(color, \"shipments\", amount)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.dreadnought(color, from, to, amount)\r\n                                                                                                                                                    return Commander._forwardToActivatedAlly(color, \"dreadnought\", from, to, amount)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.research(color, jump)\r\n                                                                                                                                                    return Commander._forwardToActivatedAlly(color, \"dreadnought\", jump)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander.beetle(color, jump)\r\n                                                                                                                                                    return Commander._forwardToActivatedAlly(color, \"beetle\", jump)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Commander._forwardToActivatedAlly(color, functionName, ...)\r\n                                                                                                                                                    local ally = Commander.getActivatedAlly(color)\r\n                                                                                                                                                    local leader = PlayBoard.getLeader(ally)\r\n                                                                                                                                                    return leader[functionName](ally, ...)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                return Commander\r\n\r\n                                                                                                                                            end)\r\n                                                                                                                                            __bundle_register(\"Combat\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                                local Module = require(\"utils.Module\")\r\n                                                                                                                                                local Helper = require(\"utils.Helper\")\r\n                                                                                                                                                local Park = require(\"utils.Park\")\r\n                                                                                                                                                local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                                                                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                                                                local Commander = Module.lazyRequire(\"Commander\")\r\n                                                                                                                                                local Action = Module.lazyRequire(\"Action\")\r\n                                                                                                                                                local Deck = Module.lazyRequire(\"Deck\")\r\n                                                                                                                                                local Types = Module.lazyRequire(\"Types\")\r\n                                                                                                                                                local TurnControl = Module.lazyRequire(\"TurnControl\")\r\n                                                                                                                                                local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                                                                                                local Music = Module.lazyRequire(\"Music\")\r\n                                                                                                                                                local ConflictCard = Module.lazyRequire(\"ConflictCard\")\r\n                                                                                                                                                -- bloodlines sardaukar commander skill - loyal\r\n                                                                                                                                                local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n\r\n                                                                                                                                                local Combat = {\r\n                                                                                                                                                    -- Temporary structure (set to nil *after* loading).\r\n                                                                                                                                                    unresolvedContent = {\r\n                                                                                                                                                        victoryPointTokenBag = \"86dc4e\",\r\n                                                                                                                                                        protoSandworm = \"14b25e\",\r\n                                                                                                                                                        -- bloodlines sardaukar commander\r\n                                                                                                                                                        protoSardaukarCommander = \"556b39\",\r\n                                                                                                                                                        objectiveTokenBags = {\r\n                                                                                                                                                            muadDib = \"a17bcb\",\r\n                                                                                                                                                            ornithopter = \"bd4b71\",\r\n                                                                                                                                                            crysknife = \"85f9b6\",\r\n                                                                                                                                                            joker = \"99ecfe\",\r\n                                                                                                                                                        },\r\n                                                                                                                                                    },\r\n                                                                                                                                                    origins = {\r\n                                                                                                                                                        Green = Vector(8.15, 0.85, -7.65),\r\n                                                                                                                                                        Yellow = Vector(8.15, 0.85, -10.35),\r\n                                                                                                                                                        Blue = Vector(1.55, 0.85, -10.35),\r\n                                                                                                                                                        Red = Vector(1.55, 0.85, -7.65),\r\n                                                                                                                                                    },\r\n                                                                                                                                                    victoryPointTokenPositions = {},\r\n                                                                                                                                                    dreadnoughtStrengths = {},\r\n                                                                                                                                                ranking = {}}\r\n\r\n                                                                                                                                                function Combat.onLoad(state)\r\n                                                                                                                                                    Helper.append(Combat, Helper.resolveGUIDs(false, Combat.unresolvedContent))\r\n\r\n                                                                                                                                                    Helper.noPhysicsNorPlay(Combat.protoSandworm)\r\n                                                                                                                                                    -- bloodlines sardaukar commander\r\n                                                                                                                                                    Helper.noPhysicsNorPlay(Combat.protoSardaukarCommander)\r\n                                                                                                                                                    for _, objectiveTokenBag in pairs(Combat.objectiveTokenBags) do\r\n                                                                                                                                                        Helper.noPhysics(objectiveTokenBag)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    if state.settings then\r\n                                                                                                                                                        Combat._transientSetUp(state.settings)\r\n                                                                                                                                                        Combat.dreadnoughtStrengths = state.Combat.dreadnoughtStrengths\r\n                                                                                                                                                        Combat.ranking = state.Combat.ranking\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.onSave(state)\r\n                                                                                                                                                    state.Combat = {\r\n                                                                                                                                                        dreadnoughtStrengths = Combat.dreadnoughtStrengths,\r\n                                                                                                                                                        ranking = Combat.ranking,\r\n                                                                                                                                                    }\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.setUp(settings)\r\n                                                                                                                                                    Combat._transientSetUp(settings)\r\n                                                                                                                                                    assert(Combat.conflictDeckZone)\r\n                                                                                                                                                    return Deck.generateConflictDeck(Combat.conflictDeckZone, settings.riseOfIx, settings.epicMode, settings.numberOfPlayers)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._transientSetUp(settings)\r\n                                                                                                                                                    Combat.formalCombatPhase = settings.formalCombatPhase\r\n\r\n                                                                                                                                                    Combat._processSnapPoints(settings)\r\n\r\n                                                                                                                                                    Helper.registerEventListener(\"strengthValueChanged\", function ()\r\n                                                                                                                                                        Combat._updateCombatForces(Combat._calculateCombatForces())\r\n                                                                                                                                                    end)\r\n\r\n                                                                                                                                                    Helper.registerEventListener(\"selectAlly\", function ()\r\n                                                                                                                                                        Combat._updateCombatForces(Combat._calculateCombatForces())\r\n                                                                                                                                                    end)\r\n\r\n                                                                                                                                                    Helper.registerEventListener(\"phaseStart\", function (phase)\r\n                                                                                                                                                        if phase == \"roundStart\" then\r\n                                                                                                                                                            Combat._setUpConflict()\r\n                                                                                                                                                        elseif phase == \"combat\" then\r\n                                                                                                                                                            Action.setContext(\"combat\", Combat.getCurrentConflictName())\r\n                                                                                                                                                            -- A small delay to avoid being erased by the player turn sound.\r\n                                                                                                                                                            Helper.onceTimeElapsed(1).doAfter(function ()\r\n                                                                                                                                                                Music.play(\"battle\")\r\n                                                                                                                                                            end, 1)\r\n                                                                                                                                                        elseif phase == \"combatEnd\" then\r\n                                                                                                                                                            local forces = Combat._calculateCombatForces()\r\n                                                                                                                                                            Combat.ranking = Combat._calculateRanking(forces)\r\n                                                                                                                                                            local turnSequence = Combat._calculateOutcomeTurnSequence(Combat.ranking)\r\n                                                                                                                                                            TurnControl.overridePhaseTurnSequence(turnSequence)\r\n                                                                                                                                                            Combat.showRanking(turnSequence, Combat.ranking)\r\n                                                                                                                                                        elseif phase == \"recall\" then\r\n                                                                                                                                                            for _, object in ipairs(Combat.rewardTokenZone.getObjects()) do\r\n                                                                                                                                                                if Types.isVictoryPointToken(object) or Types.isObjectiveToken(object) then\r\n                                                                                                                                                                    MainBoard.trash(object)\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                            -- Recalling units (troops, dreadnoughts and sandworms) in the combat (not in a controlable space).\r\n                                                                                                                                                            for _, object in ipairs(Combat.combatCenterZone.getObjects()) do\r\n                                                                                                                                                                for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                                                                    if Types.isTroop(object, color) then\r\n                                                                                                                                                                        Park.putObject(object, PlayBoard.getSupplyPark(color))\r\n                                                                                                                                                                    elseif Types.isDreadnought(object, color) then\r\n                                                                                                                                                                        Park.putObject(object, Combat.dreadnoughtParks[color])\r\n                                                                                                                                                                    elseif Types.isSandworm(object, color) then\r\n                                                                                                                                                                        object.destruct()\r\n                                                                                                                                                                        -- bloodlines duncan agent recall\r\n                                                                                                                                                                    elseif Types.isAgent(object, color) then\r\n                                                                                                                                                                        Park.putObject(object, PlayBoard.getAgentPark(color))\r\n                                                                                                                                                                        -- bloodlines sardaukar commanders\r\n                                                                                                                                                                    elseif Types.isSardaukarCommander(object, color) then\r\n                                                                                                                                                                        Park.putObject(object, PlayBoard.getDreadnoughtPark(color))\r\n                                                                                                                                                                    end\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end)\r\n\r\n                                                                                                                                                    Helper.registerEventListener(\"phaseEnd\", function (phase)\r\n                                                                                                                                                        if phase == \"combat\" then\r\n                                                                                                                                                            if Combat.isFormalCombatPhaseEnabled() then\r\n                                                                                                                                                                Music.play(\"turn\")\r\n                                                                                                                                                            end\r\n                                                                                                                                                        elseif phase == \"combatEnd\" then\r\n                                                                                                                                                            for _, bannerZone in ipairs(MainBoard.getBannerZones()) do\r\n                                                                                                                                                                local dreadnought = MainBoard.getControllingDreadnought(bannerZone)\r\n                                                                                                                                                                -- Only recall locked controlling dreadnoughts.\r\n                                                                                                                                                                if dreadnought and dreadnought.getLock() then\r\n                                                                                                                                                                    dreadnought.setLock(false)\r\n                                                                                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                                                                        if dreadnought.hasTag(color) then\r\n                                                                                                                                                                            Park.putObject(dreadnought, Combat.dreadnoughtParks[color])\r\n                                                                                                                                                                        end\r\n                                                                                                                                                                    end\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                            Action.unsetContext(\"combat\")\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._processSnapPoints(settings)\r\n                                                                                                                                                    Combat.garrisonParks = {}\r\n                                                                                                                                                    Combat.dreadnoughtParks = {}\r\n                                                                                                                                                    Combat.makerHookPositions = {}\r\n                                                                                                                                                    Combat.battlefieldZones = {}\r\n\r\n                                                                                                                                                    local createZone = function (position, scale)\r\n                                                                                                                                                        return Helper.markAsTransient(spawnObject({\r\n                                                                                                                                                            type = 'ScriptingTrigger',\r\n                                                                                                                                                            position = position,\r\n                                                                                                                                                            scale = scale,\r\n                                                                                                                                                        }))\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    MainBoard.collectSnapPointsOnAllBoards(settings, {\r\n\r\n                                                                                                                                                        conflictDeck = function (_, position)\r\n                                                                                                                                                            Combat.conflictDeckZone = createZone(position, Vector(2, 1, 3))\r\n                                                                                                                                                        end,\r\n\r\n                                                                                                                                                        conflictDiscard = function (_, position)\r\n                                                                                                                                                            Combat.conflictDiscardZone = createZone(position, Vector(2, 1, 3))\r\n                                                                                                                                                        end,\r\n\r\n                                                                                                                                                        garrison = function (name, position)\r\n                                                                                                                                                            local color = name:gsub(\"^%l\", string.upper)\r\n                                                                                                                                                            Combat.garrisonParks[color] = Combat._createGarrisonPark(color, position)\r\n                                                                                                                                                            -- bloodlines disable rise of ix but enable dreadnought park\r\n                                                                                                                                                            -- if settings.riseOfIx then\r\n                                                                                                                                                            --     Combat.dreadnoughtParks[color] = Combat._createDreadnoughtPark(color, position)\r\n                                                                                                                                                            -- end\r\n                                                                                                                                                            Combat.dreadnoughtParks[color] = Combat._createDreadnoughtPark(color, position)\r\n                                                                                                                                                        end,\r\n\r\n                                                                                                                                                        makerHook = function (name, position)\r\n                                                                                                                                                            local color = name:gsub(\"^%l\", string.upper)\r\n                                                                                                                                                            Combat.makerHookPositions[color] = position\r\n                                                                                                                                                            Helper.createTransientAnchor(color .. \"MakerHook\", position - Vector(0, 0.5, 0)).doAfter(function (anchor)\r\n                                                                                                                                                                local tags = {\"MakerHook\"}\r\n                                                                                                                                                                local snapPoints = {Helper.createRelativeSnapPoint(anchor, position, false, tags)}\r\n                                                                                                                                                                anchor.setSnapPoints(snapPoints)\r\n                                                                                                                                                            end)\r\n                                                                                                                                                        end,\r\n\r\n                                                                                                                                                        battlefield = function (name, position)\r\n                                                                                                                                                            if name == \"\" then\r\n                                                                                                                                                                Combat.battlegroundPark = Combat._createBattlegroundPark(position)\r\n                                                                                                                                                            else\r\n                                                                                                                                                                local color = name:gsub(\"^%l\", string.upper)\r\n                                                                                                                                                                Combat.battlefieldZones[color] = createZone(position, Vector(2.3, 2, 2.3))\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end,\r\n\r\n                                                                                                                                                        swormasterBonusToken = function (name, position)\r\n                                                                                                                                                            local color = name:gsub(\"^%l\", string.upper)\r\n                                                                                                                                                            -- TODO\r\n                                                                                                                                                        end,\r\n\r\n                                                                                                                                                        victoryTokenRoom = function (name, position)\r\n                                                                                                                                                            Combat.rewardTokenZone = createZone(position, Vector(7, 2, 1))\r\n                                                                                                                                                        end,\r\n\r\n                                                                                                                                                        combatMarkerRoom = function (name, position)\r\n                                                                                                                                                            Combat.noCombatForcePositions = Vector(position.x, 1.66, position.z)\r\n                                                                                                                                                            Combat.combatForcePositions = {}\r\n                                                                                                                                                            for i = 0, 19 do\r\n                                                                                                                                                                Combat.combatForcePositions[i + 1] = Vector(\r\n                                                                                                                                                                    position.x + 1.6 + (i % 10) * 0.98,\r\n                                                                                                                                                                    1.66,\r\n                                                                                                                                                                    position.z + 0.64 - math.floor(i / 10) * 1.03\r\n                                                                                                                                                                )\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end,\r\n                                                                                                                                                    })\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.isFormalCombatPhaseEnabled()\r\n                                                                                                                                                    return Combat.formalCombatPhase\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._setUpConflict()\r\n                                                                                                                                                    if Helper.getCardCount(Helper.getDeckOrCard(Combat.conflictDeckZone)) == 0 then\r\n                                                                                                                                                        return\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    Helper.moveCardFromZone(Combat.conflictDeckZone, Combat.conflictDiscardZone.getPosition() + Vector(0, 1, 0), nil, true, true).doAfter(function (card)\r\n                                                                                                                                                        assert(card)\r\n                                                                                                                                                        local cardName = Helper.getID(card)\r\n\r\n                                                                                                                                                        local i = 0\r\n                                                                                                                                                        local tokens = Combat.victoryPointTokenBag.getObjects()\r\n                                                                                                                                                        for _, token in pairs(tokens) do\r\n                                                                                                                                                            assert(token)\r\n                                                                                                                                                            if cardName == Helper.getID(token) then\r\n                                                                                                                                                                local origin = Combat.rewardTokenZone.getPosition()\r\n                                                                                                                                                                local position = origin + Vector(0.5 - (i % 2), 0.5 + math.floor(i / 2), 0)\r\n                                                                                                                                                                i = i + 1\r\n                                                                                                                                                                Combat.victoryPointTokenBag.takeObject({\r\n                                                                                                                                                                    position = position,\r\n                                                                                                                                                                    rotation = Vector(0, 180, 0),\r\n                                                                                                                                                                    smooth = true,\r\n                                                                                                                                                                    guid = token.guid,\r\n                                                                                                                                                                })\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        local objective = ConflictCard.getObjective(cardName)\r\n                                                                                                                                                        if objective then\r\n                                                                                                                                                            local bag = Combat.objectiveTokenBags[objective]\r\n                                                                                                                                                            assert(bag, objective)\r\n                                                                                                                                                            local origin = Combat.rewardTokenZone.getPosition()\r\n                                                                                                                                                            local position = origin + Vector(0.5 - 3, 0.5, 0)\r\n                                                                                                                                                            bag.takeObject({\r\n                                                                                                                                                                position = position,\r\n                                                                                                                                                                rotation = Vector(0, 180, 0),\r\n                                                                                                                                                                smooth = true,\r\n                                                                                                                                                                callback_function = function (token)\r\n                                                                                                                                                                    token.setGMNotes(cardName)\r\n                                                                                                                                                                    token.setName(I18N(cardName))\r\n                                                                                                                                                                end\r\n                                                                                                                                                            })\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        local controlableSpace = Combat.findControlableSpace(cardName)\r\n                                                                                                                                                        if controlableSpace then\r\n                                                                                                                                                            local color = MainBoard.getControllingPlayer(controlableSpace)\r\n                                                                                                                                                            if color then\r\n                                                                                                                                                                Park.transfert(1, PlayBoard.getSupplyPark(color), Combat.getBattlegroundPark())\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        broadcastToAll(I18N(\"announceCombat\", {combat = I18N(Helper.getID(card))}), \"Orange\")\r\n                                                                                                                                                    end)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.findControlableSpace(conflictName)\r\n                                                                                                                                                    for _, controlableSpaceName in ipairs({\"imperialBasin\", \"arrakeen\", \"spiceRefinery\"}) do\r\n                                                                                                                                                        if conflictName:find(controlableSpaceName:gsub(\"^%l\", string.upper)) then\r\n                                                                                                                                                            local controlableSpace = MainBoard.findControlableSpace(controlableSpaceName)\r\n                                                                                                                                                            assert(controlableSpace)\r\n                                                                                                                                                            return controlableSpace\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                    return nil\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.onObjectEnterZone(zone, object)\r\n                                                                                                                                                    if zone == Combat.combatCenterZone and Types.isUnit(object) then\r\n                                                                                                                                                        Combat._updateCombatForces(Combat._calculateCombatForces())\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.onObjectLeaveZone(zone, object)\r\n                                                                                                                                                    if zone == Combat.combatCenterZone and Types.isUnit(object) then\r\n                                                                                                                                                        Combat._updateCombatForces(Combat._calculateCombatForces())\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._createGarrisonPark(color, position)\r\n                                                                                                                                                    local slots = {}\r\n                                                                                                                                                    for i = 1, 4 do\r\n                                                                                                                                                        for j = 3, 1, -1 do\r\n                                                                                                                                                            local x = (PlayBoard.isLeft(color) and (2.5 - i) or (i - 2.5)) * 0.45\r\n                                                                                                                                                            local z = (j - 2) * 0.45\r\n                                                                                                                                                            local slot = position + Vector(x, 0.18, z)\r\n                                                                                                                                                            table.insert(slots, slot)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    local zone = Helper.markAsTransient(spawnObject({\r\n                                                                                                                                                        type = 'ScriptingTrigger',\r\n                                                                                                                                                        position = position,\r\n                                                                                                                                                        scale = Vector(2.3, 1, 2.3),\r\n                                                                                                                                                    }))\r\n\r\n                                                                                                                                                    local park = Park.createPark(\r\n                                                                                                                                                        color .. \"Garrison\",\r\n                                                                                                                                                        slots,\r\n                                                                                                                                                        Vector(0, 0, 0),\r\n                                                                                                                                                        {zone},\r\n                                                                                                                                                        {\"Troop\", color},\r\n                                                                                                                                                        nil,\r\n                                                                                                                                                        false,\r\n                                                                                                                                                    true)\r\n\r\n                                                                                                                                                    -- FIXME Hardcoded height, use an existing parent anchor.\r\n                                                                                                                                                    Helper.createTransientAnchor(\"Garrison anchor\", Vector(position.x, 0.6, position.z)).doAfter(function (anchor)\r\n                                                                                                                                                        park.anchor = anchor\r\n                                                                                                                                                        Combat._createButton(color, park)\r\n                                                                                                                                                    end)\r\n\r\n                                                                                                                                                    return park\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._createDreadnoughtPark(color, position)\r\n                                                                                                                                                    local dir = PlayBoard.isLeft(color) and - 1 or 1\r\n                                                                                                                                                    local updown = PlayBoard.isBottom(color) and - 1 or 1\r\n                                                                                                                                                    local slots = {\r\n                                                                                                                                                        -- original\r\n                                                                                                                                                        -- position + Vector(0.3 * dir, 0.2, -1.0),\r\n                                                                                                                                                        -- position + Vector(0.9 * dir, 0.2, -1.0),\r\n                                                                                                                                                        -- bloodlines slots\r\n                                                                                                                                                        -- position + Vector(-0.9 * dir, 0.2, -1.0 * updown),\r\n                                                                                                                                                        position + Vector(-0.4 * dir, 0.2, -0.9 * updown),\r\n                                                                                                                                                        position + Vector(0.1 * dir, 0.2, -0.9 * updown),\r\n                                                                                                                                                        position + Vector(0.6 * dir, 0.2, -0.9 * updown),\r\n                                                                                                                                                        position + Vector(1.1 * dir, 0.2, -0.9 * updown),\r\n                                                                                                                                                    }\r\n\r\n                                                                                                                                                    local zone = Park.createTransientBoundingZone(0, Vector(0.5, 2, 0.5), slots)\r\n\r\n                                                                                                                                                    local park = Park.createPark(\r\n                                                                                                                                                        color .. \"DreadnoughtGarrison\",\r\n                                                                                                                                                        slots,\r\n                                                                                                                                                        Vector(0, 0, 0),\r\n                                                                                                                                                        {zone},\r\n                                                                                                                                                        -- bloodlines added sardaukar commander tag\r\n                                                                                                                                                        {\"Dreadnought\", \"SardaukarCommander\", color},\r\n                                                                                                                                                        nil,\r\n                                                                                                                                                        false,\r\n                                                                                                                                                    true)\r\n                                                                                                                                                    -- bloodlines added tag union for sardaukar commander\r\n                                                                                                                                                    park.tagUnion = true\r\n\r\n                                                                                                                                                    return park\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._createBattlegroundPark(position)\r\n                                                                                                                                                    local slots = {}\r\n                                                                                                                                                    for j = 1, 8 do\r\n                                                                                                                                                        for i = 1, 8 do\r\n                                                                                                                                                            local x = (i - 4.5) * 0.5\r\n                                                                                                                                                            local z = (j - 4.5) * 0.5\r\n                                                                                                                                                            local slot = position + Vector(x, 0.18, z)\r\n                                                                                                                                                            table.insert(slots, slot)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                    Helper.shuffle(slots)\r\n\r\n                                                                                                                                                    Combat.combatCenterZone = Helper.markAsTransient(spawnObject({\r\n                                                                                                                                                        type = 'ScriptingTrigger',\r\n                                                                                                                                                        position = position,\r\n                                                                                                                                                        scale = Vector(6.6, 1, 5),\r\n                                                                                                                                                    }))\r\n\r\n                                                                                                                                                    local park = Park.createPark(\r\n                                                                                                                                                        \"Battleground\",\r\n                                                                                                                                                        slots,\r\n                                                                                                                                                        nil,\r\n                                                                                                                                                        {Combat.combatCenterZone},\r\n                                                                                                                                                        -- bloodlines added sardaukar commander and agent tags\r\n                                                                                                                                                        {\"Troop\", \"Dreadnought\", \"Sandworm\", \"SardaukarCommander\", \"Agent\"},\r\n                                                                                                                                                        nil,\r\n                                                                                                                                                        false,\r\n                                                                                                                                                    true)\r\n                                                                                                                                                    park.tagUnion = true\r\n\r\n                                                                                                                                                    return park\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._createButton(color, park)\r\n                                                                                                                                                    local position = park.anchor.getPosition()\r\n                                                                                                                                                    local areaColor = Color.fromString(color)\r\n                                                                                                                                                    areaColor:setAt('a', 0.3)\r\n                                                                                                                                                    Helper.createAbsoluteButtonWithRoundness(park.anchor, 7, {\r\n                                                                                                                                                        click_function = Helper.registerGlobalCallback(function (_, playerColor, altClick)\r\n                                                                                                                                                            if playerColor == color then\r\n                                                                                                                                                                if altClick then\r\n                                                                                                                                                                    Action.troops(color, \"garrison\", \"supply\", 1)\r\n                                                                                                                                                                else\r\n                                                                                                                                                                    Action.troops(color, \"supply\", \"garrison\", 1)\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end),\r\n                                                                                                                                                        position = Vector(position.x, 1.75, position.z),\r\n                                                                                                                                                        width = 1200,\r\n                                                                                                                                                        height = 1200,\r\n                                                                                                                                                        color = areaColor,\r\n                                                                                                                                                    tooltip = I18N(\"troopEdit\")})\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getGarrisonPark(color)\r\n                                                                                                                                                    return Combat.garrisonParks[color]\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getDreadnoughtPark(color)\r\n                                                                                                                                                    return Combat.dreadnoughtParks[color]\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getBattlegroundPark()\r\n                                                                                                                                                    return Combat.battlegroundPark\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.setDreadnoughtStrength(color, strength)\r\n                                                                                                                                                    Combat.dreadnoughtStrengths[color] = strength\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.isInCombat(color)\r\n                                                                                                                                                    for _, object in ipairs(Combat.combatCenterZone.getObjects()) do\r\n                                                                                                                                                        if Types.isUnit(object, color) then\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                    return false\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._calculateOutcomeTurnSequence(ranking)\r\n                                                                                                                                                    local distinctRanking = {}\r\n                                                                                                                                                    for i, color in ipairs(TurnControl.getPhaseTurnSequence()) do\r\n                                                                                                                                                        local rank = ranking[color]\r\n                                                                                                                                                        if rank then\r\n                                                                                                                                                            distinctRanking[color] = rank.value + i * 0.1\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    local combatEndTurnSequence = Helper.getKeys(ranking)\r\n                                                                                                                                                    table.sort(combatEndTurnSequence, function (c1, c2)\r\n                                                                                                                                                        return distinctRanking[c1] < distinctRanking[c2]\r\n                                                                                                                                                    end)\r\n\r\n                                                                                                                                                    return combatEndTurnSequence\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getRank(color)\r\n                                                                                                                                                    return Combat.ranking[color]\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._calculateRanking(forces)\r\n                                                                                                                                                    return Combat.__calculateRanking(forces, PlayBoard.getActivePlayBoardColors())\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.__calculateRanking(forces, activeColors)\r\n                                                                                                                                                    local ranking = {}\r\n\r\n                                                                                                                                                    local remainingForces = Helper.shallowCopy(forces)\r\n                                                                                                                                                    local potentialWinnerCount = #Helper.getKeys(activeColors) - 1\r\n\r\n                                                                                                                                                    local rank = 1\r\n                                                                                                                                                    while potentialWinnerCount > 0 do\r\n                                                                                                                                                        local rankWinners = {}\r\n                                                                                                                                                        local maxForce = 1\r\n                                                                                                                                                        for _, color in ipairs(activeColors) do\r\n                                                                                                                                                            if remainingForces[color] then\r\n                                                                                                                                                                if remainingForces[color] > maxForce then\r\n                                                                                                                                                                    rankWinners = {color}\r\n                                                                                                                                                                    maxForce = remainingForces[color]\r\n                                                                                                                                                                elseif remainingForces[color] == maxForce then\r\n                                                                                                                                                                    table.insert(rankWinners, color)\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        if #rankWinners == 0 then\r\n                                                                                                                                                            break;\r\n                                                                                                                                                        elseif #rankWinners > 1 then\r\n                                                                                                                                                            rank = rank + 1\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        if rank < 4 then\r\n                                                                                                                                                            for _, color in ipairs(rankWinners) do\r\n                                                                                                                                                                ranking[color] = {value = rank, exAequo = #rankWinners}\r\n                                                                                                                                                                potentialWinnerCount = potentialWinnerCount - 1\r\n                                                                                                                                                                remainingForces[color] = nil\r\n                                                                                                                                                            end\r\n                                                                                                                                                            rank = rank + 1\r\n                                                                                                                                                        else\r\n                                                                                                                                                            break\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    return ranking\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                -- bloodlines imperial throneship reveal\r\n                                                                                                                                                function Combat.getGarrisonCount(color)\r\n                                                                                                                                                    local garrisonPark = Combat.garrisonParks[color]\r\n                                                                                                                                                    local dreadnoughtPark = Combat.dreadnoughtParks[color]\r\n\r\n                                                                                                                                                    local garrisonObjects = Park.getObjects(garrisonPark)\r\n                                                                                                                                                    local dreadnoughtObjects = Park.getObjects(dreadnoughtPark)\r\n\r\n                                                                                                                                                    local garrisonCount = 0\r\n                                                                                                                                                    for _, object in ipairs(Helper.concatTables(garrisonObjects, dreadnoughtObjects)) do\r\n                                                                                                                                                        if Types.isUnit(object, color) then\r\n                                                                                                                                                            garrisonCount = garrisonCount + 1\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                    return garrisonCount\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getUnitCounts()\r\n                                                                                                                                                    local unitCounts = {}\r\n                                                                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                                                        unitCounts[color] = 0\r\n                                                                                                                                                        for _, object in ipairs(Combat.combatCenterZone.getObjects()) do\r\n                                                                                                                                                            if Types.isUnit(object, color) then\r\n                                                                                                                                                                unitCounts[color] = unitCounts[color] + 1\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                    return unitCounts\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._calculateCombatForces()\r\n                                                                                                                                                    local forces = {}\r\n                                                                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                                                        forces[color] = Combat.calculateCombatForce(color)\r\n                                                                                                                                                    end\r\n                                                                                                                                                    return forces\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.calculateCombatForce(color)\r\n                                                                                                                                                    local force = 0\r\n                                                                                                                                                    for _, object in ipairs(Combat.combatCenterZone.getObjects()) do\r\n                                                                                                                                                        if Types.isUnit(object, color) then\r\n                                                                                                                                                            if Types.isTroop(object, color) then\r\n                                                                                                                                                                force = force + 2\r\n                                                                                                                                                            elseif Types.isDreadnought(object, color) then\r\n                                                                                                                                                                force = force + (Combat.dreadnoughtStrengths[color] or 3)\r\n                                                                                                                                                            elseif Types.isSandworm(object, color) then\r\n                                                                                                                                                                force = force + 3\r\n                                                                                                                                                                -- bloodlines duncan agent strength\r\n                                                                                                                                                            elseif Types.isAgent(object, color) then\r\n                                                                                                                                                                if PlayBoard.getLeader(color).name == \"bl_Duncan\" then\r\n                                                                                                                                                                    if PlayBoard.hasSwordmaster(color) then\r\n                                                                                                                                                                        force = force + 3\r\n                                                                                                                                                                    else\r\n                                                                                                                                                                        force = force + 2\r\n                                                                                                                                                                    end\r\n                                                                                                                                                                else\r\n                                                                                                                                                                    force = force\r\n                                                                                                                                                                end\r\n                                                                                                                                                                -- bloodlines sardaukar commanders\r\n                                                                                                                                                            elseif Types.isSardaukarCommander(object, color) then\r\n                                                                                                                                                                force = force + 2\r\n                                                                                                                                                            else\r\n                                                                                                                                                                error(\"Unknown unit type: \" .. object.getGUID())\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    if force > 0 then\r\n                                                                                                                                                        force = force + PlayBoard.getResource(color, \"strength\"):get()\r\n                                                                                                                                                        if TurnControl.getPlayerCount() == 6 and Commander.isAlly(color) then\r\n                                                                                                                                                            local commander = Commander.getCommander(color)\r\n                                                                                                                                                            if color == Commander.getActivatedAlly(commander) then\r\n                                                                                                                                                                force = force + PlayBoard.getResource(commander, \"strength\"):get()\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    -- bloodlines sardaukar commander skill - canny\r\n                                                                                                                                                    local sc_Canny = PlayBoard.hasSkill(color, \"sc_Canny\")\r\n                                                                                                                                                    if sc_Canny and Combat.hasSardaukarCommander(color) then\r\n                                                                                                                                                        if Combat.agentInLandsraadSpace(color) then\r\n                                                                                                                                                            force = force + 2\r\n                                                                                                                                                        else\r\n                                                                                                                                                            force = force\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    -- bloodlines sardaukar commander skill - fierce\r\n                                                                                                                                                    local sc_Fierce = PlayBoard.hasSkill(color, \"sc_Fierce\")\r\n                                                                                                                                                    if sc_Fierce and Combat.hasSardaukarCommander(color) then\r\n                                                                                                                                                        local sandwormColors = Combat.getSandwormColor()\r\n\r\n                                                                                                                                                        local hasMatchingColor = false\r\n                                                                                                                                                        local hasDifferentColor = false\r\n\r\n                                                                                                                                                        if #sandwormColors > 0 then\r\n                                                                                                                                                            for _, sandwormColor in ipairs(sandwormColors) do\r\n                                                                                                                                                                if sandwormColor == color then\r\n                                                                                                                                                                    hasMatchingColor = true\r\n                                                                                                                                                                else\r\n                                                                                                                                                                    hasDifferentColor = true\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n\r\n                                                                                                                                                            if hasDifferentColor and hasMatchingColor then\r\n                                                                                                                                                                force = force + 2\r\n                                                                                                                                                            elseif hasDifferentColor then\r\n                                                                                                                                                                force = force + 2\r\n                                                                                                                                                            elseif hasMatchingColor then\r\n                                                                                                                                                                force = force + 1\r\n                                                                                                                                                            end\r\n                                                                                                                                                        else\r\n                                                                                                                                                            force = force + 1\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    -- bloodlines sardaukar commander skill - loyal\r\n                                                                                                                                                    local sc_Loyal = PlayBoard.hasSkill(color, \"sc_Loyal\")\r\n                                                                                                                                                    if sc_Loyal and Combat.hasSardaukarCommander(color) then\r\n                                                                                                                                                        if InfluenceTrack.getInfluence(\"emperor\", color) >= 3 then\r\n                                                                                                                                                            force = force + 2\r\n                                                                                                                                                        else\r\n                                                                                                                                                            force = force\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    return force\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat._updateCombatForces(forces)\r\n                                                                                                                                                    local occupations = {}\r\n\r\n                                                                                                                                                    -- TODO Better having a zone with filtering tags.\r\n                                                                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do\r\n                                                                                                                                                        if not Commander.isCommander(color) then\r\n                                                                                                                                                            local force = forces[color]\r\n\r\n                                                                                                                                                            local minorForce = force > 0 and (force - 1) % 20 + 1 or 0\r\n                                                                                                                                                            local majorForce = force > 0 and math.floor((force - 1) / 20) or 0\r\n\r\n                                                                                                                                                            occupations[minorForce] = (occupations[minorForce] or 0) + 1\r\n                                                                                                                                                            local heightOffset = Vector(\r\n                                                                                                                                                                0,\r\n                                                                                                                                                                (occupations[minorForce] - 1) * 0.35\r\n                                                                                                                                                                + math.min(1, majorForce) * 0.30, -- Last part is here because the rotation center for the tokens is not the barycenter.\r\n                                                                                                                                                            0)\r\n\r\n                                                                                                                                                            local forceMarker = PlayBoard.getContent(color).forceMarker\r\n                                                                                                                                                            if force > 0 then\r\n                                                                                                                                                                forceMarker.setPositionSmooth(Combat.combatForcePositions[minorForce] + heightOffset, false, false)\r\n                                                                                                                                                                forceMarker.setRotationSmooth(Vector(0, 180 + 90 * math.floor(majorForce / 2), 180 * math.min(1, majorForce)))\r\n\r\n                                                                                                                                                                forces[color] = force\r\n                                                                                                                                                            else\r\n                                                                                                                                                                forceMarker.setPositionSmooth(Combat.noCombatForcePositions + heightOffset, false, false)\r\n                                                                                                                                                                forceMarker.setRotationSmooth(Vector(0, 180, 0))\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    Helper.emitEvent(\"combatUpdate\", forces)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getNumberOfDreadnoughtsInConflict(color)\r\n                                                                                                                                                    return #Combat.getDreadnoughtsInConflict(color)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getDreadnoughtsInConflict(color)\r\n                                                                                                                                                    local dreadnoughts = {}\r\n                                                                                                                                                    for _, object in ipairs(Combat.combatCenterZone.getObjects()) do\r\n                                                                                                                                                        if Types.isDreadnought(object, color) then\r\n                                                                                                                                                            table.insert(dreadnoughts, object)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                    return dreadnoughts\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getCurrentConflictName()\r\n                                                                                                                                                    local deckOrCard = Helper.getDeckOrCard(Combat.conflictDiscardZone)\r\n                                                                                                                                                    assert(deckOrCard)\r\n                                                                                                                                                    if deckOrCard.type == \"Deck\" then\r\n                                                                                                                                                        local objects = deckOrCard.getObjects()\r\n                                                                                                                                                        return Helper.getID(objects[#objects])\r\n                                                                                                                                                    else\r\n                                                                                                                                                        return Helper.getID(deckOrCard)\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.isCurrentConflictBehindTheWall()\r\n                                                                                                                                                    local conflictName = Combat.getCurrentConflictName()\r\n                                                                                                                                                    return ConflictCard.isBehindTheWall(conflictName)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getCurrentConflictLevel()\r\n                                                                                                                                                    return ConflictCard.getLevel(Combat.getCurrentConflictName())\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.gainVictoryPoint(color, name, count)\r\n\r\n                                                                                                                                                    -- We memoize the tokens granted in fast succession to avoid returning the same twice or more.\r\n                                                                                                                                                    if not Combat.grantedTokens then\r\n                                                                                                                                                        Combat.grantedTokens = {}\r\n                                                                                                                                                        Helper.onceTimeElapsed(0.25).doAfter(function ()\r\n                                                                                                                                                            Combat.grantedTokens = nil\r\n                                                                                                                                                        end)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    local remaining = count or 1\r\n                                                                                                                                                    for _, object in ipairs(Combat.rewardTokenZone.getObjects()) do\r\n                                                                                                                                                        if Types.isVictoryPointToken(object) and Helper.getID(object) == name and not Combat.grantedTokens[object] then\r\n                                                                                                                                                            Combat.grantedTokens[object] = true\r\n                                                                                                                                                            PlayBoard.grantScoreToken(color, object)\r\n                                                                                                                                                            remaining = remaining - 1\r\n                                                                                                                                                            if remaining == 0 then\r\n                                                                                                                                                                return true\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    return false\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.gainObjective(color, objective)\r\n                                                                                                                                                    local continuation = Helper.createContinuation(\"Combat.gainObjective\")\r\n                                                                                                                                                    local position = PlayBoard.getObjectiveStackPosition(color, objective)\r\n                                                                                                                                                    local tag = Helper.toPascalCase(objective, \"ObjectiveToken\")\r\n\r\n                                                                                                                                                    for _, object in ipairs(Combat.rewardTokenZone.getObjects()) do\r\n                                                                                                                                                        if object.hasTag(tag) then\r\n                                                                                                                                                            object.setPositionSmooth(position + Vector(0, 1, 0))\r\n                                                                                                                                                            Helper.onceMotionless(object).doAfter(continuation.run)\r\n                                                                                                                                                            return continuation\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    local bag = Combat.objectiveTokenBags[objective]\r\n                                                                                                                                                    assert(bag, objective)\r\n                                                                                                                                                    bag.takeObject({\r\n                                                                                                                                                        position = position + Vector(0, 1, 0),\r\n                                                                                                                                                        rotation = Vector(0, 180, 0),\r\n                                                                                                                                                        smooth = true,\r\n                                                                                                                                                        callback_function = function (token)\r\n                                                                                                                                                            Helper.onceMotionless(token).doAfter(continuation.run)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    })\r\n\r\n                                                                                                                                                    return continuation\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.showRanking(turnSequence, ranking)\r\n                                                                                                                                                    local rankNames = {\"first\", \"second\", \"third\", \"fourth\"}\r\n                                                                                                                                                    for _, color in ipairs(turnSequence) do\r\n                                                                                                                                                        local rank = ranking[color]\r\n                                                                                                                                                        local key = rankNames[rank.value] .. (rank.exAequo > 1 and \"ExAequo\" or \"\") .. \"InCombat\"\r\n                                                                                                                                                        printToAll(I18N(key, {leader = PlayBoard.getLeaderName(color)}), color)\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getMakerHookPosition(color)\r\n                                                                                                                                                    return Combat.makerHookPositions[color]\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.callSandworm(color, count)\r\n                                                                                                                                                    local battlegroundPark = Combat.getBattlegroundPark()\r\n                                                                                                                                                    if count < 0 then\r\n                                                                                                                                                        local remaining = -count\r\n                                                                                                                                                        for _, object in ipairs(Park.getObjects(battlegroundPark)) do\r\n                                                                                                                                                            if Types.isSandworm(object, color) then\r\n                                                                                                                                                                object.destruct()\r\n                                                                                                                                                                remaining = remaining - 1\r\n                                                                                                                                                                if remaining == 0 then\r\n                                                                                                                                                                    break\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    else\r\n                                                                                                                                                        for _ = 1, count do\r\n                                                                                                                                                            local sandworm = Combat.protoSandworm.clone({\r\n                                                                                                                                                            position = Park.getPosition(battlegroundPark) - Vector(0, 20, 0)})\r\n                                                                                                                                                            sandworm.addTag(\"Sandworm\")\r\n                                                                                                                                                            sandworm.addTag(color)\r\n                                                                                                                                                            sandworm.setRotation(Vector(0, math.random(360), 0))\r\n                                                                                                                                                            sandworm.setScale(sandworm.getScale():copy():scale(1 / 1.5))\r\n                                                                                                                                                            sandworm.setColorTint(color)\r\n                                                                                                                                                            Park.putObject(sandworm, battlegroundPark)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.hasSandworms(color)\r\n                                                                                                                                                    local battlegroundPark = Combat.getBattlegroundPark()\r\n                                                                                                                                                    for _, object in ipairs(Park.getObjects(battlegroundPark)) do\r\n                                                                                                                                                        if Types.isSandworm(object, color) then\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                    return false\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                -- bloodlines sardaukar commander skill - fierce\r\n                                                                                                                                                function Combat.getSandwormColor(color)\r\n                                                                                                                                                    local battlegroundPark = Combat.getBattlegroundPark()\r\n                                                                                                                                                    local sandwormColors = {}\r\n\r\n                                                                                                                                                    for _, object in ipairs(Park.getObjects(battlegroundPark)) do\r\n                                                                                                                                                        if Types.isSandworm(object, color) then\r\n                                                                                                                                                            local sandwormTags = object.getTags()\r\n\r\n                                                                                                                                                            for _, tag in ipairs(sandwormTags) do\r\n                                                                                                                                                                if tag == \"Red\" or tag == \"Green\" or tag == \"Yellow\" or tag == \"Blue\" then\r\n                                                                                                                                                                    table.insert(sandwormColors, tag)\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    return sandwormColors\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                -- bloodlines sardaukar commanders\r\n                                                                                                                                                function Combat.recruitSardaukarCommander(color, count)\r\n                                                                                                                                                    local garrisonPark = Combat.dreadnoughtParks[color]\r\n                                                                                                                                                    local sardaukarCommander = Combat.protoSardaukarCommander.clone({\r\n                                                                                                                                                    position = Park.getPosition(garrisonPark)})\r\n                                                                                                                                                    sardaukarCommander.setRotation(Vector(0, 180, 0))\r\n                                                                                                                                                    sardaukarCommander.addTag(\"SardaukarCommander\")\r\n                                                                                                                                                    sardaukarCommander.addTag(color)\r\n                                                                                                                                                    sardaukarCommander.setColorTint(color)\r\n                                                                                                                                                    Park.putObject(sardaukarCommander, garrisonPark)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                -- bloodlines sardaukar commanders\r\n                                                                                                                                                function Combat.hasSardaukarCommander(color)\r\n                                                                                                                                                    local battlegroundPark = Combat.getBattlegroundPark()\r\n                                                                                                                                                    for _, object in ipairs(Park.getObjects(battlegroundPark)) do\r\n                                                                                                                                                        if Types.isSardaukarCommander(object, color) then\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                    return false\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                -- bloodlines sardaukar commander skill - canny\r\n                                                                                                                                                function Combat.agentInLandsraadSpace(color)\r\n                                                                                                                                                    for _, space in ipairs(MainBoard.getLandsraadSpaces()) do\r\n                                                                                                                                                        if MainBoard.hasAgentInSpace(space, color) then\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n                                                                                                                                                    return false\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function Combat.getCombatCenterZone()\r\n                                                                                                                                                    return Combat.combatCenterZone\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                return Combat\r\n\r\n                                                                                                                                            end)\r\n                                                                                                                                            __bundle_register(\"SardaukarSkillMarket\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                                local Module = require(\"utils.Module\")\r\n                                                                                                                                                local Helper = require(\"utils.Helper\")\r\n                                                                                                                                                local AcquireCard = require(\"utils.AcquireCard\")\r\n                                                                                                                                                local Park = require(\"utils.Park\")\r\n                                                                                                                                                local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                                                                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                                                                local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                                                                                                local Commander = Module.lazyRequire(\"Commander\")\r\n\r\n                                                                                                                                                local SardaukarSkillMarket = {\r\n                                                                                                                                                    acquireCards = {},\r\n                                                                                                                                                }\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function SardaukarSkillMarket.onLoad(state)\r\n                                                                                                                                                    Helper.append(SardaukarSkillMarket, Helper.resolveGUIDs(false, {\r\n                                                                                                                                                        deck = 'fca82e',\r\n                                                                                                                                                        deckZone = 'ae4b3a',\r\n                                                                                                                                                        skillSlots = {\r\n                                                                                                                                                            '57f7e0',\r\n                                                                                                                                                            '48ab99',\r\n                                                                                                                                                            '73db1d',\r\n                                                                                                                                                            '7e3e07',\r\n                                                                                                                                                        },\r\n                                                                                                                                                    }))\r\n\r\n                                                                                                                                                    if state.settings then\r\n                                                                                                                                                        SardaukarSkillMarket._transientSetUp(state.settings)\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function SardaukarSkillMarket.setUp(settings)\r\n                                                                                                                                                    SardaukarSkillMarket._transientSetUp(settings)\r\n                                                                                                                                                    Helper.shuffleDeck(SardaukarSkillMarket.deck)\r\n                                                                                                                                                    Helper.onceShuffled(SardaukarSkillMarket.deck).doAfter(function ()\r\n                                                                                                                                                        for i, _ in ipairs(SardaukarSkillMarket.skillSlots) do\r\n                                                                                                                                                            SardaukarSkillMarket._replenish(i)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function SardaukarSkillMarket._transientSetUp(settings)\r\n                                                                                                                                                    SardaukarSkillMarket.acquireCards = {}\r\n\r\n                                                                                                                                                    for i, zone in ipairs(SardaukarSkillMarket.skillSlots) do\r\n                                                                                                                                                        local acquireCard = AcquireCard.new(zone, \"SardaukarSkill\", PlayBoard.withLeader(function (_, color)\r\n                                                                                                                                                            local leader = PlayBoard.getLeader(color)\r\n                                                                                                                                                            leader.pickSkill(color, i)\r\n                                                                                                                                                        end))\r\n\r\n                                                                                                                                                        acquireCard.groundHeight = acquireCard.groundHeight + 0.2\r\n                                                                                                                                                        table.insert(SardaukarSkillMarket.acquireCards, acquireCard)\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function SardaukarSkillMarket.acquireSkill(indexInRow, color)\r\n                                                                                                                                                    local acquireCard = SardaukarSkillMarket.acquireCards[indexInRow]\r\n                                                                                                                                                    local objects = acquireCard.zone.getObjects()\r\n\r\n                                                                                                                                                    if #objects > 0 then\r\n                                                                                                                                                        local skill = objects[1]\r\n                                                                                                                                                        printToAll(I18N(\"acquireSkill\", {name = I18N(Helper.getID(skill))}), color)\r\n                                                                                                                                                        PlayBoard.grantSkillTile(color, skill, false)\r\n                                                                                                                                                        SardaukarSkillMarket._replenish(indexInRow)\r\n                                                                                                                                                        return true\r\n                                                                                                                                                    else\r\n                                                                                                                                                        return false\r\n                                                                                                                                                    end\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function SardaukarSkillMarket._replenish(indexInRow)\r\n                                                                                                                                                    local acquireCard = SardaukarSkillMarket.acquireCards[indexInRow]\r\n                                                                                                                                                    local position = acquireCard.zone.getPosition()\r\n\r\n                                                                                                                                                    Helper.moveCardFromZone(SardaukarSkillMarket.deckZone, position, Vector(0, 180, 0), true)\r\n                                                                                                                                                end\r\n\r\n                                                                                                                                                return SardaukarSkillMarket\r\n\r\n                                                                                                                                            end)\r\n                                                                                                                                            __bundle_register(\"ChoamContractMarket\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                                local Module = require(\"utils.Module\")\r\n                                                                                                                                                local Helper = require(\"utils.Helper\")\r\n                                                                                                                                                local AcquireCard = require(\"utils.AcquireCard\")\r\n                                                                                                                                                local Park = require(\"utils.Park\")\r\n                                                                                                                                                local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                                                                local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                                                                local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                                                                                                local Commander = Module.lazyRequire(\"Commander\")\r\n\r\n                                                                                                                                                local ChoamContractMarket = {\r\n                                                                                                                                                    contracts = {},\r\n                                                                                                                                                    ixContracts = {},\r\n                                                                                                                                                    acquireCards = {},\r\n                                                                                                                                                    contractSlots = {},\r\n                                                                                                                                                }\r\n\r\n                                                                                                                                                ---\r\n                                                                                                                                                function ChoamContractMarket.onLoad(state)\r\n                                                                                                                                                    Helper.append(ChoamContractMarket, Helper.resolveGUIDs(false, {\r\n                                                                                                                                                        contractBags = {\r\n                                                                                                                                                            en = \"099d8b\",\r\n                                                                                                                                                            fr = \"fb05ac\",\r\n                                                                                                                                                        }}))\r\n\r\n                                                                                                                                                        ChoamContractMarket.contracts = {\r\n                                                                                                                                                            harvest3orMore = Helper.never(), -- MainBoard.isDesertSpace, -- x2\r\n                                                                                                                                                            harvest4orMore = Helper.never(), -- MainBoard.isDesertSpace,\r\n                                                                                                                                                            deliverSupplies = Helper.equal(\"deliverSupplies\"),\r\n                                                                                                                                                            highCouncilWithSolaris = Helper.equal(\"highCouncil\"),\r\n                                                                                                                                                            highCouncilWithInfluence = Helper.equal(\"highCouncil\"),\r\n                                                                                                                                                            acquireTheSpiceMustFlow = Helper.never(),\r\n                                                                                                                                                            immediate = Helper.never(),\r\n                                                                                                                                                            researchStation = Helper.equal(\"researchStation\"), -- with just solaris\r\n                                                                                                                                                            researchStationWithSpy = Helper.equal(\"researchStation\"),\r\n                                                                                                                                                            espionage = Helper.equal(\"espionage\"), -- x2\r\n                                                                                                                                                            heighlinerWithWater = Helper.equal(\"heighliner\"),\r\n                                                                                                                                                            heighlinerWithTroops = Helper.equal(\"heighliner\"),\r\n                                                                                                                                                            sardaukarWithCards = Helper.equal(\"sardaukar\"),\r\n                                                                                                                                                            sardaukarWithRecall = Helper.equal(\"sardaukar\"),\r\n                                                                                                                                                            spiceRefineryWithCards = Helper.equal(\"spiceRefinery\"),\r\n                                                                                                                                                            spiceRefineryWithWater = Helper.equal(\"spiceRefinery\"),\r\n                                                                                                                                                            arrakeenWithWater = Helper.equal(\"arrakeen\"),\r\n                                                                                                                                                            arrakeenWithSpy = Helper.equal(\"arrakeen\"),\r\n                                                                                                                                                        }\r\n\r\n                                                                                                                                                        ChoamContractMarket.ixContracts = {\r\n                                                                                                                                                            dreadnought = Helper.equal(\"dreadnought\"),\r\n                                                                                                                                                            techNegotiation = Helper.equal(\"techNegotiation\"),\r\n                                                                                                                                                            highCouncilWithTech = Helper.equal(\"highCouncil\"),\r\n                                                                                                                                                            interstellarShipping = Helper.equal(\"interstellarShipping\"),\r\n                                                                                                                                                            harvest3orMoreWithTech = Helper.never(), -- MainBoard.isDesertSpace,\r\n                                                                                                                                                            harvest4orMoreWithTech = Helper.never(), -- MainBoard.isDesertSpace,\r\n                                                                                                                                                            smuggling = Helper.equal(\"smuggling\"),\r\n                                                                                                                                                            heighlinerWithTech = Helper.equal(\"heighliner\"),\r\n                                                                                                                                                            espionageWithTech = Helper.equal(\"espionage\"),\r\n                                                                                                                                                            secretsWithTech = Helper.equal(\"secrets\"),\r\n                                                                                                                                                        }\r\n\r\n                                                                                                                                                        ChoamContractMarket.enabled = false\r\n                                                                                                                                                        if state.settings and state.settings.useContracts then\r\n                                                                                                                                                            ChoamContractMarket._transientSetUp(state.settings)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function ChoamContractMarket.setUp(settings)\r\n                                                                                                                                                        if settings.useContracts then\r\n                                                                                                                                                            ChoamContractMarket._transientSetUp(settings)\r\n\r\n                                                                                                                                                            assert(ChoamContractMarket.contractBag, \"No contract bag!\")\r\n                                                                                                                                                            Helper.shuffleDeck(ChoamContractMarket.contractBag)\r\n                                                                                                                                                            Helper.onceShuffled(ChoamContractMarket.contractBag).doAfter(function ()\r\n\r\n                                                                                                                                                                local ixContratCountForEachPlayer = {}\r\n                                                                                                                                                                if settings.riseOfIx then\r\n                                                                                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors(true)) do\r\n                                                                                                                                                                        if not Commander.isCommander(color) then\r\n                                                                                                                                                                            ixContratCountForEachPlayer[color] = 2\r\n                                                                                                                                                                        end\r\n                                                                                                                                                                    end\r\n                                                                                                                                                                end\r\n\r\n                                                                                                                                                                local trashHeight = 1\r\n                                                                                                                                                                for _, object in ipairs(ChoamContractMarket.contractBag.getObjects()) do\r\n                                                                                                                                                                    if Helper.isElementOf(\"IxContract\", object.tags) then\r\n                                                                                                                                                                        local taken = false\r\n                                                                                                                                                                        for color, count in pairs(ixContratCountForEachPlayer) do\r\n                                                                                                                                                                            if count > 0 then\r\n                                                                                                                                                                                ixContratCountForEachPlayer[color] = count - 1\r\n                                                                                                                                                                                local emptySlots = Park.findEmptySlots(PlayBoard.getRevealCardPark(color))\r\n                                                                                                                                                                                ChoamContractMarket.contractBag.takeObject({\r\n                                                                                                                                                                                    position = emptySlots[count],\r\n                                                                                                                                                                                    rotation = Vector(0, 180, 0),\r\n                                                                                                                                                                                    guid = object.guid,\r\n                                                                                                                                                                                })\r\n                                                                                                                                                                                taken = true\r\n                                                                                                                                                                                break\r\n                                                                                                                                                                            end\r\n                                                                                                                                                                        end\r\n                                                                                                                                                                        if not taken then\r\n                                                                                                                                                                            ChoamContractMarket.contractBag.takeObject({\r\n                                                                                                                                                                                position = getObjectFromGUID('ef8614').getPosition() + Vector(0, trashHeight * 0.5, 0),\r\n                                                                                                                                                                                rotation = Vector(0, 180, 0),\r\n                                                                                                                                                                                guid = object.guid,\r\n                                                                                                                                                                            })\r\n                                                                                                                                                                            trashHeight = trashHeight + 1\r\n                                                                                                                                                                        end\r\n                                                                                                                                                                    end\r\n                                                                                                                                                                end\r\n\r\n                                                                                                                                                                for i, _ in ipairs(ChoamContractMarket.contractSlots) do\r\n                                                                                                                                                                    ChoamContractMarket._replenish(i)\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end)\r\n                                                                                                                                                        else\r\n                                                                                                                                                            ChoamContractMarket._tearDown()\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function ChoamContractMarket._transientSetUp(settings)\r\n                                                                                                                                                        ChoamContractMarket.enabled = true\r\n\r\n                                                                                                                                                        local barycenter = Vector(0, 0, 0)\r\n                                                                                                                                                        for language, bag in pairs(ChoamContractMarket.contractBags) do\r\n                                                                                                                                                            barycenter = barycenter + bag.getPosition()\r\n                                                                                                                                                            if language == settings.language then\r\n                                                                                                                                                                ChoamContractMarket.contractBag = bag\r\n                                                                                                                                                            else\r\n                                                                                                                                                                bag.destruct()\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                        barycenter = barycenter * (1.0 / #Helper.getKeys(ChoamContractMarket.contractBags))\r\n                                                                                                                                                        ChoamContractMarket.contractBag.setPosition(barycenter)\r\n                                                                                                                                                        ChoamContractMarket.contractBags = nil\r\n\r\n                                                                                                                                                        ChoamContractMarket._processSnapPoints(settings)\r\n\r\n                                                                                                                                                        for i, zone in ipairs(ChoamContractMarket.contractSlots) do\r\n                                                                                                                                                            local acquireCard = AcquireCard.new(zone, \"Contract\", PlayBoard.withLeader(function (_, color)\r\n                                                                                                                                                                local leader = PlayBoard.getLeader(color)\r\n                                                                                                                                                                leader.pickContract(color, i)\r\n                                                                                                                                                            end))\r\n                                                                                                                                                            acquireCard.groundHeight = acquireCard.groundHeight + 0.1\r\n                                                                                                                                                            acquireCard.cardHeight = 0.2\r\n                                                                                                                                                            table.insert(ChoamContractMarket.acquireCards, acquireCard)\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        Helper.registerEventListener(\"agentSent\", function (color, spaceName)\r\n                                                                                                                                                            local parentSpaceName = MainBoard.findParentSpaceName(spaceName)\r\n                                                                                                                                                            local contracts = PlayBoard.getOpenContracts(color)\r\n                                                                                                                                                            for i, contract in ipairs(contracts) do\r\n                                                                                                                                                                local contractName = Helper.getID(contract)\r\n                                                                                                                                                                local contractLocator = ChoamContractMarket.contracts[contractName] or ChoamContractMarket.ixContracts[contractName]\r\n                                                                                                                                                                if contractLocator and contractLocator(parentSpaceName) then\r\n                                                                                                                                                                    broadcastToAll(I18N(\"fulfilledContract\", {contract = I18N(contractName)}), color)\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function ChoamContractMarket._tearDown()\r\n                                                                                                                                                        for _, bag in pairs(ChoamContractMarket.contractBags) do\r\n                                                                                                                                                            bag.destruct()\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function ChoamContractMarket.isEnabled()\r\n                                                                                                                                                        return ChoamContractMarket.enabled\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function ChoamContractMarket._processSnapPoints(settings)\r\n                                                                                                                                                        ChoamContractMarket.contractSlots = {}\r\n\r\n                                                                                                                                                        MainBoard.collectSnapPointsOnAllBoards(settings, {\r\n\r\n                                                                                                                                                            contract = function (name, position)\r\n                                                                                                                                                                local zone = spawnObject({\r\n                                                                                                                                                                    type = 'ScriptingTrigger',\r\n                                                                                                                                                                    position = position,\r\n                                                                                                                                                                    scale = {2.2, 1, 1.4},\r\n                                                                                                                                                                })\r\n                                                                                                                                                                Helper.markAsTransient(zone)\r\n                                                                                                                                                                local indexInRow = tonumber(name:sub(5))\r\n                                                                                                                                                                if indexInRow then\r\n                                                                                                                                                                    ChoamContractMarket.contractSlots[indexInRow] = zone\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end,\r\n                                                                                                                                                        })\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function ChoamContractMarket.acquireContract(indexInRow, color)\r\n                                                                                                                                                        local acquireCard = ChoamContractMarket.acquireCards[indexInRow]\r\n                                                                                                                                                        local objects = acquireCard.zone.getObjects()\r\n                                                                                                                                                        if #objects > 0 then\r\n                                                                                                                                                            local contract = objects[1]\r\n                                                                                                                                                            printToAll(I18N(\"acquireContract\", {name = I18N(Helper.getID(contract))}), color)\r\n                                                                                                                                                            PlayBoard.grantContractTile(color, contract, false)\r\n                                                                                                                                                            ChoamContractMarket._replenish(indexInRow)\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function ChoamContractMarket._replenish(indexInRow)\r\n                                                                                                                                                        local acquireCard = ChoamContractMarket.acquireCards[indexInRow]\r\n                                                                                                                                                        local position = acquireCard.zone.getPosition()\r\n                                                                                                                                                        if ChoamContractMarket.contractBag.getQuantity() > 0 then\r\n                                                                                                                                                            ChoamContractMarket.contractBag.takeObject({\r\n                                                                                                                                                                position = position,\r\n                                                                                                                                                                rotation = Vector(0, 180, 0),\r\n                                                                                                                                                                smooth = true,\r\n                                                                                                                                                            })\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function ChoamContractMarket.takeAnySardaukarContract(position)\r\n\r\n                                                                                                                                                        for _, object in ipairs(ChoamContractMarket.contractBag.getObjects()) do\r\n                                                                                                                                                            assert(object.guid)\r\n                                                                                                                                                            if Helper.isElementOf(\"SardaukarContract\", object.tags) then\r\n                                                                                                                                                                ChoamContractMarket.contractBag.takeObject({\r\n                                                                                                                                                                    position = position,\r\n                                                                                                                                                                    rotation = Vector(0, 180, 0),\r\n                                                                                                                                                                    guid = object.guid,\r\n                                                                                                                                                                })\r\n                                                                                                                                                                return\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        for indexInRow, acquireCard in ipairs(ChoamContractMarket.acquireCards) do\r\n                                                                                                                                                            for _, object in ipairs(acquireCard.zone.getObjects()) do\r\n                                                                                                                                                                if object.hasTag(\"Contract\") and object.hasTag(\"SardaukarContract\") then\r\n                                                                                                                                                                    object.setPosition(position)\r\n                                                                                                                                                                    ChoamContractMarket._replenish(indexInRow)\r\n                                                                                                                                                                    return\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    return ChoamContractMarket\r\n\r\n                                                                                                                                                end)\r\n                                                                                                                                                __bundle_register(\"Board\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                                    local Module = require(\"utils.Module\")\r\n                                                                                                                                                    local Helper = require(\"utils.Helper\")\r\n                                                                                                                                                    local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                                                                    local Locale = Module.lazyRequire(\"Locale\")\r\n\r\n                                                                                                                                                    local Board = {\r\n                                                                                                                                                        allInitialBoards = {\r\n                                                                                                                                                            mainBoard = {\r\n                                                                                                                                                                mainBoard4P = \"483a1a\",\r\n                                                                                                                                                                mainBoard6P = \"21cc52\",\r\n                                                                                                                                                            },\r\n                                                                                                                                                            emperorBoard = \"4cb9ba\",\r\n                                                                                                                                                            fremenBoard = \"01c575\",\r\n                                                                                                                                                            shippingBoard = \"0b9dfe\",\r\n                                                                                                                                                            -- bloodlines disable\r\n                                                                                                                                                            -- ixBoard = \"d75455\",\r\n                                                                                                                                                            -- bloodlines add bl_TechBoard\r\n                                                                                                                                                            bl_TechBoard = \"c6985a\",\r\n                                                                                                                                                            tleilaxBoard = \"d5c2db\",\r\n                                                                                                                                                        },\r\n                                                                                                                                                        --[[\r\n        boardLocations[<baseBoardName.locale>] = {\r\n            rootBaseBoardName = <mainBoard for mainBoard4P/6P, otherwise same as baseBoardName>,\r\n            baseBoardName = <idem>,\r\n            object = <the actual object if it exists>,\r\n            active = <is the object alive on the primary table?>,\r\n        }\r\n    ]]\r\n                                                                                                                                                    boardLocations = {}}\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Board.rebuildPreloadAreas()\r\n                                                                                                                                                        Locale.onLoad()\r\n\r\n                                                                                                                                                        local prebuildZone = getObjectFromGUID(\"23f2b5\")\r\n                                                                                                                                                        local secondaryTable = getObjectFromGUID(\"662ced\")\r\n\r\n                                                                                                                                                        for _, object in ipairs(prebuildZone.getObjects()) do\r\n                                                                                                                                                            -- Preserve the secondary table.\r\n                                                                                                                                                            if object ~= secondaryTable then\r\n                                                                                                                                                                object.destruct()\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        for boardName, content in pairs(Board.allInitialBoards) do\r\n                                                                                                                                                            if type(content) == \"table\" then\r\n                                                                                                                                                                local board = nil\r\n                                                                                                                                                                for _, guid in pairs(content) do\r\n                                                                                                                                                                    board = board or getObjectFromGUID(guid)\r\n                                                                                                                                                                end\r\n                                                                                                                                                                assert(board, boardName)\r\n                                                                                                                                                                local height = 0\r\n                                                                                                                                                                for stateBoardName, _ in pairs(content) do\r\n                                                                                                                                                                    height = height + Board._cloneBoard(stateBoardName, board, height)\r\n                                                                                                                                                                end\r\n                                                                                                                                                            else\r\n                                                                                                                                                                local board = getObjectFromGUID(content)\r\n                                                                                                                                                                assert(board, boardName)\r\n                                                                                                                                                                Board._cloneBoard(boardName, board, 0)\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Board._cloneBoard(baseBoardName, board, height)\r\n                                                                                                                                                        local boardName = Helper.getID(board)\r\n                                                                                                                                                        assert(boardName and boardName:len() > 0, \"Unidentified board: \" .. board.getGUID())\r\n\r\n                                                                                                                                                        local baseName = Board._getBaseName(boardName)\r\n                                                                                                                                                        assert(baseName, \"Malformed id: \" .. tostring(boardName))\r\n                                                                                                                                                        local namedIds = {\r\n                                                                                                                                                        [baseName] = board.getStateId()}\r\n                                                                                                                                                        local states = board.getStates()\r\n                                                                                                                                                        if states then\r\n                                                                                                                                                            for _, state in ipairs(states) do\r\n                                                                                                                                                                namedIds[Board._getBaseName(Helper.getID(state))] = state.id\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        local allSupports = {\r\n                                                                                                                                                            fr = require(\"fr.Board\"),\r\n                                                                                                                                                            en = require(\"en.Board\"),\r\n                                                                                                                                                        }\r\n\r\n                                                                                                                                                        local count = 0\r\n                                                                                                                                                        for locale, boardSet in pairs(allSupports) do\r\n                                                                                                                                                            local expectedBoardName = Board._toBoardName(baseBoardName, locale)\r\n                                                                                                                                                            if boardName ~= expectedBoardName then\r\n                                                                                                                                                                local boardImage = boardSet[baseBoardName]\r\n                                                                                                                                                                if boardImage then\r\n                                                                                                                                                                    local clonedBoard = board.clone()\r\n                                                                                                                                                                    local finalHeight = (height + count) * 3\r\n                                                                                                                                                                    Helper.onceTimeElapsed(0.5).doAfter(function ()\r\n                                                                                                                                                                        local continuation = Helper.createContinuation(\"setState\")\r\n\r\n                                                                                                                                                                        local expectedStateId = namedIds[baseBoardName]\r\n                                                                                                                                                                        if board.getStateId() ~= expectedStateId then\r\n                                                                                                                                                                            clonedBoard = clonedBoard.setState(expectedStateId)\r\n                                                                                                                                                                            Helper.onceTimeElapsed(0.5).doAfter(function ()\r\n                                                                                                                                                                                continuation.run(clonedBoard)\r\n                                                                                                                                                                            end)\r\n                                                                                                                                                                        else\r\n                                                                                                                                                                            continuation.run(clonedBoard)\r\n                                                                                                                                                                        end\r\n\r\n                                                                                                                                                                        continuation.doAfter(function (finalClonedBoard)\r\n                                                                                                                                                                            local parameters = finalClonedBoard.getCustomObject()\r\n                                                                                                                                                                            parameters.image = boardSet[baseBoardName]\r\n                                                                                                                                                                            finalClonedBoard.setCustomObject(parameters)\r\n                                                                                                                                                                            finalClonedBoard = finalClonedBoard.reload()\r\n                                                                                                                                                                            Helper.onceTimeElapsed(0.5).doAfter(function ()\r\n                                                                                                                                                                                finalClonedBoard.setLock(true)\r\n                                                                                                                                                                                finalClonedBoard.setPosition(board.getPosition() + Vector(0, finalHeight, 68))\r\n                                                                                                                                                                                finalClonedBoard.setGMNotes(expectedBoardName)\r\n                                                                                                                                                                            end)\r\n                                                                                                                                                                        end)\r\n                                                                                                                                                                    end)\r\n                                                                                                                                                                    count = count + 1\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                        return count\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Board._getBaseName(id)\r\n                                                                                                                                                        if id then\r\n                                                                                                                                                            local tokens = Helper.splitString(id, '.')\r\n                                                                                                                                                            if #tokens == 2 then\r\n                                                                                                                                                                return tokens[1]\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                        return nil\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Board.onLoad()\r\n                                                                                                                                                        local prebuildZone = getObjectFromGUID(\"23f2b5\")\r\n\r\n                                                                                                                                                        for _, locale in ipairs(Locale.getAllLocales()) do\r\n                                                                                                                                                            for baseBoardName, content in pairs(Board.allInitialBoards) do\r\n                                                                                                                                                                if type(content) == \"table\" then\r\n                                                                                                                                                                    for subBaseBoardName, _ in pairs(content) do\r\n                                                                                                                                                                        Board.boardLocations[Board._toBoardName(subBaseBoardName, locale)] = {\r\n                                                                                                                                                                            rootBaseBoardName = baseBoardName,\r\n                                                                                                                                                                            baseBoardName = subBaseBoardName,\r\n                                                                                                                                                                        }\r\n                                                                                                                                                                    end\r\n                                                                                                                                                                else\r\n                                                                                                                                                                    Board.boardLocations[Board._toBoardName(baseBoardName, locale)] = {\r\n                                                                                                                                                                        rootBaseBoardName = baseBoardName,\r\n                                                                                                                                                                        baseBoardName = baseBoardName,\r\n                                                                                                                                                                    }\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        for _, object in ipairs(getAllObjects()) do\r\n                                                                                                                                                            local id = Helper.getID(object)\r\n                                                                                                                                                            local location = Board.boardLocations[id]\r\n                                                                                                                                                            if location then\r\n                                                                                                                                                                location.object = object\r\n                                                                                                                                                                location.active = true\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        for _, object in ipairs(prebuildZone.getObjects()) do\r\n                                                                                                                                                            local id = Helper.getID(object)\r\n                                                                                                                                                            local location = Board.boardLocations[id]\r\n                                                                                                                                                            if location then\r\n                                                                                                                                                                location.active = false\r\n                                                                                                                                                                location.object.setInvisibleTo(Player.getColors())\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Board.setUp(setting)\r\n                                                                                                                                                        -- NOP\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Board.selectBoard(baseBoardName, language)\r\n                                                                                                                                                        local boardName = Board._toBoardName(baseBoardName, language)\r\n                                                                                                                                                        local location = Board.boardLocations[boardName]\r\n                                                                                                                                                        assert(location, \"No location for board \" .. boardName)\r\n                                                                                                                                                        assert(location.object, \"No instantiated location for board \" .. boardName)\r\n\r\n                                                                                                                                                        if not location.active then\r\n                                                                                                                                                            for _, otherLocation in pairs(Board.boardLocations) do\r\n                                                                                                                                                                if otherLocation.rootBaseBoardName == location.rootBaseBoardName and otherLocation.active then\r\n                                                                                                                                                                    local otherPosition = otherLocation.object.getPosition()\r\n\r\n                                                                                                                                                                    -- TODO A simple move (swap) would be enough.\r\n                                                                                                                                                                    otherLocation.object.destruct()\r\n                                                                                                                                                                    otherLocation.object = nil\r\n                                                                                                                                                                    otherLocation.active = false\r\n\r\n                                                                                                                                                                    location.object.setPosition(otherPosition)\r\n                                                                                                                                                                    location.object.setInvisibleTo({})\r\n                                                                                                                                                                    location.active = true\r\n                                                                                                                                                                    Helper.onceMotionless(location.object).doAfter(function ()\r\n                                                                                                                                                                        Helper.noPhysics(location.object)\r\n                                                                                                                                                                    end)\r\n\r\n                                                                                                                                                                    return location.object\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                            error(\"No active location for \" .. baseBoardName)\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return location.object\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Board.destructBoard(baseBoardName)\r\n                                                                                                                                                        for _, location in pairs(Board.boardLocations) do\r\n                                                                                                                                                            if location.baseBoardName == baseBoardName and location.object then\r\n                                                                                                                                                                location.object.destruct()\r\n                                                                                                                                                                location.object = nil\r\n                                                                                                                                                                location.active = false\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Board.destructInactiveBoards()\r\n                                                                                                                                                        for _, location in pairs(Board.boardLocations) do\r\n                                                                                                                                                            if not location.active and location.object then\r\n                                                                                                                                                                location.object.destruct()\r\n                                                                                                                                                                location.object = nil\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Board.getBoard(baseBoardName, locale)\r\n                                                                                                                                                        local boardName = Board._toBoardName(baseBoardName, locale or I18N.getLocale())\r\n                                                                                                                                                        local location = Board.boardLocations[boardName]\r\n                                                                                                                                                        if location then\r\n                                                                                                                                                            return location.object\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Board._toBoardName(baseBoardName, language)\r\n                                                                                                                                                        return baseBoardName .. '.' .. language\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    return Board\r\n\r\n                                                                                                                                                end)\r\n                                                                                                                                                __bundle_register(\"en.Board\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                                    return {\r\n                                                                                                                                                        mainBoard4P = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141295501/636AF2828366DFC16AF32AD3247E7855667D200F/\",\r\n                                                                                                                                                        mainBoard6P = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141290585/1B85EC01159116A041CFC75D69649FE573EFDE31/\",\r\n                                                                                                                                                        emperorBoard = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141297531/EB47225DD98FFB7E20E455BE5B3975FEB257B4A6/\",\r\n                                                                                                                                                        fremenBoard = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141298420/397889F6C61BA75AF0B7D8B260EDF2B03D44C383/\",\r\n                                                                                                                                                    }\r\n\r\n                                                                                                                                                end)\r\n                                                                                                                                                __bundle_register(\"fr.Board\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                                    return {\r\n                                                                                                                                                        mainBoard4P = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141293117/8DBDCE4796B52A64AE78D5F95A1CD0B87A87F66D/\",\r\n                                                                                                                                                        mainBoard6P = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141295144/5674BB27C821E484B2B85671604BBB1263D024A3/\",\r\n                                                                                                                                                        emperorBoard = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141292629/0332B70F885B0B2E1A0508231A69418372732AF1/\",\r\n                                                                                                                                                        fremenBoard = \"https://steamusercontent-a.akamaihd.net/ugc/2502404390141290078/7C4B6E1CAA172C7C83DEB42CA5AE9FE5817F2A80/\",\r\n                                                                                                                                                    }\r\n\r\n                                                                                                                                                end)\r\n                                                                                                                                                __bundle_register(\"Action\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                                    local Module = require(\"utils.Module\")\r\n                                                                                                                                                    local Helper = require(\"utils.Helper\")\r\n                                                                                                                                                    local Park = require(\"utils.Park\")\r\n                                                                                                                                                    local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                                                                    local Types = Module.lazyRequire(\"Types\")\r\n                                                                                                                                                    local PlayBoard = Module.lazyRequire(\"PlayBoard\")\r\n                                                                                                                                                    local InfluenceTrack = Module.lazyRequire(\"InfluenceTrack\")\r\n                                                                                                                                                    local Combat = Module.lazyRequire(\"Combat\")\r\n                                                                                                                                                    local TleilaxuResearch = Module.lazyRequire(\"TleilaxuResearch\")\r\n                                                                                                                                                    local Intrigue = Module.lazyRequire(\"Intrigue\")\r\n                                                                                                                                                    local Reserve = Module.lazyRequire(\"Reserve\")\r\n                                                                                                                                                    local MainBoard = Module.lazyRequire(\"MainBoard\")\r\n                                                                                                                                                    local TechMarket = Module.lazyRequire(\"TechMarket\")\r\n                                                                                                                                                    local ImperiumRow = Module.lazyRequire(\"ImperiumRow\")\r\n                                                                                                                                                    local ShippingTrack = Module.lazyRequire(\"ShippingTrack\")\r\n                                                                                                                                                    local TleilaxuRow = Module.lazyRequire(\"TleilaxuRow\")\r\n                                                                                                                                                    local ScoreBoard = Module.lazyRequire(\"ScoreBoard\")\r\n                                                                                                                                                    local ThroneRow = Module.lazyRequire(\"ThroneRow\")\r\n                                                                                                                                                    local ChoamContractMarket = Module.lazyRequire(\"ChoamContractMarket\")\r\n                                                                                                                                                    local SardaukarSkillMarket = Module.lazyRequire(\"SardaukarSkillMarket\")\r\n                                                                                                                                                    local TurnControl = Module.lazyRequire(\"TurnControl\")\r\n\r\n                                                                                                                                                    local Action = Helper.createClass(nil, {\r\n                                                                                                                                                    context = {}})\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.onLoad(state)\r\n\r\n                                                                                                                                                        Helper.registerEventListener(\"phaseStart\", function (phase, _)\r\n                                                                                                                                                            Action.context = {\r\n                                                                                                                                                                phase = phase\r\n                                                                                                                                                            }\r\n                                                                                                                                                        end)\r\n\r\n                                                                                                                                                        Helper.registerEventListener(\"playerTurn\", function (phase, color)\r\n                                                                                                                                                            Action.context = {\r\n                                                                                                                                                                phase = phase,\r\n                                                                                                                                                                color = color\r\n                                                                                                                                                            }\r\n                                                                                                                                                            Action.log(I18N(\"playerTurn\", {leader = PlayBoard.getLeaderName(color)}), color)\r\n                                                                                                                                                        end)\r\n\r\n                                                                                                                                                        if state.settings then\r\n                                                                                                                                                            assert(state.Action)\r\n                                                                                                                                                            Action.context = state.Action.context\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.setUp()\r\n                                                                                                                                                        -- NOP\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.onSave(state)\r\n                                                                                                                                                        state.Action = {\r\n                                                                                                                                                            context = Action.context\r\n                                                                                                                                                        }\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.checkContext(attributes)\r\n                                                                                                                                                        for name, expectedValue in pairs(attributes) do\r\n                                                                                                                                                            local value = Action.context and Action.context[name] or nil\r\n                                                                                                                                                            local valid\r\n                                                                                                                                                            if type(expectedValue) == \"function\" then\r\n                                                                                                                                                                valid = expectedValue(value)\r\n                                                                                                                                                            else\r\n                                                                                                                                                                valid = value == expectedValue\r\n                                                                                                                                                            end\r\n                                                                                                                                                            if not valid then\r\n                                                                                                                                                                return false\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                        return true\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.doSetUp(color, settings)\r\n                                                                                                                                                        -- NOP\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.instruct(phase, isActivePlayer)\r\n                                                                                                                                                        local availablePhaseInstructions = {\r\n                                                                                                                                                            leaderSelection = true,\r\n                                                                                                                                                            playerTurns = true,\r\n                                                                                                                                                            combat = true,\r\n                                                                                                                                                            combatEnd = true,\r\n                                                                                                                                                            endgame = true,\r\n                                                                                                                                                        }\r\n\r\n                                                                                                                                                        if availablePhaseInstructions[phase] then\r\n                                                                                                                                                            if isActivePlayer then\r\n                                                                                                                                                                return I18N(phase .. \"ActiveInstruction\")\r\n                                                                                                                                                            else\r\n                                                                                                                                                                return I18N(phase .. \"InactiveInstruction\")\r\n                                                                                                                                                            end\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return nil\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    function Action.prepare(color, settings)\r\n                                                                                                                                                        Action.resources(color, \"water\", 1)\r\n                                                                                                                                                        if settings.epicMode then\r\n                                                                                                                                                            Action.drawIntrigues(color, 1)\r\n                                                                                                                                                        end\r\n                                                                                                                                                        Action.troops(color, \"supply\", \"garrison\", settings.epicMode and 5 or 3)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.tearDown()\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.setContext(key, value)\r\n                                                                                                                                                        if key == \"agentSent\" and Action.troopTransferCoalescentQueue then\r\n                                                                                                                                                            Action.flushTroopTransfer()\r\n                                                                                                                                                        end\r\n                                                                                                                                                        Action.context[key] = value\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.flushTroopTransfer()\r\n                                                                                                                                                        if Action.troopTransferCoalescentQueue then\r\n                                                                                                                                                            Action.troopTransferCoalescentQueue.flush()\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.log(message, color, isSecret)\r\n                                                                                                                                                        -- Order matters here.\r\n                                                                                                                                                        local logContextPrinters = {\r\n                                                                                                                                                            {name = \"schemeTriggered\", print = function (_)\r\n                                                                                                                                                                return I18N(\"triggeringScheme\")\r\n                                                                                                                                                            end},\r\n                                                                                                                                                            {name = \"agentSent\", print = function (value)\r\n                                                                                                                                                                local cards = \"\"\r\n                                                                                                                                                                for i, card in pairs(value.cards or {}) do\r\n                                                                                                                                                                    if i > 1 then\r\n                                                                                                                                                                        cards = cards .. \", \"\r\n                                                                                                                                                                    end\r\n                                                                                                                                                                    cards = cards .. I18N(card)\r\n                                                                                                                                                                end\r\n                                                                                                                                                                return I18N(\"sendingAgent\", {space = I18N(value.space), cards = cards})\r\n                                                                                                                                                            end},\r\n                                                                                                                                                        }\r\n                                                                                                                                                        local prefix = \"\"\r\n                                                                                                                                                        for _, namedPrinter in ipairs(logContextPrinters) do\r\n                                                                                                                                                            local value = Action.context[namedPrinter.name]\r\n                                                                                                                                                            if value then\r\n                                                                                                                                                                local turnColor = TurnControl.getCurrentPlayer() or \"White\"\r\n                                                                                                                                                                if Action.lastContext ~= turnColor .. namedPrinter.name then\r\n                                                                                                                                                                    Action.lastContext = turnColor .. namedPrinter.name\r\n                                                                                                                                                                    printToAll(namedPrinter.print(value), turnColor)\r\n                                                                                                                                                                end\r\n                                                                                                                                                                prefix = \" ?????? \"\r\n                                                                                                                                                                break\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                        if message then\r\n                                                                                                                                                            if isSecret then\r\n                                                                                                                                                                local player = Helper.findPlayerByColor(color)\r\n                                                                                                                                                                if player and player.seated then\r\n                                                                                                                                                                    printToColor(prefix .. message, color, \"Grey\")\r\n                                                                                                                                                                end\r\n                                                                                                                                                            else\r\n                                                                                                                                                                printToAll(prefix .. message, color)\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.secretLog(message, color)\r\n                                                                                                                                                        Action.log(message, color, true)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.unsetContext(key)\r\n                                                                                                                                                        Action.context[key] = nil\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.sendAgent(color, spaceName, recallSpy)\r\n                                                                                                                                                        Action.context.space = spaceName\r\n                                                                                                                                                        return MainBoard.sendAgent(color, spaceName, recallSpy)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.sendSpy(color, observationPostName)\r\n                                                                                                                                                        if observationPostName then\r\n                                                                                                                                                            Action.context.observationPost = observationPostName\r\n                                                                                                                                                            return MainBoard.sendSpy(color, observationPostName)\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.recruitSwordmaster(color)\r\n                                                                                                                                                        if PlayBoard.recruitSwordmaster(color) then\r\n                                                                                                                                                            Action.log(I18N(\"recruitSwordmaster\"), color)\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.takeHighCouncilSeat(color)\r\n                                                                                                                                                        if PlayBoard.takeHighCouncilSeat(color) then\r\n                                                                                                                                                            Action.log(I18N(\"takeHighCouncilSeat\"), color)\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.takeMakerHook(color)\r\n                                                                                                                                                        if PlayBoard.takeMakerHook(color) then\r\n                                                                                                                                                            Action.log(I18N(\"takeMakerHook\"), color)\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.callSandworm(color, count)\r\n                                                                                                                                                        if Combat.callSandworm(color, count) then\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---@param color PlayerColor\r\n                                                                                                                                                    ---@param resourceName ResourceName\r\n                                                                                                                                                    ---@param amount integer\r\n                                                                                                                                                    ---@return boolean\r\n                                                                                                                                                    function Action.resources(color, resourceName, amount)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsResourceName(resourceName)\r\n                                                                                                                                                        Types.assertIsInteger(amount)\r\n\r\n                                                                                                                                                        local resource = PlayBoard.getResource(color, resourceName)\r\n                                                                                                                                                        if resource:get() >= -amount then\r\n                                                                                                                                                            if amount ~= 0 then\r\n                                                                                                                                                                resource:change(amount)\r\n                                                                                                                                                                Action.log(I18N(amount > 0 and \"credit\" or \"debit\", {\r\n                                                                                                                                                                    what = I18N.agree(math.abs(amount), resourceName),\r\n                                                                                                                                                                    amount = math.abs(amount),\r\n                                                                                                                                                                }), color)\r\n                                                                                                                                                            end\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---@param color PlayerColor\r\n                                                                                                                                                    ---@param resourceName ResourceName\r\n                                                                                                                                                    ---@param amount integer\r\n                                                                                                                                                    ---@return integer\r\n                                                                                                                                                    function Action.bargain(color, resourceName, amount)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsResourceName(resourceName)\r\n                                                                                                                                                        Types.assertIsInteger(amount)\r\n\r\n                                                                                                                                                        return amount\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.drawImperiumCards(color, amount, forced)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        local playBoard = PlayBoard.getPlayBoard(color)\r\n                                                                                                                                                        local continuation\r\n                                                                                                                                                        if forced then\r\n                                                                                                                                                            continuation = playBoard:drawCards(amount)\r\n                                                                                                                                                        else\r\n                                                                                                                                                            continuation = playBoard:tryToDrawCards(amount)\r\n                                                                                                                                                        end\r\n                                                                                                                                                        continuation.doAfter(function (dealCardCount)\r\n                                                                                                                                                            if dealCardCount > 0 then\r\n                                                                                                                                                                Action.log(I18N(\"drawObjects\", {amount = dealCardCount, object = I18N.agree(dealCardCount, \"imperiumCard\")}), color)\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end)\r\n                                                                                                                                                        return continuation\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---@param color PlayerColor\r\n                                                                                                                                                    ---@param faction Faction\r\n                                                                                                                                                    ---@param amount integer\r\n                                                                                                                                                    ---@return Continuation\r\n                                                                                                                                                    function Action.influence(color, faction, amount)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsInteger(amount)\r\n                                                                                                                                                        local continuation = Helper.createContinuation(\"Action.influence\")\r\n                                                                                                                                                        if faction then\r\n                                                                                                                                                            InfluenceTrack.change(color, faction, amount).doAfter(function (realAmount)\r\n                                                                                                                                                                Action.log(I18N(amount > 0 and \"gainInfluence\" or \"loseInfluence\", {\r\n                                                                                                                                                                    withFaction = I18N(Helper.toCamelCase(\"with\", faction)),\r\n                                                                                                                                                                    amount = math.abs(amount),\r\n                                                                                                                                                                }), color)\r\n                                                                                                                                                                continuation.run(realAmount)\r\n                                                                                                                                                            end)\r\n                                                                                                                                                        else\r\n                                                                                                                                                            continuation.run(0)\r\n                                                                                                                                                        end\r\n                                                                                                                                                        return continuation\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---@param color PlayerColor\r\n                                                                                                                                                    ---@param from TroopLocation\r\n                                                                                                                                                    ---@param to TroopLocation\r\n                                                                                                                                                    ---@param baseCount integer\r\n                                                                                                                                                    ---@return integer\r\n                                                                                                                                                    function Action.troops(color, from, to, baseCount)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsTroopLocation(from)\r\n                                                                                                                                                        Types.assertIsTroopLocation(to)\r\n                                                                                                                                                        Types.assertIsInteger(baseCount)\r\n                                                                                                                                                        local count = Park.transfert(baseCount, Action.getTroopPark(color, from), Action.getTroopPark(color, to))\r\n\r\n                                                                                                                                                        if not Action.troopTransferCoalescentQueue then\r\n\r\n                                                                                                                                                            local function coalesce(t1, t2)\r\n                                                                                                                                                                if t1.color == t2.color then\r\n                                                                                                                                                                    local t\r\n                                                                                                                                                                    if t1.from == t2.from and t1.to == t2.to then\r\n                                                                                                                                                                        t1.count = t1.count + t2.count\r\n                                                                                                                                                                        t = t1\r\n                                                                                                                                                                    elseif t1.from == t2.to and t1.to == t2.from then\r\n                                                                                                                                                                        t1.count = t1.count - t2.count\r\n                                                                                                                                                                        t = t1\r\n                                                                                                                                                                    end\r\n                                                                                                                                                                    if t then\r\n                                                                                                                                                                        if t1.count < 0 then\r\n                                                                                                                                                                            t1.count = -t1.count\r\n                                                                                                                                                                            local tmp = t1.to\r\n                                                                                                                                                                            t1.to = t1.from\r\n                                                                                                                                                                            t1.from = tmp\r\n                                                                                                                                                                        end\r\n                                                                                                                                                                        return t\r\n                                                                                                                                                                    end\r\n                                                                                                                                                                end\r\n                                                                                                                                                                return nil\r\n                                                                                                                                                            end\r\n\r\n                                                                                                                                                            local function handle(t)\r\n                                                                                                                                                                if t.count ~= 0 then\r\n                                                                                                                                                                    Action.log(I18N(\"transfer\", {\r\n                                                                                                                                                                        count = t.count,\r\n                                                                                                                                                                        what = I18N.agree(t.count, \"troop\"),\r\n                                                                                                                                                                        from = I18N(t.from .. \"Park\"),\r\n                                                                                                                                                                        to = I18N(t.to .. \"Park\"),\r\n                                                                                                                                                                    }), t.color)\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n\r\n                                                                                                                                                            Action.troopTransferCoalescentQueue = Helper.createCoalescentQueue(\"troop\", 1, coalesce, handle)\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        Action.troopTransferCoalescentQueue.submit({\r\n                                                                                                                                                            color = color,\r\n                                                                                                                                                            count = count,\r\n                                                                                                                                                            from = from,\r\n                                                                                                                                                            to = to,\r\n                                                                                                                                                        })\r\n\r\n                                                                                                                                                        return count\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.getTroopPark(color, parkName)\r\n                                                                                                                                                        if parkName == \"supply\" then\r\n                                                                                                                                                            return PlayBoard.getSupplyPark(color)\r\n                                                                                                                                                        elseif parkName == \"garrison\" then\r\n                                                                                                                                                            return Combat.getGarrisonPark(color)\r\n                                                                                                                                                        elseif parkName == \"combat\" then\r\n                                                                                                                                                            return Combat.getBattlegroundPark()\r\n                                                                                                                                                            -- bloodlines disable\r\n                                                                                                                                                            -- elseif parkName == \"negotiation\" then\r\n                                                                                                                                                            --     return TechMarket.getNegotiationPark(color)\r\n                                                                                                                                                        elseif parkName == \"tanks\" then\r\n                                                                                                                                                            return TleilaxuResearch.getTankPark(color)\r\n                                                                                                                                                        else\r\n                                                                                                                                                            error(\"Unknow park name: \" .. tostring(parkName))\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.reserveImperiumCard(color, indexInRow)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsInRange(1, 5, indexInRow)\r\n                                                                                                                                                        return ImperiumRow.reserveImperiumCard(indexInRow, color)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.acquireReservedImperiumCard(color)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        -- Do no return false by default, since an intrigue in Uprising allows any player to do the same thing as Helena Richese.\r\n                                                                                                                                                        return ImperiumRow.acquireReservedImperiumCard(color)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.acquireImperiumCard(color, indexInRow)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsInRange(1, 5, indexInRow)\r\n                                                                                                                                                        return ImperiumRow.acquireImperiumCard(indexInRow, color)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.acquireFoldspace(color)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        return Reserve.acquireFoldspace(color)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.acquirePrepareTheWay(color, toItsHand)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        return Reserve.acquirePrepareTheWay(color, toItsHand)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.acquireTheSpiceMustFlow(color)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        return Reserve.acquireTheSpiceMustFlow(color)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.acquireThroneCard(color, indexInRow)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        return ThroneRow.acquireThroneCard(color, indexInRow)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.advanceFreighter(color, positiveAmount)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsPositiveInteger(positiveAmount)\r\n                                                                                                                                                        for _ = 1, positiveAmount do\r\n                                                                                                                                                            if not ShippingTrack.freighterUp(color) then\r\n                                                                                                                                                                return false\r\n                                                                                                                                                            else\r\n                                                                                                                                                                Action.log(I18N(\"advanceFreighter\"), color)\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                        return true\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.recallFreighter(color)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        if ShippingTrack.freighterReset(color) then\r\n                                                                                                                                                            Action.log(I18N(\"recallFreighter\"), color)\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.shipments(color, amount)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        return false\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.dreadnought(color, from, to, amount)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsDreadnoughtLocation(from)\r\n                                                                                                                                                        Types.assertIsDreadnoughtLocation(to)\r\n                                                                                                                                                        Types.assertIsInteger(amount)\r\n\r\n                                                                                                                                                        local count = Park.transfert(amount, Action.getDreadnoughtPark(color, from), Action.getDreadnoughtPark(color, to))\r\n\r\n                                                                                                                                                        if count > 0 then\r\n                                                                                                                                                            Action.log(I18N(\"transfer\", {\r\n                                                                                                                                                                count = count,\r\n                                                                                                                                                                what = I18N.agree(count, \"dreadnought\"),\r\n                                                                                                                                                                from = I18N(from .. \"Park\"),\r\n                                                                                                                                                                to = I18N(to .. \"Park\"),\r\n                                                                                                                                                            }), color)\r\n                                                                                                                                                        end\r\n\r\n                                                                                                                                                        return count\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.getDreadnoughtPark(color, parkName)\r\n                                                                                                                                                        if parkName == \"supply\" then\r\n                                                                                                                                                            return PlayBoard.getDreadnoughtPark(color)\r\n                                                                                                                                                        elseif parkName == \"garrison\" then\r\n                                                                                                                                                            return Combat.getDreadnoughtPark(color)\r\n                                                                                                                                                        elseif parkName == \"combat\" then\r\n                                                                                                                                                            return Combat.getBattlegroundPark()\r\n                                                                                                                                                        elseif parkName == \"carthag\" then\r\n                                                                                                                                                            return nil\r\n                                                                                                                                                        elseif parkName == \"arrakeen\" then\r\n                                                                                                                                                            return nil\r\n                                                                                                                                                        elseif parkName == \"imperialBassin\" then\r\n                                                                                                                                                            return nil\r\n                                                                                                                                                        else\r\n                                                                                                                                                            error(\"Unknown park name: \" .. tostring(parkName))\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.acquireTleilaxuCard(color, indexInRow)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsInRange(1, 3, indexInRow)\r\n                                                                                                                                                        return TleilaxuRow.acquireTleilaxuCard(indexInRow, color)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.research(color, jump)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        return TleilaxuResearch.advanceResearch(color, jump).doAfter(function (finalJump)\r\n                                                                                                                                                            if finalJump.x > 0 then\r\n                                                                                                                                                                Action.log(I18N(\"researchAdvance\", {count = jump}), color)\r\n                                                                                                                                                            elseif finalJump.x < 0 then\r\n                                                                                                                                                                Action.log(I18N(\"researchRollback\"), color)\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.beetle(color, jump)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsInteger(jump)\r\n                                                                                                                                                        TleilaxuResearch.advanceTleilax(color, jump).doAfter(function (finalJump)\r\n                                                                                                                                                            if finalJump > 0 then\r\n                                                                                                                                                                Action.log(I18N(\"beetleAdvance\", {count = jump}), color)\r\n                                                                                                                                                            elseif finalJump < 0 then\r\n                                                                                                                                                                Action.log(I18N(\"beetleRollback\", {count = math.abs(jump)}), color)\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end)\r\n                                                                                                                                                        return true\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.atomics(color)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        ImperiumRow.nuke(color)\r\n                                                                                                                                                        Action.log(I18N(\"atomics\"), color)\r\n                                                                                                                                                        return true\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.drawIntrigues(color, amount)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsInteger(amount)\r\n                                                                                                                                                        Intrigue.drawIntrigues(color, amount)\r\n                                                                                                                                                        Action.log(I18N(\"drawObjects\", {amount = amount, object = I18N.agree(amount, \"intrigueCard\")}), color)\r\n                                                                                                                                                        return true\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.stealIntrigues(color, otherColor, amount)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        Types.assertIsPlayerColor(otherColor)\r\n                                                                                                                                                        Types.assertIsInteger(amount)\r\n                                                                                                                                                        Intrigue.stealIntrigues(color, otherColor, amount)\r\n                                                                                                                                                        return true\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.signetRing(color)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        return false\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.gainVictoryPoint(color, name, count)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        if ScoreBoard.gainVictoryPoint(color, name, count) then\r\n                                                                                                                                                            for _ = 1, (count or 1) do\r\n                                                                                                                                                                Action.log(I18N(\"gainVictoryPoint\", {name = I18N(name)}), color)\r\n                                                                                                                                                            end\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.gainObjective(color, objective)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        return PlayBoard.gainObjective(color, objective)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.control(color, spaceName)\r\n                                                                                                                                                        MainBoard.occupy(MainBoard.findControlableSpace(spaceName), color)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.acquireTech(color, stackIndex, discount)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        if stackIndex then\r\n                                                                                                                                                            TechMarket.acquireTech(stackIndex, color)\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.pickContract(color, stackIndex)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        if stackIndex then\r\n                                                                                                                                                            return ChoamContractMarket.acquireContract(stackIndex, color)\r\n                                                                                                                                                        elseif not ChoamContractMarket.isEnabled() then\r\n                                                                                                                                                            Action.resources(color, \"solari\", 2)\r\n                                                                                                                                                            return true\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.pickSkill(color, stackIndex)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        if stackIndex then\r\n                                                                                                                                                            return SardaukarSkillMarket.acquireSkill(stackIndex, color)\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.pickVoice(color)\r\n                                                                                                                                                        Types.assertIsPlayerColor(color)\r\n                                                                                                                                                        local voiceToken = ScoreBoard.getFreeVoiceToken()\r\n                                                                                                                                                        if voiceToken then\r\n                                                                                                                                                            return PlayBoard.acquireVoice(color, voiceToken)\r\n                                                                                                                                                        else\r\n                                                                                                                                                            return false\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.choose(color, topic)\r\n                                                                                                                                                        return false\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function Action.decide(color, topic)\r\n                                                                                                                                                        -- Any reason to disable this for human players,\r\n                                                                                                                                                        -- since optional rewards are always desirable VPs?\r\n                                                                                                                                                        return false\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    return Action\r\n\r\n                                                                                                                                                end)\r\n                                                                                                                                                __bundle_register(\"utils.XmlUI\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\n                                                                                                                                                    local Helper = require(\"utils.Helper\")\r\n                                                                                                                                                    local I18N = require(\"utils.I18N\")\r\n\r\n                                                                                                                                                    local XmlUI = Helper.createClass(nil, {\r\n                                                                                                                                                        DISABLED = {--[[ Disabled but visible ]]},\r\n                                                                                                                                                        HIDDEN = {--[[ Disabled and hidden ]]},\r\n                                                                                                                                                    sharedXml = {}})\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI.new(holder, id, fields)\r\n                                                                                                                                                        --[[\r\n        Important:\r\n            UI.setXmlTable(xml)\r\n            assert(UI.getXmlTable() == xml) -- Not Ok\r\n            -- Wait at least 1 frame.\r\n            assert(UI.getXmlTable() == xml) -- Ok\r\n\r\n        Changes made  directly by the user (e.g. checking a box)\r\n        won't be reflected in the retrieved XML though.\r\n    ]]\r\n                                                                                                                                                        assert(holder)\r\n                                                                                                                                                        XmlUI.sharedXml[holder] = XmlUI.sharedXml[holder] or holder.UI.getXmlTable()\r\n                                                                                                                                                        local xmlUI = Helper.createClassInstance(XmlUI, {\r\n                                                                                                                                                            holder = holder,\r\n                                                                                                                                                            id = id,\r\n                                                                                                                                                            active = false,\r\n                                                                                                                                                            fields = fields\r\n                                                                                                                                                        })\r\n                                                                                                                                                        xmlUI:toUI()\r\n                                                                                                                                                        return xmlUI\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI:getXml()\r\n                                                                                                                                                        assert(self.holder)\r\n                                                                                                                                                        local xml = XmlUI.sharedXml[self.holder]\r\n                                                                                                                                                        assert(xml)\r\n                                                                                                                                                        return xml\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI:show()\r\n                                                                                                                                                        self.active = true\r\n                                                                                                                                                        self:toUI()\r\n                                                                                                                                                        --self.holder.UI.show(self.id)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI:hide()\r\n                                                                                                                                                        self.active = false\r\n                                                                                                                                                        self:toUI()\r\n                                                                                                                                                        --self.holder.UI.hide(self.id)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI:setButton(id, label, interactable)\r\n                                                                                                                                                        local element = XmlUI._findXmlElement(self:getXml(), id)\r\n                                                                                                                                                        assert(element, \"Unknown id: \" .. tostring(id))\r\n                                                                                                                                                        XmlUI._setXmlButton(element, label)\r\n                                                                                                                                                        XmlUI._setXmlInteractable(element, interactable)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI:setButtonI18N(id, key, interactable)\r\n                                                                                                                                                        local element = XmlUI._findXmlElement(self:getXml(), id)\r\n                                                                                                                                                        assert(element, \"Unknown id: \" .. tostring(id))\r\n                                                                                                                                                        XmlUI._setXmlButtonI18N(element, key)\r\n                                                                                                                                                        XmlUI._setXmlInteractable(element, interactable)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI:fromUI(player, value, id)\r\n                                                                                                                                                        local values = self:_getEnumeration(id)\r\n                                                                                                                                                        if values then\r\n                                                                                                                                                            for key, knownValue in pairs(values) do\r\n                                                                                                                                                                if value == I18N(knownValue) then\r\n                                                                                                                                                                    self.fields[id] = key\r\n                                                                                                                                                                    return\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        elseif value == \"False\" or value == \"True\" then\r\n                                                                                                                                                            local on = value == \"True\"\r\n                                                                                                                                                            self.fields[id] = on\r\n                                                                                                                                                            return\r\n                                                                                                                                                        else\r\n                                                                                                                                                            self.fields[id] = value\r\n                                                                                                                                                            return\r\n                                                                                                                                                        end\r\n                                                                                                                                                        error(\"Unknown value: \" .. tostring(value))\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    function XmlUI:toUI()\r\n                                                                                                                                                        if self.id then\r\n                                                                                                                                                            local root = XmlUI._findXmlElement(self:getXml(), self.id)\r\n                                                                                                                                                            assert(root, \"Unknown id: \" .. tostring(self.id))\r\n                                                                                                                                                            root.attributes.active = self.active\r\n                                                                                                                                                            for name, value in pairs(self.fields) do\r\n                                                                                                                                                                if not XmlUI._isEnumeration(name) and not XmlUI._isRange(name) then\r\n                                                                                                                                                                    local element = XmlUI._findXmlElement(self:getXml(), name)\r\n                                                                                                                                                                    if element then\r\n                                                                                                                                                                        local disabled = XmlUI.isDisabled(value)\r\n                                                                                                                                                                        local hidden = XmlUI.isHidden(value)\r\n                                                                                                                                                                        if not disabled and not hidden then\r\n                                                                                                                                                                            local values = self:_getEnumeration(name)\r\n                                                                                                                                                                            local range = self:_getRange(name)\r\n                                                                                                                                                                            if values then\r\n                                                                                                                                                                                XmlUI._setXmlDropdownOptions(element, values, value)\r\n                                                                                                                                                                            elseif range then\r\n                                                                                                                                                                                XmlUI._setXmlSlider(element, range, value)\r\n                                                                                                                                                                            elseif element.tag == \"Toggle\" then\r\n                                                                                                                                                                                XmlUI._setXmlToggle(element, value)\r\n                                                                                                                                                                            elseif element.tag == \"Text\" then\r\n                                                                                                                                                                                XmlUI._setXmlText(element, value)\r\n                                                                                                                                                                            end\r\n                                                                                                                                                                            XmlUI._setXmlActive(element, true)\r\n                                                                                                                                                                            XmlUI._setXmlInteractable(element, true)\r\n                                                                                                                                                                        else\r\n                                                                                                                                                                            XmlUI._setXmlActive(element, not hidden)\r\n                                                                                                                                                                            XmlUI._setXmlInteractable(element, false)\r\n                                                                                                                                                                        end\r\n                                                                                                                                                                    else\r\n                                                                                                                                                                        --log(\"Unknown id: \" .. tostring(name))\r\n                                                                                                                                                                    end\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                        XmlUI._translateContent(self:getXml())\r\n                                                                                                                                                        self.holder.UI.setXmlTable(self:getXml())\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._isEnumeration(name)\r\n                                                                                                                                                        return name:sub(-4) == \"_all\"\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI:_getEnumeration(name)\r\n                                                                                                                                                        return self.fields[name .. \"_all\"]\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._isRange(name)\r\n                                                                                                                                                        return name:sub(-6) == \"_range\"\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI:_getRange(name)\r\n                                                                                                                                                        return self.fields[name .. \"_range\"]\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI.isDisabled(value)\r\n                                                                                                                                                        return value == XmlUI.DISABLED\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI.isHidden(value)\r\n                                                                                                                                                        return value == XmlUI.HIDDEN\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._findXmlElement(xml, id)\r\n                                                                                                                                                        for _, element in ipairs(xml) do\r\n                                                                                                                                                            if element.attributes and element.attributes.id == id then\r\n                                                                                                                                                                return element\r\n                                                                                                                                                            elseif element.children then\r\n                                                                                                                                                                local hit = XmlUI._findXmlElement(element.children, id)\r\n                                                                                                                                                                if hit then\r\n                                                                                                                                                                    return hit\r\n                                                                                                                                                                end\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                        return nil\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._setXmlDropdownOptions(dropdown, optionValues, default)\r\n                                                                                                                                                        assert(dropdown)\r\n                                                                                                                                                        assert(dropdown.tag == \"Dropdown\", dropdown.tag)\r\n                                                                                                                                                        assert(dropdown.children)\r\n                                                                                                                                                        assert(#dropdown.children > 0)\r\n                                                                                                                                                        local protoOption = dropdown.children[1]\r\n                                                                                                                                                        dropdown.children = {}\r\n                                                                                                                                                        for key, optionValue in pairs(optionValues) do\r\n                                                                                                                                                            local option = Helper.deepCopy(protoOption)\r\n                                                                                                                                                            option.attributes.selected = key == default\r\n                                                                                                                                                            option.attributes.key = optionValue\r\n                                                                                                                                                            option.value = I18N(optionValue)\r\n                                                                                                                                                            table.insert(dropdown.children, option)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._setXmlText(text, value)\r\n                                                                                                                                                        assert(text)\r\n                                                                                                                                                        assert(text.tag == \"Text\", text.tag)\r\n                                                                                                                                                        text.value = value\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._setXmlToggle(toggle, on)\r\n                                                                                                                                                        assert(toggle)\r\n                                                                                                                                                        assert(toggle.tag == \"Toggle\", toggle.tag)\r\n                                                                                                                                                        toggle.attributes.isOn = XmlUI._toBool(on)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._setXmlSlider(slider, range, value)\r\n                                                                                                                                                        assert(slider)\r\n                                                                                                                                                        assert(slider.tag == \"Slider\", slider.tag)\r\n                                                                                                                                                        slider.attributes.minValue = range.min\r\n                                                                                                                                                        slider.attributes.maxValue = range.max\r\n                                                                                                                                                        slider.attributes.value = value\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._setXmlButton(button, label)\r\n                                                                                                                                                        assert(button)\r\n                                                                                                                                                        assert(button.tag == \"Button\", button.tag)\r\n                                                                                                                                                        button.value = label\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._setXmlButtonI18N(button, key)\r\n                                                                                                                                                        assert(button)\r\n                                                                                                                                                        assert(button.tag == \"Button\", button.tag)\r\n                                                                                                                                                        button.attributes.key = key\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._setXmlActive(xml, active)\r\n                                                                                                                                                        assert(xml)\r\n                                                                                                                                                        xml.attributes.active = XmlUI._toBool(active)\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._setXmlInteractable(xml, interactable)\r\n                                                                                                                                                        assert(xml)\r\n                                                                                                                                                        if xml.tag == \"Dropdown\" or xml.tag == \"Slider\" then\r\n                                                                                                                                                            -- FIXME Bidouille esth??tique.\r\n                                                                                                                                                            xml.attributes.active = XmlUI._toBool(interactable)\r\n                                                                                                                                                        else\r\n                                                                                                                                                            xml.attributes.interactable = XmlUI._toBool(interactable)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._translateContent(xml)\r\n                                                                                                                                                        for _, element in ipairs(xml) do\r\n                                                                                                                                                            XmlUI._translate(element)\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._translate(node)\r\n                                                                                                                                                        if node.attributes then\r\n                                                                                                                                                            if node.attributes.key then\r\n                                                                                                                                                                node.value = I18N(node.attributes.key)\r\n                                                                                                                                                            end\r\n                                                                                                                                                            -- Tooltip popups are disabled for now sice they tend\r\n                                                                                                                                                            -- to hang around after their widget has been removed.\r\n                                                                                                                                                            if node.attributes.tooltipKey and false then\r\n                                                                                                                                                                node.attributes.tooltip = I18N(node.attributes.tooltipKey)\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                        if node.children then\r\n                                                                                                                                                            for _, child in ipairs(node.children) do\r\n                                                                                                                                                                XmlUI._translate(child)\r\n                                                                                                                                                            end\r\n                                                                                                                                                        end\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    ---\r\n                                                                                                                                                    function XmlUI._toBool(value)\r\n                                                                                                                                                        return value and \"True\" or \"False\"\r\n                                                                                                                                                    end\r\n\r\n                                                                                                                                                    return XmlUI\r\n\r\n                                                                                                                                                end)\r\n                                                                                                                                                return __bundle_require(\"__root\")\r\n"
