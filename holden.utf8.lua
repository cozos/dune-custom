-- ARWIN'S VERSION Bundled by luabundle {"version":"1.7.0"}
local __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)
    local loadingPlaceholder = {[{}] = true}

    local register
    local modules = {}

    local require
    local loaded = {}

    register = function(name, body)
        if not modules[name] then
            modules[name] = body
        end
    end

    require = function(name)
        local loadedModule = loaded[name]

        if loadedModule then
            if loadedModule == loadingPlaceholder then
                return nil
            end
        else
            if not modules[name] then
                if not superRequire then
                    local identifier = type(name) == 'string' and '\"' .. name .. '\"' or tostring(name)
                    error('Tried to require ' .. identifier .. ', but no such module has been registered')
                else
                    return superRequire(name)
                end
            end

            loaded[name] = loadingPlaceholder
            loadedModule = modules[name](require, loaded, register, modules)
            loaded[name] = loadedModule
        end

        return loadedModule
    end

    return require, loaded, register, modules
end)(require)
__bundle_register("__root", function(require, _LOADED, __bundle_register, __bundle_modules)
    --[[
    The Global script:
    - register the modules,
    - call onLoad (and later onSave) on them.
    - show a UI or use the 'autoLoadedSettings' to set up the modules.
    That's all. When set up, the LeaderSelection module will proceed with the
    next step and finally call TurnControl.startGame to effectively start the
    game.

    In case you don't know, the source code for this mod is available at:
    https://github.com/Chatanga/DuneImmorality/tree/rakis
]]

    -- Will be automatically replaced by the build timestamp.
    local BUILD = '04/01/2025 03:12:35 PM'

    local MOD_NAME = 'Rakis Rising'

    -- Do not load anything. Appropriate to work on the mod content in TTS without
    -- interference from the scripts.
    local constructionModeEnabled = false

    -- For test purposes (the secondary table won't disappear as a side effect).
    local autoLoadedSettings = nil

    --[[
autoLoadedSettings = {
    language = "en",
    numberOfPlayers = 4,
    hotSeat = true,
    firstPlayer = "Red",
    randomizePlayerPositions = false,
    wormEatsTheCard = true,
    useContracts = true,
    legacy = false,
    merakon = false,
    riseOfIx = false,
    epicMode = false,
    immortality = false,
    goTo11 = false,
    leaderSelection = {
        Red = "bl_Chani",
        Green = "bl_Mohiam",
        Yellow = "bl_Liet",
        Blue = "bl_Hasimir",
    },
    horizontalHandLayout = true,
    soundEnabled = true,
    submitGameRankedGame = false,
}
]]
    -- autoLoadedSettings = {
    --     language = "en",
    --     numberOfPlayers = 4,
    --     hotSeat = true,
    --     firstPlayer = "Red",
    --     randomizePlayerPositions = false,
    --     wormEatsTheCard = true,
    --     useContracts = true,
    --     legacy = false,
    --     merakon = false,
    --     riseOfIx = false,
    --     epicMode = false,
    --     immortality = false,
    --     goTo11 = false,
    --     leaderSelection = {
    --         Red = "bl_Chani",
    --         Green = "bl_Mohiam",
    --         Yellow = "bl_Liet",
    --         Blue = "bl_Hasimir",
    --     },
    --     horizontalHandLayout = true,
    --     soundEnabled = true,
    --     submitGameRankedGame = false,
    -- }

    local Module = require("utils.Module")
    local Helper = require("utils.Helper")
    local XmlUI = require("utils.XmlUI")
    local AcquireCard = require("utils.AcquireCard")
    local I18N = require("utils.I18N")
    local Dialog = require("utils.Dialog")

    --[[
    Remember that 'require' must have a literal parameter, since it is not a
    real function, but simply a macro for 'luabundler'.

    Note that "CardEffect" is not here since it is always hard required by the
    other modules.
]]
    local allModules = Module.registerModules({
        AcquireCard, -- To take advantage of Module.registerModuleRedirections.
        Action = require("Action"),
        Board = require("Board"),
        ChoamContractMarket = require("ChoamContractMarket"),
        SardaukarSkillMarket = require("SardaukarSkillMarket"),
        Combat = require("Combat"),
        Commander = require("Commander"),
        ConflictCard = require("ConflictCard"),
        ShippingTrack = require("ShippingTrack"),
        Deck = require("Deck"),
        ScoreBoard = require("ScoreBoard"),
        Hagal = require("Hagal"),
        HagalCard = require("HagalCard"),
        ImperiumCard = require("ImperiumCard"),
        ImperiumRow = require("ImperiumRow"),
        InfluenceTrack = require("InfluenceTrack"),
        Intrigue = require("Intrigue"),
        Leader = require("Leader"),
        LeaderSelection = require("LeaderSelection"),
        Locale = require("Locale"),
        MainBoard = require("MainBoard"),
        Music = require("Music"),
        Pdf = require("Pdf"),
        PlayBoard = require("PlayBoard"),
        Reserve = require("Reserve"),
        Resource = require("Resource"),
        Rival = require("Rival"),
        TechMarket = require("TechMarket"),
        TechCard = require("TechCard"),
        TleilaxuResearch = require("TleilaxuResearch"),
        TleilaxuRow = require("TleilaxuRow"),
        ThroneRow = require("ThroneRow"),
        TurnControl = require("TurnControl"),
        Types = require("Types"),
        SubmitGame = require("SubmitGame"),
    })

    local Controller = {
        -- The view.
        ui = nil,
        -- The model.
        -- A 'xxx_all' member is not a UI field, but defines the options for the
        -- corresponding 'xxx' field.
        fields = {
            language_all = {
                en = "english",
                fr = "french",
            },
            language = "en",
            virtualHotSeat = false,
            virtualHotSeatMode_all = {
                "onePlayerTwoRivals",
                "twoPlayersOneRival",
                "threePlayers",
                "fourPlayers",
                "twoTeams",
            },
            virtualHotSeatMode = XmlUI.HIDDEN,
            firstPlayer = "Red",
            firstPlayer_all = {
                random = "random",
                Red = "Red",
            },
            randomizePlayerPositions = true,
            wormEatsTheCard = true,
            difficulty_all = allModules.Hagal.getDifficulties(),
            difficulty = XmlUI.HIDDEN,
            autoTurnInSolo = XmlUI.DISABLED,
            imperiumRowChurn = XmlUI.DISABLED,
            streamlinedRivals = XmlUI.DISABLED,
            brutalEscalation = XmlUI.DISABLED,
            expertDeployment = XmlUI.DISABLED,
            smartPolitics = XmlUI.DISABLED,
            useContracts = true,
            legacy = XmlUI.DISABLED,
            merakon = XmlUI.DISABLED,
            riseOfIx = XmlUI.DISABLED,
            epicMode = XmlUI.DISABLED,
            immortality = false,
            goTo11 = XmlUI.DISABLED,
            leaderSelection_all = allModules.LeaderSelection.getSelectionMethods(4),
            leaderSelection = "reversePick",
            leaderPoolSize_range = {min = 4, max = 18},
            leaderPoolSize = 9,
            leaderPoolSizeLabel = "-",
            tweakLeaderSelection = false,
            horizontalHandLayout = true,
            formalCombatPhase = true,
            soundEnabled = true,
            submitGameRankedGame = true,
        }}

        -- The game settings, set by the startup menu when pressing the "Setup" button
        -- or automatically using the autoLoadedSettings variable.
        local settings

        --- TTS event handler.
        function onLoad(scriptState)
            log("--------< " .. MOD_NAME .. " - " .. BUILD .. " >--------")

            -- All transient objects (mostly anchors, but also some zones) are destroyed
            -- at startup, then recreated in the 'onLoad' functions (and 'staticSetup'
            -- methods in case the game has already been set up).
            Helper.destroyTransientObjects()

            if constructionModeEnabled then
                -- Edit the player boards in a procedural way.
                if false then
                    allModules.PlayBoard.rebuild()
                end
                -- Regenerate the decks in the localized cached areas.
                if false then
                    allModules.Deck.rebuildPreloadAreas()
                end
                -- Regenerate the boards for each language.
                if false then
                    allModules.Board.rebuildPreloadAreas()
                end
            else
                -- The destroyed objects need one frame to disappear and not interfere
                -- with the mod.
                Helper.onceFramesPassed(1).doAfter(function ()
                    Dialog.loadStaticUI().doAfter(function ()
                        asyncOnLoad(scriptState)
                    end)
                end)
            end
        end

        ---
        function asyncOnLoad(scriptState)
            local tables = Helper.resolveGUIDs(false, {
                primaryTable = "2b4b92",
                secondaryTable = "662ced",
            })
            Helper.noPhysicsNorPlay(
                tables.primaryTable,
            tables.secondaryTable)

            local state = scriptState ~= "" and JSON.decode(scriptState) or {}
            settings = state.settings

            -- Make it available to 'Helper.postError'.
            Global.setVar("saveInfo", {
                modname = MOD_NAME,
                build = BUILD,
                stable = state.stable or "prime",
            });

            -- TODO Detail dependencies? An explicit graph would be useful.
            allModules.ordered = {
                {name = "Locale", module = allModules.Locale},
                {name = "Action", module = allModules.Action},
                {name = "Board", module = allModules.Board},
                {name = "Pdf", module = allModules.Pdf},
                {name = "Music", module = allModules.Music},
                {name = "Deck", module = allModules.Deck},
                {name = "ScoreBoard", module = allModules.ScoreBoard},
                {name = "Hagal", module = allModules.Hagal},
                {name = "Commander", module = allModules.Commander},
                {name = "PlayBoard", module = allModules.PlayBoard},
                {name = "ShippingTrack", module = allModules.ShippingTrack},
                {name = "TechMarket", module = allModules.TechMarket},
                {name = "MainBoard", module = allModules.MainBoard},
                {name = "Combat", module = allModules.Combat},
                {name = "ChoamContractMarket", module = allModules.ChoamContractMarket},
                {name = "SardaukarSkillMarket", module = allModules.SardaukarSkillMarket},
                {name = "InfluenceTrack", module = allModules.InfluenceTrack},
                {name = "Intrigue", module = allModules.Intrigue},
                {name = "ImperiumRow", module = allModules.ImperiumRow},
                {name = "Reserve", module = allModules.Reserve},
                {name = "TleilaxuResearch", module = allModules.TleilaxuResearch},
                {name = "TleilaxuRow", module = allModules.TleilaxuRow},
                {name = "ThroneRow", module = allModules.ThroneRow},
                {name = "TurnControl", module = allModules.TurnControl},
                {name = "LeaderSelection", module = allModules.LeaderSelection},
                {name = "SubmitGame", module = allModules.SubmitGame},
            }

            -- We cannot use Module.callOnAllRegisteredModules("onLoad", state),
            -- because the order matter, now that we reload with "staticSetUp" (for the
            -- same reason setUp is ordered too).
            for i, moduleInfo in ipairs(allModules.ordered) do
                --Helper.dump(i, " - Load module", moduleInfo.name)
                moduleInfo.module.onLoad(state)
                Helper.emitEvent("loaded", moduleInfo.name)
            end
            --Helper.dump("Done loading all modules")

            -- List the TTS events we want to make available in the modules.
            Module.registerModuleRedirections({
                "onPlayerChangeColor",
                "onPlayerConnect",
                "onPlayerDisconnect",
                "onObjectEnterZone",
                "onObjectLeaveZone",
                "onObjectEnterContainer",
                "onObjectLeaveContainer",
                "onObjectDrop",
            })

            local uiAlreadySetUp = false
            if not state.settings then
                if autoLoadedSettings then
                    I18N.setLocale(autoLoadedSettings.language or "en")
                    Helper.onceFramesPassed(1).doAfter(function ()
                        setUp(autoLoadedSettings)
                    end)
                else
                    Controller.ui = XmlUI.new(Global, "setupPane", Controller.fields)
                    Controller.ui:show()
                    Controller.soloUi = XmlUI.new(Global, "soloSetupPane", Controller.fields)
                    I18N.setLocale(Controller.fields.language)
                    Controller.updateLeaderPoolSizeLabel()
                    Controller.updateSetupButton()
                    uiAlreadySetUp = true
                end
            end
            if not uiAlreadySetUp then
                -- Force the translation of the whole UI (not restricted to the "setupPane" actually)
                -- since the other panels are also used after the setup.
                XmlUI.new(Global)
            end
        end

        --- TTS event handler.
        function onSave()
            if constructionModeEnabled then
                return
            end

            if settings then
                local stable = Helper.isStabilized(true)

                --[[
            TTS will ignore the ongoing save if:
            - it has the same (serialized) value as the previous,
            - the world hasn't physically changed meanwhile.
            That's why we store the date and "shake" the world
            when we detect an unstable save (ie. a save occuring
            while one or more continuations are still alive).
        ]]

                if not stable then
                    -- Shake the world a bit.
                    Wait.time(function ()
                        local primaryTable = getObjectFromGUID("2b4b92")
                        primaryTable.setName(primaryTable.getName() == "" and "..." or "")
                    end, 0.5, 2)
                end

                local savedState = {
                    date = os.time(),
                    settings = settings,
                    stable = stable and "stable" or "unstable",
                }

                -- FIXME Only call it for the same modules for which "onLoad" has been called.
                Module.callOnAllRegisteredModules("onSave", savedState)
                return JSON.encode(savedState)
            else
                -- We do not save anything until the game is set up.
                return ''
            end
        end

        --- TTS event handler.
        function onObjectDestroy(object)
            if object.getGUID() == "2b4b92" then
                Module.unregisterAllModuleRedirections()
                --Helper.destroyTransientObjects()
                Helper.dump("Bye!")
            end
        end

        --- Set up the game, an irreversible operation.
        function setUp(newSettings)
            assert(newSettings)

            local continuation = Helper.createContinuation("setUp")
            if newSettings.randomizePlayerPositions then
                Helper.randomizePlayerPositions(Controller.getProperlySeatedPlayers()).doAfter(continuation.run)
            else
                continuation.run()
            end

            continuation.doAfter(function ()
                -- Not assigned before in order to avoid saving anything.
                settings = newSettings

                local properlySeatedPlayers = Controller.getProperlySeatedPlayers()
                local activeOpponents = Controller.findActiveOpponents(properlySeatedPlayers, newSettings.numberOfPlayers)
                runSetUp(1, activeOpponents)
            end)

            -- TurnControl.start() is called by "LeaderSelection" asynchronously,
            -- effectively starting the game.
        end

        --- Set up each module, one by one.
        function runSetUp(index, activeOpponents)
            local moduleInfo = allModules.ordered[index]
            if moduleInfo then
                --Helper.dump(index, " - Set up module", moduleInfo.name)
                local nextContinuation = moduleInfo.module.setUp(settings, activeOpponents)
                if not nextContinuation then
                    nextContinuation = Helper.createContinuation("runSetUp")
                    nextContinuation.run()
                end
                nextContinuation.doAfter(Helper.partialApply(runSetUp, index + 1, activeOpponents))
            else
                --Helper.dump("Done setting all modules")
            end
        end

        --- TTS event handler.
        function onPlayerChangeColor()
            Controller.updateSetupButton()
            Controller.updateSelectionMethods()
        end

        --- TTS event handler.
        function onPlayerConnect()
            Controller.updateSetupButton()
            Controller.updateSelectionMethods()
        end

        --- TTS event handler.
        function onPlayerDisconnect()
            Controller.updateSetupButton()
            Controller.updateSelectionMethods()
        end

        --- UI callback (cf. XML).
        function setLanguage(player, value, id)
            Controller.ui:fromUI(player, value, id)
            -- The locale is changed in real time by the UI, but not the test mode.
            I18N.setLocale(Controller.fields.language)
            Controller.ui:toUI()
            Controller.updateLeaderPoolSizeLabel()
        end

        --- UI callback (cf. XML).
        function setFirstPlayer(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setRandomizePlayerPositions(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setWormEatsTheCard(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setVirtualHotSeat(player, value, id)
            Controller.ui:fromUI(player, value, id)
            if value == "True" then
                Controller.fields.virtualHotSeatMode = 1
            else
                Controller.fields.virtualHotSeatMode = XmlUI.HIDDEN
            end
            Controller.applyVirtualHotSeatMode()
            Controller.ui:toUI()
        end

        --- UI callback (cf. XML).
        function setVirtualHotSeatMode(player, value, id)
            Controller.ui:fromUI(player, value, id)
            Controller.applyVirtualHotSeatMode()
            Controller.ui:toUI()
        end

        --- UI callback (cf. XML).
        function setDifficulty(player, value, id)
            Controller.ui:fromUI(player, value, id)
            if Helper.isElementOf(Controller.fields.difficulty, {"novice", "veteran"}) then
                Controller.fields.brutalEscalation = false
                Controller.fields.expertDeployment = false
                Controller.fields.smartPolitics = false
            else
                Controller.fields.brutalEscalation = true
                Controller.fields.expertDeployment = true
                Controller.fields.smartPolitics = true
            end
            Controller.ui:toUI()
        end

        --- UI callback (cf. XML).
        function setAutoTurnInSolo(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setImperiumRowChurn(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setStreamlinedRivals(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setBrutalEscalation(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setExpertDeployment(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setSmartPolitics(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setStreamlinedRivals(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setHotSeat(player, value, id)
            Controller.ui:fromUI(player, value, id)
            Controller.updateSetupButton()
        end

        --- UI callback (cf. XML).
        function setUseContracts(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setLegacy(player, value, id)
            Controller.ui:fromUI(player, value, id)
            if value == "True" then
                Controller.fields.merakon = false
            else
                Controller.fields.merakon = XmlUI.DISABLED
            end
            Controller.ui:toUI()
        end

        --- UI callback (cf. XML).
        function setMerakon(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setRiseOfIx(player, value, id)
            Controller.ui:fromUI(player, value, id)
            if value == "True" then
                Controller.fields.epicMode = false
            else
                Controller.fields.epicMode = XmlUI.DISABLED
            end
            Controller.ui:toUI()
        end

        --- UI callback (cf. XML).
        function setEpicMode(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setImmortality(player, value, id)
            Controller.ui:fromUI(player, value, id)
            if value == "True" then
                Controller.fields.goTo11 = false
            else
                Controller.fields.goTo11 = XmlUI.DISABLED
            end
            Controller.ui:toUI()
        end

        --- UI callback (cf. XML).
        function setGoTo11(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setLeaderSelection(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setLeaderPoolSize(player, value, id)
            Controller.ui:fromUI(player, value, id)
            Controller.updateLeaderPoolSizeLabel()
        end

        --- UI callback (cf. XML).
        function setTweakLeaderSelection(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setHorizontalHandLayout(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setFormalCombatPhase(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function setSoundEnabled(player, value, id)
            Controller.ui:fromUI(player, value, id)
        end

        --- UI callback (cf. XML).
        function submitGameRankedGame(player, value, id)
            Controller.ui:fromUI(player, value, id)
            --[[
    local seatedPlayers = getSeatedPlayers()
    if #seatedPlayers <= 3 then
        Controller.fields.submitGameRankedGame = false
        broadcastToAll(I18N("need4Players"), Color.fromString("White"))
    end
    Controller.ui:toUI()
    ]]
        end

        --- UI callback (cf. XML).
        function submitGameTournament(player, value, id)
            Controller.ui:fromUI(player, value, id)
            if value == "True" then
                Controller.fields.submitGameRankedGame = false
            end
            Controller.ui:toUI()
        end

        --- UI callback (cf. XML).
        function setUpFromUI()
            if not Controller.ui then
                Helper.dump("No UI. Bouncing button?")
                return
            end

            Controller.ui:hide()
            Controller.ui = nil
            Controller.soloUi:hide()
            Controller.soloUi = nil

            local numberOfPlayers = Controller.getNumberOfPlayers(Controller.fields.virtualHotSeatMode)

            setUp({
                language = Controller.fields.language,
                numberOfPlayers = numberOfPlayers,
                hotSeat = not Controller.isUndefined(Controller.fields.virtualHotSeatMode),
                firstPlayer = Controller.fields.firstPlayer,
                randomizePlayerPositions = Controller.fields.randomizePlayerPositions == true,
                wormEatsTheCard = Controller.fields.wormEatsTheCard == true,
                difficulty = Controller.fields.difficulty,
                autoTurnInSolo = Controller.fields.autoTurnInSolo == true,
                imperiumRowChurn = Controller.fields.imperiumRowChurn == true,
                streamlinedRivals = Controller.fields.streamlinedRivals == true,
                brutalEscalation = Controller.fields.brutalEscalation == true,
                expertDeployment = Controller.fields.expertDeployment == true,
                smartPolitics = Controller.fields.smartPolitics == true,
                useContracts = Controller.fields.useContracts == true or numberOfPlayers == 6,
                legacy = Controller.fields.legacy == true,
                merakon = Controller.fields.merakon == true,
                riseOfIx = Controller.fields.riseOfIx == true,
                epicMode = Controller.fields.epicMode == true,
                immortality = Controller.fields.immortality == true,
                goTo11 = Controller.fields.goTo11 == true,
                leaderSelection = Controller.fields.leaderSelection,
                leaderPoolSize = tonumber(Controller.fields.leaderPoolSize),
                tweakLeaderSelection = Controller.fields.tweakLeaderSelection,
                horizontalHandLayout = Controller.fields.horizontalHandLayout,
                formalCombatPhase = Controller.fields.formalCombatPhase,
                soundEnabled = Controller.fields.soundEnabled,
                submitGameRankedGame = Controller.fields.submitGameRankedGame,
            })
        end

        --- Return the mapping between (player) colors and opponent types. An opponent
        --- type could be:
        --- - a Player instance,
        --- - the "rival" string for an automated rival (or House Hagal in the 1P mode),
        --- - the "puppet" string for a playable but unseated color in hotseat mode.
        --- Later, in opponents (not activeOppenents), Player instances and "puppet" are
        --- replaced by the "human" string.
        function Controller.findActiveOpponents(properlySeatedPlayers, numberOfPlayers)
            local colorsByPreference = {"Green", "Red", "Yellow", "Blue", "Purple", "White"}

            local activeOpponents = {}
            for i, color in ipairs(properlySeatedPlayers) do
                if i <= numberOfPlayers then
                    activeOpponents[color] = Helper.findPlayerByColor(color)
                else
                    break
                end
            end

            local remainingCount = math.max(0, 3 - numberOfPlayers)
            local opponentType = "rival"
            for _, color in ipairs(colorsByPreference) do
                if remainingCount > 0 then
                    if not activeOpponents[color] then
                        activeOpponents[color] = opponentType
                        remainingCount = remainingCount - 1
                    end
                else
                    break
                end
            end

            local remainingPuppetCount = math.max(0, numberOfPlayers - #properlySeatedPlayers)
            for _, color in ipairs(colorsByPreference) do
                if remainingPuppetCount > 0 then
                    if not activeOpponents[color] then
                        activeOpponents[color] = "puppet"
                        remainingPuppetCount = remainingPuppetCount - 1
                    end
                else
                    break
                end
            end

            return activeOpponents
        end

        --- return only the (colors of the) legitimate player depending on the selected
        --- mode (1-4P or 6P).
        function Controller.getProperlySeatedPlayers()
            local seatedPlayers = getSeatedPlayers()

            local authorizedColors = {
                Green = true,
                Yellow = true,
                Blue = true,
                Red = true,
                Purple = #seatedPlayers == 6 or Controller.fields.virtualHotSeatMode == 5,
                White = #seatedPlayers == 6 or Controller.fields.virtualHotSeatMode == 5,
            }

            local properlySeatedPlayers = {}
            for _, color in ipairs(seatedPlayers) do
                if authorizedColors[color] then
                    table.insert(properlySeatedPlayers, color)
                end
            end
            return properlySeatedPlayers
        end

        ---
        function Controller.applyVirtualHotSeatMode()
            local numberOfPlayers = Controller.getNumberOfPlayers(Controller.fields.virtualHotSeatMode)

            if Controller.isUndefined(Controller.fields.virtualHotSeatMode) or numberOfPlayers > 2 then
                Controller.fields.difficulty = XmlUI.HIDDEN
                Controller.fields.autoTurnInSolo = XmlUI.DISABLED
                Controller.fields.imperiumRowChurn = XmlUI.DISABLED
                Controller.fields.streamlinedRivals = XmlUI.DISABLED
                Controller.fields.brutalEscalation = XmlUI.DISABLED
                Controller.fields.expertDeployment = XmlUI.DISABLED
                Controller.fields.smartPolitics = XmlUI.DISABLED
                Controller.soloUi:hide()
            else
                if numberOfPlayers == 1 then
                    Controller.fields.difficulty = "novice"
                    Controller.fields.autoTurnInSolo = false
                    Controller.fields.imperiumRowChurn = true
                    Controller.fields.streamlinedRivals = XmlUI.HIDDEN
                    Controller.fields.brutalEscalation = false
                    Controller.fields.expertDeployment = false
                    Controller.fields.smartPolitics = false
                else
                    Controller.fields.difficulty = XmlUI.HIDDEN
                    Controller.fields.autoTurnInSolo = true
                    Controller.fields.imperiumRowChurn = XmlUI.HIDDEN
                    Controller.fields.streamlinedRivals = true
                    Controller.fields.brutalEscalation = false
                    Controller.fields.expertDeployment = false
                    Controller.fields.smartPolitics = false
                end
                Controller.soloUi:show()
            end

            Controller.fields.leaderSelection_all = allModules.LeaderSelection.getSelectionMethods(numberOfPlayers)
            if numberOfPlayers == 6 then
                Controller.fields.useContracts = XmlUI.DISABLED
            elseif Controller.isUndefined(Controller.fields.useContracts) then
                Controller.fields.useContracts = true
            end

            Controller.updateSetupButton()
            Controller.ui:toUI()
        end

        ---
        function Controller.getNumberOfPlayers(virtualHotSeatMode)
            local numberOfPlayers
            if Controller.isUndefined(virtualHotSeatMode) then
                numberOfPlayers = math.min(6, #Controller.getProperlySeatedPlayers())
            else
                local toNumberOfPlayers = {1, 2, 3, 4, 6}
                numberOfPlayers = toNumberOfPlayers[virtualHotSeatMode]
            end
            return numberOfPlayers
        end

        ---
        function Controller.updateSelectionMethods()
            if Controller.ui then
                local numberOfPlayers = Controller.getNumberOfPlayers(Controller.fields.virtualHotSeatMode)
                Controller.fields.leaderSelection_all = allModules.LeaderSelection.getSelectionMethods(numberOfPlayers)

                Controller.ui:toUI()
            end
        end

        ---
        function Controller.updateSetupButton()
            if Controller.ui then
                local numberOfPlayers = Controller.getNumberOfPlayers(Controller.fields.virtualHotSeatMode)
                Controller.fields.leaderSelection_all = allModules.LeaderSelection.getSelectionMethods(numberOfPlayers)

                local properlySeatedPlayers = Controller.getProperlySeatedPlayers()

                local minPlayerCount
                if Controller.isUndefined(Controller.fields.virtualHotSeatMode) then
                    minPlayerCount = 3
                else
                    minPlayerCount = 1
                end

                if #properlySeatedPlayers < 1 then
                    Controller.fields.submitGameRankedGame = XmlUI.DISABLED
                elseif XmlUI.isDisabled(Controller.fields.submitGameRankedGame) then
                    Controller.fields.submitGameRankedGame = false
                end

                if #properlySeatedPlayers >= minPlayerCount then
                    Controller.ui:setButtonI18N("setUpButton", "setup", true)
                else
                    Controller.ui:setButtonI18N("setUpButton", "notEnoughPlayers", false)
                end

                Controller.ui:toUI()
            end
        end

        ---
        function Controller.updateLeaderPoolSizeLabel()
            local value = Controller.fields.leaderPoolSize
            Controller.fields.leaderPoolSizeLabel = I18N("leaderPoolSizeLabel", {value = value})
            -- Do not use Controller.ui:toUI() to avoid breaking the current UI operation.
            self.UI.setValue("leaderPoolSizeLabel", Controller.fields.leaderPoolSizeLabel)
        end

        ---
        function Controller.isUndefined(value)
            return value == nil or type(value) == "table"
        end

    end)
    __bundle_register("SubmitGame", function(require, _LOADED, __bundle_register, __bundle_modules)
        local Module = require("utils.Module")
        local Helper = require("utils.Helper")
        local I18N = require("utils.I18N")

        local PlayBoard = Module.lazyRequire("PlayBoard")
        local TurnControl = Module.lazyRequire("TurnControl")

        -- This modified variant disables all communication with the ranked server.
        -- local PRIMARY_URL = "http://dunerank.servehttp.com:8081"
        local GOOGLE_DOC_URL = "https://docs.google.com/forms/u/0/d/e/1FAIpQLSfcXJKf9a0xIrOM_cE9W0qvBASCh7q9qTezeVXd5JG71md2cA"

        local SubmitGame = Helper.createClass(nil, {
            fields = {

                -- Partially set on setup, then completed and sorted on each "openSubmitScreen".
                players = {},

                -- Set on setup from settings.
                numberOfPlayers = 0,
                hotseat = false,
                randomizePlayerPositions = false,
                wormEatsTheCard = false,
                legacy = false,
                useContracts = false,
                riseOfIx = false,
                epicMode = false,
                immortality = false,
                bloodlines = true,
                goTo11 = false,
                leaderSelection = nil,
                leaderPoolSize = 0,
                submitGameRankedGame = false,
                submitGameTournament = false,

                -- Set on setup.
                startTime = nil,
                token = nil,

                -- Set on submission.
                firstPlayerColor = nil,
                endTime = nil,
                turn = 0,
                gameSubmitted = false,
            }})

            function SubmitGame.onLoad(state)
                if state.SubmitGame then
                    SubmitGame.fields = state.SubmitGame.fields
                    if SubmitGame.fields.submitGameRankedGame or SubmitGame.fields.submitGameTournament then
                        SubmitGame._staticSetUp()
                    end
                end
            end

            function SubmitGame.onSave(state)
                state.SubmitGame = {
                    fields = SubmitGame.fields
                }
            end

            function SubmitGame.setUp(settings)
                if settings.submitGameRankedGame or settings.submitGameTournament then

                    SubmitGame.fields.players = {}
                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                        local player = Helper.findPlayerByColor(color)
                        table.insert(SubmitGame.fields.players, {
                            steamId = player.steam_id,
                            name = player.steam_name,
                            color = player.color,
                        })
                    end
                    assert(#SubmitGame.fields.players == 4)

                    local fieldNames = {
                        "numberOfPlayers",
                        "hotseat",
                        "randomizePlayerPositions",
                        "wormEatsTheCard",
                        "useContracts",
                        "legacy",
                        "riseOfIx",
                        "epicMode",
                        "immortality",
                        "bloodlines",
                        "goTo11",
                        "leaderSelection",
                        "leaderPoolSize",
                        "submitGameRankedGame",
                        "submitGameTournament",
                    }

                    for _, fieldName in ipairs(fieldNames) do
                        SubmitGame.fields[fieldName] = settings[fieldName]
                    end

                    SubmitGame.fields.startTime = SubmitGame._currentTimestamp()

                    SubmitGame._generateToken(SubmitGame.fields.players, function (token)
                        SubmitGame.fields.token = token
                        SubmitGame._staticSetUp(settings)
                    end)
                end
            end

            function SubmitGame._staticSetUp(settings)
                if SubmitGame.fields.token then
                    Global.setVar("openSubmitScreen", SubmitGame._openSubmitScreen)
                    Global.setVar("closeSubmitGameScreen", SubmitGame._closeSubmitGameScreen)
                    Global.setVar("submitGame", SubmitGame._submitGame)

                    UI.setAttributes("openSubmitScreenPanel", {active = true})
                end
            end

            function SubmitGame._closeSubmitGameScreen()
                UI.setAttributes("submitScreenPanel", {active = false})
            end

            function SubmitGame._openSubmitScreen()
                local playerWith10VP = false

                SubmitGame.fields.firstPlayerColor = TurnControl.getFirstPlayerOfTheGame()

                for _, player in ipairs(SubmitGame.fields.players) do
                    local color = player.color

                    player.score = math.max(0, PlayBoard.getPlayBoard(color):getScore()) -- Why max?
                    player.leader = PlayBoard.getLeaderName(color)
                    player.spice = PlayBoard.getResource(color, "spice"):get()
                    player.solari = PlayBoard.getResource(color, "solari"):get()
                    player.water = PlayBoard.getResource(color, "water"):get()
                    player.firstPlayer = nil

                    playerWith10VP = playerWith10VP or player.score >= 10
                end

                SubmitGame._updateSubmitScreenPanel()

                UI.setAttributes("submitScreenPanel", {active = true})
                UI.setAttributes("submitGameConfirm", {key = "submitGame", interactable = playerWith10VP})
            end

            function SubmitGame._updateSubmitScreenPanel()

                -- Sort players by score, spice, solari, and water.
                table.sort(SubmitGame.fields.players, function(a, b)
                    if a.score ~= b.score then return a.score > b.score end
                    if a.spice ~= b.spice then return a.spice > b.spice end
                    if a.solari ~= b.solari then return a.solari > b.solari end
                    return a.water > b.water
                end)

                for i, player in ipairs(SubmitGame.fields.players) do
                    player.placement = i

                    local attributes = {
                        name = player.name,
                        leader_name = player.leader,
                        victory_points = player.score,
                        spice = player.spice,
                        solaris = player.solari,
                        water = player.water,
                    }

                    for attribute, value in pairs(attributes) do
                        local placementCellIndex = "cell_placement_" .. i
                        UI.setAttributes(placementCellIndex, {color = player.color})

                        local placementIndex = "placement_" .. i .. "_" .. attribute
                        UI.setAttribute(placementIndex, "text", value)

                        local cellIndex = "cell_placement_" .. i .. "_" .. attribute
                        UI.setAttributes(cellIndex, {color = player.color})
                    end
                end
            end

            function SubmitGame._generateToken(players, tokenSetter)
                tokenSetter(0)
                -- SubmitGame._makeWebRequest(PRIMARY_URL .. "/generation/v1/token", "POST", players, function (request)
                --     if request.is_error then
                --         Helper.dump("Failed to generate a token:", request.text)
                --         tokenSetter(0)
                --     else
                --         tokenSetter(request.text)
                --     end
                -- end)
            end

            function SubmitGame._submitGame()
                if SubmitGame.fields.gameSubmitted then
                    broadcastToAll(I18N("gameAlreadySubmitted"), "Orange")
                else
                    SubmitGame.firstPlayerColor = TurnControl.getFirstPlayerOfTheGame()
                    SubmitGame.endTime = SubmitGame._currentTimestamp()
                    SubmitGame.turn = TurnControl.getCurrentRound()

                    SubmitGame._doSubmitGameStats()
                    SubmitGame._doSubmitGame()

                    UI.setAttributes("submitGameConfirm", {key = "gameSubmitted", interactable = false})
                    SubmitGame.fields.gameSubmitted = true
                end
            end

            function SubmitGame._doSubmitGameStats()
                local fields = SubmitGame.fields
                local body = {
                    ["entry.4096"] = fields.startTime,
                    ["entry.4097"] = fields.endTime,
                    -- ["entry.754082197"] = fields.submitGameRankedGame,
                    -- ["entry.1220354769"] = fields.submitGameTournament,
                    ["entry.4098"] = fields.turn,
                    ["entry.4099"] = fields.firstPlayerColor,

                    ["entry.4100"] = fields.players[1].name,
                    ["entry.4101"] = fields.players[1].leader,
                    ["entry.4102"] = fields.players[1].steamId,
                    ["entry.4103"] = fields.players[1].color,

                    ["entry.4104"] = fields.players[2].name,
                    ["entry.4105"] = fields.players[2].leader,
                    ["entry.4112"] = fields.players[2].steamId,
                    ["entry.4113"] = fields.players[2].color,

                    ["entry.4114"] = fields.players[3].name,
                    ["entry.4115"] = fields.players[3].leader,
                    ["entry.4116"] = fields.players[3].steamId,
                    ["entry.4117"] = fields.players[3].color,

                    ["entry.4118"] = fields.players[4].name,
                    ["entry.4119"] = fields.players[4].leader,
                    ["entry.4120"] = fields.players[4].steamId,
                    ["entry.4121"] = fields.players[4].color,

                    -- ["entry.845707618"] = false,
                    -- ["entry.2040351705"] = false,
                    -- ["entry.744802168"] = fields.immortality,
                    -- ["entry.854599203"] = true,
                    -- ["entry.419313208"] = fields.token,
                    -- ["entry.2086786594"] = fields.epicMode,
                    -- ["entry.530174472"] = fields.goTo11,
                    ["entry.4128"] = fields.leaderSelection,
                    ["entry.4129"] = fields.leaderPoolSize,
                    ["entry.4130"] = fields.numberOfPlayers,
                    ["entry.4131"] = true,  -- bloodline
                }

                local normalizedBody = {}
                for k, v in pairs(body) do
                    normalizedBody[k] = type(v) == "string" and v or tostring(v)
                end

                broadcastToAll(GOOGLE_DOC_URL, "Red")
                WebRequest.post(GOOGLE_DOC_URL .. "/formResponse", normalizedBody, function (request)
                    broadcastToAll(request.text, "Red")
                    if request.is_error then
                        Helper.dump("Failed to submit stats:", request.text)
                    else
                        broadcastToAll(I18N("gameSubmitted"), "Red")
                    end
                end)
            end

            function SubmitGame._doSubmitGame()
                local fields = SubmitGame.fields
                local body = {
                    token = fields.token,
                    firstPlayerColor = fields.firstPlayerColor,
                    numberOfPlayers = fields.numberOfPlayers,
                    useContracts = fields.useContracts,
                    riseOfIx = false,
                    epicMode = fields.epicMode,
                    imperium = false,
                    immortality = fields.immortality,
                    uprising = true,
                    bloodLines = true,
                    goTo11 = fields.goTo11,
                    leaderSelection = fields.leaderSelection,
                    leaderPoolSize = fields.leaderPoolSize,
                    rankedGame = fields.submitGameRankedGame,
                    tournament = fields.submitGameTournament,
                    playerData = fields.players,
                    startTime = fields.startTime,
                    endTime = fields.endTime,
                    turn = fields.turn,
                }

                -- SubmitGame._makeWebRequest(PRIMARY_URL .. "/api/games/submit", "POST", body, function (request)
                --     if request.is_error then
                --         Helper.dump("Failed to submit game:", request.text)
                --     else
                --         broadcastToAll(request.text, "White")
                --     end
                -- end)
            end

            function SubmitGame._makeWebRequest(url, method, body, callback)
                local headers = {
                    ["Content-Type"] = "application/json",
                    Accept = "application/json"
                }

                local jsonString = JSON.encode(body)

                WebRequest.custom(url, method, true, jsonString, headers, callback)
            end

            function SubmitGame._currentTimestamp()
                -- Weird: osdateparam != string|osdate...
                return os.date("!%m/%d/%Y %H:%M:%S", os.time(os.date("!*t")))
            end

            return SubmitGame

        end)
        __bundle_register("utils.I18N", function(require, _LOADED, __bundle_register, __bundle_modules)
            local Helper = require("utils.Helper")

            local I18N = {
            locales = {}}

            ---
            function I18N.getLocale()
                return Global.getVar("Locale")
            end

            ---
            function I18N.setLocale(newLocale)
                assert(I18N.locales[newLocale], ("The locale %q is unknown"):format(newLocale))
                Global.setVar("Locale", newLocale)
                Helper.emitEvent("locale", newLocale)
            end

            ---
            function I18N.agree(quantity, noun)
                if math.abs(quantity) > 1 then
                    return I18N(noun .. "s")
                else
                    return I18N(noun)
                end
            end

            ---
            function I18N.translate(key, args)
                assert(key)
                assert(type(key) == "string", type(string))
                local currentLocale = I18N.getLocale()
                if not currentLocale then
                    currentLocale = "en"
                end
                local locale = I18N.locales[currentLocale]
                if not locale then
                    error("Missing locale: " .. currentLocale)
                end

                local content = locale[key]
                assert(not content or type(content) == "string", key)
                return content and I18N._parse(content, args) or "{" .. key .. "}"
            end

            function I18N._parse(content, args)
                assert(content)
                assert(type(content) == "string", type(string))
                local text = ""
                local s = 1
                repeat
                    local done = true
                    local i = content:find("{", s, true)
                    if i then
                        local e = content:find("}", i, true)
                        if e then
                            local expression = content:sub(i + 1, e - 1)
                            local v = I18N._evaluate(expression, args)
                            text = text .. content:sub(s, i - 1) .. tostring(v or ("{" .. expression .. "}"))
                            s = e + 1
                            done = false
                        end
                    end
                until done
                text = text .. content:sub(s)
                return text
            end

            function I18N._evaluate(expression, args)
                return args[expression]
            end

            setmetatable(I18N, {__call = function (_, ...) return I18N.translate(...) end})

            return I18N

        end)
        __bundle_register("utils.Helper", function(require, _LOADED, __bundle_register, __bundle_modules)
            ---@class Vector
            ---@field x number
            ---@field y number
            ---@field z number

            local Helper = {
                sharedTables = {},
                eventListenersByTopic = {},
                uniqueNamePool = {},

                MINIMAL_DURATION = 1 / 30,
                AREA_BUTTON_COLOR = {0, 0, 0, 0},
                ERASE = function ()
                    return "__erase__"
                end
            }

            math.randomseed(os.time())

            -- *** Exception handling ***

            --[[
    Note: this function won't be able to catch any "<Unknow Error>",
    because it happen inside the native code called by Lua.
]]
            ---@param context string
            ---@param callable function
            function Helper.wrapFailable(context, callable, defaultReturnValue)
                return function (...)
                    local ranSuccessfully, returnValue = pcall(callable, ...)
                    if ranSuccessfully then
                        return returnValue
                    else
                        broadcastToAll("An error has happened in a script!", "Red")
                        log("Error in script (Global): " .. returnValue)
                        Helper._postError(Helper.functionToString(context, ...), returnValue)
                        return defaultReturnValue
                    end
                end
            end

            ---
            function Helper._postError(context, error)

                local saveInfo = Global.getVar("saveInfo")
                if not saveInfo then
                    return
                end

                local url = "https://hihan.org/tts-error-log/index.php"
                local form = {
                    action = "add",
                    modname = saveInfo.modname,
                    build = saveInfo.build,
                    stable = saveInfo.stable,
                    context = Helper.toString(context),
                    error = Helper.toString(error),
                }

                WebRequest.post(url, form, function(request)
                    if request.is_error then
                        Helper.dump("Request failed:", request.error)
                    else
                        local responseData = JSON.decode(request.text)
                        if not responseData.code or responseData.code ~= "0" then
                            Helper.dump("Response:", responseData)
                        end
                    end
                end)
            end

            -- *** Event listeners ***

            function Helper.registerEventListener(topic, listener)
                return Helper.registerEventListenerWithPriority(topic, 0, listener)
            end

            --[[
    Register a callback to be synchronously called each time an event of the
    corresponding topic is emitted. Each callback will be called with the same
    parameters used for emitting the event. The provided priority specifies in
    which order a callback is called (higher priority callbacks are called
    first). Note that it is best to rely as little as possible on priorities.
]]
            ---@param topic string
            ---@param priority integer
            ---@param listener function
            ---@return function the provided callback (to register and store it in the same line).
            function Helper.registerEventListenerWithPriority(topic, priority, listener)
                assert(topic)
                assert(priority)
                assert(listener)

                local listenersWithPriority = Helper.eventListenersByTopic[topic]
                if not listenersWithPriority then
                    listenersWithPriority = {}
                    Helper.eventListenersByTopic[topic] = listenersWithPriority
                end

                local index
                for i, listenerWithPriority in ipairs(listenersWithPriority) do
                    if listenerWithPriority.priority < priority then
                        index = i
                        break
                    end
                end
                index = index or #listenersWithPriority + 1

                table.insert(listenersWithPriority, index, {
                    listener = listener,
                    priority = priority,
                })

                return listener
            end

            --[[
    Unregister a previously registered callback for a given topic.
]]
            ---@param topic string
            ---@param listener function
            function Helper.unregisterEventListener(topic, listener)
                assert(listener)
                local listenersWithPriority = Helper.eventListenersByTopic[topic]

                local found = false
                for i, listenerWithPriority in ipairs(listenersWithPriority) do
                    if listenerWithPriority.listener == listener then
                        table.remove(listenersWithPriority, i)
                        found = true
                        break
                    end
                end
                assert(found)

                if #Helper.getKeys(listenersWithPriority) == 0 then
                    Helper.eventListenersByTopic[topic] = nil
                end
            end

            --[[
    Emit an event: all listeners registered for the specified topic will
    be called with the following parameters.
]]
            ---@param topic any
            ---@param ... unknown
            function Helper.emitEvent(topic, ...)
                local listenersWithPriority = Helper.eventListenersByTopic[topic]
                if listenersWithPriority then
                    for _, listenerWithPriority in ipairs(Helper.shallowCopy(listenersWithPriority)) do
                        Helper.wrapFailable("listener on " .. tostring(topic), listenerWithPriority.listener)(...)
                    end
                end
            end

            -- *** GUID helper functions ***

            ---@param data any
            ---@return boolean
            function Helper._isSomeKindOfObject(data)
                return getmetatable(data) ~= nil
            end

            --[[
    Return a copy of the provided data where every leaf identified as a
    GUID is replaced by the corresponding object (or nil if it can't be
    resolved).
]]
            ---@param reportUnresolvedGUIDs boolean
            ---@param data any
            ---@return any
            function Helper.resolveGUIDs(reportUnresolvedGUIDs, data)
                local newData = data
                if data == Helper.ERASE then
                    -- NOP
                elseif data then
                    local t = type(data)
                    if t == "string" then
                        -- FIXME Doesn't Lua support more elaborate regex?
                        if data:match("[a-z0-9][a-z0-9][a-z0-9][a-z0-9][a-z0-9][a-z0-9]") then
                            newData = getObjectFromGUID(data)
                            if not newData and reportUnresolvedGUIDs then
                                log("[resolveGUIDs] Unknow GUID: '" .. data .. "'")
                            end
                        else
                            log("[resolveGUIDs] Not a GUID: '" .. data .. "'")
                        end
                    elseif t == "table" then
                        -- Avoid digging inside complex object.
                        if not Helper._isSomeKindOfObject(data) then
                            newData = {}
                            for i, v in ipairs(data) do
                                newData[i] = Helper.resolveGUIDs(reportUnresolvedGUIDs, v)
                            end
                            for k, v in pairs(data) do
                                newData[k] = Helper.resolveGUIDs(reportUnresolvedGUIDs, v)
                            end
                        end
                    elseif t == "number" then
                        -- NOP
                    else
                        -- Not a problem per se, but still unexpected in our use cases.
                        log("[resolveGUIDs] Unknown type: " .. t)
                        -- NOP
                    end
                end
                return newData
            end

            --[[
    A rather useless function in appearance. However, calls to this function are
    intended to be patched by a small utility which will replace the provided
    coordinates by those existing in the TTS save file.

    Why not doing this replacement at runtime you're wondering? Because scripts
    are reloaded on multiple occasions: when loading a mod (which is nothing
    more than a blank save), when restoring a game at any point, but also when
    spawning an object or simply moving an instance out of a bag.

    In other words, no assumptions can be made on the world state, at least
    regarding any object which can move around. This is especially true for
    inline code running before 'onLoad' which can well be executed before all
    legitimate objects have been created or recreated.

    As such, things like taking the "initial" position of an object is doomed to
    fail, and one shall rely on hardcoded positions or using some kind of anchor
    objects. This function and its small update utility is simply a way to get
    around this problem when developing by recovering a truly stable information.
]]
            ---@param GUID string
            ---@param x number
            ---@param y number
            ---@param z number
            ---@return Vector
            function Helper.getHardcodedPositionFromGUID(GUID, x, y, z)
                return Vector(x, y, z)
            end

            -- *** Deck manipulations ***

            --- A synthetic move of an object, combining multiple operations.
            ---@param object table
            ---@param position? Vector
            ---@param rotation? Vector
            ---@param smooth? boolean
            ---@param flipAtTheEnd? boolean
            ---@return Continuation A continuation run once the object is motionless.
            function Helper._moveObject(object, position, rotation, smooth, flipAtTheEnd)
                assert(object)

                local continuation = Helper.createContinuation("Helper._moveObject")

                if smooth then
                    object.setPositionSmooth(position)
                else
                    object.setPosition(position)
                end

                if rotation then
                    if smooth then
                        object.setRotationSmooth(rotation)
                    else
                        object.setRotation(rotation)
                    end
                end

                Helper.onceMotionless(object).doAfter(function ()
                    if flipAtTheEnd then
                        object.flip()
                    end
                    continuation.run(object)
                end)

                return continuation
            end

            --- Prefer the "deal" method when possible? Would it prevent the card from being
            --- grabbed by anther player's hand zone?
            ---@param zone table
            ---@param position Vector?
            ---@param rotation Vector?
            ---@param smooth boolean?
            ---@param flipAtTheEnd boolean?
            ---@return Continuation A continuation run once the object is spawned.
            function Helper.moveCardFromZone(zone, position, rotation, smooth, flipAtTheEnd)
                assert(zone.type == "Scripting")
                local continuation = Helper.createContinuation("Helper.moveCardFromZone")
                local deckOrCard = Helper.getDeckOrCard(zone)
                if deckOrCard then
                    if deckOrCard.type == "Deck" then
                        local parameters = {
                            position = position,
                            flip = flipAtTheEnd and true,
                            smooth = smooth or false,
                            -- It matters that the target position is not directly a deck or card.
                            -- Otherwise, the taken card won't be created and the callback won't be
                            -- called.
                            callback_function = continuation.run
                        }
                        if rotation then
                            parameters.rotation = rotation
                        end
                        deckOrCard.takeObject(parameters)
                    elseif deckOrCard.type == "Card" then
                        local safePosition = position + Vector(0, 1, 0)
                        Helper._moveObject(deckOrCard, safePosition, rotation, smooth, flipAtTheEnd).doAfter(continuation.run)
                    else
                        error("Unexpected type: " .. deckOrCard.type)
                    end
                else
                    continuation.run(nil)
                end
                return continuation
            end

            --[[
    Return a list of cards (not spawned in general) from the returned value of
    'Helper.getDeckOrCard(zone)'. If there is none, an empty list is returned.
]]
            ---@param deckOrCard table?
            ---@return table
            function Helper.getCards(deckOrCard)
                if deckOrCard then
                    if deckOrCard.type == "Deck" then
                        return deckOrCard.getObjects()
                    elseif deckOrCard.type == "Card" then
                        return {deckOrCard}
                    else
                        error("Unexpected type: " .. deckOrCard.type)
                    end
                else
                    return {}
                end
            end

            --[[
    Return the number of cards from the returned value of 'Helper.getDeckOrCard(zone)'.
]]
            ---@param deckOrCard table?
            ---@return integer
            function Helper.getCardCount(deckOrCard)
                if not deckOrCard then
                    return 0
                elseif deckOrCard.type == "Card" then
                    return 1
                elseif deckOrCard.type == "Deck" then
                    return deckOrCard.getQuantity()
                else
                    return 0
                end
            end

            --[[
    Return the first deck or card found in the provide zone. Deck and card hold
    by a player are ignored.
]]
            ---@param zone table
            ---@return table?
            function Helper.getDeckOrCard(zone)
                assert(zone)
                assert(type(zone) ~= 'string', tostring(zone) .. ' looks like a GUID, not a zone')
                -- It is pairs, not ipairs!
                for _, object in pairs(zone.getObjects()) do
                    if object.type and not object.held_by_color and (object.type == "Card" or object.type == "Deck") then
                        return object
                    end
                end
                return nil
            end

            ---@deprecated Use Helper.getDeckOrCard and deal with real life.
            function Helper.getDeck(zone)
                assert(zone)
                assert(type(zone) ~= 'string', tostring(zone) .. ' looks like a GUID, not a zone')
                for _, object in ipairs(zone.getObjects()) do
                    if not object.held_by_color and object.type == "Deck" then return object end
                end
                return nil
            end

            ---@deprecated Use Helper.getDeckOrCard and deal with real life.
            function Helper.getCard(zone)
                assert(zone)
                assert(type(zone) ~= 'string', tostring(zone) .. ' looks like a GUID, not a zone')
                for _, object in ipairs(zone.getObjects()) do
                    if not object.held_by_color and object.type == "Card" then return object end
                end
                return nil
            end

            -- *** Anchors ***

            --[[
    The created anchor will be saved but could be automatically destroyed at
    reload using Helper.destroyTransientObjects().
]]
            ---@param nickname string?
            ---@param position Vector
            ---@return Continuation A continuation run once the anchor is spawned.
            function Helper.createTransientAnchor(nickname, position)
                local continuation = Helper.createContinuation("Helper.createTransientAnchor")

                local data = {
                    Name = "Custom_Model",
                    Transform = {
                        posX = 0,
                        posY = 0,
                        posZ = 0,
                        rotX = 0,
                        rotY = 180,
                        rotZ = 0,
                        scaleX = 1,
                        scaleY = 1,
                        scaleZ = 1
                    },
                    Nickname = nickname,
                    Description = "Generated transient anchor.",
                    GMNotes = "",
                    AltLookAngle = {
                        x = 0,
                        y = 0,
                        z = 0
                    },
                    ColorDiffuse = {
                        r = 1.0,
                        g = 0.0,
                        b = 1.0
                    },
                    LayoutGroupSortIndex = 0,
                    Value = 0,
                    Locked = true,
                    Grid = false,
                    Snap = false,
                    IgnoreFoW = false,
                    MeasureMovement = false,
                    DragSelectable = true,
                    Autoraise = true,
                    Sticky = false,
                    Tooltip = true,
                    GridProjection = false,
                    HideWhenFaceDown = false,
                    Hands = false,
                    CustomMesh = {
                        MeshURL = "https://steamusercontent-a.akamaihd.net/ugc/2042984592862608679/0383C231514AACEB52B88A2E503A90945A4E8143/",
                        DiffuseURL = "",
                        NormalURL = "",
                        ColliderURL = "",
                        Convex = true,
                        MaterialIndex = 0,
                        TypeIndex = 4,
                        CustomShader = {
                            SpecularColor = {
                                r = 0,
                                g = 0,
                                b = 0
                            },
                            SpecularIntensity = 0.0,
                            SpecularSharpness = 7.0,
                            FresnelStrength = 0.4
                        },
                        CastShadows = false
                    },
                    LuaScript = "",
                    LuaScriptState = "",
                    XmlUI = ""
                }

                spawnObjectData({
                    data = data,
                    position = position,
                    callback_function = function (anchor)
                        Helper.markAsTransient(anchor)
                        anchor.interactable = false
                        continuation.run(anchor)
                    end})

                    return continuation
                end

                ---
                function Helper.markAsTransient(object)
                    -- Tagging is not usable on a zone without filtering its content.
                    object.setGMNotes("Transient")
                    return object
                end

                ---
                function Helper._isTransient(object)
                    return object.getGMNotes() == "Transient"
                end

                ---
                function Helper.destroyTransientObjects()
                    local count = 0
                    for _, object in ipairs(Global.getObjects()) do
                        if Helper._isTransient(object) then
                            --log("Destroy " .. object.getName())
                            object.destruct()
                            count = count + 1
                        end
                    end
                    --log("Destroyed " .. tostring(count) .. " anchors.")
                end

                -- *** Snappoints and anchored buttons ***

                --[[
    Create a snapPoint relative to a parent centered on the provided zone, but
    at the height of the parent.
]]
                ---
                function Helper.createRelativeSnapPointFromZone(parent, zone, rotationSnap, tags)
                    return Helper.createRelativeSnapPoint(parent, zone.getPosition(), rotationSnap, tags)
                end

                function Helper.createRelativeSnapPoint(parent, position, rotationSnap, tags)
                    local p = Vector(position.x, parent.getPosition().y, position.z)
                    local snapPoint = {
                        position = parent.positionToLocal(p) + Vector(0, 0.25, 0),
                        rotation_snap = rotationSnap,
                        tags = tags
                    }
                    return snapPoint
                end

                ---
                function Helper.createAnchoredAreaButton(zone, ground, aboveGround, tooltip, callback)
                    assert(zone)
                    assert(aboveGround)
                    local p = zone.getPosition()
                    local anchorPosition = Vector(p.x, ground - 0.5, p.z)
                    Helper.createTransientAnchor(nil, anchorPosition).doAfter(function (anchor)
                        Helper.createAreaButton(zone, anchor, ground + aboveGround, tooltip, callback)
                    end)
                end

                ---
                function Helper.createAreaButton(zone, anchor, altitude, tooltip, callback)
                    assert(zone)
                    assert(anchor)
                    assert(altitude)

                    local zoneScale = zone.getScale()
                    local sizeFactor = 500 -- 350

                    local width = zoneScale.x * sizeFactor
                    local height = zoneScale.z * sizeFactor

                    return Helper.createSizedAreaButton(width, height, anchor, altitude, tooltip, callback)
                end

                ---
                function Helper.createExperimentalAreaButton(zone, anchor, altitude, tooltip, callback)
                    assert(zone)
                    assert(anchor)
                    assert(altitude)

                    local zoneScale = zone.getScale()

                    local width = zoneScale.x * 450
                    local height = zoneScale.z * 200

                    return Helper.createSizedAreaButton(width, height, anchor, altitude, tooltip, callback)
                end

                ---
                function Helper.createSizedAreaButton(width, height, anchor, altitude, tooltip, callback)
                    assert(anchor)

                    local anchorPosition = anchor.getPosition()

                    local parameters = {
                        click_function = Helper.registerGlobalCallback(callback),
                        position = Vector(anchorPosition.x, altitude, anchorPosition.z),
                        width = width,
                        height = height,
                        color = Helper.AREA_BUTTON_COLOR,
                        hover_color = {0.7, 0.7, 0.7, 0.7},
                        press_color = {0.5, 1, 0.5, 0.4},
                        font_color = {1, 1, 1, 100},
                        tooltip = tooltip,
                    }

                    -- 0.75 | 10 ?
                    Helper.createAbsoluteButtonWithRoundness(anchor, 0.75, parameters)

                    return parameters.click_function
                end

                ---
                function Helper.createButton(object, parameters)
                    return Helper._createWidget("Button", object, parameters)
                end

                ---
                function Helper.createInput(object, parameters)
                    return Helper._createWidget("Input", object, parameters)
                end

                ---
                function Helper._createWidget(name, object, parameters)
                    assert(object)
                    local createWidget = object["create" .. name]
                    assert(createWidget)
                    local getWidgets = object["get" .. name .. "s"]
                    assert(getWidgets)

                    local isOldIndexes = {}
                    Helper.forEach(getWidgets() or {}, function (k, v)
                        assert(v.index)
                        isOldIndexes[v.index] = true
                    end)

                    createWidget(parameters)

                    local newIndexes = {}
                    Helper.forEach(getWidgets() or {}, function (k, v)
                        if not isOldIndexes[v.index] then
                            table.insert(newIndexes, v.index)
                        end
                    end)

                    --assert(#newIndexes == 1)
                    assert(#newIndexes <= 1)
                    return newIndexes[1]
                end

                --[[
    Indirect call to createButton adjusting the provided parameters to
    counteract the position, scale and rotation of the parent object.
    TTS does offer a positionToLocal method, but which only accounts for
    the position and (partly to the) scale, not the rotation. The
    convention for the world coordinates is a bit twisted here since the
    X coordinate is inverted.
]]
                ---
                function Helper._createAbsoluteButton(object, parameters)
                    return Helper.createAbsoluteButtonWithRoundness(object, 0.25, parameters)
                end

                ---
                function Helper.createAbsoluteButtonWithRoundness(object, roundness, parameters)
                    return Helper.createButton(object, Helper._createAbsoluteWidgetWithRoundnessParameters(object, roundness, parameters))
                end

                ---
                function Helper._createAbsoluteInputWithRoundness(object, roundness, parameters)
                    return Helper.createInput(object, Helper._createAbsoluteWidgetWithRoundnessParameters(object, roundness, parameters))
                end

                ---
                function Helper._createAbsoluteWidgetWithRoundnessParameters(object, roundness, parameters)
                    assert(object)
                    assert(roundness >= 0, "Zero or negative roundness won't work as intended.")
                    assert(roundness <= 10, "Roundness beyond 10 won't work as intended.")
                    if parameters.color and parameters.font_color then
                        --[[
            The opacity of a button color is applied to its content, including the label.
            Thus, to achieve a transparent button with a visible lablel, the alpha of the
            "font_color" needs to be pushed beyond 1. In fact, in this situation, the
            alpha seems to be interpreted as a percentage (100% being full opaque).
        ]]
                        assert(parameters.color[4] > 0 or parameters.font_color[4] > 1, "Unproper label opacity!")
                    end

                    --[[
        Scale is a problem here. We change it to artificially adjust the roundness, but
        we also needs to ajust the font height, which is capped and more or less blurry
        depending on it...
    ]]

                    local scale = object.getScale()
                    local invScale = Vector(1 / scale.x, 1 / scale.y, 1 / scale.z)

                    -- Only to counteract the absolute roundness of the background.
                    local rescale = 1 / roundness

                    local p = parameters['position']
                    if p then
                        p = Helper.toVector(p)
                        -- Inverting the X coordinate comes from our global 180?? rotation around Y.
                        p = Vector(p.x, p.y, p.z)

                        p = p - object.getPosition()
                        p = Vector(-p.x, p.y, p.z)

                        p:scale(invScale)

                        -- Proper order?
                        local r = object.getRotation()
                        p:rotateOver('x', -r.x)
                        p:rotateOver('y', -r.y)
                        p:rotateOver('z', -r.z)

                        parameters['position'] = p
                    end

                    local s = parameters['scale']
                    if not s then
                        s = Vector(1, 1, 1)
                    else
                        s = Helper.toVector(s)
                    end
                    s = s * invScale * (1 / rescale)
                    parameters['scale'] = s

                    local w = parameters['width']
                    if not w then
                        w = 1
                    end
                    w = w * rescale
                    parameters['width'] = w

                    local h = parameters['height']
                    if not h then
                        h = 1
                    end
                    h = h * rescale
                    parameters['height'] = h

                    local font_size = parameters['font_size']
                    if not font_size then
                        font_size = 1
                    end
                    font_size = font_size * rescale
                    assert(font_size <= 720, "You hit the max font size of 720.")
                    parameters['font_size'] = font_size

                    return parameters
                end

                ---
                function Helper.collectSnapPoints(object, net)
                    if not object then
                        return
                    end
                    local snapPoints = object.getSnapPoints()
                    for _, snapPoint in ipairs(snapPoints) do
                        if snapPoint.tags then
                            for _, tag in ipairs(snapPoint.tags) do
                                for prefix, collector in pairs(net) do
                                    if Helper.startsWith(tag, prefix) then
                                        local name = tag:sub(prefix:len() + 1):gsub("^%u", string.lower)
                                        collector(name, object.positionToWorld(snapPoint.position))
                                    end
                                end
                            end
                        else
                            Helper.dump("Unexpected snap tags:", snapPoint.tags)
                        end
                    end
                end

                -- *** Dynamic (button) callbacks ***

                ---
                function Helper.registerGlobalCallback(callback)
                    local GLOBAL_COUNTER_NAME = "generatedCallbackNextIndex"
                    if callback then
                        assert(type(callback) == "function", "Expected a function, got a " .. type(callback))
                        local uniqueName
                        if #Helper.uniqueNamePool > 0 then
                            uniqueName = Helper.uniqueNamePool[1]
                            table.remove(Helper.uniqueNamePool, 1)
                        else
                            local nextIndex = Global.getVar(GLOBAL_COUNTER_NAME) or 1
                            if nextIndex >= 300 then
                                Helper.dump("Alarming dynamic global callback count:", nextIndex)
                            end
                            Global.setVar(GLOBAL_COUNTER_NAME, nextIndex + 1)
                            uniqueName = "generatedCallback" .. tostring(nextIndex)
                        end
                        Global.setVar(uniqueName, Helper.wrapFailable(uniqueName, callback))
                        return uniqueName
                    else
                        return Helper._getNopCallback()
                    end
                end

                ---
                function Helper.unregisterGlobalCallback(uniqueName)
                    if uniqueName ~= "generatedCallback0" then
                        local callback = Global.getVar(uniqueName)
                        --assert(callback, "Unknown global callback: " .. uniqueName)
                        if callback then
                            Global.setVar(uniqueName, function ()
                                Helper.dump("Dead callback called:", uniqueName)
                            end)
                            table.insert(Helper.uniqueNamePool, uniqueName)
                        else
                            Helper.dump("Unknown global callback: " .. uniqueName)
                        end
                    end
                end

                ---
                function Helper.clearButtons(object)
                    local buttons = object.getButtons()
                    if buttons then
                        for _, button in ipairs(buttons) do
                            local callback = button.click_function
                            if callback then
                                assert(Helper.startsWith(callback, "generatedCallback"), "Not a generated callback: " .. callback)
                                Helper.unregisterGlobalCallback(callback)
                            end
                        end
                        object.clearButtons()
                    end
                end

                ---
                function Helper._getButton(object, index)
                    local buttons = object.getButtons()
                    assert(buttons)
                    for _, button in ipairs(buttons) do
                        if button.index == index then
                            return button
                        end
                    end
                    return nil
                end

                ---
                function Helper._removeButton(object, index)
                    local button = Helper._getButton(object, index)
                    assert(button, "No button with index: " .. tostring(index))
                    local callback = button.click_function
                    if callback then
                        assert(Helper.startsWith(callback, "generatedCallback"), "Not a generated callback: " .. callback)
                        Helper.unregisterGlobalCallback(callback)
                    end
                    object.removeButton(index)
                end

                ---
                function Helper.removeButtons(object, indexes)
                    local orderedIndexes = indexes
                    table.sort(orderedIndexes, function (a, b) return a > b end)
                    local previousIndex
                    for _, index in ipairs(indexes) do
                        assert(not previousIndex or previousIndex > index)
                        Helper._removeButton(object, index)
                        previousIndex = index
                    end
                end

                -- *** Continuations ***

                ---@param name string?
                ---@return Continuation
                function Helper.createContinuation(name)
                    assert(name)

                    if not Helper.pendingContinuations then
                        Helper.pendingContinuations = {}
                    end

                    ---@class Continuation
                    ---@field name string
                    ---@field what function
                    ---@field tick function
                    ---@field doAfter function
                    ---@field next function
                    ---@field finish function
                    ---@field run function
                    ---@field cancel function
                    ---@field forget function

                    local continuation = {
                        name = name,
                        start = Time.time,
                        canceled = false,
                        done = false,
                        actions = {},
                        what = function ()
                            return "continuation"
                        end
                    }

                    continuation.tick = function (toBeNotified)
                        local duration = Time.time - continuation.start
                        if toBeNotified and duration > 10 then
                            toBeNotified()
                        else
                            assert(duration < 10, "Roting continuation: " .. (continuation.name or "<nil>"))
                        end
                    end

                    continuation.doAfter = function (action)
                        assert(type(action) == 'function')
                        if continuation.done then
                            if not continuation.canceled then
                                local wrappedAction = Helper.wrapFailable("sync after " .. tostring(continuation.name), action)
                                wrappedAction(table.unpack(continuation.parameters, 1, continuation.parameters.n))
                            end
                        else
                            table.insert(continuation.actions, action)
                        end
                    end

                    continuation.next = function (...)
                        continuation.parameters = table.pack(...)
                        for _, action in ipairs(continuation.actions) do
                            local wrappedAction = Helper.wrapFailable("async after " .. tostring(continuation.name), action)
                            wrappedAction(...)
                        end
                    end

                    continuation.finish = function ()
                        Helper.pendingContinuations[continuation] = nil
                        continuation.done = true
                    end

                    continuation.run = function (...)
                        continuation.next(...)
                        continuation.finish()
                    end

                    continuation.cancel = function ()
                        continuation.canceled = true
                        continuation.finish()
                    end

                    continuation.forget = function ()
                        Helper.pendingContinuations[continuation] = nil
                    end

                    Helper.pendingContinuations[continuation] = true

                    return continuation
                end

                ---@return Continuation
                function Helper.fakeContinuation(...)
                    local fakeContinuation = Helper.createContinuation("Helper.alwaysContinuation")
                    fakeContinuation.run(...)
                    return fakeContinuation
                end

                ---@param timeout number?
                ---@return Continuation
                function Helper.onceStabilized(timeout)
                    local continuation = Helper.createContinuation("Helper.onceStabilized")
                    continuation.forget()

                    local start = os.time()
                    local delayed = false
                    local success = false

                    Wait.condition(function ()
                        continuation.run(success)
                    end, function ()
                        local duration = os.time() - start
                        success = Helper.isStabilized(delayed or duration <= 5)
                        if not success then
                            if not delayed and duration > 5 then
                                delayed = true
                                broadcastToAll("Delaying transition (see system log)...")
                            end
                            if duration > (timeout or 10) then
                                return true
                            end
                        end
                        return success
                    end)

                    return continuation
                end

                ---@return boolean
                function Helper.isStabilized(beQuiet)
                    local count = 0
                    if Helper.pendingContinuations then
                        for continuation, _ in pairs(Helper.pendingContinuations) do
                            if continuation then
                                if not beQuiet then
                                    log("Pending continuation: " .. continuation.name)
                                    continuation.tick(function ()
                                        log("Forgetting the pending continuation on timeout")
                                        continuation.forget()
                                    end)
                                end
                                count = count + 1
                            end
                        end
                    end
                    return count == 0
                end

                ---@return Continuation
                function Helper.onceMotionless(object)
                    local guid = object.getGUID()
                    local continuation = Helper.createContinuation("Helper.onceMotionless")
                    -- Wait 1 frame for the movement to start.
                    Wait.time(function ()
                        Wait.condition(function ()
                            Wait.time(function ()
                                continuation.run(object)
                            end, Helper.MINIMAL_DURATION)
                        end, function ()
                            continuation.tick()
                            --- Deal with a card/object being swallowed up in a deck/bag at the end of its move.
                            local objectHasDisappeared = getObjectFromGUID(guid) == nil
                            return objectHasDisappeared or object.resting
                        end)
                    end, Helper.MINIMAL_DURATION)
                    return continuation
                end

                ---@return Continuation
                function Helper.onceSwallowedUp(object)
                    local guid = object.getGUID()
                    local continuation = Helper.createContinuation("Helper.onceSwallowedUp")
                    -- Wait 1 frame for the movement to start.
                    Wait.time(function ()
                        Wait.condition(function ()
                            Wait.time(function ()
                                continuation.run(object)
                            end, Helper.MINIMAL_DURATION)
                        end, function ()
                            continuation.tick()
                            local objectHasDisappeared = getObjectFromGUID(guid) == nil
                            return objectHasDisappeared
                        end)
                    end, Helper.MINIMAL_DURATION)
                    return continuation
                end

                ---@return Continuation
                function Helper.onceShuffled(container)
                    local continuation = Helper.createContinuation("Helper.onceShuffled")
                    -- TODO Is there a better way?
                    Wait.time(function ()
                        continuation.run(container)
                    end, 2)
                    return continuation
                end

                ---@param delay number
                ---@param count integer?
                ---@return Continuation
                function Helper.onceTimeElapsed(delay, count)
                    local continuation = Helper.createContinuation("Helper.onceTimeElapsed")
                    local countdown = count or 1
                    Wait.time(function ()
                        countdown = countdown - 1
                        continuation.next()
                        if countdown == 0 then
                            continuation.finish()
                        end
                    end, delay, count)
                    return continuation
                end

                ---@param count integer
                ---@return Continuation
                function Helper.onceFramesPassed(count)
                    local continuation = Helper.createContinuation("Helper.onceFramesPassed")
                    -- Wait.frames is unreliable with players with high FPS configurations.
                    Wait.time(function ()
                        continuation.run()
                    end, count * Helper.MINIMAL_DURATION)
                    return continuation
                end

                ---@return Continuation
                function Helper.onceOneDeck(zone)
                    local continuation = Helper.createContinuation("Helper.onceOneDeck")

                    local getDecksOrCards = function ()
                        return Helper.filter(zone.getObjects(), function (object)
                            return object.type == "Card" or object.type == "Deck"
                        end)
                    end

                    local maxCardCount = 0
                    for _, deckOrCard in ipairs(getDecksOrCards()) do
                        maxCardCount = math.max(maxCardCount, Helper.getCardCount(deckOrCard))
                    end

                    Wait.condition(function ()
                        continuation.run(Helper.getDeck(zone))
                    end, function ()
                        local deckOrCards = getDecksOrCards()
                        if #deckOrCards == 1 then
                            local deckOrCard = deckOrCards[1]
                            local cardCound = Helper.getCardCount(deckOrCard)
                            if cardCound > maxCardCount and deckOrCard.resting then
                                return true
                            end
                        end
                        continuation.tick()
                        return false
                    end)
                    return continuation
                end

                ---@return Continuation
                function Helper.repeatChainedAction(count, action)
                    local continuation = Helper.createContinuation("Helper.repeatChainedAction")
                    if count > 0 then
                        local innerContinuation = action()
                        assert(innerContinuation and innerContinuation.doAfter, "Provided action must return a continuation!")
                        innerContinuation.doAfter(function ()
                            Helper.repeatChainedAction(count - 1, action).doAfter(function ()
                                continuation.run(count)
                            end)
                        end)
                    else
                        continuation.run(count)
                    end
                    return continuation
                end

                ---@param actions table
                ---@return Continuation
                function Helper.chainActions(actions)
                    return Helper._chainActions(1, actions)
                end

                ---@param actions table
                ---@return Continuation
                function Helper._chainActions(i, actions)
                    local continuation = Helper.createContinuation("Helper._chainActions")
                    if i <= #actions then
                        local innerContinuation = actions[i]()
                        assert(innerContinuation and innerContinuation.doAfter, "Provided action must return a continuation!")
                        innerContinuation.doAfter(function ()
                            Helper._chainActions(i + 1, actions).doAfter(continuation.run)
                        end)
                    else
                        continuation.run()
                    end
                    return continuation
                end

                ---@return Continuation
                function Helper.repeatMovingAction(object, count, action)
                    local continuation = Helper.createContinuation("Helper.repeatMovingAction")
                    if count > 0 then
                        action()
                        Helper.onceMotionless(object).doAfter(function ()
                            Helper.repeatMovingAction(object, count - 1, action).doAfter(function (_)
                                continuation.run(object)
                            end)
                        end)
                    else
                        Helper.onceMotionless(object).doAfter(function ()
                            continuation.run(object)
                        end)
                    end
                    return continuation
                end

                -- *** Basic OOP ***

                ---
                function Helper.createClass(superclass, data)
                    --  We can't make this test unfortunately, since it superclasses typically come through lazyRequire.
                    --assert(not superclass or superclass.__index, "Superclass doesn't look like a class itself.")
                    local class = data or {}
                    class.__index = class
                    class.what = function ()
                        return "class"
                    end
                    if superclass then
                        setmetatable(class, superclass)
                    end
                    return class
                end

                ---
                function Helper.createClassInstance(class, data)
                    assert(class)
                    assert(class.__index, "Provided class doesn't look like a class actually.")
                    local instance = data or {}
                    instance.what = function ()
                        return "instance"
                    end
                    setmetatable(instance, class)
                    return instance
                end

                ---
                function Helper.getClass(instance)
                    assert(instance.what() == "instance")
                    local class = getmetatable(instance)
                    assert(class and class.what() == "class")
                    return class
                end

                ---
                function Helper._getNopCallback()
                    local uniqueName = "generatedCallback0"
                    local nopCallback = Global.getVar(uniqueName)
                    if not nopCallback then
                        Global.setVar(uniqueName, function ()
                            -- NOP
                        end)
                    end
                    return uniqueName
                end

                -- *** player color support ***

                ---
                function Helper.findPlayerByColor(color)
                    return Player[color]
                end

                --- Colour shuffler script, developed by markimus on steam.
                function Helper.randomizePlayerPositions(colors)
                    local continuation = Helper.createContinuation("Helper.randomizePlayerPositions")

                    if #colors <= 1 then
                        printToAll("There must be more than one player for shuffling to work.", "Red")
                        continuation.run()
                        return continuation
                    end
                    if Player["Black"].seated then
                        printToAll("Please remove Player Black for shuffling to work.", "Red")
                        continuation.run()
                        return continuation
                    end

                    local randomColours = {}

                    -- Insert the colours.

                    for _, v in pairs(colors) do
                        table.insert(randomColours, v)
                    end

                    Helper.shuffle(randomColours)

                    local seatedPlayers = {}
                    for i, v in pairs(colors) do
                        seatedPlayers[v] = {}
                        seatedPlayers[v].target = randomColours[i]
                        seatedPlayers[v].myColour = v
                        --printToAll(Player[v].steam_name .. "(".. v ..") -> ".. ranColours[i], {1, 1, 1})
                        if seatedPlayers[v].target == v then
                            seatedPlayers[v].prevMoved = true
                            seatedPlayers[v].moved = true
                        else
                            seatedPlayers[v].prevMoved = false
                            seatedPlayers[v].moved = false
                        end
                    end

                    -- Start shuffling players.

                    local coroutineHolder = {}
                    coroutineHolder.registeredCallback = Helper.registerGlobalCallback(function ()
                        Helper.unregisterGlobalCallback(coroutineHolder.registeredCallback)

                        for timeout = 1, 50 do

                            -- Go through seated players. if they haven't moved, check if they can be moved.
                            for i, v in pairs(seatedPlayers) do
                                --print("Test")
                                if v.moved == false then
                                    if not Player[v.target].seated then
                                        local myC = v.myColour
                                        if Player[myC].seated then
                                            --print("Moving player ".. myC)
                                            Player[myC]:changeColor(v.target)
                                            while Player[myC].seated and not Player[v.target].seated do
                                                coroutine.yield(0)
                                            end
                                            v.myColour = v.target
                                            v.moved = true
                                        else
                                            table.remove(seatedPlayers, i)
                                        end
                                    end
                                end
                            end

                            local checkIfSame = true
                            for _, v in pairs(seatedPlayers) do
                                if v.prevMoved ~= v.moved then
                                    checkIfSame = false
                                    break
                                end
                            end

                            if checkIfSame then
                                --print("Is same.")
                                local allNonMovedPlayers = {}
                                for i, v in pairs(seatedPlayers) do
                                    if not v.moved then
                                        table.insert(allNonMovedPlayers, v)
                                    end
                                end

                                if #allNonMovedPlayers ~= 0 then
                                    local lastPlayer = allNonMovedPlayers[#allNonMovedPlayers]
                                    Player[lastPlayer.myColour]:changeColor("Black")
                                    lastPlayer.myColour = "Black"
                                    while not Player["Black"].seated do
                                        coroutine.yield(0)
                                    end
                                end
                            end

                            local count1, count2 = 0, 0
                            for _, v in pairs(seatedPlayers) do
                                count1 = count1 + 1
                                if v.moved then
                                    count2 = count2 + 1
                                end
                            end

                            if count1 == count2 then
                                break
                            end

                            for _, v in pairs(seatedPlayers) do
                                v.prevMoved = v.moved
                            end

                            coroutine.yield(0)
                        end

                        Helper.sleep(2)
                        continuation.run()

                        return 1
                    end)
                    startLuaCoroutine(Global, coroutineHolder.registeredCallback)

                    return continuation
                end

                ---
                function Helper.changePlayerColorInCoroutine(player, newColor)
                    local neutralColor = "Black"

                    local function seatPlayer(sourceColor, targetColor)
                        Player[sourceColor]:changeColor(targetColor)
                        while Player[sourceColor].seated and not Player[targetColor].seated do
                            coroutine.yield(0)
                        end
                    end

                    local oldColor = Helper._getPlayerColor(player)
                    if oldColor ~= newColor then
                        local otherPlayer = Helper.findPlayerByColor(newColor)
                        if not Helper.findPlayerByColor(neutralColor) then
                            if otherPlayer then
                                seatPlayer(otherPlayer, neutralColor)
                            end
                            seatPlayer(player, newColor)
                        else
                            log("Black player is seated! Skipping player color change.")
                        end
                    end
                end

                -- *** Specialized queues ***

                ---
                function Helper.createTemporalQueue(delay)
                    local tq = {
                        delay = delay or 0.25,
                        actions = {},
                    }

                    function tq.submit(action)
                        assert(action)
                        table.insert(tq.actions, action)
                        if #tq.actions == 1 then
                            tq.activateLater()
                        end
                    end

                    function tq.activateLater()
                        Helper.onceTimeElapsed(tq.delay).doAfter(function ()
                            local action = tq.actions[1]
                            table.remove(tq.actions, 1)
                            if #tq.actions > 0 then
                                tq.activateLater()
                            end
                            action()
                        end)
                    end

                    return tq
                end

                ---
                function Helper.createSpaceQueue()
                    local sq = {
                        distance = 0,
                    }

                    function sq.submit(action)
                        assert(action)
                        action(sq.distance)
                        if sq.distance == 0 then
                            sq.updater = Wait.time(sq._reduce, 1)
                        end
                        sq.distance = sq.distance + 1
                    end

                    function sq._reduce()
                        sq.distance = sq.distance - 1
                        if sq.distance > 0 then
                            Wait.time(sq._reduce, 1)
                        end
                    end

                    return sq
                end

                ---
                function Helper.createCoalescentQueue(name, separationDelay, coalesce, handle)
                    local cq = {
                        separationDelay = separationDelay or 1,
                    }

                    function cq.handleLater()
                        assert(cq.lastEvent)
                        if cq.delayedHandler then
                            Wait.stop(cq.delayedHandler)
                            cq.delayedHandler = nil
                            cq.continuation.cancel()
                        end
                        cq.continuation = Helper.createContinuation("Helper.createCoalescentQueue/" .. name)
                        cq.continuation.doAfter(function ()
                            assert(cq.lastEvent)
                            cq.delayedHandler = nil
                            local event = cq.lastEvent
                            cq.lastEvent = nil
                            handle(event)
                        end)
                        cq.delayedHandler = Wait.time(cq.continuation.run, cq.separationDelay)
                    end

                    function cq.submit(event)
                        assert(event)
                        if cq.lastEvent then
                            local newEvent = coalesce(event, cq.lastEvent)
                            if newEvent then
                                cq.lastEvent = newEvent
                            else
                                local oldEvent = cq.lastEvent
                                cq.lastEvent = event
                                handle(oldEvent)
                            end
                        else
                            cq.lastEvent = event
                        end
                        cq.handleLater()
                    end

                    function cq.flush()
                        if cq.delayedHandler then
                            assert(cq.lastEvent)
                            Wait.stop(cq.delayedHandler)
                            cq.delayedHandler = nil
                            cq.continuation.cancel()
                            local event = cq.lastEvent
                            cq.lastEvent = nil
                            handle(event)
                        end
                    end

                    return cq
                end

                -- *** TTS miscellaneous ***

                ---@deprecated Relic of an old age.
                function Helper.setSharedTable(tableName, table)
                    --Global.setTable(tableName, table)
                    Helper.sharedTables[tableName] = table
                end

                ---@deprecated Relic of an old age.
                function Helper.getSharedTable(tableName)
                    --return Global.getTable(tableName)
                    return Helper.sharedTables[tableName]
                end

                --- Intended to be called from a coroutine.
                function Helper.sleep(durationInSeconds)
                    local Time = os.clock() + durationInSeconds
                    while os.clock() < Time do
                        coroutine.yield(0)
                    end
                end

                ---
                function Helper.getID(object)
                    assert(object)
                    if object.getGMNotes then
                        return object.getGMNotes()
                    else
                        return object.gm_notes
                    end
                end

                ---@param deck any
                function Helper.shuffleDeck(deck)
                    assert(deck)
                    if true then
                        deck.shuffle()
                    end
                end

                ---
                function Helper.hasAllTags(object, tags)
                    for _, tag in ipairs(tags) do
                        if not object.hasTag(tag) then
                            return false
                        end
                    end
                    return true
                end

                ---
                function Helper.hasAnyTag(object, tags)
                    for _, tag in ipairs(tags) do
                        if object.hasTag(tag) then
                            return true
                        end
                    end
                    return false
                end

                ---
                function Helper.noPhysics(...)
                    for _, object in pairs({...}) do
                        object.setLock(true)
                        object.interactable = true
                    end
                end

                ---
                function Helper.noPlay(...)
                    for _, object in pairs({...}) do
                        object.setLock(false)
                        object.interactable = false
                    end
                end

                ---
                function Helper.noPhysicsNorPlay(...)
                    for _, object in pairs({...}) do
                        object.setLock(true)
                        object.interactable = false
                    end
                end

                ---
                function Helper.physicsAndPlay(...)
                    for _, object in pairs({...}) do
                        object.setLock(false)
                        object.interactable = true
                    end
                end

                -- *** Lua miscellaneous ***

                ---
                function Helper.isEmpty(table)
                    return #table == 0 and #Helper.getKeys(table) == 0
                end

                ---
                function Helper.toCamelCase(...)
                    local camelString
                    for i, str in ipairs({...}) do
                        if i > 1 then
                            camelString = camelString .. str:gsub("^%l", string.upper)
                        else
                            camelString = str:gsub("^%u", string.lower)
                        end
                    end
                    return camelString
                end

                ---
                function Helper.toPascalCase(...)
                    local pascalString
                    for i, str in ipairs({...}) do
                        if i > 1 then
                            pascalString = pascalString .. str:gsub("^%l", string.upper)
                        else
                            pascalString = str:gsub("^%l", string.upper)
                        end
                    end
                    return pascalString
                end

                ---
                function Helper._createTable(root, ...)
                    local parent = root
                    for _, str in ipairs({...}) do
                        if not parent[str] then
                            parent[str] = {}
                        end
                        parent = parent[str]
                        assert(type(parent) == "table")
                    end
                    return parent
                end

                ---
                function Helper.toVector(data)
                    if not data then
                        log("nothing to vectorize")
                        return Vector(0, 0, 0)
                    elseif type(data) ~= "table" then
                        error("Can't vectorize back a " .. type(data) .. " (" .. tostring(data) .. ")")
                    elseif Helper._isSomeKindOfObject(data) then
                        return data
                    elseif #data > 0 then
                        return Vector(data[1], data[2], data[3])
                    else
                        return Vector(data.x, data.y, data.z)
                    end
                end

                ---
                function Helper.addAll(objects, otherObjects)
                    assert(objects)
                    assert(otherObjects)
                    for _, object in ipairs(otherObjects) do
                        assert(object)
                        table.insert(objects, object)
                    end
                end

                ---
                function Helper.trace(name, data)
                    log(name .. ": " .. tostring(data))
                    return data
                end

                ---
                function Helper.append(parent, set)
                    for name, value in pairs(set) do
                        parent[name] = value
                    end
                    return parent
                end

                ---
                function Helper.contains(zone, object)
                    assert(zone)
                    assert(object)
                    for _, containedObject in ipairs(zone.getObjects()) do
                        if containedObject == object then
                            return true
                        end
                    end
                    return false
                end

                --- Fisher-Yates shuffle, in-place ??? for each position, pick an element from those not yet picked.
                function Helper.shuffle(table)
                    assert(table)
                    assert(#table > 0 or #Helper.getKeys(table) == 0, "Not an indexed table")
                    if true then
                        for i = #table, 2, -1 do
                            local j = math.random(i)
                            table[i], table[j] = table[j], table[i]
                        end
                    end
                end

                ---
                function Helper.pickAny(table)
                    return table[math.random(#table)]
                end

                ---
                function Helper.pickAnyKey(set)
                    local keys = Helper.getKeys(set)
                    return keys[math.random(#keys)]
                end

                ---
                function Helper.signum(n)
                    if n > 0 then
                        return 1
                    elseif n < 0 then
                        return - 1
                    else
                        return 0
                    end
                end

                ---
                function Helper.getCenter(positions)
                    assert(positions)
                    assert(#positions > 0)
                    local p = Vector(0, 0, 0)
                    for _, position in ipairs(positions) do
                        p = p + position
                    end
                    p:scale(1 / #positions)
                    return p
                end

                ---
                function Helper.tableContains(table, element)
                    for _, containedElement in ipairs(table) do
                        if containedElement == element then
                            return true
                        end
                    end
                    return false
                end

                ---
                function Helper.isElementOf(element, elements)
                    return Helper.tableContains(elements, element)
                end

                ---
                function Helper.stringConcat(elements)
                    local str = ""
                    for _, element in ipairs(elements) do
                        str = str .. tostring(element)
                    end
                    return str
                end

                ---
                function Helper.dump(...)
                    local str = ""
                    local args = table.pack(...)
                    for i = 1, args.n do
                        if i > 1 then
                            str = str .. " "
                        end
                        str = str .. Helper.toString(args[i])
                    end
                    Helper._log(str)
                end

                ---
                function Helper.dumpFunction(...)
                    Helper._log(Helper.functionToString(...))
                end

                ---
                function Helper.functionToString(...)
                    local args = table.pack(...)
                    local str
                    for i = 1, args.n do
                        local arg = args[i]

                        if i == 1 then
                            assert(type(arg) == "string")
                            str = arg .. "("
                        else
                            str = str .. Helper.toString(args[i], true)
                        end

                        if i == args.n then
                            str = str .. ")"
                        elseif i > 1 then
                            str = str .. ", "
                        end
                    end
                    return str
                end

                ---
                function Helper._log(str)
                    if Helper.lastMessage ~= str then
                        if Helper.lastMessage then
                            if Helper.lastMessageCount > 1 then
                                log("[x" .. tostring(Helper.lastMessageCount) .. "] " .. Helper.lastMessage)
                            elseif Helper.lastMessageCount > 0 then
                                log(Helper.lastMessage)
                            end
                        end
                        log(str)
                        Helper.lastMessage = str
                        Helper.lastMessageCount = 0
                    else
                        Helper.lastMessageCount = Helper.lastMessageCount + 1
                    end
                end

                ---
                function Helper.toString(object, quoted)
                    if object ~= nil then
                        local objectType = type(object)
                        if objectType == "table" then
                            local str
                            if #object > 0 then
                                str = "["
                                for i, element in ipairs(object) do
                                    if i > 1 then
                                        str = str .. ", "
                                    end
                                    str = str .. Helper.toString(element, quoted)
                                end
                                str = str .. "]"
                            else
                                str = "{"
                                local i = 0
                                for key, value in pairs(object) do
                                    i = i + 1
                                    if i > 1 then
                                        str = str .. ", "
                                    end
                                    str = str .. Helper.toString(key, quoted) .. " -> " .. Helper.toString(value, quoted)
                                end
                                str = str .. "}"
                            end
                            return str
                        elseif objectType == "function" then
                            return "<function>"
                        elseif objectType == "string" then
                            return quoted and '"' .. object .. '"' or object
                        elseif objectType == "userdata" then
                            return tostring(object) .. "/" .. tostring(Helper.getID(object))
                        else
                            return tostring(object)
                        end
                    else
                        return "<nil>"
                    end
                end

                ---
                function Helper.concatTables(...)
                    local result = {}
                    for _, t in ipairs({...}) do
                        for _, element in ipairs(t) do
                            table.insert(result, element)
                        end
                    end
                    return result
                end

                ---
                function Helper.mergeSets(...)
                    local result = {}
                    for _, s in ipairs({...}) do
                        for key, value in pairs(s) do
                            result[key] = value
                        end
                    end
                    return result
                end

                ---
                function Helper.shallowCopy(elements)
                    local copy = {}
                    for k, v in pairs(elements) do
                        copy[k] = v
                    end
                    return copy
                end

                ---
                function Helper.deepCopy(something)
                    local t = type(something)
                    if Helper._isBasicType(t) then
                        if t == "table" then
                            local copy = {}
                            for k, v in pairs(something) do
                                copy[k] = Helper.deepCopy(v)
                            end
                            return copy
                        else
                            return something
                        end
                    else
                        error("Unexpected type: " .. t)
                    end
                end

                ---
                function Helper._isBasicType(t)
                    return t == "nil"
                    or t == "boolean"
                    or t == "number"
                    or t == "string"
                    or t == "userdata"
                    or t == "function"
                    or t == "thread"
                    or t == "table"
                end

                ---
                function Helper.getKeys(elements)
                    local keys = {}
                    for k, _ in pairs(elements) do
                        table.insert(keys, k)
                    end
                    return keys
                end

                ---
                function Helper.getValues(elements)
                    local values = {}
                    for _, v in pairs(elements) do
                        table.insert(values, v)
                    end
                    return values
                end

                ---
                function Helper._getSubSet(set, keys)
                    local subSet = {}
                    for _, k in ipairs(keys) do
                        local value = set[k]
                        if type(k) == "number" then
                            subSet[k] = value
                        else
                            table.insert(subSet, value)
                        end
                    end
                    return subSet
                end

                ---
                function Helper.indexOf(table, element)
                    assert(table)
                    assert(element)
                    for i, existingElement in ipairs(table) do
                        if existingElement == element then
                            return i
                        end
                    end
                    return 0
                end

                ---
                function Helper.swap(elements, i, j)
                    assert(elements)
                    if i ~= j then
                        local tmp = elements[i]
                        elements[i] = elements[j]
                        elements[j] = tmp
                    end
                end

                ---
                function Helper.reverse(elements)
                    assert(elements)
                    local count = #elements
                    for i = 1, count do
                        local j = count + 1 - i
                        if i < j then
                            Helper.swap(elements, i, j)
                        else
                            break
                        end
                    end
                end

                ---
                function Helper.cycle(elements)
                    assert(elements)
                    local count = #elements
                    local first = elements[1]
                    for i = 1, count do
                        elements[i] = i < count and elements[i + 1] or first
                    end
                end

                ---
                function Helper._cons(head, tail)
                    local list = {head}
                    for _, element in pairs(tail) do
                        table.insert(list, element)
                    end
                    return list
                end

                ---
                function Helper.filter(elements, p)
                    assert(elements)
                    local filteredElements = {}
                    for _, element in ipairs(elements) do
                        if p(element) then
                            table.insert(filteredElements, element)
                        end
                    end
                    return filteredElements
                end

                ---
                function Helper.count(elements, p)
                    assert(elements)
                    local count = 0
                    for k, v in pairs(elements) do
                        if p(k, v) then
                            count = count + 1
                        end
                    end
                    return count
                end

                ---
                function Helper.map(elements, f)
                    assert(elements)
                    local newElements = {}
                    for k, v in pairs(elements) do
                        newElements[k] = f(k, v)
                    end
                    return newElements
                end

                ---
                function Helper.mapValues(elements, f)
                    assert(elements)
                    local newElements = {}
                    for k, v in pairs(elements) do
                        newElements[k] = f(v)
                    end
                    return newElements
                end

                ---
                function Helper.forEach(elements, f)
                    assert(elements)
                    assert(f)
                    for k, v in pairs(elements) do
                        f(k, v)
                    end
                end

                ---
                function Helper.forEachValue(elements, f)
                    assert(elements)
                    assert(f)
                    for _, v in ipairs(elements) do
                        f(v)
                    end
                end

                ---
                function Helper.forEachRecursively(elements, f)
                    assert(elements)
                    assert(f)
                    for k, v in pairs(elements) do
                        if type(v) == "table" and not Helper._isSomeKindOfObject(v) then
                            Helper.forEachRecursively(v, f)
                        else
                            f(k, v)
                        end
                    end
                end

                ---
                function Helper._clearTable(table)
                    for k, _ in pairs(table) do
                        table[k] = nil
                    end
                end

                ---
                function Helper.mutateTable(table, newTable)
                    Helper._clearTable(table)
                    for k, v in pairs(newTable) do
                        table[k] = v
                    end
                end

                ---
                function Helper.partialApply(f, ...)
                    assert(f)
                    local args = table.pack(...)
                    return function (...)
                        local appendedArgs = table.pack(...)
                        for i = 1, appendedArgs.n do
                            table.insert(args, appendedArgs[i])
                        end
                        args.n = args.n + appendedArgs.n
                        return f(table.unpack(args, 1, args.n))
                    end
                end

                ---
                function Helper.field(name)
                    return function (object)
                        return object[name]
                    end
                end

                ---
                function Helper.negate(predicate)
                    return function (...)
                        return not predicate(...)
                    end
                end

                ---
                function Helper.equal(value)
                    return function (object)
                        return object == value
                    end
                end

                ---
                function Helper.never()
                    return function ()
                        return false
                    end
                end

                ---
                function Helper.always()
                    return function ()
                        return true
                    end
                end

                --- http://lua-users.org/wiki/StringRecipes
                function Helper.startsWith(str, start)
                    return str:sub(1, #start) == start
                end

                --- http://lua-users.org/wiki/StringRecipes
                function Helper.endsWith(str, ending)
                    return ending == "" or str:sub(-#ending) == ending
                end

                ---
                function Helper.splitString(str, sep)
                    local tokens = {}
                    for token in string.gmatch(str, "([^" .. (sep or "%s") .. "]+)") do
                        table.insert(tokens, token)
                    end
                    return tokens
                end

                ---
                function Helper.chopName(name, n)
                    local choppedName = ""
                    local i = 0
                    for _, token in ipairs(Helper.splitString(name, " ")) do
                        if token:len() > 2 then
                            i = i + 1
                        end
                        if i <= n then
                            if choppedName:len() > 0 then
                                choppedName = choppedName .. " "
                            end
                            choppedName = choppedName .. token
                        else
                            break
                        end
                    end
                    return choppedName
                end

                return Helper

            end)
            __bundle_register("utils.Module", function(require, _LOADED, __bundle_register, __bundle_modules)
                local Module = {
                    modulesByName = {},
                    registeredModuleRedirections = {},
                }

                ---
                function Module.registerModules(modulesByName)
                    Module.modulesByName = Module._registerModules("", modulesByName)
                    return Module._lazyRequireAll("", modulesByName)
                end

                ---
                function Module._registerModules(path, modulesByName)
                    local modules = {}

                    for name, node in pairs(modulesByName) do
                        -- Can???t work! Find a way to distinguish between a node and a module.
                        if type(node) == "table" and false then
                            modules[name] = Module._registerModules(path .. name .. ".", node)
                        else
                            modules[name] = node
                        end
                    end

                    return modules
                end

                ---
                function Module._lazyRequireAll(path, modulesByName)
                    local modules = {}

                    for name, node in pairs(modulesByName) do
                        -- FIXME Can???t work! Find a way to distinguish between a node and a module.
                        if type(node) == "table" and false then
                            modules[name] = Module._lazyRequireAll(path .. name .. ".", node)
                        else
                            modules[name] = Module.lazyRequire(name)
                        end
                    end

                    return modules
                end

                ---
                function Module.lazyRequire(name)
                    local lazyModule = {}

                    local meta = {
                        module = nil
                    }
                    meta.__index = function (_, key)
                        if not meta.module then
                            meta.module = Module._resolveModule(name)
                        end
                        if meta.module then
                            local item = meta.module[key]
                            if item then
                                if type(item) ~= "function" then
                                    if key ~= "__loaded" then
                                        log("Accessing inner field: " .. name .. "." .. key .. " (" .. type(item) .. ")")
                                    end
                                elseif key == "onLoad" then
                                    meta.module.__loaded = true
                                elseif key:sub(1, 1) == "_" then
                                    log("Accessing private function: " .. name .. "." .. key)
                                elseif not meta.module.__loaded and meta.module['onLoad'] ~= nil then
                                    log("Accessing unloaded module: " .. name .. "." .. key)
                                end
                            end
                            return item
                        else
                            log("Unresolvable module: " .. name .. " (while accessing: " .. key .. ")")
                            return nil
                        end
                    end

                    -- Necessary redirection when used as a class.
                    lazyModule.__index = lazyModule

                    setmetatable(lazyModule, meta)

                    return lazyModule
                end

                ---
                function Module._resolveModule(name)
                    local node = Module.modulesByName

                    local selector = name
                    while true do
                        local nextSelector = nil
                        local dotIndex = selector:find(".", 1, true)
                        if dotIndex then
                            selector = selector:sub(1, dotIndex - 1)
                            nextSelector = selector:sub(dotIndex + 1)
                        end
                        node = node[selector]
                        if node then
                            if not nextSelector then
                                return node
                            else
                                selector = nextSelector
                            end
                        else
                            return nil
                        end
                    end
                end

                ---
                function Module.registerModuleRedirections(functionNames)
                    for _, functionName in ipairs(functionNames) do
                        local originalGlobalFunction = Global.getVar(functionName)
                        local globalFunction = function (...)
                            if originalGlobalFunction then
                                originalGlobalFunction(...)
                            end
                            for _, module in pairs(Module.modulesByName) do
                                if module[functionName] then
                                    module[functionName](...)
                                end
                            end
                        end
                        local safeGlobalFunction = function (...)
                            local ran, ret = pcall(globalFunction, ...)
                            if not ran then
                                log(tostring(ret) .. "(error in redirection '" .. functionName .. "')")
                            end
                            return ret
                        end
                        Module.registeredModuleRedirections[functionName] = safeGlobalFunction
                        Global.setVar(functionName, safeGlobalFunction)
                    end
                end

                ---
                function Module.callOnAllRegisteredModules(functionName, ...)
                    for _, module in pairs(Module.modulesByName) do
                        if module[functionName] then
                            module[functionName](...)
                        end
                    end
                end

                ---
                function Module.unregisterAllModuleRedirections()
                    for functionName, _ in pairs(Module.registeredModuleRedirections) do
                        Global.setVar(functionName, nil)
                    end
                end

                return Module

            end)
            __bundle_register("Types", function(require, _LOADED, __bundle_register, __bundle_modules)
                ---@alias PlayerColor
                ---| 'Green'
                ---| 'Purple'
                ---| 'Yellow'
                ---| 'Blue'
                ---| 'White'
                ---| 'Red'

                ---@alias Faction
                ---| 'greatHouses'
                ---| 'emperor'
                ---| 'spacingGuild'
                ---| 'beneGesserit'
                ---| 'fremen'
                ---| 'fringeWorlds'

                ---@alias TroopLocation
                ---| 'supply'
                ---| 'garrison'
                ---| 'combat'
                ---| 'negotiation'
                ---| 'tanks'
                ---| 'memory'

                ---@alias DreadnoughtLocation
                ---| 'supply'
                ---| 'garrison'
                ---| 'combat'
                ---| 'carthag'
                ---| 'arrakeen'
                ---| 'imperialBassin'

                -- bloodlines sardaukar commanders
                ---@alias SardaukarCommanderLocation
                ---| 'supply'
                ---| 'garrison'
                ---| 'combat'

                ---@alias ResourceName
                ---| 'spice'
                ---| 'water'
                ---| 'solari'
                ---| 'persuasion'
                ---| 'strength'

                local Types = {}

                ---
                function Types.isTroop(object, color)
                    return object.hasTag("Troop") and (not color or object.hasTag(color))
                end

                ---
                function Types.isDreadnought(object, color)
                    return object.hasTag("Dreadnought") and (not color or object.hasTag(color))
                end

                ---
                function Types.isSandworm(object, color)
                    return object.hasTag("Sandworm") and (not color or object.hasTag(color))
                end

                ---
                -- bloodlines sardaukar commanders
                function Types.isSardaukarCommander(object, color)
                    return object.hasTag("SardaukarCommander") and (not color or object.hasTag(color))
                end

                ---
                -- bloodlines sardaukar commanders and agent
                function Types.isUnit(object, color)
                    return Types.isTroop(object, color) or Types.isDreadnought(object, color) or Types.isSandworm(object, color) or Types.isAgent(object, color) or Types.isSardaukarCommander(object, color)
                end

                ---
                function Types.isControlMarker(object, color)
                    return object.hasTag("Flag") and (not color or object.hasTag(color))
                end

                ---
                function Types.isAgent(object, color)
                    return object.hasTag("Agent") and (not color or object.hasTag(color))
                end

                ---
                function Types.isSpy(object, color)
                    return object.hasTag("Spy") and (not color or object.hasTag(color))
                end

                ---
                function Types.isVoiceToken(object)
                    return object.hasTag("VoiceToken")
                end

                ---
                function Types.isVictoryPointToken(object)
                    return object.hasTag("VictoryPointToken")
                end

                ---
                function Types.isObjectiveToken(object)
                    for _, prefix in ipairs({"MuadDib", "Ornithopter", "Crysknife", "Joker"}) do
                        if object.hasTag(prefix .. "ObjectiveToken") then
                            return true
                        end
                    end
                    return false
                end

                ---
                function Types.isImperiumCard(object)
                    return object.hasTag("Imperium")
                end

                ---
                function Types.isIntrigueCard(object)
                    return object.hasTag("Intrigue")
                end

                ---
                function Types.isTech(object)
                    return object.hasTag("Tech")
                end

                ---
                function Types.isContract(object)
                    return object.hasTag("Contract")
                end

                ---
                function Types.assertIsPlayerColor(color)
                    assert(color == "Green"
                        or color == "Purple"
                        or color == "Yellow"
                        or color == "Blue"
                        or color == "White"
                        or color == "Red",
                    "Not a player color: " .. tostring(color))
                end

                ---
                function Types.assertIsFaction(faction)
                    assert(faction == "greatHouses"
                        or faction == "emperor"
                        or faction == "spacingGuild"
                        or faction == "beneGesserit"
                        or faction == "fremen"
                        or faction == "fringeWorlds",
                    "Not a faction: " .. tostring(faction))
                end

                ---
                function Types.assertIsTroopLocation(location)
                    assert(location == "supply" -- when lost or recalled
                        or location == "garrison" -- when recruited
                        or location == "combat" -- when deployed
                        or location == "negotiation" -- when sent as negotiator
                        or location == "tanks", -- when sent as specimen
                    "Not a troop location: " .. tostring(location))
                end

                ---
                function Types.assertIsDreadnoughtLocation(location)
                    assert(location == "supply" -- when lost or recalled
                        or location == "garrison" -- when recruited
                        or location == "combat" -- when deployed
                        or location == "carthag" -- when occupying the place
                        or location == "arrakeen" -- when occupying the place
                        or location == "imperialBassin", -- when occupying the place
                    "Not a dreadnought location: " .. tostring(location))
                end

                ---
                -- bloodlines sardaukar commanders
                function Types.assertIsSardaukarCommanderLocation(location)
                    assert(location == "supply" -- when lost or recalled
                        or location == "garrison" -- when recruited
                        or location == "combat", -- when deployed
                    "Not a sardaukar commander location: " .. tostring(location))
                end

                ---
                function Types.assertIsResourceName(resourceName)
                    assert(resourceName == "spice"
                        or resourceName == "water"
                        or resourceName == "solari"
                        or resourceName == "persuasion"
                        or resourceName == "strength",
                    "Not a resource name: " .. tostring(resourceName))
                end

                ---
                function Types.assertIsString(str)
                    assert(type(str) == "string", "Not a string: " .. tostring(str))
                end

                ---
                function Types.assertIsBoolean(b)
                    assert(type(b) == "boolean", "Not a boolean: " .. tostring(b))
                end

                ---
                function Types.isInteger(n)
                    return type(n) == "number" and math.floor(n) == n
                end

                ---
                function Types.assertIsInteger(n)
                    assert(Types.isInteger(n), "Not an integer: " .. tostring(n))
                end

                ---
                function Types.assertIsPositiveInteger(n)
                    assert(Types.isInteger(n) and n >= 0, "Not a positive integer: " .. tostring(n))
                end

                ---
                function Types.assertIsStrictlyPositive(n)
                    assert(Types.isInteger(n) and n > 0, "Not a strictly positive integer: " .. tostring(n))
                end

                ---
                function Types.assertIsInRange(min, max, n)
                    assert(Types.isInteger(min))
                    assert(Types.isInteger(max))
                    assert(Types.isInteger(n), "Not an integer: " .. tostring(n))
                    assert(min <= n and n <= max, "Not in range [" .. tostring(min) .. ", " .. tostring(max) .. "]: " .. tostring(n))
                end

                return Types

            end)
            __bundle_register("TurnControl", function(require, _LOADED, __bundle_register, __bundle_modules)
                --[[
    Reify the turn sequence in interaction with the PlayBoard module (as well
    as Hagal and Commander for the more specialized game modes), emitting events
    along the way to offer a mean to other modules to activate when needed.
]]

                local Module = require("utils.Module")
                local Helper = require("utils.Helper")
                local I18N = require("utils.I18N")

                local PlayBoard = Module.lazyRequire("PlayBoard")
                local Commander = Module.lazyRequire("Commander")
                local Hagal = Module.lazyRequire("Hagal")
                local Deck = Module.lazyRequire("Deck")
                local Combat = Module.lazyRequire("Combat")

                local TurnControl = {
                    hotSeat = false,
                    players = {},
                    firstPlayerLuaIndex = nil,
                    firstPlayerOfTheGame = nil,
                    counterClockWise = false,
                    currentRound = 0,
                    currentPhase = nil,
                    currentPlayerLuaIndex = nil,
                    customTurnSequence = nil,
                }

                function TurnControl.onLoad(state)
                    if state.settings then
                        if state.TurnControl then
                            TurnControl.hotSeat = state.TurnControl.hotSeat
                            TurnControl.players = state.TurnControl.players
                            TurnControl.scoreGoal = state.TurnControl.scoreGoal
                            TurnControl.firstPlayerLuaIndex = state.TurnControl.firstPlayerLuaIndex
                            TurnControl.firstPlayerOfTheGame = state.TurnControl.firstPlayerOfTheGame
                            TurnControl.counterClockWise = state.TurnControl.counterClockWise
                            TurnControl.currentRound = state.TurnControl.currentRound
                            TurnControl.currentPhase = state.TurnControl.currentPhase
                            TurnControl.currentPlayerLuaIndex = state.TurnControl.currentPlayerLuaIndex
                            TurnControl.customTurnSequence = state.TurnControl.customTurnSequence

                            if TurnControl.currentPlayerLuaIndex then
                                Helper.onceTimeElapsed(2).doAfter(Helper.partialApply(TurnControl._notifyPlayerTurn, true))
                            else
                                TurnControl._createReclaimRewardsButton()
                            end
                        end
                    end

                    Helper.registerEventListener("phaseEnd", function (phase)
                        if TurnControl.currentPhase == "combat" then
                            TurnControl._createReclaimRewardsButton()
                        elseif TurnControl.currentPhase == "combatEnd" and TurnControl._endgameGoalReached() and TurnControl.currentRound < 10 then
                            TurnControl._createNextRoundButton()
                        end
                    end)
                end

                function TurnControl.onSave(state)
                    state.TurnControl = {
                        hotSeat = TurnControl.hotSeat,
                        players = TurnControl.players,
                        scoreGoal = TurnControl.scoreGoal,
                        firstPlayerLuaIndex = TurnControl.firstPlayerLuaIndex,
                        firstPlayerOfTheGame = TurnControl.firstPlayerOfTheGame,
                        counterClockWise = TurnControl.counterClockWise,
                        currentRound = TurnControl.currentRound,
                        currentPhase = TurnControl.currentPhase,
                        currentPlayerLuaIndex = TurnControl.currentPlayerLuaIndex,
                        customTurnSequence = TurnControl.customTurnSequence,
                    }
                end

                --- Initialize the turn system with the provided players (or all the seated
                --- players) and start a new round.
                function TurnControl.setUp(settings, activeOpponents)
                    TurnControl.hotSeat = settings.hotSeat
                    TurnControl.players = TurnControl.toCanonicallyOrderedPlayerList(activeOpponents)
                    TurnControl.scoreGoal = settings.epicMode and 12 or 10

                    if settings.numberOfPlayers == 2 then
                        for i, player in ipairs(TurnControl.players) do
                            if PlayBoard.isRival(player) then
                                TurnControl.firstPlayerLuaIndex = TurnControl._getNextPlayer(i, math.random() > 0)
                                break
                            end
                        end
                        assert(TurnControl.firstPlayerLuaIndex)
                    else
                        if settings.firstPlayer == "random" then
                            local firstPlayer
                            repeat
                                TurnControl.firstPlayerLuaIndex = math.random(#TurnControl.players)
                                firstPlayer = TurnControl.players[TurnControl.firstPlayerLuaIndex]
                            until not Commander.isCommander(firstPlayer)
                        else
                            TurnControl.firstPlayerLuaIndex = 1
                            while TurnControl.firstPlayerLuaIndex < #TurnControl.players and TurnControl.players[TurnControl.firstPlayerLuaIndex] ~= settings.firstPlayer do
                                TurnControl.firstPlayerLuaIndex = TurnControl.firstPlayerLuaIndex + 1
                            end
                        end
                    end

                    if not TurnControl.firstPlayerOfTheGame then
                        TurnControl.firstPlayerOfTheGame = TurnControl.players[TurnControl.firstPlayerLuaIndex]
                    end

                    TurnControl._assignObjectives()
                end

                --- Return the (colors of the) active opponents in the mod canonical order,
                --- starting from Green and progressing clockwise.
                function TurnControl.toCanonicallyOrderedPlayerList(activeOpponents)
                    local orderedColors = {"Green", "Purple", "Yellow", "Blue", "White", "Red"}

                    local players = {}
                    for _, color in ipairs(orderedColors) do
                        if activeOpponents[color] then
                            table.insert(players, color)
                        end
                    end

                    return players
                end

                --- Generate an objective deck and randomly deal a card to each player within
                --- two constraints: preserving the current first player (already choosen) and
                --- not giving the same card to two allies (6P mode).
                --- Note: it would be possible to designate the first player in this function,
                --- but the two have been kept separated for historical reasons.
                --- FIXME Way too convoluted!
                function TurnControl._assignObjectives()
                    local objectiveCards = {}

                    local cardNames = {"crysknife"}
                    if #TurnControl.players == 3 then
                        local rivals = Helper.filter(TurnControl.players, PlayBoard.isRival)
                        if #rivals == 1 then
                            objectiveCards[rivals[1]] = "ornithopter1to3p"
                        else
                            table.insert(cardNames, "ornithopter1to3p")
                        end
                    elseif #TurnControl.players >= 4 then
                        table.insert(cardNames, "muadDib4to6p")
                        table.insert(cardNames, "crysknife4to6p")
                    else
                        error("Unexpected number of players: " .. tostring(#TurnControl.players))
                    end
                    Helper.shuffle(cardNames)

                    for i, color in ipairs(TurnControl.players) do
                        if not Commander.isCommander(color) then
                            if i == TurnControl.firstPlayerLuaIndex then
                                objectiveCards[color] = "muadDibFirstPlayer"
                            elseif not objectiveCards[color] then
                                objectiveCards[color] = cardNames[1]
                                table.remove(cardNames, 1)
                            end
                        end
                    end

                    local getCategory = function (cardName)
                        for _, category in ipairs({"ornithopter", "crysknife", "muadDib"}) do
                            if Helper.startsWith(cardName, category) then
                                return category
                            end
                        end
                        assert(false)
                    end

                    if #TurnControl.players == 6 and getCategory(objectiveCards.Green) == getCategory(objectiveCards.Yellow) then
                        if objectiveCards.Green == "muadDibFirstPlayer" or objectiveCards.Red == "muadDibFirstPlayer" then
                            local tmp = objectiveCards.Yellow
                            objectiveCards.Yellow = objectiveCards.Blue
                            objectiveCards.Blue = tmp
                        else
                            local tmp = objectiveCards.Green
                            objectiveCards.Green = objectiveCards.Red
                            objectiveCards.Red = tmp
                        end
                    end

                    cardNames = {}
                    for _, color in ipairs(TurnControl.players) do
                        if not Commander.isCommander(color) then
                            -- TODO Check ordering guarantees.
                            cardNames[objectiveCards[color]] = 1
                        end
                    end

                    local someUntaggedZone = Combat.getCombatCenterZone()
                    assert(someUntaggedZone)
                    Deck.generateObjectiveDeck(someUntaggedZone, cardNames).doAfter(function (deck)
                        assert(Helper.getDeckOrCard(someUntaggedZone) == deck)
                        local reversedPlayers = Helper.shallowCopy(TurnControl.players)
                        Helper.reverse(reversedPlayers)
                        for _, color in ipairs(reversedPlayers) do
                            if not Commander.isCommander(color) then
                                PlayBoard.giveObjectiveCardFromZone(color, someUntaggedZone)
                            end
                        end
                    end)
                end

                ---
                function TurnControl.getPhaseTurnSequence()
                    local turnSequence = {}
                    local playerLuaIndex = TurnControl.firstPlayerLuaIndex
                    repeat
                        table.insert(turnSequence, TurnControl.players[playerLuaIndex])
                        playerLuaIndex = TurnControl._getNextPlayer(playerLuaIndex, TurnControl.counterClockWise)
                    until playerLuaIndex == TurnControl.firstPlayerLuaIndex
                    return turnSequence
                end

                ---
                function TurnControl.overridePhaseTurnSequence(turnSequence)
                    TurnControl.customTurnSequence = {}
                    for _, color in ipairs(turnSequence) do
                        for playerLuaIndex, otherColor in ipairs(TurnControl.players) do
                            if otherColor == color then
                                table.insert(TurnControl.customTurnSequence, playerLuaIndex)
                            end
                        end
                    end
                end

                ---
                function TurnControl.start()
                    assert(TurnControl.firstPlayerLuaIndex, "A setup failure is highly probable!")
                    TurnControl._startPhase("leaderSelection")
                end

                ---
                function TurnControl._startPhase(phase)
                    assert(phase)
                    TurnControl.lastTransition = os.time()

                    local getNextPlayer = function ()
                        return TurnControl._getNextPlayer(TurnControl.firstPlayerLuaIndex, TurnControl.counterClockWise)
                    end

                    if phase == "roundStart" then
                        TurnControl.currentRound = TurnControl.currentRound + 1
                        if TurnControl.currentRound > 1 then
                            TurnControl.firstPlayerLuaIndex = getNextPlayer()
                            -- Skip House Hagal which always play second.
                            if Hagal.getRivalCount() == 1 and PlayBoard.isRival(TurnControl.players[TurnControl.firstPlayerLuaIndex]) then
                                TurnControl.firstPlayerLuaIndex = getNextPlayer()
                            end
                        end
                        -- Reverse turn sequence to have House Hagal second.
                        if Hagal.getRivalCount() == 1 and not PlayBoard.isRival(TurnControl.players[getNextPlayer()]) then
                            TurnControl.counterClockWise = not TurnControl.counterClockWise
                        end
                    end

                    TurnControl.currentPhase = phase
                    TurnControl.customTurnSequence = nil
                    if phase == "leaderSelection" and TurnControl.counterClockWise then
                        TurnControl.currentPlayerLuaIndex = getNextPlayer()
                    else
                        TurnControl.currentPlayerLuaIndex = TurnControl.firstPlayerLuaIndex
                    end

                    local firstPlayer = TurnControl.players[TurnControl.firstPlayerLuaIndex]
                    Helper.dump("> Round:", TurnControl.getCurrentRound(), "- Phase:", phase)
                    broadcastToAll(I18N(Helper.toCamelCase("phase", phase), {round = TurnControl.currentRound}), Color.fromString("Pink"))
                    Helper.emitEvent("phaseStart", TurnControl.currentPhase, firstPlayer)

                    Helper.onceFramesPassed(1).doAfter(function ()
                        if TurnControl.customTurnSequence then
                            if #TurnControl.customTurnSequence > 0 then
                                TurnControl._next(TurnControl.customTurnSequence[1])
                            else
                                TurnControl.endOfPhase()
                            end
                        else
                            TurnControl._next(TurnControl.currentPlayerLuaIndex)
                        end
                    end)
                end

                ---
                function TurnControl.endOfTurn()
                    Helper.onceStabilized().doAfter(function ()
                        TurnControl._next(TurnControl._getNextPlayer(TurnControl.currentPlayerLuaIndex, TurnControl.counterClockWise))
                    end)
                end

                ---
                function TurnControl.endOfPhase(haltAfter)
                    local bestTrigger
                    local heavyPhases = {"recall"}
                    if TurnControl.getPlayerCount() < 3 then
                        table.insert(heavyPhases, "combat")
                    end
                    if Helper.isElementOf(TurnControl.currentPhase, heavyPhases) then
                        bestTrigger = Helper.onceTimeElapsed(2)
                    else
                        bestTrigger = Helper.onceStabilized()
                    end

                    -- Current phase could change meanwhile (not great though).
                    local phase = TurnControl.currentPhase

                    bestTrigger.doAfter(function ()
                        if phase ~= TurnControl.currentPhase then
                            Helper.dump(phase, "=/=", TurnControl.currentPhase)
                        end
                        if phase then
                            Helper.emitEvent("phaseEnd", phase)
                        end
                        if not haltAfter then
                            TurnControl._nextPhase()
                        end
                    end)
                end

                ---
                function TurnControl._nextPhase()
                    local nextPhase = TurnControl._getNextPhase(TurnControl.currentPhase)
                    if nextPhase then
                        TurnControl._startPhase(nextPhase)
                    else
                        TurnControl.currentPhase = nil
                    end
                end

                ---
                function TurnControl._next(startPlayerLuaIndex)
                    TurnControl.currentPlayerLuaIndex = TurnControl._findActivePlayer(startPlayerLuaIndex)
                    if TurnControl.currentPlayerLuaIndex then
                        TurnControl._notifyPlayerTurn()
                    else
                        if TurnControl.currentPhase == "combat" then
                            TurnControl.endOfPhase(true)
                        elseif TurnControl.currentPhase == "combatEnd" and TurnControl._endgameGoalReached() and TurnControl.currentRound < 10 then
                            TurnControl.endOfPhase(true)
                        else
                            TurnControl.endOfPhase()
                        end
                    end
                end

                function TurnControl._getButtonAnchor()
                    local primaryTable = getObjectFromGUID("2b4b92")

                    local continuation = Helper.createContinuation("TurnControl._createReclaimRewardsButton")
                    if not TurnControl.buttonAnchor then
                        Helper.createTransientAnchor("AgentPark", primaryTable.getPosition() + Vector(3.5, 1.3, -15.8)).doAfter(function (anchor)
                            TurnControl.buttonAnchor = anchor
                            continuation.run(TurnControl.buttonAnchor)
                        end)
                    else
                        continuation.run(TurnControl.buttonAnchor)
                    end

                    return continuation
                end

                function TurnControl._createReclaimRewardsButton()
                    local fromIntRGB = function (r, g, b)
                        return Color(r / 255, g / 255, b / 255)
                    end

                    Turns.order = {}
                    Turns.enable = false

                    TurnControl._getButtonAnchor().doAfter(function (anchor)
                        Helper.createAbsoluteButtonWithRoundness(anchor, 1, {
                            click_function = Helper.registerGlobalCallback(function ()
                                anchor.clearButtons()
                                TurnControl._nextPhase()
                            end),
                            label = I18N("reclaimRewards"),
                            position = anchor.getPosition() + Vector(0, 0.5, 0),
                            width = 3500,
                            height = 420,
                            font_size = 300,
                            color = fromIntRGB(128, 77, 0),
                            font_color = fromIntRGB(204, 153, 0),
                        })
                    end)
                end

                function TurnControl._createNextRoundButton()
                    local fromIntRGB = function (r, g, b)
                        return Color(r / 255, g / 255, b / 255)
                    end

                    Turns.order = {}
                    Turns.enable = false

                    TurnControl._getButtonAnchor().doAfter(function (anchor)
                        Helper.createAbsoluteButtonWithRoundness(anchor, 1, {
                            click_function = Helper.registerGlobalCallback(function ()
                                anchor.clearButtons()
                                TurnControl._nextPhase()
                            end),
                            label = I18N("doYouWantAnotherRound"),
                            position = anchor.getPosition() + Vector(0, 0.5, 0),
                            width = 3500,
                            height = 420,
                            font_size = 300,
                            color = fromIntRGB(128, 77, 0),
                            font_color = fromIntRGB(204, 153, 0),
                        })
                    end)
                end

                ---
                function TurnControl._notifyPlayerTurn(refreshing)
                    local playerColor = TurnControl.players[TurnControl.currentPlayerLuaIndex]
                    local player = Helper.findPlayerByColor(playerColor)
                    if player then
                        if not player.seated and
                            (not PlayBoard.isRival(playerColor) or TurnControl.currentPhase == "leaderSelection") and
                            not TurnControl.assumeDirectControl(playerColor)
                            then
                            broadcastToAll(I18N("noSeatedPlayer", {color = I18N(playerColor)}), Color.fromString("Pink"))
                        end
                        Helper.onceFramesPassed(1).doAfter(function ()
                            Turns.turn_color = playerColor
                            Turns.order = {playerColor}
                            if not Turns.enable and not TurnControl.hotSeat then
                                Turns.enable = #Turns.order > 0
                            end
                            Helper.dump(">> Turn:", playerColor)
                            Helper.emitEvent("playerTurn", TurnControl.currentPhase, playerColor, refreshing)
                        end)
                    end
                end

                function TurnControl.assumeDirectControl(color)
                    local legitimatePlayers = TurnControl.getLegitimatePlayers(color)
                    if not Helper.isEmpty(legitimatePlayers) then
                        legitimatePlayers[1].changeColor(color)
                        return true
                    else
                        return false
                    end
                end

                function TurnControl.getLegitimatePlayers(color)

                    local legitimatePlayers = {}

                    -- In 6P we add any seated player of the same team.
                    if TurnControl.getPlayerCount() == 6 then
                        for _, player in ipairs(Player.getPlayers()) do
                            if player.seated and Commander.inSameTeam(color, player.color) then
                                table.insert(legitimatePlayers, player)
                            end
                        end
                    end

                    -- Failing to find at least one, we take the host player.
                    if Helper.isEmpty(legitimatePlayers) then
                        for _, player in ipairs(Player.getPlayers()) do
                            if player.host then
                                table.insert(legitimatePlayers, player)
                            end
                        end
                    end

                    return legitimatePlayers
                end

                ---
                function TurnControl._findActivePlayer(startPlayerLuaIndex)
                    assert(startPlayerLuaIndex)
                    local playerLuaIndex = startPlayerLuaIndex
                    local n = TurnControl.getPlayerCount()
                    for _ = 1, n do
                        if TurnControl._isPlayerActive(playerLuaIndex) then
                            return playerLuaIndex
                        end
                        playerLuaIndex = TurnControl._getNextPlayer(playerLuaIndex, TurnControl.counterClockWise)
                    end
                    return nil
                end

                ---
                function TurnControl._getNextPlayer(playerLuaIndex, counterClockWise)
                    assert(playerLuaIndex)
                    if TurnControl.customTurnSequence then
                        for i, otherPlayerLuaIndex in ipairs(TurnControl.customTurnSequence) do
                            if otherPlayerLuaIndex == playerLuaIndex then
                                local nextPlayerLuaIndex = TurnControl.customTurnSequence[(i % #TurnControl.customTurnSequence) + 1]
                                return nextPlayerLuaIndex
                            end
                        end
                        error("Incorrect custom turn sequence")
                    else
                        local n = TurnControl.getPlayerCount()
                        local nextPlayerLuaIndex
                        if counterClockWise then
                            nextPlayerLuaIndex = ((playerLuaIndex + n - 2) % n) + 1
                        else
                            nextPlayerLuaIndex = (playerLuaIndex % n) + 1
                        end
                        assert(nextPlayerLuaIndex)
                        return nextPlayerLuaIndex
                    end
                end

                ---
                function TurnControl._getNextPhase(phase)
                    if phase == 'leaderSelection' then
                        return 'gameStart'
                    elseif phase == 'gameStart' then
                        return 'roundStart'
                    elseif phase == 'roundStart' then
                        return 'playerTurns'
                    elseif phase == 'playerTurns' then
                        return 'combat'
                    elseif phase == 'combat' then
                        return 'combatEnd'
                    elseif phase == 'combatEnd' then
                        return 'makers'
                    elseif phase == 'makers' then
                        return 'recall'
                    elseif phase == 'recall' then
                        if TurnControl._endgameGoalReached() then
                            broadcastToAll(I18N("endgameReached"), Color.fromString("Pink"))
                        end
                        return TurnControl._endgameGoalReached(true) and 'endgame' or 'roundStart'
                    elseif phase == 'endgame' then
                        return nil
                    else
                        error("Unknown phase: " .. tostring(phase))
                    end
                end

                ---@param hardLimit boolean?
                ---@return boolean
                function TurnControl._endgameGoalReached(hardLimit)
                    if TurnControl.currentRound == 10 then
                        return true
                    elseif hardLimit then
                        return false
                    end

                    local bestScore = 0
                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                        bestScore = math.max(bestScore, PlayBoard.getPlayBoard(color):getScore())
                    end
                    return bestScore >= TurnControl.scoreGoal
                end

                ---
                function TurnControl._isPlayerActive(playerLuaIndex)
                    assert(playerLuaIndex)
                    local phase = TurnControl.currentPhase
                    local color = TurnControl.players[playerLuaIndex]
                    return PlayBoard.acceptTurn(phase, color)
                end

                ---
                function TurnControl.isCombat()
                    return TurnControl.currentPhase == "combat"
                    or TurnControl.currentPhase == "combatEnd"
                end

                ---
                function TurnControl.getCurrentPlayer()
                    return TurnControl.players[TurnControl.currentPlayerLuaIndex]
                end

                ---
                function TurnControl.getPlayerCount()
                    return #TurnControl.players
                end

                ---
                function TurnControl.getPlayers()
                    return TurnControl.players
                end

                ---
                function TurnControl.getFirstPlayer()
                    return TurnControl.players[TurnControl.firstPlayerLuaIndex]
                end

                ---
                function TurnControl.getFirstPlayerOfTheGame()
                    return TurnControl.firstPlayerOfTheGame
                end

                ---
                function TurnControl.getCurrentRound()
                    return TurnControl.currentRound
                end

                ---
                function TurnControl.getCurrentPhase()
                    return TurnControl.currentPhase
                end

                ---
                function TurnControl.isHotSeatEnabled()
                    return TurnControl.hotSeat
                end

                return TurnControl

            end)
            __bundle_register("ThroneRow", function(require, _LOADED, __bundle_register, __bundle_modules)
                local Module = require("utils.Module")
                local Helper = require("utils.Helper")
                local AcquireCard = require("utils.AcquireCard")
                local I18N = require("utils.I18N")
                local Dialog = require("utils.Dialog")

                local Deck = Module.lazyRequire("Deck")
                local PlayBoard = Module.lazyRequire("PlayBoard")
                local Commander = Module.lazyRequire("Commander")
                local ImperiumCard = Module.lazyRequire("ImperiumCard")

                local ThroneRow = {}

                ---
                function ThroneRow.onLoad(state)
                    Helper.append(ThroneRow, Helper.resolveGUIDs(false, {
                        slotZones = {
                            '7cceb1',
                            '3b00e1',
                            'f03bec',
                            '46e26a',
                        }}))

                        if state.settings and state.settings.numberOfPlayers == 6 then
                            ThroneRow._transientSetUp()
                        end
                    end

                    ---
                    function ThroneRow.setUp(settings)
                        if settings.numberOfPlayers == 6 then
                            ThroneRow._transientSetUp()
                        else
                            ThroneRow._tearDown()
                        end
                    end

                    ---
                    function ThroneRow._transientSetUp()
                        ThroneRow.acquireCards = {}
                        for i, zone in ipairs(ThroneRow.slotZones) do
                            local acquireCard = AcquireCard.new(zone, "Imperium", PlayBoard.withLeader(function (_, color)
                                if Commander.isTeamShaddam(color) then
                                    PlayBoard.getLeader(color).acquireThroneCard(color, i)
                                else
                                    Dialog.broadcastToColor(I18N('notShaddamTeam'), color, "Purple")
                                end
                            end), Deck.getAcquireCardDecalUrl("corrino"))
                            table.insert(ThroneRow.acquireCards, acquireCard)
                        end
                    end

                    ---
                    function ThroneRow.onObjectEnterZone(zone, object)
                        if ThroneRow.acquireCards then
                            for _, acquireCard in ipairs(ThroneRow.acquireCards) do
                                if acquireCard.zone == zone then
                                    if object.type == "Card" then
                                        if ImperiumCard.isFactionCard(object, "fremen") then
                                            broadcastToAll(I18N('notFremenCard'), "White")
                                        end
                                    end
                                end
                            end
                        end
                    end

                    ---
                    function ThroneRow._tearDown()
                        for _, slotZone in ipairs(ThroneRow.slotZones) do
                            slotZone.destruct()
                        end
                    end

                    ---
                    function ThroneRow.acquireThroneCard(color, indexInRow)
                        local acquireCard = ThroneRow.acquireCards[indexInRow]
                        PlayBoard.giveCardFromZone(color, acquireCard.zone)
                        return true
                    end

                    return ThroneRow

                end)
                __bundle_register("utils.Dialog", function(require, _LOADED, __bundle_register, __bundle_modules)
                    local Helper = require("utils.Helper")
                    local I18N = require("utils.I18N")

                    local Dialog = {
                        nativeDialogUsed = false,
                        staticDialogUsed = false,
                    }

                    ---
                    function Dialog.loadStaticUI()
                        local xmlRoots = UI.getXmlTable()
                        local options = {}
                        for i = 1, 5 do
                            table.insert(options, "option" .. tostring(i))
                            local ui = Dialog._generateDialogUI(nil, nil, options, nil)
                            table.insert(xmlRoots, ui)
                        end
                        UI.setXmlTable(xmlRoots)
                        Dialog.staticDialogUsed = true
                        -- 10 instead of just 1, better be safe than sorry.
                        return Helper.onceFramesPassed(10)
                    end

                    ---
                    function Dialog.showInfoDialog(color, title)
                        if Dialog.nativeDialogUsed then
                            Player[color].showInfoDialog(title)
                        else
                            local options = {
                                I18N("ok"),
                            }
                            Dialog._showOptionsAndCancelDialog(color, title, options, function (_) end)
                        end
                    end

                    ---
                    function Dialog.showConfirmDialog(color, title, callback)
                        if Dialog.nativeDialogUsed then
                            Player[color].showConfirmDialog(title, function ()
                                callback()
                            end)
                        else
                            local options = {
                                I18N("ok"),
                                I18N("cancel"),
                            }
                            Dialog._showOptionsAndCancelDialog(color, title, options, function (index)
                                if index == 1 then
                                    callback()
                                end
                            end)
                        end
                    end

                    ---
                    function Dialog.showConfirmOrCancelDialog(color, title, linkedContinuation, callback)
                        if Dialog.nativeDialogUsed then
                            if linkedContinuation then
                                linkedContinuation.forget()
                            end
                            Player[color].showConfirmDialog(title, function ()
                                callback(true)
                            end)
                        else
                            local options = {
                                I18N("ok"),
                                I18N("cancel"),
                            }
                            Dialog._showOptionsAndCancelDialog(color, title, options, function (index)
                                callback(index == 1)
                            end)
                        end
                    end

                    ---
                    function Dialog.showYesOrNoDialog(color, title, linkedContinuation, callback)
                        if Dialog.nativeDialogUsed then
                            if linkedContinuation then
                                linkedContinuation.forget()
                            end
                            Player[color].showConfirmDialog(title, function ()
                                callback(true)
                            end)
                        else
                            local options = {
                                I18N("yes"),
                                I18N("no"),
                            }
                            Dialog._showOptionsAndCancelDialog(color, title, options, function (index)
                                callback(index == 1)
                            end)
                        end
                    end

                    ---
                    function Dialog.showOptionsDialog(color, title, options, linkedContinuation, callback)
                        assert(options)
                        assert(#options > 0)
                        if Dialog.nativeDialogUsed then
                            if linkedContinuation then
                                linkedContinuation.forget()
                            end
                            Player[color].showOptionsDialog(title, options, 1, function (_, index, _)
                                callback(index)
                            end)
                        else
                            Dialog._showOptionsAndCancelDialog(color, title, options, function (index)
                                if index > 0 then
                                    callback(index)
                                end
                            end)
                        end
                    end

                    ---
                    function Dialog.showOptionsAndCancelDialog(color, title, options, linkedContinuation, callback)
                        assert(options)
                        assert(#options > 0)
                        if Dialog.nativeDialogUsed then
                            if linkedContinuation then
                                linkedContinuation.forget()
                            end
                            Player[color].showOptionsDialog(title, options, 1, function (_, index, _)
                                callback(index)
                            end)
                        else
                            Dialog._showOptionsAndCancelDialog(color, title, options, callback)
                        end
                    end

                    ---
                    function Dialog._showOptionsAndCancelDialog(color, title, options, callback)
                        if Dialog.staticDialogUsed and Dialog._checkExistence(options) then
                            Dialog._bindStaticUI(color, title, options, callback)
                        else
                            local ui = Dialog._generateDialogUI(color, title, options, callback)
                            UI.setXmlTable({ui})
                        end
                    end

                    ---
                    function Dialog._bindStaticUI(color, title, options, callback)
                        local dialogId = Dialog._dialogId(options)

                        UI.setAttribute(dialogId, "active", true)
                        UI.setAttribute(dialogId, "visibility", color)
                        UI.setValue(Dialog._titleId(options), title)

                        local closingCallback = Dialog._createClosingCallback(options, function (...)
                            UI.setAttribute(dialogId, "active", false)
                            callback(...)
                        end)

                        local cancelButtonId = Dialog._cancelButtonId(options)
                        UI.setAttribute(cancelButtonId, "onClick", Helper.registerGlobalCallback(function (player)
                            closingCallback(0)
                        end))

                        for i, option in ipairs(options) do
                            local optionButtonId = Dialog._optionButtonId(options, i)
                            -- Using the "text" attribute instead of the value is necessary here (that's weird).
                            UI.setAttribute(optionButtonId, "text", option)
                            UI.setAttribute(optionButtonId, "onClick", Helper.registerGlobalCallback(function (player)
                                closingCallback(i)
                            end))
                        end
                    end

                    ---
                    function Dialog._checkExistence(options)
                        local dialogId = Dialog._dialogId(options)
                        local color = UI.getAttribute(dialogId, "color")
                        return color and type(color) == "string" and color:len() > 0
                    end

                    ---
                    function Dialog._dialogId(options)
                        return "dialogWith" .. tostring(#options) .. "Options"
                    end
                    ---
                    function Dialog._titleId(options)
                        return Dialog._dialogId(options) .. "Title"
                    end

                    ---
                    function Dialog._cancelButtonId(options)
                        return Dialog._dialogId(options) .. "CancelButton"
                    end

                    ---
                    function Dialog._optionButtonId(options, index)
                        return Dialog._dialogId(options) .. "OptionButton" .. tostring(index)
                    end

                    ---
                    function Dialog._createClosingCallback(options, callback)
                        return function (index)
                            local cancelButtonId = Dialog._cancelButtonId(options)
                            Helper.unregisterGlobalCallback(UI.getAttribute(cancelButtonId, "onClick"))
                            for i, _ in ipairs(options) do
                                local optionButtonId = Dialog._optionButtonId(options, i)
                                Helper.unregisterGlobalCallback(UI.getAttribute(optionButtonId, "onClick"))
                            end
                            callback(index)
                        end
                    end

                    ---
                    function Dialog._generateDialogUI(color, title, options, callback)

                        local closingCallback
                        if callback then
                            closingCallback = Dialog._createClosingCallback(options, function (...)
                                UI.setXmlTable({{}})
                                callback(...)
                            end)
                        end

                        local cancelButton = Dialog._createCancelButton(options, closingCallback)

                        local optionButtons = {}
                        for i, label in ipairs(options) do
                            table.insert(optionButtons, Dialog._createOptionButton(options, i, label, closingCallback))
                        end

                        local height = 95 + 50 * #optionButtons + 35

                        local ui = {
                            tag = "Panel",
                            attributes = {
                                visibility = color,
                                position = 0,
                                width = 440,
                                height = height,
                                color = "#30281f",
                                id = Dialog._dialogId(options),
                                outline = "#8c794b",
                                outlineSize = 1,
                                active = closingCallback ~= nil,
                                allowDragging = true,
                                returnToOriginalPositionWhenReleased = false,
                            },
                            children = {
                                {
                                    tag = "VerticalLayout",
                                    children = {
                                        {
                                            tag = "Image",
                                            attributes = {
                                                ignoreLayout = "True",
                                                height = "120",
                                                position = "0 " .. tostring((height - 120) / 2 - 20),
                                                color = "#544a33",
                                                preserveAspect = true,
                                                raycastTarget = true,
                                            },
                                        },
                                        {
                                            tag = "HorizontalLayout",
                                            children = {
                                                {
                                                    tag = "Text",
                                                    attributes = {
                                                        preferredWidth = 400,
                                                    },
                                                },
                                                cancelButton,
                                                {
                                                    tag = "Text",
                                                    attributes = {
                                                        preferredWidth = 10,
                                                    },
                                                }}},
                                                {
                                                    tag = "VerticalLayout",
                                                    attributes = {
                                                        padding = "10 10 10 10",
                                                    },
                                                    children = {
                                                        {
                                                            tag = "Text",
                                                            attributes = {
                                                                id = Dialog._titleId(options),
                                                                preferredWidth = 415,
                                                                preferredHeight = 40,
                                                                color = "#deaf00",
                                                                resizeTextForBestFit = true,
                                                                resizeTextMaxSize = "24",
                                                            },
                                                            value = title,
                                                        },
                                                        {
                                                            tag = "VerticalLayout",
                                                            attributes = {
                                                                childAlignment = "MiddleCenter",
                                                                padding = "10 10 10 10",
                                                                spacing = "10",
                                                            },
                                                            children = optionButtons
                                                        }}}}}}}

                                                        return ui
                                                    end

                                                    ---
                                                    function Dialog._createCancelButton(options, closingCallback)
                                                        local button = {
                                                            tag = "Button",
                                                            attributes = {
                                                                id = Dialog._cancelButtonId(options),
                                                                fontSize = "12",
                                                                fontStyle = "Bold",
                                                                outlineSize = "1 1",
                                                                preferredWidth = 35,
                                                                preferredHeight = 15,
                                                                color = "#8c794b",
                                                            },
                                                            value = "X",
                                                        }

                                                        if closingCallback then
                                                            button.attributes.onClick = Helper.registerGlobalCallback(function (player)
                                                                closingCallback(0)
                                                            end)
                                                        end

                                                        return button
                                                    end

                                                    ---
                                                    function Dialog._createOptionButton(options, index, label, closingCallback)
                                                        assert(index > 0)

                                                        local button = {
                                                            tag = "Button",
                                                            attributes = {
                                                                id = Dialog._optionButtonId(options, index),
                                                                color = "#8c794b",
                                                                padding = "5 5 5 5",
                                                                resizeTextForBestFit = true,
                                                                resizeTextMaxSize = "18",
                                                            },
                                                            -- Using the "text" attribute would work as well.
                                                            value = label,
                                                        }

                                                        if closingCallback then
                                                            button.attributes.onClick = Helper.registerGlobalCallback(function (player)
                                                                closingCallback(index)
                                                            end)
                                                        end

                                                        return button
                                                    end

                                                    ---
                                                    function Dialog.broadcastToColor(message, playerColor, messageColor)
                                                        assert(message)
                                                        assert(playerColor)
                                                        local player = Helper.findPlayerByColor(playerColor)
                                                        if player and player.seated then
                                                            broadcastToColor(message, playerColor, messageColor)
                                                        else
                                                            broadcastToAll(I18N("forwardMessage", {color = I18N(playerColor), message = message}), messageColor)
                                                        end
                                                    end

                                                    return Dialog

                                                end)
                                                __bundle_register("utils.AcquireCard", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                    local Helper = require("utils.Helper")
                                                    local I18N = require("utils.I18N")

                                                    local AcquireCard = Helper.createClass(nil, {
                                                        UPDATE_EVENT_NAME = "AcquireCard/objectEnterOrLeaveScriptingZone",
                                                    })

                                                    ---
                                                    function AcquireCard.new(zone, tag, acquire, decalUrl)
                                                        local acquireCard = Helper.createClassInstance(AcquireCard, {
                                                            zone = zone,
                                                            groundHeight = 1.65,
                                                            cardHeight = 0.01,
                                                            anchor = nil,
                                                            cardCount = -1,
                                                            acquire = acquire,
                                                        })

                                                        zone.addTag(tag)

                                                        local position = zone.getPosition() - Vector(0, 0.5, 0)
                                                        Helper.createTransientAnchor("AcquireCard", position).doAfter(function (anchor)
                                                            acquireCard.anchor = anchor

                                                            local snapPoint = Helper.createRelativeSnapPointFromZone(anchor, zone, true, {tag})
                                                            anchor.setSnapPoints({snapPoint})

                                                            if acquire then
                                                                acquireCard:_updateButton()

                                                                Helper.registerEventListener("locale", function ()
                                                                    acquireCard:_updateButton()
                                                                end)

                                                                Helper.registerEventListener(AcquireCard.UPDATE_EVENT_NAME, function (otherZone)
                                                                    if otherZone == zone then
                                                                        acquireCard:_updateButton()
                                                                    end
                                                                end)
                                                            end

                                                            if decalUrl then
                                                                acquireCard:_setDecal(decalUrl)
                                                            end
                                                        end)
                                                        return acquireCard
                                                    end

                                                    ---
                                                    function AcquireCard:_updateButton()
                                                        if false then
                                                            if not self.updateCoalescentQueue then

                                                                local function coalesce(_, _)
                                                                    return true
                                                                end

                                                                local function handle(_)
                                                                    self:_createButton()
                                                                end

                                                                self.updateCoalescentQueue = Helper.createCoalescentQueue("acquire", 0.5, coalesce, handle)
                                                            end
                                                            self.updateCoalescentQueue.submit(true)
                                                        else
                                                            self:_createButton()
                                                        end
                                                    end

                                                    ---
                                                    function AcquireCard:_setDecal(decalUrl)
                                                        local scale = self.zone.getScale()
                                                        self.anchor.setDecals({
                                                            {
                                                                name = "AcquireCard",
                                                                url = decalUrl,
                                                                position = Vector(0, 0.1, 0),
                                                                rotation = {90, 180, 0},
                                                                scale = Vector.scale(Vector(scale.x, scale.z, scale.y), 1.1),
                                                            }})
                                                        end

                                                        ---
                                                        function AcquireCard.onObjectEnterZone(...)
                                                            Helper.emitEvent(AcquireCard.UPDATE_EVENT_NAME, ...)
                                                        end

                                                        ---
                                                        function AcquireCard.onObjectLeaveZone(...)
                                                            Helper.emitEvent(AcquireCard.UPDATE_EVENT_NAME, ...)
                                                        end

                                                        function AcquireCard:_createButton()
                                                            local count = 0
                                                            for _, object in ipairs(self.zone.getObjects()) do
                                                                local cardCount = Helper.getCardCount(object)
                                                                count = count + math.max(1, cardCount)
                                                            end

                                                            if self.cardCount ~= count then
                                                                Helper.clearButtons(self.anchor)
                                                                self.cardCount = count
                                                                if count > 0 then
                                                                    local height = self.groundHeight + count * self.cardHeight
                                                                    local label = I18N("acquireButton") .. " (" .. tostring(count) .. ")"
                                                                    Helper.createExperimentalAreaButton(self.zone, self.anchor, height, label, function (_, color)
                                                                        if not self.disabled then
                                                                            local continuation = self.acquire(self, color)
                                                                            if continuation then
                                                                                self.disabled = true
                                                                                continuation.doAfter(function ()
                                                                                    self.disabled = false
                                                                                end)
                                                                            end
                                                                            -- The acquisition may not involve a smooth move.
                                                                            self:_updateButton()
                                                                        end
                                                                    end)
                                                                end
                                                            end
                                                        end

                                                        return AcquireCard

                                                    end)
                                                    __bundle_register("TleilaxuRow", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                        local Module = require("utils.Module")
                                                        local Helper = require("utils.Helper")
                                                        local AcquireCard = require("utils.AcquireCard")
                                                        local I18N = require("utils.I18N")
                                                        local Dialog = require("utils.Dialog")

                                                        local Deck = Module.lazyRequire("Deck")
                                                        local PlayBoard = Module.lazyRequire("PlayBoard")
                                                        local TleilaxuResearch = Module.lazyRequire("TleilaxuResearch")
                                                        local MainBoard = Module.lazyRequire("MainBoard")
                                                        local ImperiumCard = Module.lazyRequire("ImperiumCard")
                                                        local Commander = Module.lazyRequire("Commander")

                                                        local TleilaxuRow = {}

                                                        ---
                                                        function TleilaxuRow.onLoad(state)
                                                            Helper.append(TleilaxuRow, Helper.resolveGUIDs(false, {
                                                                deckZone = "14b2ca",
                                                                slotZones = {
                                                                    'e5ba35',
                                                                    '1e5a32',
                                                                    '965fea',
                                                                }}))

                                                                if state.settings and state.settings.immortality then
                                                                    TleilaxuRow._transientSetUp()
                                                                end
                                                            end

                                                            ---
                                                            function TleilaxuRow.setUp(settings)
                                                                local continuation = Helper.createContinuation("TleilaxuRow.setUp")
                                                                if settings.immortality then
                                                                    Deck.generateSpecialDeck(TleilaxuRow.slotZones[3], "immortality", "reclaimedForces")
                                                                    Deck.generateTleilaxuDeck(TleilaxuRow.deckZone).doAfter(function (deck)
                                                                        assert(deck, "No Tleilaxu deck!")
                                                                        Helper.shuffleDeck(deck)
                                                                        Helper.onceShuffled(deck).doAfter(function ()
                                                                            for i = 1, 2 do
                                                                                local zone = TleilaxuRow.slotZones[i]
                                                                                Helper.moveCardFromZone(TleilaxuRow.deckZone, zone.getPosition(), Vector(0, 180, 0))
                                                                            end
                                                                        end)
                                                                        TleilaxuRow._transientSetUp()
                                                                        continuation.run()
                                                                    end)
                                                                else
                                                                    TleilaxuRow._tearDown()
                                                                    continuation.run()
                                                                end
                                                                return continuation
                                                            end

                                                            ---
                                                            function TleilaxuRow._transientSetUp()
                                                                TleilaxuRow.acquireCards = {}
                                                                for i, zone in ipairs(TleilaxuRow.slotZones) do
                                                                    local acquireCard = AcquireCard.new(zone, "Imperium", PlayBoard.withLeader(function (_, color)
                                                                        PlayBoard.getLeader(color).acquireTleilaxuCard(color, i)
                                                                    end), Deck.getAcquireCardDecalUrl("generic"))
                                                                    table.insert(TleilaxuRow.acquireCards, acquireCard)
                                                                end
                                                            end

                                                            ---
                                                            function TleilaxuRow._tearDown()
                                                                TleilaxuRow.deckZone.destruct()
                                                                for _, slotZone in ipairs(TleilaxuRow.slotZones) do
                                                                    slotZone.destruct()
                                                                end
                                                            end

                                                            ---
                                                            function TleilaxuRow.acquireTleilaxuCard(indexInRow, color)
                                                                local acquireCard = TleilaxuRow.acquireCards[indexInRow]
                                                                local card = Helper.getCard(acquireCard.zone)
                                                                assert(card)
                                                                local price = ImperiumCard.getTleilaxuCardCost(card)
                                                                local cardName = Helper.getID(card)
                                                                assert(price, "Unknown tleilaxu card: " .. tostring(cardName))
                                                                assert((cardName == "reclaimedForces") == (indexInRow == 3))

                                                                local specimenSupplierColor = color
                                                                if Commander.isCommander(color) then
                                                                    specimenSupplierColor = Commander.getActivatedAlly(color)
                                                                end

                                                                if TleilaxuResearch.getSpecimenCount(specimenSupplierColor) >= price then
                                                                    local leader = PlayBoard.getLeader(color)
                                                                    if cardName == "reclaimedForces" then
                                                                        local options = {
                                                                            I18N("troops"),
                                                                            I18N("beetle"),
                                                                        }
                                                                        Dialog.showOptionsDialog(color, I18N("reclaimedForces"), options, nil, function (index)
                                                                            if index == 1 then
                                                                                leader.troops(color, "tanks", "supply", price)
                                                                                leader.troops(color, "supply", "garrison", 2)
                                                                            elseif index == 2 then
                                                                                leader.troops(color, "tanks", "supply", price)
                                                                                leader.beetle(color, 1)
                                                                            end
                                                                        end)
                                                                    else
                                                                        leader.troops(color, "tanks", "supply", price)

                                                                        PlayBoard.giveCard(color, card, true)

                                                                        -- Replenish the slot in the row.
                                                                        Helper.moveCardFromZone(TleilaxuRow.deckZone, acquireCard.zone.getPosition(), Vector(0, 180, 0))
                                                                    end

                                                                    return true
                                                                else
                                                                    Dialog.broadcastToColor(I18N("noEnoughSpecimen"), color, "Purple")
                                                                    return false
                                                                end
                                                            end

                                                            ---
                                                            function TleilaxuRow.trash(indexInRow)
                                                                local acquireCard = TleilaxuRow.acquireCards[indexInRow]
                                                                local card = Helper.getCard(acquireCard.zone)
                                                                assert(card)
                                                                local price = ImperiumCard.getTleilaxuCardCost(card)
                                                                local cardName = Helper.getID(card)
                                                                assert(price, "Unknown tleilaxu card: " .. tostring(cardName))
                                                                assert((cardName == "reclaimedForces") == (indexInRow == 3))

                                                                MainBoard.trash(card)

                                                                -- Replenish the slot in the row.
                                                                Helper.moveCardFromZone(TleilaxuRow.deckZone, acquireCard.zone.getPosition(), Vector(0, 180, 0))
                                                            end

                                                            return TleilaxuRow

                                                        end)
                                                        __bundle_register("TleilaxuResearch", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                            local Module = require("utils.Module")
                                                            local Helper = require("utils.Helper")
                                                            local Park = require("utils.Park")
                                                            local I18N = require("utils.I18N")
                                                            local Dialog = require("utils.Dialog")

                                                            local Resource = Module.lazyRequire("Resource")
                                                            local PlayBoard = Module.lazyRequire("PlayBoard")
                                                            local Commander = Module.lazyRequire("Commander")

                                                            local TleilaxuResearch = {
                                                                --[[
        Research path for each player in a discrete 2D space (we use the usual X-Z
        coordinates from the Vector class for simpliciy). It abstracts us away from
        the board layout.
    ]]
                                                                researchCellBenefits = {
                                                                    [Vector(1, 0, 0)] = {specimen = true},
                                                                    [Vector(2, 0, 1)] = {specimen = true},
                                                                    [Vector(2, 0, -1)] = {beetle = true},
                                                                    [Vector(3, 0, 2)] = {research = true},
                                                                    [Vector(3, 0, 0)] = {trashImperiumCard = true, specimen = true},
                                                                    [Vector(3, 0, -2)] = {beetle = true, specimen = true},
                                                                    [Vector(4, 0, 1)] = {beetle = true},
                                                                    [Vector(4, 0, -1)] = {specimen = true},
                                                                    [Vector(4, 0, -3)] = {research = true},
                                                                    [Vector(5, 0, 2)] = {research = true},
                                                                    [Vector(5, 0, 0)] = {specimen = true},
                                                                    [Vector(5, 0, -2)] = {solari = 1},
                                                                    [Vector(6, 0, 1)] = {spice = 1},
                                                                    [Vector(6, 0, -1)] = {beetle = true},
                                                                    [Vector(6, 0, -3)] = {influence = 1},
                                                                    [Vector(7, 0, 2)] = {beetle = true},
                                                                    [Vector(7, 0, 0)] = {trashIntrigueTodrawImperiumAndIntrigueCards = true},
                                                                    [Vector(7, 0, -2)] = {trashImperiumCard = true, specimen = true},
                                                                    [Vector(8, 0, 1)] = {spice = 2},
                                                                    [Vector(8, 0, -1)] = {beetle = true},
                                                                [Vector(8, 0, -3)] = {solariToBeetle = true}},
                                                                tleilaxLevelBenefits = {
                                                                    {},
                                                                    {},
                                                                    {intrigue = true},
                                                                    {},
                                                                    {victoryToken = true, spiceBonus = true},
                                                                    {},
                                                                    {intrigue = true},
                                                                {victoryToken = true}},
                                                                tanksParks = {},
                                                            }

                                                            ---
                                                            function TleilaxuResearch.onLoad(state)
                                                                Helper.append(TleilaxuResearch, Helper.resolveGUIDs(false, {
                                                                    board = "d5c2db",
                                                                    TanksZone = "f5de09",
                                                                    tleilaxSpiceBonusToken = "46cd6b",
                                                                    tleilaxuLevelZones = {
                                                                        "b3137b",
                                                                        "a4181a",
                                                                        "2a16a4",
                                                                        "cef27c",
                                                                        "ed5509",
                                                                        "2bfdb0",
                                                                        "33c0fd",
                                                                        "cab3eb"
                                                                    },
                                                                    oneHelixZone = "53e9ac",
                                                                    twoHelicesZone = "03e529"
                                                                }))

                                                                if TleilaxuResearch.board then
                                                                    Helper.noPhysicsNorPlay(TleilaxuResearch.board)

                                                                    local value = (state and state.TleilaxuResearch and state.TleilaxuResearch.tleilaxSpiceBonusToken) or 2
                                                                    TleilaxuResearch.spiceBonus = Resource.new(TleilaxuResearch.tleilaxSpiceBonusToken, nil, "spice", value)
                                                                end

                                                                if state.settings and state.settings.immortality then
                                                                    TleilaxuResearch._transientSetUp()
                                                                end
                                                            end

                                                            ---
                                                            function TleilaxuResearch.onSave(state)
                                                                if TleilaxuResearch.board then
                                                                    state.TleilaxuResearch = {
                                                                        spiceBonus = TleilaxuResearch.spiceBonus:get(),
                                                                    }
                                                                end
                                                            end

                                                            ---
                                                            function TleilaxuResearch.setUp(settings)
                                                                if settings.immortality then
                                                                    TleilaxuResearch._transientSetUp()
                                                                else
                                                                    TleilaxuResearch._tearDown()
                                                                end
                                                            end

                                                            ---
                                                            function TleilaxuResearch._transientSetUp()

                                                                TleilaxuResearch.researchTokenOrigin = TleilaxuResearch._getAveragePosition("researchTokenInitalPosition")
                                                                TleilaxuResearch._generateResearchButtons()

                                                                TleilaxuResearch.tleilaxTokenOrigin = TleilaxuResearch._getAveragePosition("tleilaxTokenInitalPosition")
                                                                TleilaxuResearch._generateTleilaxButtons()

                                                                for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                    if not Commander.isCommander(color) then
                                                                        TleilaxuResearch.tanksParks[color] = TleilaxuResearch._createTanksPark(color)
                                                                    end
                                                                end
                                                                TleilaxuResearch._createTanksButton()
                                                            end

                                                            ---
                                                            function TleilaxuResearch._tearDown()
                                                                TleilaxuResearch.TanksZone.destruct()
                                                                TleilaxuResearch.board.destruct()
                                                                TleilaxuResearch.tleilaxSpiceBonusToken.destruct()
                                                                for _, zone in ipairs(TleilaxuResearch.tleilaxuLevelZones) do
                                                                    zone.destruct()
                                                                end
                                                                TleilaxuResearch.oneHelixZone.destruct()
                                                                TleilaxuResearch.twoHelicesZone.destruct()
                                                            end

                                                            ---
                                                            function TleilaxuResearch.getSpecimenCount(color)
                                                                return #Park.getObjects(TleilaxuResearch.tanksParks[color])
                                                            end

                                                            ---
                                                            function TleilaxuResearch._researchSpaceToWorldPosition(positionInResearchSpace)
                                                                local offset = Vector(
                                                                    positionInResearchSpace.x * 1.225 - 0.07,
                                                                    1.27,
                                                                positionInResearchSpace.z * 0.7)
                                                                local positionInWorldSpace = TleilaxuResearch.researchTokenOrigin + offset
                                                                return positionInWorldSpace
                                                            end

                                                            ---
                                                            function TleilaxuResearch._worlPositionToResearchSpace(positionInWorldSpace)
                                                                local offset = positionInWorldSpace - TleilaxuResearch.researchTokenOrigin
                                                                local x = math.floor((offset.x + 0.07) / 1.225 + 0.5)
                                                                local z = x == 0 and 0 or math.floor((offset.z) / 0.7)
                                                                local positionInResearchSpace = Vector(x, 0, z)
                                                                return positionInResearchSpace
                                                            end

                                                            ---
                                                            function TleilaxuResearch._getAveragePosition(positionField)
                                                                local p = Vector(0, 0, 0)
                                                                local count = 0
                                                                for _, color in pairs(PlayBoard.getActivePlayBoardColors()) do
                                                                    if not Commander.isCommander(color) then
                                                                        p = p + PlayBoard.getContent(color)[positionField]
                                                                        count = count + 1
                                                                    end
                                                                end
                                                                return p * (1 / count)
                                                            end

                                                            ---
                                                            function TleilaxuResearch.getTokenCellPosition(color)
                                                                local token = PlayBoard.getContent(color).researchToken
                                                                local tokenCellPosition = TleilaxuResearch._worlPositionToResearchSpace(token.getPosition())
                                                                return tokenCellPosition
                                                            end

                                                            ---
                                                            function TleilaxuResearch._generateResearchButtons()
                                                                for cellPosition, _ in pairs(TleilaxuResearch.researchCellBenefits) do
                                                                    local p = TleilaxuResearch._researchSpaceToWorldPosition(cellPosition)
                                                                    local cellZone = spawnObject({
                                                                        type = 'ScriptingTrigger',
                                                                        position = p,
                                                                    scale = Vector(1.2, 1, 1.35)})
                                                                    Helper.markAsTransient(cellZone)
                                                                    Helper.createAnchoredAreaButton(cellZone, 1.6, 0.1, I18N("progressOnResearchTrack"), PlayBoard.withLeader(function (_, color, _)
                                                                        local validPlayer = Helper.isElementOf(color, PlayBoard.getActivePlayBoardColors())
                                                                        if validPlayer and not PlayBoard.isRival(color) then
                                                                            local leader = PlayBoard.getLeader(color)
                                                                            local token = PlayBoard.getContent(color).researchToken
                                                                            local tokenCellPosition = TleilaxuResearch._worlPositionToResearchSpace(token.getPosition())
                                                                            local jump = cellPosition - tokenCellPosition

                                                                            if jump.x == 1 and math.abs(jump.z) <= 1 then
                                                                                leader.research(color, jump)
                                                                            else
                                                                                Dialog.showConfirmDialog(color, I18N("forbiddenMove"), function ()
                                                                                    leader.research(color, jump)
                                                                                end)
                                                                            end
                                                                        else
                                                                            Dialog.broadcastToColor(I18N('noTouch'), color, "Purple")
                                                                        end
                                                                    end))
                                                                end

                                                                Helper.createAnchoredAreaButton(TleilaxuResearch.twoHelicesZone, 1.6, 0.1, I18N("progressAfterResearchTrack"), PlayBoard.withLeader(function (_, color, _)
                                                                    local validPlayer = Helper.isElementOf(color, PlayBoard.getActivePlayBoardColors())
                                                                    if validPlayer and not PlayBoard.isRival(color) and TleilaxuResearch.hasReachedTwoHelices(color) then
                                                                        local leader = PlayBoard.getLeader(color)
                                                                        local specialJump = Vector(1, 0, 0)
                                                                        leader.research(color, specialJump)
                                                                    else
                                                                        Dialog.broadcastToColor(I18N('noTouch'), color, "Purple")
                                                                    end
                                                                end))
                                                            end

                                                            ---
                                                            function TleilaxuResearch._findResearchCellBenefits(cellPosition)
                                                                for existingCellPosition, cell in pairs(TleilaxuResearch.researchCellBenefits) do
                                                                    if Vector.distance(existingCellPosition, cellPosition) < 0.1 then
                                                                        return cell
                                                                    end
                                                                end
                                                                return nil
                                                            end

                                                            ---@param color PlayerColor
                                                            ---@param jump Vector
                                                            function TleilaxuResearch.advanceResearch(color, jump)
                                                                local continuation = Helper.createContinuation("TleilaxuResearch.advanceResearch")
                                                                local finalJump = jump
                                                                if not finalJump and TleilaxuResearch.hasReachedTwoHelices(color) then
                                                                    finalJump = Vector(1, 0, 0)
                                                                end
                                                                if finalJump then
                                                                    local legit = finalJump.x == 1 and math.abs(finalJump.z) <= 1
                                                                    TleilaxuResearch._advanceResearch(color, finalJump, legit)
                                                                    continuation.run(finalJump)
                                                                else
                                                                    continuation.cancel()
                                                                end
                                                                return continuation
                                                            end

                                                            ---@param color PlayerColor
                                                            ---@param jump Vector
                                                            ---@param withBenefits boolean
                                                            function TleilaxuResearch._advanceResearch(color, jump, withBenefits)
                                                                local leader = PlayBoard.getLeader(color)
                                                                local researchToken = PlayBoard.getContent(color).researchToken

                                                                if TleilaxuResearch.hasReachedTwoHelices(color) and jump.x > 0 then
                                                                    if withBenefits then
                                                                        PlayBoard.getLeader(color).drawImperiumCards(color, 1)
                                                                        Helper.emitEvent("researchProgress", color)
                                                                    end
                                                                else
                                                                    local cellPosition = TleilaxuResearch._worlPositionToResearchSpace(researchToken.getPosition())
                                                                    local newCellPosition = cellPosition + jump

                                                                    local p = TleilaxuResearch._researchSpaceToWorldPosition(newCellPosition)
                                                                    researchToken.setPositionSmooth(p + Vector(0, 1, 0.25))

                                                                    if withBenefits then
                                                                        Helper.onceMotionless(researchToken).doAfter(function ()
                                                                            local researchCellBenefits = TleilaxuResearch._findResearchCellBenefits(newCellPosition)
                                                                            assert(researchCellBenefits, "No cell benefits at cell " .. tostring(newCellPosition))

                                                                            for _, resource in ipairs({"spice", "solari"}) do
                                                                                if researchCellBenefits[resource] then
                                                                                    leader.resources(color, resource, researchCellBenefits[resource])
                                                                                end
                                                                            end

                                                                            if researchCellBenefits.specimen then
                                                                                leader.troops(color, "supply", "tanks", 1)
                                                                            end

                                                                            if researchCellBenefits.beetle then
                                                                                leader.beetle(color, 1)
                                                                            end

                                                                            if researchCellBenefits.research then
                                                                                Helper.onceTimeElapsed(0.5).doAfter(function ()
                                                                                    leader.research(color, Vector(1, 0, -Helper.signum(newCellPosition.z)))
                                                                                end)
                                                                            end

                                                                            if researchCellBenefits.solariToBeetle then
                                                                                if PlayBoard.getResource(color, "solari"):get() >= 7 then
                                                                                    Dialog.showConfirmDialog(color, I18N("confirmSolarisToBeetles"), function ()
                                                                                        leader.resources(color, "solari", -7)
                                                                                        leader.beetle(color, 2)
                                                                                    end)
                                                                                end
                                                                            end
                                                                        end)

                                                                        Helper.emitEvent("researchProgress", color)
                                                                    end
                                                                end
                                                            end

                                                            ---
                                                            function TleilaxuResearch.hasReachedOneHelix(color)
                                                                return TleilaxuResearch.getBestResearch(color) >= 4
                                                            end

                                                            ---
                                                            function TleilaxuResearch.hasReachedTwoHelices(color)
                                                                return TleilaxuResearch.getBestResearch(color) == 8
                                                            end

                                                            ---
                                                            function TleilaxuResearch.getBestResearch(color)
                                                                local bestResearch = 0
                                                                if Commander.isCommander(color) then
                                                                    for _, otherColor in ipairs(Commander.getAllies(color)) do
                                                                        bestResearch = math.max(bestResearch, TleilaxuResearch.getTokenCellPosition(otherColor).x)
                                                                    end
                                                                else
                                                                    bestResearch = TleilaxuResearch.getTokenCellPosition(color).x
                                                                end
                                                                return bestResearch
                                                            end

                                                            ---
                                                            function TleilaxuResearch._tleilaxSpaceToWorldPosition(positionInTleilaxSpace)
                                                                return TleilaxuResearch.tleilaxuLevelZones[positionInTleilaxSpace].getPosition()
                                                            end

                                                            ---
                                                            function TleilaxuResearch._worlPositionToTleilaxSpace(positionInWorldSpace)
                                                                local nearestLevel = nil
                                                                local nearestDistance = 0
                                                                for level, zone in ipairs(TleilaxuResearch.tleilaxuLevelZones) do
                                                                    local d = Vector.distance(positionInWorldSpace, zone.getPosition())
                                                                    if not nearestLevel or d < nearestDistance then
                                                                        nearestLevel = level
                                                                        nearestDistance = d
                                                                    end
                                                                end
                                                                return nearestLevel
                                                            end

                                                            ---
                                                            function TleilaxuResearch._generateTleilaxButtons()
                                                                for level, _ in pairs(TleilaxuResearch.tleilaxLevelBenefits) do
                                                                    local levelZone = TleilaxuResearch.tleilaxuLevelZones[level]
                                                                    Helper.createAnchoredAreaButton(levelZone, 1.6, 0.1, I18N("progressOnTleilaxTrack"), PlayBoard.withLeader(function (_, color, _)
                                                                        local leader = PlayBoard.getLeader(color)
                                                                        local token = PlayBoard.getContent(color).tleilaxToken
                                                                        local tokenLevel = TleilaxuResearch._worlPositionToTleilaxSpace(token.getPosition())
                                                                        -- Human players are required to advance step by step.
                                                                        local jump = math.min(1, level - tokenLevel)

                                                                        if jump < 0 then
                                                                            Dialog.showConfirmDialog(color, I18N("forbiddenMove"), function ()
                                                                                TleilaxuResearch._advanceTleilax(color, jump, false).doAfter(function ()
                                                                                    leader.beetle(color, jump)
                                                                                end)
                                                                            end)
                                                                        else
                                                                            leader.beetle(color, jump)
                                                                        end
                                                                    end))
                                                                end
                                                            end

                                                            ---@param color PlayerColor
                                                            ---@param jump integer
                                                            ---@return Continuation
                                                            function TleilaxuResearch.advanceTleilax(color, jump)
                                                                if jump >= 1 then
                                                                    return Helper.repeatChainedAction(jump, function ()
                                                                        return TleilaxuResearch._advanceTleilax(color, 1, true)
                                                                    end)
                                                                else
                                                                    return TleilaxuResearch._advanceTleilax(color, jump, false)
                                                                end
                                                            end

                                                            ---@param color PlayerColor
                                                            ---@param jump integer
                                                            ---@param withBenefits boolean
                                                            ---@return Continuation
                                                            function TleilaxuResearch._advanceTleilax(color, jump, withBenefits)
                                                                local continuation = Helper.createContinuation("TleilaxuResearch._advanceTleilax")

                                                                local leader = PlayBoard.getLeader(color)
                                                                local tleilaxToken = PlayBoard.getContent(color).tleilaxToken
                                                                local level = TleilaxuResearch._worlPositionToTleilaxSpace(tleilaxToken.getPosition())

                                                                local finalJump = jump
                                                                finalJump = math.min(8, level + finalJump) - level
                                                                finalJump = math.max(0, level + finalJump) - level

                                                                if finalJump ~= 0 then
                                                                    local newLevel = level + finalJump

                                                                    local p = TleilaxuResearch._tleilaxSpaceToWorldPosition(newLevel)
                                                                    tleilaxToken.setPositionSmooth(p + Vector(0, 1, 0.25))

                                                                    if withBenefits then
                                                                        Helper.onceMotionless(tleilaxToken).doAfter(function ()
                                                                            local researchLevelBenefits = TleilaxuResearch.tleilaxLevelBenefits[newLevel] or {}
                                                                            assert(researchLevelBenefits, "No level benefits at level " .. tostring(newLevel))

                                                                            if researchLevelBenefits.intrigue then
                                                                                leader.drawIntrigues(color, 1)
                                                                            end

                                                                            if researchLevelBenefits.victoryToken then
                                                                                leader.gainVictoryPoint(color, "tleilax", 1)
                                                                            end

                                                                            if researchLevelBenefits.spiceBonus then
                                                                                local amount = TleilaxuResearch.spiceBonus:get()
                                                                                leader.resources(color, "spice", amount)
                                                                                TleilaxuResearch.spiceBonus:set(0)
                                                                            end

                                                                            Helper.emitEvent("tleilaxProgress", color)

                                                                            continuation.run(finalJump)
                                                                        end)
                                                                    else
                                                                        continuation.run(finalJump)
                                                                    end
                                                                else
                                                                    continuation.run(finalJump)
                                                                end

                                                                return continuation
                                                            end

                                                            ---
                                                            function TleilaxuResearch._createTanksButton()
                                                                Helper.createAnchoredAreaButton(TleilaxuResearch.TanksZone, 1.6, 0.1, I18N("specimenEdit"), PlayBoard.withLeader(function (_, color, altClick)
                                                                    local leader = PlayBoard.getLeader(color)
                                                                    if altClick then
                                                                        leader.troops(color, "tanks", "supply", 1)
                                                                    else
                                                                        leader.troops(color, "supply", "tanks", 1)
                                                                    end
                                                                end))
                                                            end

                                                            ---
                                                            function TleilaxuResearch._createTanksPark(color)
                                                                local offsets = {
                                                                    Red = Vector(-0.65, 0, 0.45),
                                                                    Blue = Vector(-0.65, 0, -0.45),
                                                                    Green = Vector(0.65, 0, 0.45),
                                                                Yellow = Vector(0.65, 0, -0.45)}

                                                                local origin = getObjectFromGUID("f5de09").getPosition() + offsets[color]
                                                                origin:setAt('y', 1.86) -- ground level
                                                                local slots = {}
                                                                for k = 1, 2 do
                                                                    for j = 1, 2 do
                                                                        for i = 1, 3 do
                                                                            local x = (i - 2) * 0.4
                                                                            local y = (k - 1) * 0.4
                                                                            local z = (1.5 - j) * 0.4
                                                                            local slot = Vector(x, y, z) + origin
                                                                            table.insert(slots, slot)
                                                                        end
                                                                    end
                                                                end

                                                                local zone = Park.createTransientBoundingZone(0, Vector(0.25, 0.25, 0.25), slots)

                                                                return Park.createPark(
                                                                    color .. "Tanks",
                                                                    slots,
                                                                    Vector(0, 0, 0),
                                                                    {zone},
                                                                    {"Troop", color},
                                                                    nil,
                                                                    false,
                                                                true)
                                                            end

                                                            ---
                                                            function TleilaxuResearch.getTankPark(color)
                                                                return TleilaxuResearch.tanksParks[color]
                                                            end

                                                            return TleilaxuResearch

                                                        end)
                                                        __bundle_register("utils.Park", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                            local Helper = require("utils.Helper")

                                                            -- Make it a class (and upgrade createPark into newPark)?
                                                            local Park = {}

                                                            ---
                                                            function Park.createCommonPark(tags, slots, margins, rotation, rotationSnap, zones)
                                                                assert(#slots > 0)
                                                                local finalZones = (zones and #zones > 0) and zones or {Park.createTransientBoundingZone(0, margins, slots)}
                                                                local name = Helper.stringConcat(tags) .. "_" .. finalZones[1].getGUID()

                                                                local park = Park.createPark(
                                                                    name,
                                                                    slots,
                                                                    rotation,
                                                                    finalZones,
                                                                    tags,
                                                                    nil,
                                                                    false,
                                                                true)

                                                                local p = slots[1]:copy()
                                                                p:setAt("y", 2)
                                                                Helper.createTransientAnchor(name .. "Park", p).doAfter(function (anchor)
                                                                    park.anchor = anchor
                                                                    local snapPoints = {}
                                                                    for _, slot in ipairs(slots) do
                                                                        table.insert(snapPoints, Helper.createRelativeSnapPoint(anchor, slot, rotationSnap or false, tags))
                                                                    end
                                                                    anchor.setSnapPoints(snapPoints)
                                                                end)

                                                                return park
                                                            end

                                                            --[[
    A park is basically an open field bag with a fixed size and a visual
    arrangement of its content.

    name: a unique name for the park.
    slots: the slot positions.
    rotation: the optional rotation to apply to parked objects.
    zones: one or more zones to test if an object is in the park.
    tags: restriction on the park content.
    description: an optional restriction on the park content.
    locked: should the park content be locked?
]]
                                                            ---
                                                            function Park.createPark(name, slots, rotation, zones, tags, description, locked, smooth)
                                                                assert(#slots > 0, "No slot provided for new park.")
                                                                assert(zones and #zones > 0, "No park zones provided.")

                                                                Helper.setSharedTable(name, {})

                                                                -- Check all slots in the zone.

                                                                return {
                                                                    name = name,
                                                                    slots = slots,
                                                                    rotation = rotation,
                                                                    zones = zones,
                                                                    tags = tags,
                                                                    tagUnion = false,
                                                                    description = description,
                                                                    locked = locked,
                                                                    smooth = smooth
                                                                }
                                                            end

                                                            --[[
    Transfert objects from a park to another.

    n: the number of objects to be transfered.
    fromParkName: the source park.
    toParkName: the destination park.
]]
                                                            ---
                                                            function Park.transfert(n, fromPark, toPark)
                                                                assert(n >= 0, "Negative count.")
                                                                assert(fromPark, "No source park.")
                                                                assert(toPark, "No destination park.")
                                                                assert(fromPark ~= toPark, "Source and destination parks are the same.")

                                                                local holders = {}
                                                                for i, object in ipairs(Park.getObjects(fromPark)) do
                                                                    if i <= n then
                                                                        holders[i] = {object = object}
                                                                    else
                                                                        break
                                                                    end
                                                                end

                                                                return Park._putHolders(holders, toPark)
                                                            end

                                                            --[[
    Put an external object into a park, provided it remains a free slot.
    object: the object to put in the park.
    toParkName: the name of the destination park.
]]
                                                            ---
                                                            function Park.putObject(object, toPark)
                                                                assert(object, "No object provided.")
                                                                return Park.putObjects({object}, toPark) > 0
                                                            end

                                                            ---
                                                            function Park.putObjects(objects, toPark)
                                                                assert(objects, "No objects provided.")
                                                                local holders = {}
                                                                for _, object in ipairs(objects) do
                                                                    table.insert(holders, {object = object})
                                                                end
                                                                return Park._putHolders(holders, toPark)
                                                            end

                                                            ---
                                                            function Park.putObjectFromBag(objectBag, toPark, count)
                                                                assert(objectBag, "No object bag provided.")
                                                                local holders = {}
                                                                for _ = 1, (count or 1) do
                                                                    table.insert(holders, {bag = objectBag})
                                                                end
                                                                return Park._putHolders(holders, toPark) == (count or 1)
                                                            end

                                                            ---
                                                            function Park._putHolders(holders, toPark)
                                                                assert(holders, "No holders provided.")
                                                                assert(toPark, "No destination park.")

                                                                local now = Time.time
                                                                local objectsInTransit = Park._getRefreshedObjectsInTransit(toPark, now)

                                                                Park._instantTidyUp(toPark, objectsInTransit)

                                                                local emptySlots = Park.findEmptySlots(toPark)

                                                                local skipCount = #Helper.getKeys(objectsInTransit)
                                                                local count = math.max(0, math.min(#emptySlots - skipCount, #holders))

                                                                for i = 1, count do
                                                                    local holder = holders[i]
                                                                    if holder.object then
                                                                        Park._moveObjectToPark(holder.object, emptySlots[i + skipCount], toPark)
                                                                        objectsInTransit[holder.object] = now
                                                                    elseif holder.bag then
                                                                        Park.uid = (Park.uid or 0) + 1
                                                                        local uid = Park.uid
                                                                        objectsInTransit[uid] = now
                                                                        Park._takeObjectToPark(holder.bag, emptySlots[i + skipCount], toPark).doAfter(function (object)
                                                                            Park._mutateObjectInTransit(toPark, uid, object)
                                                                        end)
                                                                    end
                                                                end

                                                                Helper.setSharedTable(toPark.name, objectsInTransit)

                                                                return count
                                                            end

                                                            ---
                                                            function Park._mutateObjectInTransit(toPark, before, after)
                                                                local now = Time.time
                                                                local objectsInTransit = Park._getRefreshedObjectsInTransit(toPark, now)
                                                                local newObjectsInTransit = {}
                                                                for object, transit in pairs(objectsInTransit or {}) do
                                                                    if object == before then
                                                                        if after then
                                                                            newObjectsInTransit[after] = transit
                                                                        end
                                                                    else
                                                                        newObjectsInTransit[object] = transit
                                                                    end
                                                                end
                                                                Helper.setSharedTable(toPark.name, newObjectsInTransit)
                                                            end

                                                            ---
                                                            function Park._getRefreshedObjectsInTransit(toPark, now)
                                                                local objectsInTransit = Helper.getSharedTable(toPark.name)

                                                                local objectsAround = {}
                                                                for _, object in ipairs(Park.getObjects(toPark)) do
                                                                    for _, slot in ipairs(toPark.slots) do
                                                                        if Vector.sqrDistance(slot, object.getPosition()) < 0.1 then
                                                                            objectsAround[object] = true
                                                                        end
                                                                    end
                                                                end

                                                                local newObjectsInTransit = {}
                                                                for object, transit in pairs(objectsInTransit or {}) do
                                                                    if now - transit < 2.0 and not objectsAround[object] then
                                                                        newObjectsInTransit[object] = transit
                                                                    end
                                                                end

                                                                return newObjectsInTransit
                                                            end

                                                            ---
                                                            function Park.onceStabilized(toPark)
                                                                local continuation = Helper.createContinuation("Park.onceStabilized")
                                                                Wait.condition(continuation.run, function ()
                                                                    continuation.tick()
                                                                    local objectsInTransit = Park._getRefreshedObjectsInTransit(toPark, Time.time)
                                                                    return #Helper.getKeys(objectsInTransit) == 0
                                                                end)
                                                                return continuation
                                                            end

                                                            ---
                                                            function Park.getZones(park)
                                                                return park.zones
                                                            end

                                                            ---
                                                            function Park.getPosition(park)
                                                                return park.zones[1].getPosition()
                                                            end

                                                            ---
                                                            function Park.getObjects(park)
                                                                assert(park)
                                                                local objects = {}
                                                                local objectsInTransit = Helper.getSharedTable(park.name)
                                                                for _, zone in ipairs(park.zones) do
                                                                    for _, object in ipairs(zone.getObjects()) do
                                                                        if not Helper.tableContains(objectsInTransit, object) then
                                                                            local isOneOfThem =
                                                                            (park.tagUnion and Helper.hasAnyTag(object, park.tags) or Helper.hasAllTags(object, park.tags)) and
                                                                            (not Helper.getID(park) or Helper.getID(park) == Helper.getID(object))
                                                                            if isOneOfThem then
                                                                                table.insert(objects, object)
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                                return objects
                                                            end

                                                            ---
                                                            function Park.getAnyObject(park)
                                                                local objects = Park.getObjects(park)
                                                                return #objects > 0 and objects[1] or nil
                                                            end

                                                            ---
                                                            function Park.isEmpty(park)
                                                                return #Park.getObjects(park) == 0
                                                            end

                                                            ---
                                                            function Park._instantTidyUp(park, newObjectsInTransit)

                                                                local freeSlots = {}
                                                                local freeSlotCount = 0
                                                                for _, slot in ipairs(park.slots) do
                                                                    freeSlots[slot] = {}
                                                                    freeSlotCount = freeSlotCount + 1
                                                                end

                                                                local freeObjects = {}
                                                                local freeObjectCount = 0
                                                                for _, object in ipairs(Park.getObjects(park)) do
                                                                    if object.resting then
                                                                        freeObjects[object] = true
                                                                        freeObjectCount = freeObjectCount + 1
                                                                        newObjectsInTransit[object] = nil
                                                                    end
                                                                end

                                                                while freeSlotCount > 0 and freeObjectCount > 0 do

                                                                    for object, _ in pairs(freeObjects) do
                                                                        local nearestSqrtDistance = 0
                                                                        local nearestCandidates = nil
                                                                        for slot, candidates in pairs(freeSlots) do
                                                                            if candidates then
                                                                                local sqrtDistance = Vector.sqrDistance(slot, object.getPosition())
                                                                                if not nearestCandidates or sqrtDistance < nearestSqrtDistance then
                                                                                    nearestSqrtDistance = sqrtDistance
                                                                                    nearestCandidates = candidates
                                                                                end
                                                                            end
                                                                        end
                                                                        assert(nearestCandidates)
                                                                        nearestCandidates[object] = nearestSqrtDistance
                                                                    end

                                                                    for slot, candidates in pairs(freeSlots) do
                                                                        local nearestSqrtDistance = 0
                                                                        local nearestObject = nil
                                                                        for object, sqrtDistance in pairs(candidates) do
                                                                            if not nearestObject or sqrtDistance < nearestSqrtDistance then
                                                                                nearestSqrtDistance = sqrtDistance
                                                                                nearestObject = object
                                                                            end
                                                                        end
                                                                        if nearestObject then
                                                                            freeSlots[slot] = nil
                                                                            freeSlotCount = freeSlotCount - 1
                                                                            freeObjects[nearestObject] = nil
                                                                            freeObjectCount = freeObjectCount - 1

                                                                            nearestObject.setPosition(slot)
                                                                            if park.rotation then
                                                                                nearestObject.setRotation(park.rotation:copy())
                                                                            end
                                                                            nearestObject.setLock(park.locked)
                                                                        end
                                                                    end
                                                                end

                                                                --assert(#freeObjects == 0, "Too many objects.")
                                                            end

                                                            ---
                                                            function Park._moveObjectToPark(object, slot, park)
                                                                object.setLock(park.locked)
                                                                local offset = Vector(0, 0, 0)
                                                                if not object.getLock() then
                                                                    -- Nice drop are only for unlocked objects.
                                                                    offset = Vector(0, 1, 0)
                                                                end
                                                                if park.smooth then
                                                                    object.setPositionSmooth(slot + offset, false, false)
                                                                else
                                                                    object.setPosition(slot + offset)
                                                                end
                                                                if park.rotation then
                                                                    object.setRotation(park.rotation:copy())
                                                                end
                                                            end

                                                            ---
                                                            function Park._takeObjectToPark(bag, slot, park)
                                                                local continuation = Helper.createContinuation("Park._takeObjectToPark/" .. park.name)
                                                                local takeParameters = {}
                                                                local offset = Vector(0, 0, 0)
                                                                if not park.locked then
                                                                    -- Nice drop are only for unlocked objects.
                                                                    offset = Vector(0, 1, 0)
                                                                end
                                                                takeParameters.position = slot + offset
                                                                if park.rotation then
                                                                    takeParameters.rotation = park.rotation
                                                                end
                                                                takeParameters.callback_function = function (object)
                                                                    object.locked = park.locked
                                                                    continuation.run(object)
                                                                end
                                                                bag.takeObject(takeParameters)
                                                                return continuation
                                                            end

                                                            ---
                                                            function Park.findEmptySlots(park)
                                                                local freeSlots = Park.deepCopy(park.slots)

                                                                for _, object in ipairs(Park.getObjects(park)) do
                                                                    for i, slot in ipairs(freeSlots) do
                                                                        if Vector.sqrDistance(slot, object.getPosition()) < 0.1 then
                                                                            table.remove(freeSlots, i)
                                                                            break
                                                                        end
                                                                    end
                                                                    if #freeSlots == 0 then
                                                                        break
                                                                    end
                                                                end

                                                                return freeSlots
                                                            end

                                                            --- Unify with Helper.deepCopy which doesn't use copy?
                                                            function Park.deepCopy(c)
                                                                local copy = {}
                                                                for i, e in ipairs(c) do
                                                                    copy[i] = e:copy()
                                                                end
                                                                return copy
                                                            end

                                                            ---
                                                            function Park.createTransientBoundingZone(rotationAroundY, margins, points)
                                                                assert(#points > 0)

                                                                local barycenter = nil
                                                                for _, slot in ipairs(points) do
                                                                    assert(slot)
                                                                    if barycenter then
                                                                        barycenter = barycenter + slot
                                                                    else
                                                                        barycenter = slot:copy()
                                                                    end
                                                                end
                                                                barycenter = barycenter * (1.0 / #points)

                                                                local minBounds = nil
                                                                local maxBounds = nil
                                                                for i, slot in ipairs(points) do
                                                                    local transformedSlot = (slot - barycenter):rotateOver('y', -rotationAroundY)
                                                                    if i > 1 then
                                                                        minBounds.x = math.min(minBounds.x, transformedSlot.x)
                                                                        minBounds.y = math.min(minBounds.y, transformedSlot.y)
                                                                        minBounds.z = math.min(minBounds.z, transformedSlot.z)
                                                                        maxBounds.x = math.max(maxBounds.x, transformedSlot.x)
                                                                        maxBounds.y = math.max(maxBounds.y, transformedSlot.y)
                                                                        maxBounds.z = math.max(maxBounds.z, transformedSlot.z)
                                                                    else
                                                                        minBounds = transformedSlot:copy()
                                                                        maxBounds = transformedSlot:copy()
                                                                    end
                                                                end

                                                                local sx = 2 * math.max(math.abs(minBounds.x), math.abs(maxBounds.x))
                                                                local sy = 2 * math.max(math.abs(minBounds.y), math.abs(maxBounds.y))
                                                                local sz = 2 * math.max(math.abs(minBounds.z), math.abs(maxBounds.z))

                                                                -- FIXME Created zones are not usable immediately.
                                                                local zone = spawnObject({
                                                                    type = 'ScriptingTrigger',
                                                                    position = barycenter,
                                                                    rotation = Vector(0, rotationAroundY, 0),
                                                                    scale = {
                                                                        math.max(0.1, sx + margins.x),
                                                                        math.max(0.1, sy + margins.y),
                                                                    math.max(0.1, sz + margins.z)}})

                                                                    Helper.markAsTransient(zone)

                                                                    return zone
                                                                end

                                                                return Park

                                                            end)
                                                            __bundle_register("TechCard", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                local Module = require("utils.Module")
                                                                local Helper = require("utils.Helper")

                                                                -- Exceptional Immediate require for the sake of aliasing.
                                                                local CardEffect = require("CardEffect")

                                                                local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                local Types = Module.lazyRequire("Types")

                                                                -- Function aliasing for a more readable code.
                                                                local persuasion = CardEffect.persuasion
                                                                local sword = CardEffect.sword
                                                                local spice = CardEffect.spice
                                                                local water = CardEffect.water
                                                                local solari = CardEffect.solari
                                                                local deploy = CardEffect.deploy
                                                                local troop = CardEffect.troop
                                                                local dreadnought = CardEffect.dreadnought
                                                                local negotiator = CardEffect.negotiator
                                                                local specimen = CardEffect.specimen
                                                                local intrigue = CardEffect.intrigue
                                                                local trash = CardEffect.trash
                                                                local research = CardEffect.research
                                                                local beetle = CardEffect.beetle
                                                                local influence = CardEffect.influence
                                                                local vp = CardEffect.vp
                                                                local draw = CardEffect.draw
                                                                local shipment = CardEffect.shipment
                                                                local control = CardEffect.control
                                                                local spy = CardEffect.spy
                                                                local contract = CardEffect.contract
                                                                local voice = CardEffect.voice
                                                                local perDreadnoughtInConflict = CardEffect.perDreadnoughtInConflict
                                                                local perSwordCard = CardEffect.perSwordCard
                                                                local perFremen = CardEffect.perFremen
                                                                local perEmperor = CardEffect.perEmperor
                                                                local perFulfilledContract = CardEffect.perFulfilledContract
                                                                local choice = CardEffect.choice
                                                                local optional = CardEffect.optional
                                                                local seat = CardEffect.seat
                                                                local fremenBond = CardEffect.fremenBond
                                                                -- bloodlines sardaukar commander in conflict
                                                                local sardaukarCommanderInConflict = CardEffect.sardaukarCommanderInConflict
                                                                -- bloodlines imperial throneship reveal
                                                                local imperialThroneship = CardEffect.imperialThroneship
                                                                local agentInEmperorSpace = CardEffect.agentInEmperorSpace
                                                                local emperorAlliance = CardEffect.emperorAlliance
                                                                local spacingGuildAlliance = CardEffect.spacingGuildAlliance
                                                                local beneGesseritAlliance = CardEffect.beneGesseritAlliance
                                                                local fremenAlliance = CardEffect.fremenAlliance
                                                                local fremenFriendship = CardEffect.fremenFriendship
                                                                local anyAlliance = CardEffect.anyAlliance
                                                                local oneHelix = CardEffect.oneHelix
                                                                local twoHelices = CardEffect.twoHelices
                                                                local winner = CardEffect.winner
                                                                local twoSpies = CardEffect.twoSpies
                                                                local spyMakerSpace = CardEffect.spyMakerSpace
                                                                local swordmaster = CardEffect.swordmaster
                                                                local multiply = CardEffect.multiply

                                                                local TechCard = {
                                                                    -- bloodlines disable ix techs
                                                                    -- windtraps = {cost = 2, hagal = true, acquireBonus = {water(1)}},
                                                                    -- detonationDevices = {cost = 3, hagal = true},
                                                                    -- memocorders = {cost = 2, hagal = true, acquireBonus = {influence(1)}},
                                                                    -- flagship = {cost = 8, hagal = true, acquireBonus = {vp(1)}},
                                                                    -- spaceport = {cost = 5, hagal = false, acquireBonus = {draw(2)}},
                                                                    -- artillery = {cost = 1, hagal = false},
                                                                    -- holoprojectors = {cost = 3, hagal = false},
                                                                    -- restrictedOrdnance = {cost = 4, hagal = false, acquireBonus = {persuasion(seat(2))}},
                                                                    -- shuttleFleet = {cost = 6, hagal = true, acquireBonus = {choice(2, {influence(1, "emperor"), influence(1, "spacingGuild"), influence(1, "beneGesserit"), influence(1, "fremen")})}},
                                                                    -- spySatellites = {cost = 4, hagal = true},
                                                                    -- disposalFacility = {cost = 3, hagal = false, acquireBonus = {trash(1)}},
                                                                    -- chaumurky = {cost = 4, hagal = true, acquireBonus = {intrigue(2)}},
                                                                    -- sonicSnoopers = {cost = 2, hagal = true, acquireBonus = {intrigue(1)}},
                                                                    -- trainingDrones = {cost = 3, hagal = true},
                                                                    -- troopTransports = {cost = 2, hagal = true},
                                                                    -- holtzmanEngine = {cost = 6, hagal = true},
                                                                    -- minimicFilm = {cost = 2, hagal = false, acquireBonus = {persuasion(1)}},
                                                                    -- invasionShips = {cost = 5, hagal = true, acquireBonus = {troop(4)}},
                                                                    -- bloodlines techs
                                                                    bl_TrainingDepot = {cost = 1, hagal = true},
                                                                    bl_GeneLockedVault = {cost = 2, hagal = true, acquireBonus = {choice(1, draw(1), intrigue(1))}},
                                                                    bl_Glowglobes = {cost = 2, hagal = true, acquireBonus = {influence(1)}},
                                                                    bl_PlanetaryArray = {cost = 2, hagal = false, acquireBonus = {trash(1)}},
                                                                    bl_ServoReceivers = {cost = 2, hagal = true},
                                                                    bl_DeliveryBay = {cost = 3, hagal = true, acquireBonus = {draw(1)}},
                                                                    bl_PlasteelBlades = {cost = 3, hagal = false, acquireBonus = {solari(4)}},
                                                                    bl_SuspensorSuits = {cost = 3, hagal = false},
                                                                    bl_RapidDropships = {cost = 4, hagal = true, acquireBonus = {troop(2)}},
                                                                    bl_SelfDestroyingMessages = {cost = 4, hagal = true, acquireBonus = {intrigue(2)}},
                                                                    bl_NavigationChamber = {cost = 5, hagal = true, acquireBonus = {influence(1)}},
                                                                    bl_SardaukarHighCommand = {cost = 7, hagal = true, acquireBonus = {vp(1)}},
                                                                    bl_ForbiddenWeapons = {cost = 2, hagal = false, acquireBonus = {'detonation(1)', troop(1)}},
                                                                    bl_AdvancedDataAnalysis = {cost = 3, hagal = false},
                                                                    bl_OrnithopterFleet = {cost = 4, hagal = true, acquireBonus = {troop(2)}},
                                                                    bl_Panopticon = {cost = 5, hagal = true},
                                                                    bl_SpyDrones = {cost = 5, hagal = true, acquireBonus = {spy(2)}},
                                                                    bl_ChoamTransports = {cost = 6, hagal = false, acquireBonus = {contract(1)}},
                                                                }

                                                                function TechCard._resolveCard(card)
                                                                    assert(card)
                                                                    local cardName = Helper.getID(card)
                                                                    local cardInfo = TechCard[cardName]
                                                                    assert(cardInfo, "Unknown card: " .. tostring(cardName))
                                                                    cardInfo.name = cardName
                                                                    return cardInfo
                                                                end

                                                                ---
                                                                function TechCard.getDetails(techCard)
                                                                    return TechCard._resolveCard(techCard)
                                                                end

                                                                ---
                                                                function TechCard.getCost(techCard)
                                                                    return TechCard._resolveCard(techCard).cost
                                                                end

                                                                ---
                                                                function TechCard.isHagal(techCard)
                                                                    return TechCard._resolveCard(techCard).hagal
                                                                end

                                                                ---
                                                                function TechCard.applyBuyEffect(color, techCard)
                                                                    Types.assertIsPlayerColor(color)
                                                                    assert(techCard)

                                                                    local bonus = TechCard.getDetails(techCard).acquireBonus
                                                                    if bonus then
                                                                        local context = {
                                                                            color = color,
                                                                            player = PlayBoard.getLeader(color),
                                                                            cardName = Helper.getID(techCard),
                                                                            card = techCard,
                                                                        }

                                                                        for _, bonusItem in ipairs(bonus) do
                                                                            CardEffect.evaluate(context, bonusItem)
                                                                        end
                                                                    end
                                                                end

                                                                return TechCard

                                                            end)
                                                            __bundle_register("CardEffect", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                local Module = require("utils.Module")
                                                                local Helper = require("utils.Helper")
                                                                local Set = require("utils.Set")

                                                                local InfluenceTrack = Module.lazyRequire("InfluenceTrack")
                                                                local Combat = Module.lazyRequire("Combat")
                                                                local MainBoard = Module.lazyRequire("MainBoard")
                                                                local TleilaxuResearch = Module.lazyRequire("TleilaxuResearch")
                                                                local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                local ImperiumCard = Module.lazyRequire("ImperiumCard")

                                                                --[[
    Save some helping functions such as "perSwordCard", the intent of this
    module is to allow a compact, terse writing style for card effects.
]]
                                                                local CardEffect = {}

                                                                ---@class Context
                                                                ---@field player any
                                                                ---@field color table
                                                                ---@field card any
                                                                ---@field cardName string
                                                                ---@field playedCards any[]?
                                                                ---@field revealedCards any[]?

                                                                --[[
-- Function aliasing for a more readable code.
local persuasion = CardEffect.persuasion
local sword = CardEffect.sword
local spice = CardEffect.spice
local water = CardEffect.water
local solari = CardEffect.solari
local deploy = CardEffect.deploy
local troop = CardEffect.troop
local dreadnought = CardEffect.dreadnought
local negotiator = CardEffect.negotiator
local specimen = CardEffect.specimen
local intrigue = CardEffect.intrigue
local trash = CardEffect.trash
local research = CardEffect.research
local beetle = CardEffect.beetle
local influence = CardEffect.influence
local vp = CardEffect.vp
local draw = CardEffect.draw
local shipment = CardEffect.shipment
local control = CardEffect.control
local spy = CardEffect.spy
local contract = CardEffect.contract
local voice = CardEffect.voice
local perDreadnoughtInConflict = CardEffect.perDreadnoughtInConflict
local perSwordCard = CardEffect.perSwordCard
local perFremen = CardEffect.perFremen
local perEmperor = CardEffect.perEmperor
local perFulfilledContract = CardEffect.perFulfilledContract
local choice = CardEffect.choice
local optional = CardEffect.optional
local seat = CardEffect.seat
local fremenBond = CardEffect.fremenBond
-- bloodlines sardaukar commander in conflict
local sardaukarCommanderInConflict = CardEffect.sardaukarCommanderInConflict
-- bloodlines imperial throneship reveal
local imperialThroneship = CardEffect.imperialThroneship
local agentInEmperorSpace = CardEffect.agentInEmperorSpace
local emperorAlliance = CardEffect.emperorAlliance
local spacingGuildAlliance = CardEffect.spacingGuildAlliance
local beneGesseritAlliance = CardEffect.beneGesseritAlliance
local fremenAlliance = CardEffect.fremenAlliance
local fremenFriendship = CardEffect.fremenFriendship
local anyAlliance = CardEffect.anyAlliance
local oneHelix = CardEffect.oneHelix
local twoHelices = CardEffect.twoHelices
local winner = CardEffect.winner
local twoSpies = CardEffect.twoSpies
local spyMakerSpace = CardEffect.spyMakerSpace
local swordmaster = CardEffect.swordmaster
local multiply = CardEffect.multiply
]]

                                                                ---@param context Context
                                                                ---@param expression any
                                                                ---@return boolean
                                                                function CardEffect.evaluate(context, expression)
                                                                    if type(expression) == 'function' then
                                                                        return expression(context)
                                                                    else
                                                                        return expression
                                                                    end
                                                                end

                                                                function CardEffect._dispatch(selector, expression)
                                                                    return function (context)
                                                                        local color = context.color
                                                                        local value = CardEffect.evaluate(context, expression)
                                                                        local leader = context.player
                                                                        local call = function (method, ...)
                                                                            if leader[method] then
                                                                                return leader[method](...)
                                                                            else
                                                                                return false
                                                                            end
                                                                        end

                                                                        if selector == "deploy" then
                                                                            return call("troops", color, "supply", "combat", value)
                                                                        elseif selector == "troop" then
                                                                            return call("troops", color, "supply", "garrison", value)
                                                                        elseif selector == "negotiator" then
                                                                            return call("troops", color, "supply", "negotiation", value)
                                                                        elseif selector == "specimen" then
                                                                            return call("troops", color, "supply", "tanks", value)
                                                                        elseif selector == "dreadnought" then
                                                                            return call("dreadnought", color, "supply", "garrison", value)
                                                                        elseif Helper.isElementOf(selector, {"spice", "water", "solari"}) then
                                                                            return call("resources", color, selector, value)
                                                                        elseif Helper.isElementOf(selector, {"persuasion", "strength"}) then
                                                                            return call("resources", color, selector, value)
                                                                        elseif selector == "intrigue" then
                                                                            return call("drawIntrigues", color, value)
                                                                        elseif selector == "trash" then
                                                                            return false
                                                                        elseif Helper.isElementOf(selector, {"emperor", "spacingGuild", "beneGesserit", "fremen", "?"}) then
                                                                            local faction = selector
                                                                            if selector == "?" then
                                                                                faction = nil
                                                                            end
                                                                            return call("influence", color, faction, value)
                                                                        elseif selector == "vp" then
                                                                            call("gainVictoryPoint", color, context.cardName, value)
                                                                            return true
                                                                        elseif selector == "control" then
                                                                            return call("control", color, expression)
                                                                        elseif selector == "draw" then
                                                                            return call("drawImperiumCards", color, value)
                                                                        elseif selector == "shipment" then
                                                                            return call("shipments", color, value)
                                                                        elseif selector == "research" then
                                                                            --return call("research", color, value)
                                                                            return false
                                                                        elseif selector == "beetle" then
                                                                            return call("beetle", color, value)
                                                                        elseif selector == "spy" then
                                                                            assert(type(value) == "number")
                                                                            if value >= 0 then
                                                                                for _ = 1, value do
                                                                                    call("sendSpy", color)
                                                                                end
                                                                                return true
                                                                            else
                                                                                local recallableSpies = MainBoard.findRecallableSpies(color)
                                                                                if #recallableSpies >= -value then
                                                                                    for _, otherObservationPostName in ipairs(recallableSpies) do
                                                                                        MainBoard.recallSpy(color, otherObservationPostName)
                                                                                    end
                                                                                    return true
                                                                                else
                                                                                    return false
                                                                                end
                                                                            end
                                                                        elseif selector == "contract" then
                                                                            assert(not value or value == 1, tostring(value))
                                                                            return call("pickContract", color)
                                                                        elseif selector == "voice" then
                                                                            assert(not value, tostring(value))
                                                                            return call("pickVoice", color)
                                                                        else
                                                                            error("Unknown selector: " .. tostring(selector))
                                                                        end
                                                                    end
                                                                end

                                                                -- Effectors

                                                                function CardEffect.persuasion(expression)
                                                                    return CardEffect._dispatch('persuasion', expression)
                                                                end

                                                                function CardEffect.sword(expression)
                                                                    return CardEffect._dispatch('strength', expression)
                                                                end

                                                                function CardEffect.spice(expression)
                                                                    return CardEffect._dispatch('spice', expression)
                                                                end

                                                                function CardEffect.water(expression)
                                                                    return CardEffect._dispatch('water', expression)
                                                                end

                                                                function CardEffect.solari(expression)
                                                                    return CardEffect._dispatch('solari', expression)
                                                                end

                                                                function CardEffect.deploy(expression)
                                                                    return CardEffect._dispatch('deploy', expression)
                                                                end

                                                                function CardEffect.troop(expression)
                                                                    return CardEffect._dispatch('troop', expression)
                                                                end

                                                                function CardEffect.dreadnought(expression)
                                                                    return CardEffect._dispatch('dreadnought', expression)
                                                                end

                                                                function CardEffect.negotiator(expression)
                                                                    return CardEffect._dispatch('negotiator', expression)
                                                                end

                                                                function CardEffect.specimen(expression)
                                                                    return CardEffect._dispatch('specimen', expression)
                                                                end

                                                                function CardEffect.intrigue(expression)
                                                                    return CardEffect._dispatch('intrigue', expression)
                                                                end

                                                                function CardEffect.trash(expression)
                                                                    return CardEffect._dispatch('trash', expression)
                                                                end

                                                                function CardEffect.research(expression)
                                                                    return CardEffect._dispatch('research', expression)
                                                                end

                                                                function CardEffect.beetle(expression)
                                                                    return CardEffect._dispatch('beetle', expression)
                                                                end

                                                                function CardEffect.influence(expression, faction)
                                                                    return CardEffect._dispatch(faction or "?", expression)
                                                                end

                                                                function CardEffect.vp(expression)
                                                                    return CardEffect._dispatch('vp', expression)
                                                                end

                                                                function CardEffect.draw(expression)
                                                                    return CardEffect._dispatch('draw', expression)
                                                                end

                                                                function CardEffect.shipment(expression)
                                                                    return CardEffect._dispatch('shipment', expression)
                                                                end

                                                                function CardEffect.control(expression)
                                                                    return CardEffect._dispatch('control', expression)
                                                                end

                                                                function CardEffect.spy(expression)
                                                                    return CardEffect._dispatch('spy', expression)
                                                                end

                                                                function CardEffect.contract(expression)
                                                                    return CardEffect._dispatch('contract', expression)
                                                                end

                                                                function CardEffect.voice(expression)
                                                                    return CardEffect._dispatch('voice', expression)
                                                                end

                                                                -- Functors
                                                                function CardEffect.perDreadnoughtInConflict(expression)
                                                                    return function (context)
                                                                        return CardEffect.evaluate(context, expression) * Combat.getNumberOfDreadnoughtsInConflict(context.color)
                                                                    end
                                                                end

                                                                function CardEffect.perSwordCard(expression, cardExcluded)
                                                                    return function (context)
                                                                        if context.fake then
                                                                            return 0
                                                                        end
                                                                        local allCards = Set.newFromList(Helper.concatTables(context.playedCards, context.revealedCards))
                                                                        local count = 0
                                                                        for _, card in ipairs(context.revealedCards) do
                                                                            if card.reveal and (not cardExcluded or card ~= context.card) then
                                                                                -- Special case here of a recursive call.
                                                                                local fakePlayedCards = (allCards - Set.newFromItems(card)):toList()
                                                                                local output = ImperiumCard.evaluateReveal2(context.color, fakePlayedCards, {card}, false)
                                                                                if output.strength and output.strength > 0 then
                                                                                    count = count + 1
                                                                                end
                                                                            end
                                                                        end
                                                                        return CardEffect.evaluate(context, expression) * count
                                                                    end
                                                                end

                                                                function CardEffect.perFremen(expression)
                                                                    return function (context)
                                                                        local count = 0
                                                                        for _, card in ipairs(Helper.concatTables(context.playedCards, context.revealedCards)) do
                                                                            if card.factions and Helper.isElementOf("fremen", card.factions) then
                                                                                count = count + 1
                                                                            end
                                                                        end
                                                                        return CardEffect.evaluate(context, expression) * count
                                                                    end
                                                                end

                                                                function CardEffect.perEmperor(expression)
                                                                    return function (context)
                                                                        local count = 0
                                                                        for _, card in ipairs(Helper.concatTables(context.revealedCards)) do
                                                                            if card.factions and Helper.isElementOf("emperor", card.factions) then
                                                                                count = count + 1
                                                                            end
                                                                        end
                                                                        return CardEffect.evaluate(context, expression) * count
                                                                    end
                                                                end

                                                                function CardEffect.perFulfilledContract(expression)
                                                                    return function (context)
                                                                        local count = PlayBoard.getCompletedContractCount(context.color)
                                                                        return CardEffect.evaluate(context, expression) * count
                                                                    end
                                                                end

                                                                -- Special functors

                                                                function CardEffect.choice(n, options)
                                                                    return function (context)
                                                                        PlayBoard.getLeader(context.color).choose(context.color, context.cardName)
                                                                        return true
                                                                    end
                                                                end

                                                                function CardEffect.optional(options)
                                                                    return function (context)
                                                                        if PlayBoard.getLeader(context.color).decide(context.color, context.cardName) then
                                                                            for _, option in ipairs(options) do
                                                                                if not option(context) then
                                                                                    return false
                                                                                end
                                                                            end
                                                                            return true
                                                                        else
                                                                            return false
                                                                        end
                                                                    end
                                                                end

                                                                -- Filter

                                                                function CardEffect._filter(expression, predicate)
                                                                    return function (context)
                                                                        return predicate(context) and CardEffect.evaluate(context, expression) or 0
                                                                    end
                                                                end

                                                                function CardEffect.seat(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        return PlayBoard.hasHighCouncilSeat(context.color)
                                                                    end)
                                                                end

                                                                function CardEffect.fremenBond(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        for _, card in ipairs(Helper.concatTables(context.playedCards, context.revealedCards)) do
                                                                            if card ~= context.card and card.factions and Helper.isElementOf("fremen", card.factions) then
                                                                                return true
                                                                            end
                                                                        end
                                                                        return false
                                                                    end)
                                                                end

                                                                -- bloodlines TEST reveal command
                                                                function CardEffect.revealCommand(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        Helper.onceTimeElapsed(1).doAfter(function ()
                                                                            for _, card in ipairs(context.revealedCards) do
                                                                                Helper.dump("Color:", context.color)
                                                                                Helper.dump("Persuasion:", PlayBoard.getResource(context.color, "persuasion"):get())
                                                                                if PlayBoard.getResource(context.color, "persuasion"):get() >= 6 then
                                                                                    Helper.dump("True")
                                                                                    return true
                                                                                end
                                                                            end
                                                                            Helper.dump("False")
                                                                            return false
                                                                        end)
                                                                    end)
                                                                end

                                                                -- bloodlines sardaukar commander in conflict
                                                                function CardEffect.sardaukarCommanderInConflict(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        return Combat.hasSardaukarCommander(context.color)
                                                                    end)
                                                                end

                                                                -- bloodlines imperial throneship reveal
                                                                function CardEffect.imperialThroneship(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        if Combat.getGarrisonCount(context.color) >= 4 then
                                                                            return true
                                                                        end
                                                                        return false
                                                                    end)
                                                                end

                                                                function CardEffect.agentInEmperorSpace(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        for _, space in ipairs(MainBoard.getEmperorSpaces()) do
                                                                            if MainBoard.hasAgentInSpace(space, context.color) then
                                                                                return true
                                                                            end
                                                                        end
                                                                        return false
                                                                    end)
                                                                end

                                                                function CardEffect._alliance(faction, expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        return InfluenceTrack.hasAlliance(context.color, faction)
                                                                    end)
                                                                end

                                                                function CardEffect.emperorAlliance(expression)
                                                                    return CardEffect._alliance("emperor", expression)
                                                                end

                                                                function CardEffect.spacingGuildAlliance(expression)
                                                                    return CardEffect._alliance("spacingGuild", expression)
                                                                end

                                                                function CardEffect.beneGesseritAlliance(expression)
                                                                    return CardEffect._alliance("beneGesserit", expression)
                                                                end

                                                                function CardEffect.fremenAlliance(expression)
                                                                    return CardEffect._alliance("fremen", expression)
                                                                end

                                                                function CardEffect._friendShip(faction, expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        return InfluenceTrack.hasFriendship(context.color, faction)
                                                                    end)
                                                                end

                                                                function CardEffect.fremenFriendship(expression)
                                                                    return CardEffect._friendShip("fremen", expression)
                                                                end

                                                                function CardEffect.anyAlliance(expression)
                                                                    return CardEffect.emperorAlliance(expression)
                                                                    or CardEffect.spacingGuildAlliance(expression)
                                                                    or CardEffect.beneGesseritAlliance(expression)
                                                                    or CardEffect.fremenAlliance(expression)
                                                                end

                                                                function CardEffect.oneHelix(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        return TleilaxuResearch.hasReachedOneHelix(context.color)
                                                                    end)
                                                                end

                                                                function CardEffect.twoHelices(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        return TleilaxuResearch.hasReachedTwoHelices(context.color)
                                                                    end)
                                                                end

                                                                function CardEffect.winner(expression)
                                                                    return function ()
                                                                        error("TODO")
                                                                    end
                                                                end

                                                                function CardEffect.twoSpies(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        return MainBoard.getDeployedSpyCount(context.color) >= 2
                                                                    end)
                                                                end

                                                                function CardEffect.spyMakerSpace(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        return MainBoard.getDeployedSpyCount(context.color, true) > 0
                                                                    end)
                                                                end

                                                                function CardEffect.swordmaster(expression)
                                                                    return CardEffect._filter(expression, function (context)
                                                                        return PlayBoard.hasSwordmaster(context.color)
                                                                    end)
                                                                end

                                                                function CardEffect.multiply(...)
                                                                    local expressions = {...}
                                                                    return function (context)
                                                                        local result = 1
                                                                        for _, expression in ipairs(expressions) do
                                                                            result = result * CardEffect.evaluate(context, expression)
                                                                        end
                                                                        return result
                                                                    end
                                                                end

                                                                return CardEffect

                                                            end)
                                                            __bundle_register("utils.Set", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                local Helper = require("utils.Helper")

                                                                local Set = Helper.createClass()

                                                                function Set.newFromItems(...)
                                                                    local data = {
                                                                    elements = {}}
                                                                    for _, element in ipairs({...}) do
                                                                        data.elements[element] = true
                                                                    end
                                                                    return Helper.createClassInstance(Set, data)
                                                                end

                                                                function Set.newFromList(elements)
                                                                    local data = {
                                                                    elements = {}}
                                                                    for _, element in ipairs(elements) do
                                                                        data.elements[element] = true
                                                                    end
                                                                    return Helper.createClassInstance(Set, data)
                                                                end

                                                                function Set.newFromSet(elements)
                                                                    local data = {
                                                                    elements = {}}
                                                                    if elements then
                                                                        for element, _ in pairs(elements) do
                                                                            data.elements[element] = true
                                                                        end
                                                                    end
                                                                    return Helper.createClassInstance(Set, data)
                                                                end

                                                                function Set.new(set)
                                                                    local data = {
                                                                    elements = {}}
                                                                    if set then
                                                                        for element, _ in pairs(set.elements) do
                                                                            data.elements[element] = true
                                                                        end
                                                                    end
                                                                    return Helper.createClassInstance(Set, data)
                                                                end

                                                                function Set:size()
                                                                    return #self:toList()
                                                                end

                                                                function Set:union(set)
                                                                    local newSet = Set.new(self)
                                                                    for element, _ in pairs(set.elements) do
                                                                        newSet:add(element)
                                                                    end
                                                                    return newSet
                                                                end

                                                                function Set:soustraction(set)
                                                                    assert(set)
                                                                    local newSet = Set.new()
                                                                    for element, _ in pairs(self.elements) do
                                                                        if not set.elements[element] then
                                                                            newSet:add(element)
                                                                        end
                                                                    end
                                                                    return newSet
                                                                end

                                                                function Set:intersection(set)
                                                                    assert(set)
                                                                    local newSet = Set.new()
                                                                    for element, _ in pairs(self.elements) do
                                                                        if set.elements[element] then
                                                                            newSet:add(element)
                                                                        end
                                                                    end
                                                                    return newSet
                                                                end

                                                                function Set:isSupersetOf(set)
                                                                    assert(set)
                                                                    for element, _ in pairs(set.elements) do
                                                                        if not self.elements[element] then
                                                                            return false
                                                                        end
                                                                    end
                                                                    return true
                                                                end

                                                                function Set:isSubsetOf(set)
                                                                    assert(set)
                                                                    for element, _ in pairs(self.elements) do
                                                                        if not set.elements[element] then
                                                                            return false
                                                                        end
                                                                    end
                                                                    return true
                                                                end

                                                                function Set:contains(element)
                                                                    assert(element)
                                                                    return self.elements[element]
                                                                end

                                                                function Set:add(element)
                                                                    assert(element)
                                                                    if not self.elements[element] then
                                                                        self.elements[element] = true
                                                                        return true
                                                                    else
                                                                        return false
                                                                    end
                                                                end

                                                                function Set:remove(element)
                                                                    assert(element)
                                                                    if self.elements[element] then
                                                                        self.elements[element] = nil
                                                                        return true
                                                                    else
                                                                        return false
                                                                    end
                                                                end

                                                                function Set:map(f)
                                                                    local newSet = Set.new()
                                                                    for element, _ in pairs(self.elements) do
                                                                        local notAnInjection = newSet:add(f(element))
                                                                        assert(notAnInjection)
                                                                    end
                                                                    return newSet
                                                                end

                                                                function Set:filter(p)
                                                                    local newSet = Set.new()
                                                                    for element, _ in pairs(self.elements) do
                                                                        if p(element) then
                                                                            local success = newSet:add(element)
                                                                            assert(success)
                                                                        end
                                                                    end
                                                                    return newSet
                                                                end

                                                                function Set:toList()
                                                                    local list = {}
                                                                    for element, _ in pairs(self.elements) do
                                                                        table.insert(list, element)
                                                                    end
                                                                    return list
                                                                end

                                                                function Set:toString()
                                                                    local str = "{"
                                                                    local first = true
                                                                    for element, _ in pairs(self.elements) do
                                                                        if first then
                                                                            first = false
                                                                        else
                                                                            str = str .. ", "
                                                                        end
                                                                        str = str .. tostring(element)
                                                                    end
                                                                    str = str .. "}"
                                                                    return str
                                                                end

                                                                Set.__len = Set.size
                                                                Set.__add = Set.union
                                                                Set.__sub = Set.soustraction
                                                                Set.__pow = Set.intersection
                                                                Set.__ge = Set.isSupersetOf
                                                                Set.__le = Set.isSubsetOf
                                                                Set.__gt = function (a, b) return Set.isSupersetOf(a, b) and not Set.isSubsetOf(b, a) end
                                                                Set.__lt = function (a, b) return Set.isSubsetOf(a, b) and not Set.isSupersetOf(b, a) end
                                                                Set.__tostring = Set.toString

                                                                return Set

                                                            end)
                                                            __bundle_register("TechMarket", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                local Module = require("utils.Module")
                                                                local Helper = require("utils.Helper")
                                                                local Park = require("utils.Park")
                                                                local AcquireCard = require("utils.AcquireCard")
                                                                local I18N = require("utils.I18N")
                                                                local Dialog = require("utils.Dialog")

                                                                local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                local Deck = Module.lazyRequire("Deck")
                                                                local MainBoard = Module.lazyRequire("MainBoard")
                                                                local Types = Module.lazyRequire("Types")
                                                                local Commander = Module.lazyRequire("Commander")
                                                                local TechCard = Module.lazyRequire("TechCard")
                                                                local Action = Module.lazyRequire("Action")

                                                                local TechMarket = {
                                                                    -- bloodlines disabled
                                                                    -- negotiationParks = {},
                                                                    acquireTechOptions = {},
                                                                }

                                                                ---
                                                                function TechMarket.onLoad(state)
                                                                    Helper.append(TechMarket, Helper.resolveGUIDs(false, {
                                                                        -- bloodlines disabled ix board
                                                                        -- board = "d75455",

                                                                        -- bloodlines tech board
                                                                        board = "c6985a",

                                                                        -- bloodlines disabled
                                                                        -- negotiationZone = "2253fa",
                                                                        techSlots = {
                                                                            "7e131d",
                                                                            "5a22f7",
                                                                            "9c81c1"
                                                                        },
                                                                    }))

                                                                    Helper.noPhysicsNorPlay(TechMarket.board)

                                                                    -- if state.settings and state.settings.riseOfIx then
                                                                    -- bloodlines disabled ix
                                                                    if state.settings then
                                                                        TechMarket.hagalSoloModeEnabled = state.TechMarket.hagalSoloModeEnabled
                                                                        TechMarket._transientSetUp(state.settings)
                                                                    end
                                                                end

                                                                ---
                                                                function TechMarket.onSave(state)
                                                                    state.TechMarket = {
                                                                        hagalSoloModeEnabled = TechMarket.hagalSoloModeEnabled
                                                                    }
                                                                end

                                                                ---
                                                                function TechMarket.setUp(settings)
                                                                    -- bloodlines disabled
                                                                    -- if settings.riseOfIx then
                                                                    TechMarket.hagalSoloModeEnabled = settings.numberOfPlayers == 1
                                                                    Deck.generateTechDeck(TechMarket.techSlots).doAfter(function (decks)
                                                                        for _, deck in ipairs(decks) do
                                                                            -- bloodlines because of kota passive
                                                                            deck.interactable = true
                                                                        end

                                                                        if TechMarket.hagalSoloModeEnabled then
                                                                            Helper.onceTimeElapsed(1).doAfter(TechMarket.pruneStacksForSoloMode)
                                                                        end

                                                                        TechMarket._transientSetUp(settings)
                                                                    end)
                                                                    -- bloodlines disabled
                                                                    -- else
                                                                    --     TechMarket._tearDown()
                                                                    -- end
                                                                end

                                                                ---
                                                                function TechMarket._transientSetUp(settings)
                                                                    -- bloodlines disabled
                                                                    -- for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                    --     if not Commander.isCommander(color) then
                                                                    --         TechMarket.negotiationParks[color] = TechMarket._createNegotiationPark(color)
                                                                    --     end
                                                                    -- end
                                                                    -- TechMarket._createNegotiationButton()

                                                                    TechMarket.acquireCards = {}
                                                                    for i, zone in ipairs(TechMarket.techSlots) do
                                                                        local acquireCard = AcquireCard.new(zone, "Tech", PlayBoard.withLeader(function (_, color)
                                                                            local leader = PlayBoard.getLeader(color)
                                                                            leader.acquireTech(color, i)
                                                                        end))
                                                                        -- bloodlines 0.2 too low for bloodlines board, changed to 0.22
                                                                        acquireCard.groundHeight = acquireCard.groundHeight + 0.22
                                                                        table.insert(TechMarket.acquireCards, acquireCard)
                                                                    end

                                                                    Helper.registerEventListener("agentSent", function (color, spaceName)
                                                                        TechMarket.acquireTechOptions = {}
                                                                    end)
                                                                end

                                                                ---
                                                                -- bloodlines disabled
                                                                -- function TechMarket._tearDown()
                                                                --     TechMarket.board.destruct()
                                                                --     TechMarket.board = nil
                                                                --     TechMarket.negotiationZone.destruct()
                                                                --     for _, techSlot in ipairs(TechMarket.techSlots) do
                                                                --         techSlot.destruct()
                                                                --     end
                                                                -- end

                                                                ---
                                                                function TechMarket.getBoard()
                                                                    return TechMarket.board
                                                                end

                                                                ---
                                                                function TechMarket.pruneStacksForSoloMode()
                                                                    local highestHeightIndex
                                                                    local highestHeight
                                                                    for stackIndex = 1, 3 do
                                                                        local techTileStack = TechMarket._getTechTileStack(stackIndex)
                                                                        if techTileStack.topCard then
                                                                            local height = Helper.getCardCount(techTileStack.otherCards)
                                                                            if not highestHeightIndex or highestHeight < height then
                                                                                highestHeightIndex = stackIndex
                                                                                highestHeight = height
                                                                            end
                                                                            if TechCard.isHagal(techTileStack.topCard) then
                                                                                TechMarket.frozen = false
                                                                                return
                                                                            end
                                                                        end
                                                                    end
                                                                    if highestHeightIndex then
                                                                        TechMarket._doAcquireTech(highestHeightIndex).doAfter(function (card)
                                                                            Helper.onceTimeElapsed(1).doAfter(TechMarket.pruneStacksForSoloMode)
                                                                        end)
                                                                    else
                                                                        TechMarket.frozen = false
                                                                        return
                                                                    end
                                                                end

                                                                ---
                                                                -- bloodlines disabled
                                                                -- function TechMarket._createNegotiationButton()
                                                                --     Helper.createAnchoredAreaButton(TechMarket.negotiationZone, 1.6, 0.1, I18N("negotiatorEdit"), PlayBoard.withLeader(function (_, color, altClick)
                                                                --         local leader = PlayBoard.getLeader(color)
                                                                --         if altClick then
                                                                --             leader.troops(color, "negotiation", "supply", 1)
                                                                --         else
                                                                --             leader.troops(color, "supply", "negotiation", 1)
                                                                --         end
                                                                --     end))
                                                                -- end

                                                                ---
                                                                function TechMarket.acquireTech(stackIndex, color)
                                                                    if not TechMarket.frozen then
                                                                        TechMarket.frozen = true
                                                                        TechMarket._doAcquireTech(stackIndex, color).doAfter(function (card)
                                                                            if card and TechMarket.hagalSoloModeEnabled then
                                                                                TechMarket.pruneStacksForSoloMode()
                                                                            else
                                                                                TechMarket.frozen = false
                                                                            end
                                                                            if not card then
                                                                                Dialog.broadcastToColor(I18N('notAffordableOption'), color, "Purple")
                                                                            end
                                                                        end)
                                                                    else
                                                                        Helper.dump("Still frozen...")
                                                                    end
                                                                end

                                                                ---
                                                                function TechMarket._doAcquireTech(stackIndex, color)
                                                                    local continuation = Helper.createContinuation("TechMarket._doAcquireTech")
                                                                    local acquireCard = TechMarket.acquireCards[stackIndex]

                                                                    local techTileStack = TechMarket._getTechTileStack(stackIndex)
                                                                    if techTileStack.topCard then

                                                                        local innerContinuation = Helper.createContinuation("TechMarket._doAcquireTech#inner")
                                                                        innerContinuation.doAfter(function (success)
                                                                            if success then
                                                                                if color then
                                                                                    PlayBoard.grantTechTile(color, techTileStack.topCard)
                                                                                    TechCard.applyBuyEffect(color, techTileStack.topCard)
                                                                                end
                                                                                Helper.onceTimeElapsed(0.5).doAfter(function ()
                                                                                    if techTileStack.otherCards then
                                                                                        local above = acquireCard.zone.getPosition() + Vector(0, 1, 0)
                                                                                        Helper.moveCardFromZone(acquireCard.zone, above, Vector(0, 180, 0), true).doAfter(function (card)
                                                                                            assert(card)
                                                                                            Helper.onceMotionless(card).doAfter(function ()
                                                                                                continuation.run(techTileStack.topCard)
                                                                                            end)
                                                                                        end)
                                                                                    else
                                                                                        continuation.run(techTileStack.topCard)
                                                                                    end
                                                                                end)
                                                                            else
                                                                                continuation.run(nil)
                                                                            end
                                                                        end)

                                                                        if color then
                                                                            TechMarket._buyTech(stackIndex, color).doAfter(innerContinuation.run)
                                                                        else
                                                                            printToAll(I18N("pruneTechCard", {card = I18N(Helper.getID(techTileStack.topCard))}), "Pink")
                                                                            MainBoard.trash(techTileStack.topCard)
                                                                            innerContinuation.run(true)
                                                                        end
                                                                    else
                                                                        continuation.run(nil)
                                                                    end

                                                                    return continuation
                                                                end

                                                                ---
                                                                function TechMarket._buyTech(stackIndex, color)
                                                                    local continuation = Helper.createContinuation("TechMarket._buyTech")
                                                                    local techTileStack = TechMarket._getTechTileStack(stackIndex)
                                                                    if techTileStack.topCard then
                                                                        local options = Helper.getKeys(TechMarket.acquireTechOptions)
                                                                        if #options > 0 then
                                                                            if #options > 1 then
                                                                                Dialog.showOptionsAndCancelDialog(color, I18N("buyTechSelection"), Helper.mapValues(options, I18N), continuation, function (index)
                                                                                    if index > 0 then
                                                                                        continuation.run(index and TechMarket._doBuyTech(techTileStack, options[index], color))
                                                                                    else
                                                                                        continuation.run(false)
                                                                                    end
                                                                                end)
                                                                            else
                                                                                continuation.run(TechMarket._doBuyTech(techTileStack, options[1], color))
                                                                            end
                                                                        elseif not PlayBoard.isRival(color) then
                                                                            Dialog.showYesOrNoDialog(color, I18N("manuallyBuyTech"), continuation, function (confirmed)
                                                                                continuation.run(confirmed)
                                                                            end)
                                                                        else
                                                                            continuation.run(false)
                                                                        end
                                                                    else
                                                                        continuation.run(false)
                                                                    end
                                                                    return continuation
                                                                end

                                                                ---
                                                                function TechMarket._doBuyTech(techTileStack, option, color)
                                                                    local techCost = TechCard.getCost(techTileStack.topCard)

                                                                    local optionDetails = TechMarket.acquireTechOptions[option]
                                                                    local discountAmount = optionDetails.amount
                                                                    -- bloodlines disabled
                                                                    -- local negotiation = TechMarket.getNegotiationPark(color)
                                                                    -- local recalledNegociatorCount
                                                                    local adjustedTechCost

                                                                    if optionDetails.resourceType == "spice" then
                                                                        -- bloodlines disabled
                                                                        --     local negotiatorCount = #Park.getObjects(negotiation)

                                                                        --     adjustedTechCost = math.max(0, techCost - discountAmount - negotiatorCount)
                                                                        --     recalledNegociatorCount = math.max(0, techCost - adjustedTechCost - discountAmount)
                                                                        -- else
                                                                        adjustedTechCost = math.max(0, techCost - discountAmount)
                                                                        -- bloodlines disabled
                                                                        -- recalledNegociatorCount = 0
                                                                    end

                                                                    local leader = PlayBoard.getLeader(color)
                                                                    if leader.resources(color, optionDetails.resourceType, -adjustedTechCost) then
                                                                        -- bloodlines disabled
                                                                        -- local supply = PlayBoard.getSupplyPark(color)
                                                                        -- Park.transfert(recalledNegociatorCount, negotiation, supply)

                                                                        TechMarket.acquireTechOptions[option] = nil

                                                                        Action.log(I18N("buyTech", {
                                                                            name = I18N(Helper.getID(techTileStack.topCard)),
                                                                            amount = adjustedTechCost,
                                                                        resource = I18N.agree(adjustedTechCost, optionDetails.resourceType)}),
                                                                    color)

                                                                    return true
                                                                else
                                                                    return false
                                                                end
                                                            end

                                                            ---
                                                            function TechMarket.getTopCardDetails(stackIndex)
                                                                local techTileStack = TechMarket._getTechTileStack(stackIndex)
                                                                if techTileStack.topCard then
                                                                    return TechCard.getDetails(techTileStack.topCard)
                                                                end
                                                                return nil
                                                            end

                                                            function TechMarket._getTechTileStack(stackIndex)
                                                                Types.assertIsInteger(stackIndex)
                                                                Types.assertIsInRange(1, 3, stackIndex)

                                                                local techTileStack = {}

                                                                local zone = TechMarket.techSlots[stackIndex]
                                                                for _, object in ipairs(zone.getObjects()) do
                                                                    if object.type == "Card" and not object.is_face_down then
                                                                        techTileStack.topCard = object
                                                                    elseif object.type == "Deck" or (object.type == "Card" and object.is_face_down) then
                                                                        techTileStack.otherCards = object
                                                                    end
                                                                end

                                                                return techTileStack
                                                            end

                                                            ---@param color PlayerColor
                                                            ---@param source any
                                                            ---@param resourceType ResourceName
                                                            ---@param amount integer
                                                            function TechMarket.registerAcquireTechOption(color, source, resourceType, amount)
                                                                Types.assertIsPlayerColor(color)
                                                                assert(color)
                                                                Types.assertIsResourceName(resourceType)
                                                                Types.assertIsInteger(amount)

                                                                TechMarket.acquireTechOptions[source] = {
                                                                    resourceType = resourceType,
                                                                    amount = amount
                                                                }
                                                            end

                                                            function TechMarket.getRivalSpiceDiscount()
                                                                local options = Helper.getValues(TechMarket.acquireTechOptions)
                                                                assert(#options == 1)
                                                                local option = options[1]
                                                                assert(option.resourceType == "spice")
                                                                return option.amount
                                                            end

                                                            ---
                                                            -- bloodlines disabled
                                                            -- function TechMarket._createNegotiationPark(color)
                                                            --     local offsets = {
                                                            --         Red = Vector(-0.45, 0, 0.45),
                                                            --         Blue = Vector(-0.45, 0, -0.45),
                                                            --         Green = Vector(0.45, 0, 0.45),
                                                            --         Yellow = Vector(0.45, 0, -0.45)
                                                            --     }

                                                            --     local origin = TechMarket.negotiationZone.getPosition() + offsets[color]
                                                            --     origin:setAt('y', 1.86) -- ground level
                                                            --     local slots = {}
                                                            --     for k = 1, 2 do
                                                            --         for j = 1, 2 do
                                                            --             for i = 1, 2 do
                                                            --                 local x = (i - 1.5) * 0.4
                                                            --                 local y = (k - 1) * 0.4
                                                            --                 local z = (1.5 - j) * 0.4
                                                            --                 local slot = Vector(x, y, z) + origin
                                                            --                 table.insert(slots, slot)
                                                            --             end
                                                            --         end
                                                            --     end

                                                            --     local zone = Park.createTransientBoundingZone(0, Vector(0.25, 0.25, 0.25), slots)

                                                            --     return Park.createPark(
                                                            --         color .. "Negotiation",
                                                            --         slots,
                                                            --         Vector(0, 0, 0),
                                                            --         { zone },
                                                            --         { "Troop", color },
                                                            --         nil,
                                                            --         false,
                                                            --         true)
                                                            -- end

                                                            ---
                                                            -- bloodlines disabled
                                                            -- function TechMarket.getNegotiationPark(color)
                                                            --     return TechMarket.negotiationParks[color]
                                                            -- end

                                                            ---
                                                            -- bloodlines disabled
                                                            -- function TechMarket.addNegotiator(color)
                                                            --     local supply = PlayBoard.getSupplyPark()
                                                            --     local negotiation = TechMarket.negotiationParks[color]
                                                            --     return Park.transfert(1, supply, negotiation) > 0
                                                            -- end

                                                            ---
                                                            -- bloodlines disabled
                                                            -- function TechMarket.removeNegotiator(color)
                                                            --     local supply = PlayBoard.getSupplyPark()
                                                            --     local negotiation = TechMarket.negotiationParks[color]
                                                            --     return Park.transfert(1, negotiation, supply) > 0
                                                            -- end

                                                            --- In TechMarket for convenience, but it could also be in MainBoard.
                                                            function TechMarket.isInside(object)
                                                                if TechMarket.board then
                                                                    local position = object.getPosition()
                                                                    local center = TechMarket.board.getPosition()
                                                                    local offset = position - center
                                                                    return math.abs(offset.x) < 3.5 and math.abs(offset.z) < 4
                                                                else
                                                                    return false
                                                                end
                                                            end

                                                            return TechMarket

                                                        end)
                                                        __bundle_register("Rival", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                            local Module = require("utils.Module")
                                                            local Helper = require("utils.Helper")
                                                            local I18N = require("utils.I18N")

                                                            local Action = Module.lazyRequire("Action")
                                                            local Hagal = Module.lazyRequire("Hagal")
                                                            local MainBoard = Module.lazyRequire("MainBoard")
                                                            local PlayBoard = Module.lazyRequire("PlayBoard")
                                                            local InfluenceTrack = Module.lazyRequire("InfluenceTrack")
                                                            local ShippingTrack = Module.lazyRequire("ShippingTrack")
                                                            local TechMarket = Module.lazyRequire("TechMarket")
                                                            local Intrigue = Module.lazyRequire("Intrigue")
                                                            local HagalCard = Module.lazyRequire("HagalCard")

                                                            local Rival = Helper.createClass(Action)

                                                            ---
                                                            function Rival.newRival(name)
                                                                local RivalClass = Rival[name]
                                                                assert(RivalClass, "Unknown rival leader: " .. tostring(name))
                                                                RivalClass.name = name
                                                                return Helper.createClassInstance(RivalClass)
                                                            end

                                                            ---
                                                            function Rival.triggerHagalReaction(color)
                                                                local continuation = Helper.createContinuation("Rival.triggerHagalReaction")

                                                                local coroutineHolder = {}
                                                                coroutineHolder.coroutine = Helper.registerGlobalCallback(function ()
                                                                    assert(coroutineHolder.coroutine)
                                                                    Helper.unregisterGlobalCallback(coroutineHolder.coroutine)

                                                                    Helper.sleep(1)

                                                                    local rival = PlayBoard.getLeader(color)

                                                                    if rival.recallableSpies and #rival.recallableSpies == 2 then
                                                                        for _, otherObservationPostName in ipairs(rival.recallableSpies) do
                                                                            MainBoard.recallSpy(color, otherObservationPostName)
                                                                        end
                                                                        rival.recallableSpies = {}
                                                                        -- Doesn't work well as a scheme.
                                                                        --Action.setContext("schemeTriggered", {})
                                                                        Action.log(I18N("triggeringScheme", {leader = PlayBoard.getLeaderName(color)}), color)
                                                                        rival.scheme(color)
                                                                        Helper.sleep(2)
                                                                        --Action.unsetContext("schemeTriggered")
                                                                    end

                                                                    local hasSwordmaster = PlayBoard.hasSwordmaster(color)

                                                                    local allResources = {
                                                                        intrigues = PlayBoard.getIntrigues(color),
                                                                        solari = PlayBoard.getResource(color, "solari"),
                                                                        spice = PlayBoard.getResource(color, "spice"),
                                                                        water = PlayBoard.getResource(color, "water"),
                                                                    }

                                                                    local reduceGenericResource = function (name, amount)
                                                                        local realAmount
                                                                        if name == "intrigues" then
                                                                            realAmount = math.min(amount, #allResources.intrigues)
                                                                            for i = 1, realAmount do
                                                                                -- Not smooth to avoid being recaptured by the hand zone.
                                                                                Intrigue.discard(allResources.intrigues[i])
                                                                            end
                                                                        else
                                                                            realAmount = math.min(amount, allResources[name]:get())
                                                                            Action.resources(color, name, -realAmount)
                                                                        end
                                                                        return realAmount
                                                                    end

                                                                    local capital =
                                                                    #allResources.intrigues +
                                                                    allResources.solari:get() +
                                                                    allResources.spice:get() +
                                                                    allResources.water:get()

                                                                    if not hasSwordmaster and capital >= rival.swordmasterCost then
                                                                        local remainder = rival.swordmasterCost
                                                                        for _, name in ipairs({"solari", "spice", "intrigues", "water"}) do
                                                                            if remainder == 0 then
                                                                                break
                                                                            end
                                                                            remainder = remainder - reduceGenericResource(name, remainder)
                                                                        end
                                                                        rival.recruitSwordmaster(color)
                                                                        hasSwordmaster = true
                                                                        Helper.sleep(1)
                                                                    end

                                                                    if hasSwordmaster then
                                                                        Rival._buyVictoryPoints(color)
                                                                    end

                                                                    continuation.run()

                                                                    return 1
                                                                end)
                                                                startLuaCoroutine(Global, coroutineHolder.coroutine)

                                                                return continuation
                                                            end

                                                            ---
                                                            function Rival._buyVictoryPoints(color)
                                                                -- Do not use Rival.resources inside this function!

                                                                local rival = PlayBoard.getLeader(color)

                                                                if Helper.isElementOf(rival.name, {"glossuRabban", "amberMetulli"}) then
                                                                    return
                                                                end

                                                                while true do
                                                                    local intrigues = PlayBoard.getIntrigues(color)
                                                                    if #intrigues >= 3 then
                                                                        for i = 1, 3 do
                                                                            -- Not smooth to avoid being recaptured by the hand zone.
                                                                            Intrigue.discard(intrigues[i])
                                                                        end
                                                                        Rival.gainVictoryPoint(color, "intrigue", 1)
                                                                        goto continue
                                                                    end

                                                                    if Hagal.riseOfIx then
                                                                        local tech = PlayBoard.getTech(color, "spySatellites")
                                                                        if tech and Action.resources(color, "spice", -3) then
                                                                            MainBoard.trash(tech)
                                                                            Rival.gainVictoryPoint(color, "spySatellites", 1)
                                                                            goto continue
                                                                        end
                                                                    else
                                                                        if Action.resources(color, "spice", -7) then
                                                                            Rival.gainVictoryPoint(color, "spice", 1)
                                                                            goto continue
                                                                        end
                                                                    end

                                                                    if Action.resources(color, "water", -3) then
                                                                        Rival.gainVictoryPoint(color, "water", 1)
                                                                        goto continue
                                                                    end

                                                                    if Action.resources(color, "solari", -7) then
                                                                        Rival.gainVictoryPoint(color, "solari", 1)
                                                                        goto continue
                                                                    end

                                                                    break
                                                                    ::continue::
                                                                    Helper.sleep(1.5)
                                                                end
                                                            end

                                                            ---
                                                            function Rival.prepare(color, settings)
                                                                if Hagal.getRivalCount() == 2 then
                                                                    Action.resources(color, "water", 1)
                                                                    if settings.difficulty ~= "novice" then
                                                                        Action.troops(color, "supply", "garrison", 3)
                                                                    end
                                                                else
                                                                    Action.resources(color, "water", 1)
                                                                    Action.troops(color, "supply", "garrison", 3)
                                                                end
                                                            end

                                                            ---
                                                            function Rival:_removeBestFaction(color, factions)
                                                                local function indexOf(faction)
                                                                    for i, f in pairs(self.factionPriorities) do
                                                                        if f == faction then
                                                                            return i
                                                                        end
                                                                    end
                                                                    assert(false)
                                                                end
                                                                table.sort(factions, function (f1, f2)
                                                                    local i1 = InfluenceTrack.getInfluence(f1, color) * 10 + indexOf(f1)
                                                                    local i2 = InfluenceTrack.getInfluence(f2, color) * 10 + indexOf(f2)
                                                                    return i1 < i2
                                                                end)
                                                                local bestFaction = factions[1]
                                                                table.remove(factions, 1)
                                                                return bestFaction
                                                            end

                                                            ---
                                                            function Rival.influence(color, indexOrfactionOrFactions, amount)
                                                                local finalFaction
                                                                local rival = PlayBoard.getLeader(color)
                                                                if not indexOrfactionOrFactions or type(indexOrfactionOrFactions) == "table" then
                                                                    local factions = indexOrfactionOrFactions
                                                                    if not factions then
                                                                        factions = {"emperor", "spacingGuild", "beneGesserit", "fremen"}
                                                                    end
                                                                    finalFaction = rival:_removeBestFaction(color, factions)
                                                                elseif type(indexOrfactionOrFactions) == "number" then
                                                                    local index = indexOrfactionOrFactions
                                                                    finalFaction = rival.factionPriorities[index]
                                                                else
                                                                    finalFaction = indexOrfactionOrFactions
                                                                end
                                                                return Action.influence(color, finalFaction, amount)
                                                            end

                                                            ---
                                                            function Rival.shipments(color, amount)
                                                                Helper.repeatChainedAction(amount, function ()
                                                                    local level = ShippingTrack.getFreighterLevel(color)
                                                                    if level < 2 then
                                                                        Rival.advanceFreighter(color, 1)
                                                                    else
                                                                        Rival.recallFreighter(color)
                                                                        Rival.influence(color, nil, 1)
                                                                        if PlayBoard.hasTech(color, "troopTransports") then
                                                                            Action.troops(color, "supply", "combat", 3)
                                                                        else
                                                                            Action.troops(color, "supply", "garrison", 2)
                                                                        end
                                                                        Rival.resources(color, "solari", 5)
                                                                        for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                            if otherColor ~= color then
                                                                                local otherLeader = PlayBoard.getLeader(otherColor)
                                                                                otherLeader.resources(otherColor, "solari", 1)
                                                                            end
                                                                        end
                                                                    end
                                                                    -- FIXME
                                                                    return Helper.onceTimeElapsed(0.5)
                                                                end)
                                                                return true
                                                            end

                                                            ---
                                                            function Rival.acquireTech(color, stackIndex, discount)

                                                                local finalStackIndex = stackIndex
                                                                if not finalStackIndex then
                                                                    local spiceBudget = PlayBoard.getResource(color, "spice"):get()

                                                                    local bestTechIndex
                                                                    local bestTech
                                                                    for otherStackIndex = 1, 3 do
                                                                        local tech = TechMarket.getTopCardDetails(otherStackIndex)
                                                                        if tech.hagal and tech.cost <= spiceBudget + discount and (not bestTech or bestTech.cost < tech.cost) then
                                                                            bestTechIndex = otherStackIndex
                                                                            bestTech = tech
                                                                        end
                                                                    end

                                                                    if bestTech then
                                                                        Rival.resources(color, "spice", -bestTech.cost)
                                                                        finalStackIndex = bestTechIndex
                                                                    else
                                                                        return false
                                                                    end
                                                                end

                                                                local tech = TechMarket.getTopCardDetails(finalStackIndex)
                                                                if Action.acquireTech(color, finalStackIndex, discount) then
                                                                    if tech.name == "trainingDrones" then
                                                                        if PlayBoard.useTech(color, "trainingDrones") then
                                                                            Action.troops(color, "supply", "garrison", 1)
                                                                        end
                                                                    end
                                                                    return true
                                                                else
                                                                    return false
                                                                end
                                                            end

                                                            ---
                                                            function Rival.pickContract(color, stackIndex)
                                                                local rival = PlayBoard.getLeader(color)
                                                                rival.resources(color, "solari", 2)
                                                                return true
                                                            end

                                                            ---
                                                            function Rival.choose(color, topic)
                                                                if Helper.isElementOf(topic, {"shuttleFleet", "machinations", "propaganda"}) then
                                                                    local factions = {"emperor", "spacingGuild", "beneGesserit", "fremen"}
                                                                    Helper.repeatChainedAction(2, function ()
                                                                        return Rival.influence(color, factions, 1)
                                                                    end)
                                                                end
                                                            end

                                                            ---
                                                            function Action.decide(color, topic)
                                                                return true
                                                            end

                                                            ---
                                                            function Rival.resources(color, nature, amount)
                                                                local rival = PlayBoard.getLeader(color)
                                                                local hasSwordmaster = PlayBoard.hasSwordmaster(color)

                                                                if amount > 0 and hasSwordmaster and Helper.isElementOf(rival, {Rival.glossuRabban, Rival.amberMetulli}) then
                                                                    return false
                                                                else
                                                                    return Action.resources(color, nature, amount)
                                                                end
                                                            end

                                                            ---
                                                            function Rival.sendSpy(color, observationPostName)
                                                                local rival = PlayBoard.getLeader(color)
                                                                local finalObservationPostName = observationPostName
                                                                if not finalObservationPostName then
                                                                    for _, faction in ipairs(rival.factionPriorities) do
                                                                        -- Observation posts in faction spaces have the same name as the faction.
                                                                        if not MainBoard.observationPostIsOccupied(faction) then
                                                                            finalObservationPostName = faction
                                                                            break
                                                                        end
                                                                    end
                                                                end
                                                                if finalObservationPostName then
                                                                    local recallableSpies = MainBoard.findRecallableSpies(color)
                                                                    if Action.sendSpy(color, finalObservationPostName) then
                                                                        rival.recallableSpies = recallableSpies
                                                                        return true
                                                                    end
                                                                else
                                                                    Helper.dump("No free observation post!")
                                                                end
                                                                return false
                                                            end

                                                            Rival.vladimirHarkonnen = Helper.createClass(Rival, {

                                                                swordmasterCost = 6,

                                                                factionPriorities = {
                                                                    "spacingGuild",
                                                                    "emperor",
                                                                    "beneGesserit",
                                                                    "fremen",
                                                                },

                                                                signetRing = function (color)
                                                                    Rival.drawIntrigues(color, 1)
                                                                end,

                                                                scheme = function (color)
                                                                    Rival.resources(color, "solari", 2)
                                                                    HagalCard.acquireTroops(color, 2)
                                                                end,
                                                            })

                                                            Rival.glossuRabban = Helper.createClass(Rival, {

                                                                swordmasterCost = 7,

                                                                factionPriorities = {
                                                                    "emperor",
                                                                    "spacingGuild",
                                                                    "beneGesserit",
                                                                    "fremen",
                                                                },

                                                                signetRing = function (color)
                                                                    HagalCard.acquireTroops(color, InfluenceTrack.hasAnyAlliance(color) and 2 or 1)
                                                                end,

                                                                scheme = function (color)
                                                                    local factions = {}
                                                                    for _, faction in ipairs({"emperor", "spacingGuild", "beneGesserit", "fremen"}) do
                                                                        local cost = InfluenceTrack.getAllianceCost(color, faction)
                                                                        if cost == 1 or cost == 2 then
                                                                            table.insert(factions, faction)
                                                                        end
                                                                    end
                                                                    Rival.influence(color, #factions > 0 and factions or nil, 2)
                                                                end,

                                                                gainVictoryPoint = function (color, name, count)
                                                                    if Helper.endsWith(name, "Alliance") then
                                                                        assert(count == 1)
                                                                        return Action.gainVictoryPoint(color, name, count)
                                                                    else
                                                                        return false
                                                                    end
                                                                end,
                                                            })

                                                            Rival.stabanTuek = Helper.createClass(Rival, {

                                                                swordmasterCost = 9,

                                                                factionPriorities = {
                                                                    "spacingGuild",
                                                                    "fremen",
                                                                    "beneGesserit",
                                                                    "emperor",
                                                                },

                                                                signetRing = function (color)
                                                                    Rival.resources(color, "spice", 1)
                                                                end,

                                                                scheme = function (color)
                                                                    HagalCard.acquireTroops(color, 2)
                                                                end,
                                                            })

                                                            Rival.amberMetulli = Helper.createClass(Rival, {

                                                                swordmasterCost = 9,

                                                                factionPriorities = {
                                                                    "fremen",
                                                                    "emperor",
                                                                    "spacingGuild",
                                                                    "beneGesserit",
                                                                },

                                                                signetRing = function (color)
                                                                    HagalCard.acquireTroops(color, 1)
                                                                end,

                                                                scheme = function (color)
                                                                    HagalCard.acquireTroops(color, 3)
                                                                end,

                                                                gainVictoryPoint = function (color, name, count)
                                                                    if Helper.endsWith(name, "Alliance") then
                                                                        assert(count == 1)
                                                                        return Action.gainVictoryPoint(color, name, count)
                                                                    else
                                                                        return false
                                                                    end
                                                                end,
                                                            })

                                                            Rival.gurneyHalleck = Helper.createClass(Rival, {

                                                                swordmasterCost = 8,

                                                                factionPriorities = {
                                                                    "fremen",
                                                                    "spacingGuild",
                                                                    "emperor",
                                                                    "beneGesserit",
                                                                },

                                                                signetRing = function (color)
                                                                    HagalCard.acquireTroops(color, 1)
                                                                end,

                                                                scheme = function (color)
                                                                    local rival = PlayBoard.getLeader(color)
                                                                    local bestFaction = nil
                                                                    local bestRank = nil
                                                                    for _, faction in ipairs(rival.factionPriorities) do
                                                                        local rank = InfluenceTrack.getInfluence(faction, color)
                                                                        if not bestRank or bestRank < rank then
                                                                            bestFaction = faction
                                                                            bestRank = rank
                                                                        end
                                                                    end
                                                                    Rival.influence(color, bestFaction, 1)
                                                                end,
                                                            })

                                                            Rival.margotFenring = Helper.createClass(Rival, {

                                                                swordmasterCost = 8,

                                                                factionPriorities = {
                                                                    "beneGesserit",
                                                                    "emperor",
                                                                    "fremen",
                                                                    "spacingGuild",
                                                                },

                                                                signetRing = function (color)
                                                                    Rival.resources(color, "solari", 1)
                                                                end,

                                                                scheme = function (color)
                                                                    Rival.influence(color, "beneGesserit", 1)
                                                                end,
                                                            })

                                                            Rival.irulanCorrino = Helper.createClass(Rival, {

                                                                swordmasterCost = 7,

                                                                factionPriorities = {
                                                                    "emperor",
                                                                    "beneGesserit",
                                                                    "fremen",
                                                                    "spacingGuild",
                                                                },

                                                                signetRing = function (color)
                                                                    Rival.sendSpy(color)
                                                                end,

                                                                scheme = function (color)
                                                                    Rival.influence(color, nil, 1)
                                                                    HagalCard.acquireTroops(color, 1)
                                                                end,
                                                            })

                                                            Rival.jessica = Helper.createClass(Rival, {

                                                                swordmasterCost = 6,

                                                                factionPriorities = {
                                                                    "beneGesserit",
                                                                    "fremen",
                                                                    "spacingGuild",
                                                                    "emperor",
                                                                },

                                                                signetRing = function (color)
                                                                    local factions = {}
                                                                    for _, faction in ipairs({"emperor", "spacingGuild", "beneGesserit", "fremen"}) do
                                                                        local cost = InfluenceTrack.getAllianceCost(color, faction)
                                                                        if cost == 1 then
                                                                            table.insert(factions, faction)
                                                                        end
                                                                    end
                                                                    Rival.influence(color, #factions > 0 and factions or nil, 1)
                                                                end,

                                                                scheme = function (color)
                                                                    Rival.resources(color, "water", 2)
                                                                end,
                                                            })

                                                            Rival.feydRauthaHarkonnen = Helper.createClass(Rival, {

                                                                swordmasterCost = 4,

                                                                factionPriorities = {
                                                                    "emperor",
                                                                    "beneGesserit",
                                                                    "spacingGuild",
                                                                    "fremen",
                                                                },

                                                                signetRing = function (color)
                                                                    HagalCard.acquireTroops(color, 2)
                                                                end,

                                                                scheme = function (color)
                                                                    Rival.influence(color, nil, 1)
                                                                end,
                                                            })

                                                            Rival.muadDib = Helper.createClass(Rival, {

                                                                swordmasterCost = 4,

                                                                factionPriorities = {
                                                                    "fremen",
                                                                    "beneGesserit",
                                                                    "spacingGuild",
                                                                    "emperor",
                                                                },

                                                                signetRing = function (color)
                                                                    Rival.influence(color, "fremen", 1)
                                                                end,

                                                                scheme = function (color)
                                                                    Rival.takeMakerHook(color)
                                                                    MainBoard.blowUpShieldWall(color, true)
                                                                    Rival.drawIntrigues(color, 1)
                                                                end,
                                                            })

                                                            return Rival

                                                        end)
                                                        __bundle_register("Resource", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                            local Module = require("utils.Module")
                                                            local Helper = require("utils.Helper")
                                                            local I18N = require("utils.I18N")
                                                            local Dialog = require("utils.Dialog")

                                                            local PlayBoard = Module.lazyRequire("PlayBoard")
                                                            local Types = Module.lazyRequire("Types")

                                                            local Resource = Helper.createClass(nil, {
                                                                MIN_VALUE = 0,
                                                                MAX_VALUE = 99,
                                                            resources = {}})

                                                            ---
                                                            function Resource.new(token, color, resourceName, value, location)
                                                                assert(token)
                                                                Types.assertIsResourceName(resourceName)
                                                                Types.assertIsPositiveInteger(value)

                                                                token.interactable = false

                                                                local resource = Helper.createClassInstance(Resource, {
                                                                    token = token,
                                                                    color = color,
                                                                    resourceName = resourceName,
                                                                    value = value,
                                                                    laggingValue = value,
                                                                    location = location,
                                                                })
                                                                Resource.resources[token.getGUID()] = resource

                                                                local fontColors = {
                                                                    spice = {0.9, 0.9, 0.9, 100},
                                                                    water = {0.2, 0.2, 0.5, 100},
                                                                    solari = {0.2, 0.2, 0.2, 100},
                                                                    persuasion = {0.9, 0.9, 0.9, 100},
                                                                    strength = {0.9, 0.6, 0.3, 100},
                                                                }

                                                                local scales = {
                                                                    spice = Vector(1.8, 1, 1.8) * Helper.toVector(token.getScale()),
                                                                    water = Vector(1.8, 1, 1.8) * Helper.toVector(token.getScale()),
                                                                    solari = Vector(1.8, 1, 1.8) * Helper.toVector(token.getScale()),
                                                                    persuasion = Vector(0.9, 1, 0.9),
                                                                    strength = Vector(0.9, 1, 0.9),
                                                                }

                                                                local offset = Vector(
                                                                    0,
                                                                    0.1 * token.getScale().y,
                                                                resourceName == "water" and - 0.25 or - 0.0)

                                                                Helper.createAbsoluteButtonWithRoundness(token, 1, {
                                                                    label = tostring(resource.value),
                                                                    click_function = Helper.registerGlobalCallback(function (_, otherColor, altClick)
                                                                        if resource.color or resource.location then
                                                                            resource:_changeValue(otherColor, altClick)
                                                                        else
                                                                            resource:_setValue(otherColor, altClick)
                                                                        end
                                                                    end),
                                                                    tooltip = resource:_getTooltip(),
                                                                    position = token.getPosition() + offset,
                                                                    height = (color or location) and 800,
                                                                    width = (color or location) and 800,
                                                                    scale = scales[resourceName],
                                                                    alignment = 3,
                                                                    font_size = 600,
                                                                    font_color = fontColors[resourceName],
                                                                color = {0, 0, 0, 0}})

                                                                Helper.registerEventListener("locale", function ()
                                                                    resource:_updateButton()
                                                                end)

                                                                resource:_updateButton()

                                                                return resource
                                                            end

                                                            ---
                                                            function Resource:_updateState()
                                                                if self.value == self.laggingValue then
                                                                    Helper.emitEvent(self.resourceName .. "ValueChanged", self.color, self.value)
                                                                end
                                                            end

                                                            ---
                                                            function Resource:_getTooltip()
                                                                return I18N(self.resourceName .. "Amount", self.value)
                                                            end

                                                            ---
                                                            function Resource:_updateButton()
                                                                self.token.editButton({
                                                                    index = 0,
                                                                    label = tostring(self.value),
                                                                tooltip = self:_getTooltip()})
                                                            end

                                                            ---
                                                            function Resource.findResourceFromToken(token)
                                                                for _, resource in pairs(Resource.resources) do
                                                                    if resource.token == token then
                                                                        return resource
                                                                    end
                                                                end
                                                                return nil
                                                            end

                                                            ---
                                                            function Resource:_setValue(_, altClick)
                                                                local change = altClick and - 1 or 1
                                                                local newValue = math.min(math.max(self.value + change, self.MIN_VALUE), self.MAX_VALUE)
                                                                if self.value ~= newValue then
                                                                    self.value = newValue
                                                                    self.laggingValue = self.value
                                                                    self:_updateButton()
                                                                    self:_updateState()
                                                                end
                                                            end

                                                            ---
                                                            function Resource:_changeValue(color, altClick)
                                                                if self.color and color ~= self.color then
                                                                    Dialog.broadcastToColor(I18N("noTouch"), color, color)
                                                                    return
                                                                end

                                                                local change = altClick and - 1 or 1
                                                                local newValue = math.min(math.max(self.value + change, self.MIN_VALUE), self.MAX_VALUE)
                                                                if self.value ~= newValue then
                                                                    self.value = newValue
                                                                    self:_updateButton()
                                                                    self:_updateState()

                                                                    if self.laggingUpdate then
                                                                        Wait.stop(self.laggingUpdate)
                                                                    end

                                                                    self.laggingUpdate = Wait.time(function ()
                                                                        local delta = self.value - self.laggingValue

                                                                        if self.color then
                                                                            local leaderName = PlayBoard.getLeaderName(self.color)
                                                                            if delta < 0 then
                                                                                local text = I18N("spendManually", {leader = leaderName, amount = -delta, resource = I18N.agree(delta, self.resourceName)})
                                                                                broadcastToAll(text, color)
                                                                            elseif delta > 0 then
                                                                                local text = I18N("receiveManually", {leader = leaderName, amount = delta, resource = I18N.agree(delta, self.resourceName)})
                                                                                broadcastToAll(text, color)
                                                                            end
                                                                        else
                                                                            local text = I18N("fixManually", {location = I18N(self.location), amount = delta, resource = I18N.agree(delta, self.resourceName)})
                                                                            broadcastToAll(text, color)
                                                                        end

                                                                        self.laggingValue = self.value
                                                                        self:_updateState()
                                                                    end, 1)
                                                                end
                                                            end

                                                            ---
                                                            function Resource:change(change)
                                                                local newValue = math.min(math.max(self.value + change, self.MIN_VALUE), self.MAX_VALUE)
                                                                self.value = newValue
                                                                self.laggingValue = self.value
                                                                self:_updateButton()
                                                                self:_updateState()
                                                            end

                                                            ---
                                                            function Resource:set(value)
                                                                local newValue = math.min(math.max(value, self.MIN_VALUE), self.MAX_VALUE)
                                                                self.value = newValue
                                                                self.laggingValue = value
                                                                self:_updateButton()
                                                                self:_updateState()
                                                            end

                                                            ---
                                                            function Resource:get()
                                                                return self.value
                                                            end

                                                            return Resource

                                                        end)
                                                        __bundle_register("Reserve", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                            local Module = require("utils.Module")
                                                            local Helper = require("utils.Helper")
                                                            local AcquireCard = require("utils.AcquireCard")

                                                            local Deck = Module.lazyRequire("Deck")
                                                            local PlayBoard = Module.lazyRequire("PlayBoard")

                                                            local Reserve = {}

                                                            ---
                                                            function Reserve.onLoad(state)
                                                                Helper.append(Reserve, Helper.resolveGUIDs(false, {
                                                                    foldspaceSlotZone = "6b62e0",
                                                                    prepareTheWaySlotZone = "cbcd9a",
                                                                    theSpiceMustFlowSlotZone = "c087d2"
                                                                }))

                                                                if state.settings then
                                                                    Reserve._transientSetUp()
                                                                end
                                                            end

                                                            ---
                                                            function Reserve.setUp()
                                                                -- TODO Detect Ilesa Ecaz?
                                                                if false then
                                                                    Deck.generateSpecialDeck(Reserve.foldspaceSlotZone, "base", "foldspace")
                                                                else
                                                                    Reserve.foldspaceSlotZone.destruct()
                                                                end
                                                                Deck.generateSpecialDeck(Reserve.prepareTheWaySlotZone, "uprising", "prepareTheWay")
                                                                Deck.generateSpecialDeck(Reserve.theSpiceMustFlowSlotZone, "uprising", "theSpiceMustFlow")
                                                                Reserve._transientSetUp()
                                                            end

                                                            ---
                                                            function Reserve._transientSetUp()
                                                                -- TODO Detect Ilesa Ecaz?
                                                                if false then
                                                                    Reserve.foldspace = AcquireCard.new(Reserve.foldspaceSlotZone, "Imperium", PlayBoard.withLeader(function (_, color)
                                                                        local leader = PlayBoard.getLeader(color)
                                                                        leader.acquireFoldspace(color)
                                                                    end), Deck.getAcquireCardDecalUrl("generic"))
                                                                end
                                                                Reserve.prepareTheWay = AcquireCard.new(Reserve.prepareTheWaySlotZone, "Imperium", PlayBoard.withLeader(function (_, color)
                                                                    local leader = PlayBoard.getLeader(color)
                                                                    leader.acquirePrepareTheWay(color)
                                                                end), Deck.getAcquireCardDecalUrl("generic"))
                                                                Reserve.theSpiceMustFlow = AcquireCard.new(Reserve.theSpiceMustFlowSlotZone, "Imperium", PlayBoard.withLeader(function (_, color)
                                                                    local leader = PlayBoard.getLeader(color)
                                                                    leader.acquireTheSpiceMustFlow(color)
                                                                end), Deck.getAcquireCardDecalUrl("generic"))
                                                            end

                                                            ---
                                                            function Reserve.acquireFoldspace(color)
                                                                if Reserve.foldspace then
                                                                    PlayBoard.giveCardFromZone(color, Reserve.foldspace.zone, false)
                                                                    return true
                                                                else
                                                                    return false
                                                                end
                                                            end

                                                            ---
                                                            function Reserve.acquirePrepareTheWay(color)
                                                                PlayBoard.giveCardFromZone(color, Reserve.prepareTheWay.zone, false)
                                                                return true
                                                            end

                                                            ---
                                                            function Reserve.acquireTheSpiceMustFlow(color, toItsHand)
                                                                if toItsHand then
                                                                    local position = Player[color].getHandTransform().position
                                                                    Helper.moveCardFromZone(Reserve.theSpiceMustFlow.zone, position, nil, false, true)
                                                                else
                                                                    PlayBoard.giveCardFromZone(color, Reserve.theSpiceMustFlow.zone, false, toItsHand)
                                                                end
                                                                return true
                                                            end

                                                            --- Move a card out of a trash and back into the reserve if necessary.
                                                            function Reserve.redirectUntrashableCards(trashBag, card)
                                                                -- The ID is stored in the 'GM Notes' property (the description and/or name
                                                                -- properties store an unpredictable I18N content).
                                                                local cardName = Helper.getID(card)
                                                                local acquireCard = Reserve[cardName]
                                                                if acquireCard then
                                                                    trashBag.takeObject({
                                                                        guid = card.guid,
                                                                        position = acquireCard.zone.getPosition() + Vector(0, 1, 0),
                                                                        rotation = Vector(0, 180, 0),
                                                                        smooth = false,
                                                                    })
                                                                end
                                                            end

                                                            return Reserve

                                                        end)
                                                        __bundle_register("PlayBoard", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                            local Module = require("utils.Module")
                                                            local Helper = require("utils.Helper")
                                                            local Park = require("utils.Park")
                                                            local I18N = require("utils.I18N")
                                                            local Set = require("utils.Set")
                                                            local Dialog = require("utils.Dialog")

                                                            local Resource = Module.lazyRequire("Resource")
                                                            local TleilaxuResearch = Module.lazyRequire("TleilaxuResearch")
                                                            local TurnControl = Module.lazyRequire("TurnControl")
                                                            local Types = Module.lazyRequire("Types")
                                                            local Deck = Module.lazyRequire("Deck")
                                                            local MainBoard = Module.lazyRequire("MainBoard")
                                                            local Hagal = Module.lazyRequire("Hagal")
                                                            local Leader = Module.lazyRequire("Leader")
                                                            local Combat = Module.lazyRequire("Combat")
                                                            local Intrigue = Module.lazyRequire("Intrigue")
                                                            local Reserve = Module.lazyRequire("Reserve")
                                                            local TechMarket = Module.lazyRequire("TechMarket")
                                                            local InfluenceTrack = Module.lazyRequire("InfluenceTrack")
                                                            local ImperiumCard = Module.lazyRequire("ImperiumCard")
                                                            local Commander = Module.lazyRequire("Commander")
                                                            local ConflictCard = Module.lazyRequire("ConflictCard")
                                                            local ScoreBoard = Module.lazyRequire("ScoreBoard")
                                                            local Action = Module.lazyRequire("Action")

                                                            local PlayBoard = Helper.createClass(nil, {
                                                                ALL_RESOURCE_NAMES = {"spice", "water", "solari", "strength", "persuasion"},
                                                                -- Temporary structure (set to nil *after* loading).
                                                                unresolvedContentByColor = {
                                                                    Red = {
                                                                        board = "d47b92",
                                                                        supportBoard = "7c5bb0",
                                                                        colorband = "643f4d",
                                                                        spice = "3074d4",
                                                                        solari = "576ccd",
                                                                        water = "692c4d",
                                                                        persuasion = "7eb590",
                                                                        strength = "3f6645",
                                                                        -- bloodlines sardaukar commanders
                                                                        dreadnoughts = {"e28e7b", "5988c3", "b66870", "6d5fe4", "c66678", "77b44a", "3503b4"},
                                                                        dreadnoughtInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('e28e7b', -23.70, 2.199222, 19.65),
                                                                            Helper.getHardcodedPositionFromGUID('5988c3', -25.30, 2.199222, 19.65),
                                                                            Helper.getHardcodedPositionFromGUID('b66870', -24.50, 2.199222, 19.65),
                                                                            Helper.getHardcodedPositionFromGUID('6d5fe4', -24.10, 2.199222, 19.15),
                                                                            Helper.getHardcodedPositionFromGUID('c66678', -24.90, 2.199222, 19.15),
                                                                            Helper.getHardcodedPositionFromGUID('77b44a', -23.30, 2.199222, 19.15),
                                                                        Helper.getHardcodedPositionFromGUID('3503b4', -25.70, 2.199222, 19.15)},
                                                                        agents = {"7751c8", "afa978"},
                                                                        agentInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('7751c8', -19.15, 2.19722152, 21.7),
                                                                        Helper.getHardcodedPositionFromGUID('afa978', -17.65, 2.19722152, 21.7)},
                                                                        swordmaster = "ed3490",
                                                                        swordmasterBonusToken = "db91e0",
                                                                        spies = {
                                                                            "fdecae",
                                                                            "84d545",
                                                                            "e7a4ef",
                                                                        },
                                                                        spyInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('fdecae', -19.15, 2.52385259, 20.95),
                                                                            Helper.getHardcodedPositionFromGUID('84d545', -17.65, 2.52385259, 20.95),
                                                                        Helper.getHardcodedPositionFromGUID('e7a4ef', -16.15, 2.52385259, 20.95)},
                                                                        councilToken = "f19a48",
                                                                        fourPlayerVictoryToken = "a6c2e0",
                                                                        scoreMarker = "175a0a",
                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('175a0a', 10.3903551, 2.19088173, -14.0911646),
                                                                        controlMarkerBag = '61453d',
                                                                        troops = {
                                                                            "8b2acc",
                                                                            "6c2b85",
                                                                            "81763a",
                                                                            "fd5673",
                                                                            "8bb1e6",
                                                                            "1bbf1c",
                                                                            "0fa955",
                                                                            "465c38",
                                                                            "4fd2dd",
                                                                            "488161",
                                                                            "5cfef7",
                                                                            "af7cd0"
                                                                        },
                                                                        forceMarker = '2d1d17',
                                                                        trash = "ea3fe1",
                                                                        completedContractBag = "ce13d1",
                                                                        tleilaxToken = "2bfc39",
                                                                        tleilaxTokenInitalPosition = Helper.getHardcodedPositionFromGUID('2bfc39', 0.5429316, 1.882152, 22.0543556),
                                                                        researchToken = "39e0f3",
                                                                        researchTokenInitalPosition = Helper.getHardcodedPositionFromGUID('39e0f3', 0.369857281, 1.88465214, 18.2348137),
                                                                        freighter = "e9096d",
                                                                        firstPlayerMarkerZone = "781a03",
                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('781a03', -13.6, 2.7, 20.89) + Vector(0, -0.4, 0),
                                                                        endTurnButton = "895594",
                                                                        atomicsToken = "d5ff47",
                                                                        makerHook = "2a8414",
                                                                    },
                                                                    Blue = {
                                                                        board = "f23836",
                                                                        supportBoard = "3d9589",
                                                                        colorband = "bca124",
                                                                        spice = "9cc286",
                                                                        solari = "fa5236",
                                                                        water = "0afaeb",
                                                                        persuasion = "d1fed4",
                                                                        strength = "aa3bb9",
                                                                        -- bloodlines sardaukar commanders
                                                                        dreadnoughts = {"86c998", "6e87f4", "a1c0cd", "9dd030", "73f073", "f87386", "52374d"},
                                                                        dreadnoughtInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('86c998', -23.70, 2.19922233, -18.75),
                                                                            Helper.getHardcodedPositionFromGUID('6e87f4', -25.30, 2.19922233, -18.75),
                                                                            Helper.getHardcodedPositionFromGUID('a1c0cd', -24.50, 2.19922233, -18.75),
                                                                            Helper.getHardcodedPositionFromGUID('9dd030', -24.10, 2.19922233, -19.25),
                                                                            Helper.getHardcodedPositionFromGUID('73f073', -24.90, 2.19922233, -19.25),
                                                                            Helper.getHardcodedPositionFromGUID('f87386', -23.30, 2.19922233, -19.25),
                                                                        Helper.getHardcodedPositionFromGUID('52374d', -25.70, 2.19922233, -19.25)},
                                                                        agents = {"64d013", "106d8b"},
                                                                        agentInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('64d013', -19.15, 2.19722152, -16.7),
                                                                        Helper.getHardcodedPositionFromGUID('106d8b', -17.65, 2.19722152, -16.7)},
                                                                        swordmaster = "a78ad7",
                                                                        swordmasterBonusToken = "28ec54",
                                                                        spies = {
                                                                            "7d7083",
                                                                            "e07c5c",
                                                                            "272ba1",
                                                                        },
                                                                        spyInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('7d7083', -19.15, 2.52385259, -17.45),
                                                                            Helper.getHardcodedPositionFromGUID('e07c5c', -17.65, 2.52385259, -17.45),
                                                                        Helper.getHardcodedPositionFromGUID('272ba1', -16.15, 2.52385259, -17.45)},
                                                                        councilToken = "f5b14a",
                                                                        fourPlayerVictoryToken = "311255",
                                                                        scoreMarker = "7fa9a7",
                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('7fa9a7', 10.3909073, 2.3901546, -14.090991),
                                                                        controlMarkerBag = '8627e0',
                                                                        troops = {
                                                                            "2a5276",
                                                                            "f2c21f",
                                                                            "5fba3c",
                                                                            "bc6e74",
                                                                            "f60d9c",
                                                                            "f65e5d",
                                                                            "46c1c6",
                                                                            "49afee",
                                                                            "1bbc16",
                                                                            "98e3a6",
                                                                            "bb23cc",
                                                                            "694553"
                                                                        },
                                                                        forceMarker = 'f22e20',
                                                                        trash = "52a539",
                                                                        completedContractBag = "f67091",
                                                                        tleilaxToken = "96607f",
                                                                        tleilaxTokenInitalPosition = Helper.getHardcodedPositionFromGUID('96607f', 0.542550147, 1.884652, 22.75358),
                                                                        researchToken = "292658",
                                                                        researchTokenInitalPosition = Helper.getHardcodedPositionFromGUID('292658', 0.370049357, 1.882152, 18.9373875),
                                                                        freighter = "68e424",
                                                                        firstPlayerMarkerZone = "311c04",
                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('311c04', -13.6, 2.7, -17.49) + Vector(0, -0.4, 0),
                                                                        endTurnButton = "9eeccd",
                                                                        atomicsToken = "700023",
                                                                        makerHook = "7011f2",
                                                                    },
                                                                    Green = {
                                                                        board = "2facfd",
                                                                        supportBoard = "8a1a96",
                                                                        colorband = "a138eb",
                                                                        spice = "22478f",
                                                                        solari = "e597dc",
                                                                        water = "fa9522",
                                                                        persuasion = "aa79bf",
                                                                        strength = "d880f7",
                                                                        -- bloodlines sardaukar commanders
                                                                        dreadnoughts = {"e90a35", "95ee6b", "e0a262", "3f3fb3", "da0e2f", "4b60b6", "c20e15"},
                                                                        dreadnoughtInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('e90a35', 23.70, 2.19653678, 19.65),
                                                                            Helper.getHardcodedPositionFromGUID('95ee6b', 25.30, 2.19653678, 19.65),
                                                                            Helper.getHardcodedPositionFromGUID('e0a262', 24.50, 2.19653678, 19.65),
                                                                            Helper.getHardcodedPositionFromGUID('3f3fb3', 24.10, 2.19653678, 19.15),
                                                                            Helper.getHardcodedPositionFromGUID('da0e2f', 24.90, 2.19653678, 19.15),
                                                                            Helper.getHardcodedPositionFromGUID('4b60b6', 23.30, 2.19653678, 19.15),
                                                                        Helper.getHardcodedPositionFromGUID('c20e15', 25.70, 2.19653678, 19.15)},
                                                                        agents = {"bceb0e", "ee412b"},
                                                                        agentInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('bceb0e', 16.1, 2.194536, 21.7),
                                                                        Helper.getHardcodedPositionFromGUID('ee412b', 17.599762, 2.194536, 21.7)},
                                                                        swordmaster = "fb1629",
                                                                        swordmasterBonusToken = "f5bfa8",
                                                                        spies = {
                                                                            "ed1748",
                                                                            "795934",
                                                                            "8ca6ca",
                                                                        },
                                                                        spyInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('ed1748', 16.1, 2.521167, 20.95),
                                                                            Helper.getHardcodedPositionFromGUID('795934', 17.6, 2.521167, 20.95),
                                                                        Helper.getHardcodedPositionFromGUID('8ca6ca', 19.1, 2.521167, 20.95)},
                                                                        councilToken = "a0028d",
                                                                        fourPlayerVictoryToken = "66444c",
                                                                        scoreMarker = "7bae32",
                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('7bae32', 10.3895054, 1.99093008, -14.0924873),
                                                                        controlMarkerBag = 'ad6b92',
                                                                        troops = {
                                                                            "167fd4",
                                                                            "60c92d",
                                                                            "b614cc",
                                                                            "f433eb",
                                                                            "08be0c",
                                                                            "b48887",
                                                                            "8e22cc",
                                                                            "866a9c",
                                                                            "060aee",
                                                                            "86396c",
                                                                            "b5e9ae",
                                                                            "fc9c62"
                                                                        },
                                                                        forceMarker = 'a1a9a7',
                                                                        trash = "4060b5",
                                                                        completedContractBag = "e48304",
                                                                        tleilaxToken = "63d39f",
                                                                        tleilaxTokenInitalPosition = Helper.getHardcodedPositionFromGUID('63d39f', 1.2458272, 1.8846519, 22.04864),
                                                                        researchToken = "658b17",
                                                                        researchTokenInitalPosition = Helper.getHardcodedPositionFromGUID('658b17', 0.3700056, 1.882152, 20.3406372),
                                                                        freighter = "34281d",
                                                                        firstPlayerMarkerZone = "ce7c68",
                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('ce7c68', 13.6, 2.7, 20.89) + Vector(0, -0.4, 0),
                                                                        endTurnButton = "96aa58",
                                                                        atomicsToken = "0a22ec",
                                                                        makerHook = "0492e6",
                                                                    },
                                                                    Yellow = {
                                                                        board = "13b6cb",
                                                                        supportBoard = "da264a",
                                                                        colorband = "9232e7",
                                                                        spice = "78fb8a",
                                                                        solari = "c5c4ef",
                                                                        water = "f217d0",
                                                                        persuasion = "c04d4e",
                                                                        strength = "6f007c",
                                                                        -- bloodlines sardaukar commanders
                                                                        dreadnoughts = {"a9e6a7", "b1f60b", "bd1bd0", "6f542e", "cad40d", "4d619c", "fe20d0"},
                                                                        dreadnoughtInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('a9e6a7', 23.70, 2.19653654, -18.75),
                                                                            Helper.getHardcodedPositionFromGUID('b1f60b', 25.30, 2.19653654, -18.75),
                                                                            Helper.getHardcodedPositionFromGUID('bd1bd0', 24.50, 2.19653654, -18.75),
                                                                            Helper.getHardcodedPositionFromGUID('6f542e', 24.10, 2.19653654, -19.25),
                                                                            Helper.getHardcodedPositionFromGUID('cad40d', 24.90, 2.19653654, -19.25),
                                                                            Helper.getHardcodedPositionFromGUID('4d619c', 23.30, 2.19653654, -19.25),
                                                                        Helper.getHardcodedPositionFromGUID('fe20d0', 25.70, 2.19653654, -19.25)},
                                                                        agents = {"5068c8", "67b476"},
                                                                        agentInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('5068c8', 16.1, 2.194536, -16.7),
                                                                        Helper.getHardcodedPositionFromGUID('67b476', 17.6, 2.194536, -16.7)},
                                                                        swordmaster = "635c49",
                                                                        swordmasterBonusToken = "e160d9",
                                                                        spies = {
                                                                            "94ffec",
                                                                            "f59e0c",
                                                                            "4e66c4",
                                                                        },
                                                                        spyInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('94ffec', 16.1, 2.521167, -17.45),
                                                                            Helper.getHardcodedPositionFromGUID('f59e0c', 17.6, 2.521167, -17.45),
                                                                        Helper.getHardcodedPositionFromGUID('4e66c4', 19.1, 2.521167, -17.45)},
                                                                        councilToken = "1be491",
                                                                        fourPlayerVictoryToken = "4e8873",
                                                                        scoreMarker = "f9ac91",
                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('f9ac91', 10.3904238, 1.79251623, -14.090271),
                                                                        controlMarkerBag = 'b92a4c',
                                                                        troops = {
                                                                            "fbf8d2",
                                                                            "7c5b7b",
                                                                            "4d0dbf",
                                                                            "ef6da2",
                                                                            "d01e0b",
                                                                            "9b55e4",
                                                                            "ef9008",
                                                                            "734b6e",
                                                                            "4f4199",
                                                                            "1f5949",
                                                                            "3dc7ff",
                                                                            "b5d32e"
                                                                        },
                                                                        forceMarker = 'c2dd31',
                                                                        trash = "7d1e07",
                                                                        completedContractBag = "04d334",
                                                                        tleilaxToken = "d20bcf",
                                                                        tleilaxTokenInitalPosition = Helper.getHardcodedPositionFromGUID('d20bcf', 1.24723184, 1.884652, 22.7536983),
                                                                        researchToken = "8988cf",
                                                                        researchTokenInitalPosition = Helper.getHardcodedPositionFromGUID('8988cf', 0.370085269, 1.88215208, 19.6398125),
                                                                        freighter = "8fa76f",
                                                                        firstPlayerMarkerZone = "ba0c20",
                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('ba0c20', 13.6, 2.7, -17.49) + Vector(0, -0.4, 0),
                                                                        endTurnButton = "3d1b90",
                                                                        atomicsToken = "7e10a9",
                                                                        makerHook = "a07d90",
                                                                    },
                                                                    White = {
                                                                        board = "4ad196",
                                                                        colorband = "6d455c",
                                                                        spice = "9d593f",
                                                                        solari = "5a16bb",
                                                                        water = "830a1a",
                                                                        persuasion = "57a567",
                                                                        strength = "a18dca",
                                                                        agents = {"b9a4d2", "2c1095"},
                                                                        agentInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('b9a4d2', -19.15, 2.19472766, 2.49999976),
                                                                        Helper.getHardcodedPositionFromGUID('2c1095', -17.6500015, 2.19472766, 2.49999976)},
                                                                        swordmaster = "c2a908",
                                                                        swordmasterBonusToken = "a456bf",
                                                                        spies = {
                                                                            "96bbc4",
                                                                            "040248",
                                                                            "bddedd",
                                                                        },
                                                                        spyInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('96bbc4', -19.15, 2.52385283, 1.75000143),
                                                                            Helper.getHardcodedPositionFromGUID('040248', -17.65, 2.52385354, 1.74999988),
                                                                        Helper.getHardcodedPositionFromGUID('bddedd', -16.15, 2.523853, 1.74999964)},
                                                                        councilToken = "ded786",
                                                                        scoreMarker = "201011",
                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('201011', 10.3917294, 2.58932447, -14.09231),
                                                                        trash = "a4f139",
                                                                        completedContractBag = "98c18d",
                                                                        firstPlayerMarkerZone = "f4c962",
                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('f4c962', -13.6, 2.7, 1.7) + Vector(0, -0.4, 0),
                                                                        endTurnButton = "8d70a4",
                                                                        atomicsToken = "a20687",
                                                                    },
                                                                    Purple = {
                                                                        board = "dc05a6",
                                                                        colorband = "1434c7",
                                                                        spice = "2c9946",
                                                                        solari = "43d234",
                                                                        water = "c72ecc",
                                                                        persuasion = "ab28ea",
                                                                        strength = "50f36d",
                                                                        agents = {"10ca63", "fb1dd6"},
                                                                        agentInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('10ca63', 16.1, 2.192042, 2.5),
                                                                        Helper.getHardcodedPositionFromGUID('fb1dd6', 17.6, 2.19204187, 2.5)},
                                                                        swordmaster = "a695f9",
                                                                        swordmasterBonusToken = "aa9a39",
                                                                        spies = {
                                                                            "e5b04d",
                                                                            "407c67",
                                                                            "a3d964",
                                                                        },
                                                                        spyInitialPositions = {
                                                                            Helper.getHardcodedPositionFromGUID('e5b04d', 16.1, 2.521167, 1.749999),
                                                                            Helper.getHardcodedPositionFromGUID('407c67', 17.6, 2.521168, 1.74999988),
                                                                        Helper.getHardcodedPositionFromGUID('a3d964', 19.1, 2.521168, 1.75000155)},
                                                                        councilToken = "8c6ba7",
                                                                        scoreMarker = "2ccf7f",
                                                                        scoreMarkerInitialPosition = Helper.getHardcodedPositionFromGUID('2ccf7f', 10.3914042, 2.789329, -14.0921068),
                                                                        trash = "556139",
                                                                        completedContractBag = "49dedf",
                                                                        firstPlayerMarkerZone = "7a8ea9",
                                                                        firstPlayerInitialPosition = Helper.getHardcodedPositionFromGUID('7a8ea9', 13.58, 2.7, 1.7) + Vector(0, -0.4, 0),
                                                                        endTurnButton = "eded7c",
                                                                        atomicsToken = "0a3ccb",
                                                                    },
                                                                },
                                                                playBoards = {},
                                                                -- TODO Use the snappoints (swordmasterBonusTokenXxx) instead.
                                                                swordmasterBonusPositions = {
                                                                    Red = Vector(-0.29, 1.79, -7.77),
                                                                    Blue = Vector(-0.29, 1.79, -12.35),
                                                                    Green = Vector(6.96, 1.79, -7.77),
                                                                    Yellow = Vector(6.96, 1.79, -12.35),
                                                                    White = Vector(3.33, 1.79, -12.35),
                                                                    Purple = Vector(3.33, 1.79, -7.77),
                                                                }})

                                                                ---
                                                                function PlayBoard.rebuild()
                                                                    for _, color in ipairs({"Green", "Yellow", "Blue", "Red", "White", "Purple"}) do
                                                                        local content = Helper.resolveGUIDs(true, PlayBoard.unresolvedContentByColor[color])

                                                                        local colorSwitch = function (left, right)
                                                                            if PlayBoard.isLeft(color) then
                                                                                return left
                                                                            else
                                                                                return right
                                                                            end
                                                                        end

                                                                        local symmetric = function (x, y, z)
                                                                            return colorSwitch(Vector(-x, y, z), Vector(x, y, z))
                                                                        end
                                                                        local offseted = function (x, y, z)
                                                                            return colorSwitch(Vector(12.75 + x, y, z), Vector(x, y, z))
                                                                        end

                                                                        local symmetric2 = function (x, y, z)
                                                                            local r = symmetric(-x, y, -z)
                                                                            return Vector(-r.x, r.y, -r.z)
                                                                        end
                                                                        local offseted2 = function (x, y, z)
                                                                            local r = offseted(-x, y, -z)
                                                                            return Vector(-r.x, r.y, -r.z)
                                                                        end

                                                                        local c1 = 0.5

                                                                        local objectGroups = {
                                                                            {
                                                                                board = Vector(0, 0, 0),
                                                                                colorband = Vector(0, 0, -0.55),
                                                                                fourPlayerVictoryToken = symmetric(-11.2, 0, 8.1),
                                                                            },
                                                                            {
                                                                                --[[
                spice = offseted(-8.4, 0, 4.5),
                solari = offseted(-4.4, 0, 4.5),
                water = offseted(-6.4, 0, 4),
                ]]
                                                                                spice = offseted(-8.4, 0, 4),
                                                                                solari = offseted(-6.4, 0, 4.5),
                                                                                water = offseted(-4.4, 0, 4),
                                                                                agents = {
                                                                                    origin = offseted(-7.9, 0, 6.5),
                                                                                    width = 3,
                                                                                    height = 1,
                                                                                    xOffset = Vector(1.5, 0, 0),
                                                                                },
                                                                                spies = {
                                                                                    origin = offseted(-7.9, 0, 5.75),
                                                                                    width = 3,
                                                                                    height = 1,
                                                                                    xOffset = Vector(1.5, 0, 0),
                                                                                },
                                                                            },
                                                                            {
                                                                                persuasion = symmetric(c1, 0, 0.2),
                                                                                strength = symmetric(c1, 0, 6),
                                                                                dreadnoughts = {
                                                                                    origin = symmetric(c1 - 0.8, 0, 4.2),
                                                                                    width = 2,
                                                                                    height = 1,
                                                                                    xOffset = symmetric(1.6, 0, 0),
                                                                                    yOffset = Vector(0, 0, 0),
                                                                                },
                                                                                councilToken = symmetric(1.35, 0, -0.6),
                                                                                controlMarkerBag = symmetric(c1, 0, 4),
                                                                                troops = {
                                                                                    origin = symmetric(c1 - 0.5, 0, 1.8),
                                                                                    width = 3,
                                                                                    height = 4,
                                                                                    xOffset = symmetric(0.5, 0, 0),
                                                                                    yOffset = Vector(0, 0, 0.5),
                                                                                },
                                                                            },
                                                                            {
                                                                                trash = symmetric(10, 0, 1),
                                                                                endTurnButton = symmetric(-2.4, 0, 6),
                                                                                atomicsToken = symmetric(10, 0, 3.4),
                                                                            },
                                                                        }

                                                                        local c0 = 1
                                                                        local positions = {
                                                                            Green = Vector(24, 2, 14.2 + c0),
                                                                            Yellow = Vector(24, 2, -24.2 + c0),
                                                                            Red = Vector(-24, 2, 14.2 + c0),
                                                                            Blue = Vector(-24, 2, -24.2 + c0),
                                                                            White = Vector(-24, 2, -5 + c0),
                                                                            Purple = Vector(24, 2, -5 + c0),
                                                                        }
                                                                        local position = positions[color]

                                                                        local offset = position - content.board.getPosition()

                                                                        for _, objects in ipairs(objectGroups) do
                                                                            for name, localOffset in pairs(objects) do
                                                                                local object = content[name]
                                                                                if object then
                                                                                    if type(object) == "table" then
                                                                                        assert(type(localOffset) == "table", name)
                                                                                        for j, item in ipairs(object) do
                                                                                            local newPosition = position + localOffset.origin
                                                                                            local x = (j - 1) % localOffset.width
                                                                                            local y = math.floor((j - 1) / localOffset.width)
                                                                                            newPosition = newPosition + localOffset.xOffset:copy():scale(x) + (localOffset.yOffset and localOffset.yOffset:copy():scale(y) or Vector(0, 0, 0))
                                                                                            newPosition.y = (item.getPosition() + offset).y + localOffset.origin.y
                                                                                            item.setPosition(newPosition)
                                                                                        end
                                                                                    else
                                                                                        local newPosition = position + localOffset
                                                                                        newPosition.y = (object.getPosition() + offset).y + localOffset.y
                                                                                        object.setPosition(newPosition)
                                                                                        object.setLock(true)
                                                                                    end
                                                                                end
                                                                            end
                                                                        end

                                                                        local handTransform = Player[color].getHandTransform()
                                                                        handTransform.position = handTransform.position + offset
                                                                        Player[color].setHandTransform(handTransform)

                                                                        local layoutGrid = function (width, height, f)
                                                                            local n = width * height
                                                                            for i = 1, n do
                                                                                local x = (i - 1) % width
                                                                                local y = math.floor((i - 1) / width)
                                                                                f(x, y)
                                                                            end
                                                                        end

                                                                        -- Coordinates in the object space (rotated by 180??).
                                                                        local decals = {
                                                                            {
                                                                                name = "Scoreboard",
                                                                                url = colorSwitch(
                                                                                    "https://steamusercontent-a.akamaihd.net/ugc/2502404390141335512/BD4C6DB374A73A3A1586E84DD94DD2459EB51782/",
                                                                                "https://steamusercontent-a.akamaihd.net/ugc/2502404390141335805/00AEA6A9B03D893B1BF82EFF392448FD52B8C70E/"),
                                                                                position = symmetric2(1.4, 0.2, -8.1),
                                                                                rotation = {90, 180, 0},
                                                                                scale = {21.56, 1.1, 1.1},
                                                                            },
                                                                            {
                                                                                name = "First Player Token Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141336231/B2176FBF3640DC02A6840C8E0FB162057724DE41/",
                                                                                position = symmetric2(10.4, 0.2, -5.7),
                                                                                rotation = {90, 180, 0},
                                                                                scale = {2, 2, 2},
                                                                            },
                                                                            {
                                                                                name = "Deck Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141335305/9973F87497827C194B979D7410D0DD47E46305FA/",
                                                                                position = offseted2(10.4, 0.2, -1.5),
                                                                                rotation = {90, 180, 0},
                                                                                scale = {2.4, 3.4, 3.4},
                                                                            },
                                                                            {
                                                                                name = "Discard Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141335224/76205DFA6ECBC5F9C6B38BE95F42E6B5468B5999/",
                                                                                position = offseted2(2.4, 0.2, -1.5),
                                                                                rotation = {90, 180, 0},
                                                                                scale = {2.4, 3.4, 3.4},
                                                                            },
                                                                            {
                                                                                name = "Leader Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141335398/7882B2E68FF7767C67EE5C63C9D7CF17B405A5C3/",
                                                                                position = offseted2(6.4, 0.2, -1),
                                                                                rotation = {90, 180, 0},
                                                                                scale = {5, 3.5, 3.5},
                                                                            },
                                                                            {
                                                                                name = "MuadDib Objective Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141305375/52C4F6DEBC5F101B6663B833F1964BB9034A7C75/",
                                                                                position = symmetric2(-3.4, 0.2, 0),
                                                                                rotation = {90, 180, 0},
                                                                                scale = {1.1, 1.1, 1.1},
                                                                            },
                                                                            {
                                                                                name = "Crysknife Objective Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141304988/D455406509BD5D1C4387C102CBACC5BFB56FC59E/",
                                                                                position = symmetric2(-4.8, 0.2, 0),
                                                                                rotation = {90, 180, 0},
                                                                                scale = {1.1, 1.1, 1.1},
                                                                            },
                                                                            {
                                                                                name = "Ornithopter Objective Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141304687/E4E692FE0EF6AF7B51B5A31DAC5D0D7DC7859655/",
                                                                                position = symmetric2(-6.2, 0.2, 0),
                                                                                rotation = {90, 180, 0},
                                                                                scale = {1.1, 1.1, 1.1},
                                                                            },
                                                                            {
                                                                                name = "Joker Objective Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141304458/384109878E6ED179516CE638CE97167E12698A54/",
                                                                                position = symmetric2(-7.6, 0.2, 0),
                                                                                rotation = {90, 180, 0},
                                                                                scale = {1, 1, 1},
                                                                            },
                                                                        }

                                                                        layoutGrid(3, 1, function (x, y)
                                                                            table.insert(decals, {
                                                                                name = "Generic Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141334991/8C42D07B62ACE707EF3C206E9DFEA483821ECFD8/",
                                                                                position = offseted2(4.9 + x * 1.5, 0.2, -6.5),
                                                                                rotation = {90, 0, 0},
                                                                                scale = {0.5, 0.5, 0.5},
                                                                            })
                                                                        end)

                                                                        layoutGrid(3, 1, function (x, y)
                                                                            table.insert(decals, {
                                                                                name = "Generic Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141334991/8C42D07B62ACE707EF3C206E9DFEA483821ECFD8/",
                                                                                position = offseted2(4.9 + x * 1.5, 0.2, -5.75),
                                                                                rotation = {90, 0, 0},
                                                                                scale = {0.25, 0.25, 0.25},
                                                                            })
                                                                        end)

                                                                        layoutGrid(2, 3, function (x, y)
                                                                            table.insert(decals, {
                                                                                name = "Tech Tile Slot",
                                                                                url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141336300/6A948CDC20774D0D4E5EA0EFF3E0D2C23F30FCC1/",
                                                                                position = symmetric2(-4 - 3 * x, 0.2, -2 - 2 * y),
                                                                                rotation = {90, 0, 0},
                                                                                scale = {2.6, 1.8, 1.8},
                                                                            })
                                                                        end)

                                                                        if content.dreadnoughts then
                                                                            layoutGrid(2, 1, function (x, y)
                                                                                table.insert(decals, {
                                                                                    name = "Generic Slot",
                                                                                    url = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141334991/8C42D07B62ACE707EF3C206E9DFEA483821ECFD8/",
                                                                                    position = symmetric2(-1.3 + x * 1.6, 0.2, -4.2),
                                                                                    rotation = {90, 0, 0},
                                                                                    scale = {0.5, 0.5, 0.5},
                                                                                })
                                                                            end)
                                                                        end

                                                                        if false then
                                                                            layoutGrid(9, 2, function (x, y)
                                                                                table.insert(decals, {
                                                                                    name = "Intrigium",
                                                                                    url = "https://steamusercontent-a.akamaihd.net/ugc/2120690798716490121/DB0A29253195530F3A39D5AC737922A5B2338795/",
                                                                                    position = symmetric2(9.5 - 2.5 * x, 0.2, 3.2 + 4 * y),
                                                                                    rotation = {90, 180, 0},
                                                                                    scale = {2, 2, 2},
                                                                                })
                                                                            end)
                                                                        else
                                                                            layoutGrid(6, 1, function (x, y)
                                                                                table.insert(decals, {
                                                                                    name = "Intrigium",
                                                                                    url = "https://steamusercontent-a.akamaihd.net/ugc/2120690798716490121/DB0A29253195530F3A39D5AC737922A5B2338795/",
                                                                                    position = symmetric2(9.5 - 2.5 * x, 0.2, 3.2 + 4 * y),
                                                                                    rotation = {90, 180, 0},
                                                                                    scale = {2, 2, 2},
                                                                                })
                                                                            end)
                                                                        end

                                                                        content.board.setDecals(decals)
                                                                    end
                                                                end

                                                                ---
                                                                ---@param position Vector
                                                                function PlayBoard:moveAt(position, isRelative, horizontalHandLayout)
                                                                    local toBeMoved = Helper.shallowCopy(self.content)
                                                                    local offset = isRelative and position or (position - toBeMoved.board.getPosition())

                                                                    local exceptions = {
                                                                        "swordmaster",
                                                                        "scoreMarker",
                                                                        "forceMarker",
                                                                        "tleilaxToken",
                                                                        "tleilaxTokenInitalPosition",
                                                                        "researchToken",
                                                                        "researchTokenInitalPosition",
                                                                        "freighter",
                                                                    }
                                                                    for _, exception in ipairs(exceptions) do
                                                                        toBeMoved[exception] = nil
                                                                    end

                                                                    toBeMoved.drawDeck = self.content.drawDeckZone and Helper.getDeckOrCard(self.content.drawDeckZone) or nil
                                                                    toBeMoved.discard = self.content.discardZone and Helper.getDeckOrCard(self.content.discardZone) or nil

                                                                    local smooth = false
                                                                    local move = smooth and "setPositionSmooth" or "setPosition"

                                                                    Helper.forEachRecursively(toBeMoved, function (name, object)
                                                                        assert(tostring(object) ~= "null", name)
                                                                        if name ~= "supportBoard" then
                                                                            if object.getPosition then
                                                                                object[move](object.getPosition() + offset)
                                                                            elseif object.x then
                                                                                object.x = object.x + offset.x
                                                                                object.y = object.y + offset.y
                                                                                object.z = object.z + offset.z
                                                                            end
                                                                        end
                                                                    end)

                                                                    local parks = {
                                                                        self.agentCardPark,
                                                                        self.revealCardPark,
                                                                        self.agentPark,
                                                                        self.spyPark,
                                                                        self.dreadnoughtPark,
                                                                        self.supplyPark,
                                                                        self.techPark,
                                                                        self.scorePark,
                                                                    }

                                                                    for _, park in ipairs(parks) do
                                                                        for _, slot in ipairs(park.slots) do
                                                                            slot.x = slot.x + offset.x
                                                                            slot.y = slot.y + offset.y
                                                                            slot.z = slot.z + offset.z
                                                                        end

                                                                        for _, zone in ipairs(Park.getZones(park)) do
                                                                            zone[move](zone.getPosition() + offset)
                                                                        end
                                                                        if park.anchor then
                                                                            park.anchor[move](park.anchor.getPosition() + offset)
                                                                        end
                                                                    end

                                                                    -- Not reliable, only done for the old vertical layout which doesn't have alternate zones.
                                                                    if not horizontalHandLayout then
                                                                        PlayBoard.tq = PlayBoard.tq or Helper.createTemporalQueue(0.25)
                                                                        PlayBoard.tq.submit(function ()
                                                                            local handTransform = Player[self.color].getHandTransform()
                                                                            handTransform.position = handTransform.position + offset
                                                                            if horizontalHandLayout then
                                                                                handTransform.position = handTransform.position + self:_newSymmetricBoardPosition(-15, 0, 11.95)
                                                                                handTransform.scale = Vector(25, 5, 4)
                                                                                handTransform.rotation = Vector(0, 0, 0)
                                                                            end
                                                                            Player[self.color].setHandTransform(handTransform)
                                                                        end)
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard:_pruneHandsInExcess(color, horizontalHandLayout)
                                                                    local rgba = Color.fromString(color)
                                                                    rgba.a = 0
                                                                    for _, hand in ipairs(Hands.getHands()) do
                                                                        if hand.getColorTint() == rgba then
                                                                            local horizontal = math.abs(hand.getRotation().y) < 1
                                                                            if horizontal ~= horizontalHandLayout then
                                                                                hand.destruct()
                                                                            end
                                                                        end
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard.onLoad(state)
                                                                    for color, unresolvedContent in pairs(PlayBoard.unresolvedContentByColor) do
                                                                        local alive = true
                                                                        local subState = nil
                                                                        if state.PlayBoard then
                                                                            subState = state.PlayBoard[color]
                                                                            alive = subState ~= nil
                                                                        end
                                                                        if alive then
                                                                            PlayBoard.playBoards[color] = PlayBoard.new(color, unresolvedContent, state, subState)
                                                                        end
                                                                    end
                                                                    PlayBoard.unresolvedContentByColor = nil

                                                                    if state.settings then
                                                                        PlayBoard._transientSetUp(state.settings)
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard.onSave(state)
                                                                    state.PlayBoard = Helper.map(PlayBoard.playBoards, function (color, playBoard)
                                                                        local resourceValues = {}
                                                                        for _, resourceName in ipairs(PlayBoard.ALL_RESOURCE_NAMES) do
                                                                            if playBoard[resourceName] then
                                                                                resourceValues[resourceName] = playBoard[resourceName]:get()
                                                                            end
                                                                        end
                                                                        return {
                                                                            opponent = playBoard.opponent,
                                                                            resources = resourceValues,
                                                                            leader = playBoard.leader and playBoard.leader.name,
                                                                            lastPhase = playBoard.lastPhase,
                                                                            revealed = playBoard.revealed,
                                                                            initialPositions = {
                                                                                dreadnoughtInitialPositions = playBoard.content.dreadnoughtInitialPositions,
                                                                                agentInitialPositions = playBoard.content.agentInitialPositions,
                                                                                spyInitialPositions = playBoard.content.spyInitialPositions,
                                                                                tleilaxTokenInitalPosition = playBoard.content.tleilaxTokenInitalPosition,
                                                                                researchTokenInitalPosition = playBoard.content.researchTokenInitalPosition,
                                                                                firstPlayerInitialPosition = playBoard.content.firstPlayerInitialPosition,
                                                                            },
                                                                        }
                                                                    end)
                                                                end

                                                                ---
                                                                function PlayBoard.generatePosition(playBoard, operation, position)

                                                                    local colorSwitch = function (left, right)
                                                                        if PlayBoard.isLeft(playBoard.color) then
                                                                            return left
                                                                        else
                                                                            return right
                                                                        end
                                                                    end

                                                                    local p = playBoard.content.board.getPosition()
                                                                    if not operation then
                                                                        p = p + position
                                                                    elseif operation == "symmetric" then
                                                                        p = p + colorSwitch(Vector(-position.x, position.y, position.z), position)
                                                                    elseif operation == "offseted" then
                                                                        p = p + colorSwitch(Vector(12.75 + position.x, position.y, position.z), position)
                                                                    else
                                                                        assert("Unknow operation: " .. tostring(operation))
                                                                    end

                                                                    return p
                                                                end

                                                                ---
                                                                function PlayBoard.createTransientZone(playBoard, operation, position, scale)
                                                                    local zone = spawnObject({
                                                                        type = 'ScriptingTrigger',
                                                                        position = PlayBoard.generatePosition(playBoard, operation, position),
                                                                        scale = {scale.x, scale.y, scale.z},
                                                                    })
                                                                    Helper.markAsTransient(zone)
                                                                    return zone
                                                                end

                                                                ---
                                                                function PlayBoard.new(color, unresolvedContent, state, subState)
                                                                    local playBoard = Helper.createClassInstance(PlayBoard, {
                                                                        color = color,
                                                                        score = 0,
                                                                        scorePositions = {},
                                                                    })
                                                                    playBoard.content = Helper.resolveGUIDs(false, unresolvedContent)

                                                                    Helper.noPhysicsNorPlay(
                                                                        playBoard.content.board,
                                                                        playBoard.content.colorband,
                                                                    playBoard.content.endTurnButton)

                                                                    playBoard.content.drawDeckZone = PlayBoard.createTransientZone(playBoard, "offseted", Vector(-10.4, 0.4, 1.5), Vector(2.3, 1, 3.3))
                                                                    playBoard.content.leaderZone = PlayBoard.createTransientZone(playBoard, "offseted", Vector(-6.4, 0.4, 1), Vector(5, 1, 3.5))
                                                                    playBoard.content.discardZone = PlayBoard.createTransientZone(playBoard, "offseted", Vector(-2.4, 0.4, 1.5), Vector(2.3, 1, 3.3))

                                                                    if subState then
                                                                        playBoard.opponent = subState.opponent

                                                                        playBoard.lastPhase = subState.lastPhase
                                                                        playBoard.revealed = subState.revealed

                                                                        -- Zones can't be queried right now.
                                                                        Helper.onceFramesPassed(1).doAfter(function ()
                                                                            playBoard.leaderCard = Helper.getDeckOrCard(playBoard.content.leaderZone)
                                                                            if playBoard.leaderCard then
                                                                                assert(subState.leader)
                                                                                if playBoard.opponent == "rival" then
                                                                                    playBoard.leader = Hagal.newRival(subState.leader)
                                                                                else
                                                                                    playBoard.leader = Leader.newLeader(subState.leader)
                                                                                    if Commander.isCommander(color) then
                                                                                        playBoard.leader = Commander.newCommander(color, playBoard.leader)
                                                                                    end
                                                                                end
                                                                                if playBoard.leader.transientSetUp then
                                                                                    playBoard.leader.transientSetUp(color, state.settings)
                                                                                end
                                                                            end
                                                                        end)

                                                                        if not Commander.isCommander(color) then
                                                                            playBoard.content.dreadnoughtInitialPositions = Helper.mapValues(subState.initialPositions.dreadnoughtInitialPositions, Helper.toVector)
                                                                        end
                                                                        playBoard.content.agentInitialPositions = Helper.mapValues(subState.initialPositions.agentInitialPositions, Helper.toVector)
                                                                        playBoard.content.spyInitialPositions = Helper.mapValues(subState.initialPositions.spyInitialPositions, Helper.toVector)
                                                                        playBoard.content.tleilaxTokenInitalPosition = Helper.toVector(subState.initialPositions.tleilaxTokenInitalPosition)
                                                                        playBoard.content.researchTokenInitalPosition = Helper.toVector(subState.initialPositions.researchTokenInitalPosition)
                                                                        playBoard.content.firstPlayerInitialPosition = Helper.toVector(subState.initialPositions.firstPlayerInitialPosition)

                                                                        if Commander.isCommander(color) then
                                                                            playBoard:_createAllySelector()
                                                                        end
                                                                    else
                                                                        Helper.noPlay(
                                                                            playBoard.content.freighter,
                                                                            playBoard.content.tleilaxToken,
                                                                            playBoard.content.researchToken
                                                                        )
                                                                        Helper.noPhysicsNorPlay(
                                                                            playBoard.content.councilToken,
                                                                            playBoard.content.scoreMarker,
                                                                            playBoard.content.forceMarker
                                                                        )
                                                                    end

                                                                    local snapZones = {
                                                                        firstPlayerMarkerZone = {"FirstPlayerMarker"},
                                                                        drawDeckZone = {"Imperium"},
                                                                        leaderZone = {"Leader", "RivalLeader"},
                                                                        discardZone = {"Imperium"},
                                                                    }
                                                                    local snapPoints = {}
                                                                    for name, tags in pairs(snapZones) do
                                                                        local snapPoint = Helper.createRelativeSnapPointFromZone(playBoard.content.board, playBoard.content[name], true, tags)
                                                                        table.insert(snapPoints, snapPoint)
                                                                    end

                                                                    if not Commander.isCommander(color) then
                                                                        table.insert(snapPoints, {position = playBoard:_newSymmetricBoardPosition(-3.4, 0.2, 0), rotation_snap = true, tags = {"MuadDibObjectiveToken"}})
                                                                        table.insert(snapPoints, {position = playBoard:_newSymmetricBoardPosition(-4.8, 0.2, 0), rotation_snap = true, tags = {"CrysknifeObjectiveToken"}})
                                                                        table.insert(snapPoints, {position = playBoard:_newSymmetricBoardPosition(-6.2, 0.2, 0), rotation_snap = true, tags = {"OrnithopterObjectiveToken"}})
                                                                        table.insert(snapPoints, {position = playBoard:_newSymmetricBoardPosition(-7.6, 0.2, 0), rotation_snap = true, tags = {"JokerObjectiveToken"}})
                                                                    end

                                                                    playBoard.content.board.setSnapPoints(snapPoints)

                                                                    for _, resourceName in ipairs(PlayBoard.ALL_RESOURCE_NAMES) do
                                                                        local token = playBoard.content[resourceName]
                                                                        if token then
                                                                            local value = subState and subState.resources[resourceName] or 0
                                                                            playBoard[resourceName] = Resource.new(token, color, resourceName, value)
                                                                        end
                                                                    end
                                                                    playBoard.agentCardPark = playBoard:_createAgentCardPark()
                                                                    playBoard.revealCardPark = playBoard:_createRevealCardPark()
                                                                    playBoard.agentPark = playBoard:_createAgentPark(subState == nil)
                                                                    playBoard.spyPark = playBoard:_createSpyPark(subState == nil)
                                                                    if not Commander.isCommander(color) then
                                                                        playBoard.dreadnoughtPark = playBoard:_createDreadnoughtPark(subState == nil)
                                                                        playBoard.supplyPark = playBoard:_createSupplyPark(subState == nil)
                                                                    end
                                                                    playBoard:_generatePlayerScoreboardPositions()
                                                                    playBoard.scorePark = playBoard:_createPlayerScorePark()
                                                                    playBoard.techPark = playBoard:_createTechPark()

                                                                    Helper.registerEventListener("locale", function ()
                                                                        playBoard:_createButtons()
                                                                    end)

                                                                    return playBoard
                                                                end

                                                                ---
                                                                function PlayBoard.setUp(settings, activeOpponents)
                                                                    local sequentialActions = {}

                                                                    for color, playBoard in pairs(PlayBoard.playBoards) do
                                                                        playBoard:_cleanUp(false, not settings.riseOfIx, not settings.immortality, settings.numberOfPlayers ~= 6)

                                                                        PlayBoard:_pruneHandsInExcess(playBoard.color, settings.numberOfPlayers <= 4 and settings.horizontalHandLayout)

                                                                        if settings.numberOfPlayers <= 4 then
                                                                            local offsets
                                                                            if settings.horizontalHandLayout then
                                                                                offsets = {
                                                                                    Green = Vector(0, 0, -7.25),
                                                                                    Yellow = Vector(0, 0, 7.25),
                                                                                    Red = Vector(0, 0, -7.25),
                                                                                    Blue = Vector(0, 0, 7.25),
                                                                                }
                                                                            else
                                                                                offsets = {
                                                                                    Green = Vector(0, 0, -9.25),
                                                                                    Yellow = Vector(0, 0, 9.25),
                                                                                    Red = Vector(0, 0, -9.25),
                                                                                    Blue = Vector(0, 0, 9.25),
                                                                                }
                                                                            end
                                                                            local offset = offsets[color]
                                                                            if offset then
                                                                                playBoard:moveAt(offset, true, settings.horizontalHandLayout)
                                                                            end
                                                                        end

                                                                        if activeOpponents[color] then
                                                                            playBoard.opponent = activeOpponents[color]
                                                                            if playBoard.opponent ~= "rival" then
                                                                                playBoard.opponent = "human"
                                                                                if color == "White" then
                                                                                    Deck.generateMuadDibStarterDeck(playBoard.content.drawDeckZone).doAfter(Helper.shuffleDeck)
                                                                                elseif color == "Purple" then
                                                                                    Deck.generateEmperorStarterDeck(playBoard.content.drawDeckZone).doAfter(Helper.shuffleDeck)
                                                                                else
                                                                                    Deck.generateStarterDeck(playBoard.content.drawDeckZone, settings.immortality, settings.epicMode).doAfter(Helper.shuffleDeck)
                                                                                    Deck.generateStarterDiscard(playBoard.content.discardZone, settings.immortality, settings.epicMode)
                                                                                end
                                                                            else
                                                                                if settings.immortality and not Commander.isCommander(color) then
                                                                                    playBoard.content.researchToken.destruct()
                                                                                    playBoard.content.researchToken = nil
                                                                                end
                                                                            end

                                                                            if not Commander.isCommander(color) then
                                                                                if settings.numberOfPlayers ~= 4 or settings.goTo11 then
                                                                                    playBoard.content.fourPlayerVictoryToken.destruct()
                                                                                    playBoard.content.fourPlayerVictoryToken = nil
                                                                                end
                                                                                if settings.numberOfPlayers == 6 then
                                                                                    if Commander.isTeamShaddam(color) then
                                                                                        playBoard.content.makerHook.destruct()
                                                                                        playBoard.content.makerHook = nil
                                                                                    end
                                                                                    table.insert(sequentialActions, Helper.partialApply(ScoreBoard.gainVictoryPoint, color, "ally", 1))
                                                                                end
                                                                                if settings.numberOfPlayers == 6 or not settings.horizontalHandLayout then
                                                                                    -- Support boards are hidden rectangles used to elevate the hand zones in 4 players configuration.
                                                                                    -- Two of them are partially blocking mouse picking on the bottom Commander selector buttons in 6
                                                                                    -- players configuration however.
                                                                                    playBoard.content.supportBoard.destruct()
                                                                                    playBoard.content.supportBoard = nil
                                                                                end
                                                                            else
                                                                                table.insert(sequentialActions, 1, Helper.partialApply(ScoreBoard.gainVictoryPoint, color, "commander", 4))
                                                                            end

                                                                            playBoard:_createButtons()

                                                                            Helper.onceFramesPassed(1).doAfter(function ()
                                                                                playBoard:_updatePlayerScore()
                                                                            end)
                                                                        else
                                                                            playBoard:_tearDown()
                                                                        end
                                                                    end

                                                                    -- The score track for VP tokens is fragile and doesn't handle too well the
                                                                    -- token collisions happening when multiples scores are updated at the same
                                                                    -- time.
                                                                    Helper.repeatChainedAction(#sequentialActions, function ()
                                                                        sequentialActions[1]()
                                                                        table.remove(sequentialActions, 1)
                                                                        return Helper.onceTimeElapsed(1)
                                                                    end)

                                                                    PlayBoard._transientSetUp(settings)

                                                                    if PlayBoard.tq then
                                                                        local continuation = Helper.createContinuation("PlayBoard.setUp")
                                                                        PlayBoard.tq.submit(continuation.run)
                                                                        return continuation
                                                                    else
                                                                        return nil
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard._transientSetUp(settings)
                                                                    -- I don't like it, but at least things are now explicit.
                                                                    Helper.registerEventListener("loaded", function (moduleName)
                                                                        if moduleName == "TurnControl" then
                                                                            for _, playBoard in pairs(PlayBoard._getPlayBoards(true)) do
                                                                                playBoard:_createButtons()
                                                                            end
                                                                        end
                                                                    end)

                                                                    Helper.registerEventListener("phaseStart", function (phase, firstPlayer)
                                                                        if phase == "leaderSelection" or phase == "roundStart" then
                                                                            local playBoard = PlayBoard.getPlayBoard(firstPlayer)
                                                                            MainBoard.getFirstPlayerMarker().setPositionSmooth(playBoard.content.firstPlayerInitialPosition, false, false)
                                                                        end

                                                                        if phase == "roundStart" then

                                                                            if TurnControl.getCurrentRound() == 1 then
                                                                                for _, playBoard in pairs(PlayBoard._getPlayBoards(true)) do
                                                                                    -- Force button creation now that we have all the information to create the Sandworm button.
                                                                                    playBoard:_createButtons()
                                                                                end
                                                                            end

                                                                            for color, playBoard in pairs(PlayBoard._getPlayBoards(true)) do
                                                                                local cardAmount = PlayBoard.hasTech(color, "holtzmanEngine") and 6 or 5
                                                                                playBoard:drawCards(cardAmount)

                                                                                if PlayBoard.hasTech(color, "shuttleFleet") then
                                                                                    playBoard.leader.resources(color, "solari", 2)
                                                                                end

                                                                                -- bloodlines piter round start twisted intrigue draw
                                                                                if PlayBoard.getLeader(color).name == "bl_Piter" then
                                                                                    local twistedIntrigueDeck = getObjectFromGUID("e13c0b")
                                                                                    broadcastToAll(I18N("piterTwistedGenius"), color)
                                                                                    twistedIntrigueDeck.deal(1, color)
                                                                                end
                                                                            end
                                                                        end

                                                                        if phase == "recall" then
                                                                            for _, playBoard in pairs(PlayBoard._getPlayBoards()) do
                                                                                playBoard:_recall()
                                                                            end
                                                                        end
                                                                    end)

                                                                    Helper.registerEventListener("phaseEnd", function (phase)
                                                                        if phase == "leaderSelection" then
                                                                            for color, playBoard in pairs(PlayBoard._getPlayBoards()) do
                                                                                playBoard.leader.doSetUp(color, settings)
                                                                                playBoard.leader.prepare(color, settings)
                                                                                if Commander.isCommander(color) then
                                                                                    playBoard:_createAllySelector()
                                                                                end
                                                                            end
                                                                        elseif phase == "endgame" then
                                                                            MainBoard.getFirstPlayerMarker().destruct()
                                                                        end

                                                                        for _, playBoard in pairs(PlayBoard._getPlayBoards()) do
                                                                            playBoard:_updateInstructionLabel(nil)
                                                                        end

                                                                        PlayBoard._setActivePlayer(nil, nil)
                                                                    end)

                                                                    Helper.registerEventListener("playerTurn", function (phase, color, refreshing)
                                                                        local playBoard = PlayBoard.getPlayBoard(color)

                                                                        if PlayBoard.isHuman(color) and not refreshing then
                                                                            -- FIXME To naive, won't work for multiple agents in a single turn (weirding way).
                                                                            playBoard.alreadyPlayedCards = Helper.filter(Park.getObjects(playBoard.agentCardPark), function (card)
                                                                                return Types.isImperiumCard(card) or Types.isIntrigueCard(card)
                                                                            end)
                                                                        end

                                                                        if phase == "playerTurns" and Commander.isCommander(color) then
                                                                            local sides = {}
                                                                            for _, agent in ipairs(Park.getObjects(PlayBoard.getAgentPark(color))) do
                                                                                if agent.hasTag("left") then
                                                                                    sides.left = true
                                                                                end
                                                                                if agent.hasTag("right") then
                                                                                    sides.right = true
                                                                                end
                                                                            end
                                                                            if #Helper.getKeys(sides) == 1 then
                                                                                Commander.setActivatedAlly(color, sides.left and Commander.getLeftSeatedAlly(color) or Commander.getRightSeatedAlly(color))
                                                                            else
                                                                                Commander.setActivatedAlly(color, nil)
                                                                            end
                                                                        end

                                                                        for otherColor, otherPlayBoard in pairs(PlayBoard._getPlayBoards(true)) do
                                                                            local instruction = (playBoard.leader or Action).instruct(phase, color == otherColor) or "-"
                                                                            otherPlayBoard:_updateInstructionLabel(instruction)
                                                                        end

                                                                        PlayBoard._setActivePlayer(phase, color, refreshing)
                                                                    end)

                                                                    Helper.registerEventListener("combatUpdate", function (forces)
                                                                        PlayBoard.combatPassCountdown = Helper.count(forces, function (color, v)
                                                                            return not PlayBoard.isRival(color) and v > 0
                                                                        end)
                                                                    end)

                                                                    Helper.registerEventListener("agentSent", function (color, spaceName)
                                                                        if PlayBoard.isHuman(color) then
                                                                            -- Do it after the clean up done in TechMarket.
                                                                            Helper.onceFramesPassed(1).doAfter(function ()
                                                                                local cards = PlayBoard.getCardsPlayedThisTurn(color)
                                                                                for _, card in ipairs(cards) do
                                                                                    local cardName = Helper.getID(card)
                                                                                    if cardName == "appropriate" then
                                                                                        if InfluenceTrack.hasFriendship(color, "emperor") then
                                                                                            TechMarket.registerAcquireTechOption(color, cardName .. "TechBuyOption", "solari", 0)
                                                                                        end
                                                                                    elseif cardName == "ixianEngineer" then
                                                                                        TechMarket.registerAcquireTechOption(color, cardName .. "TechBuyOption", "spice", 0)
                                                                                    elseif cardName == "machineCulture" then
                                                                                        TechMarket.registerAcquireTechOption(color, cardName .. "TechBuyOption", "spice", 0)
                                                                                        -- FIXME Find some way to push this into Leader.
                                                                                    elseif cardName == "signetRing" and PlayBoard.getLeader(color).name == "rhomburVernius" then
                                                                                        TechMarket.registerAcquireTechOption(color, "rhomburVerniusTechBuyOption", "spice", 0)
                                                                                    end
                                                                                end
                                                                            end)
                                                                        end
                                                                    end)

                                                                    Helper.registerEventListener("influence", function (faction, color, newRank)
                                                                        if PlayBoard.isHuman(color) then
                                                                            local cards = PlayBoard.getCardsPlayedThisTurn(color)
                                                                            for _, card in ipairs(cards) do
                                                                                local cardName = Helper.getID(card)
                                                                                if cardName == "appropriate" then
                                                                                    if InfluenceTrack.hasFriendship(color, "emperor") then
                                                                                        TechMarket.registerAcquireTechOption(color, cardName .. "TechBuyOption", "solari", 0)
                                                                                    end
                                                                                end
                                                                            end
                                                                        end
                                                                    end)

                                                                    for _, playBoard in pairs(PlayBoard._getPlayBoards()) do
                                                                        playBoard.content.completedContractBag.createButton({
                                                                            click_function = Helper.registerGlobalCallback(),
                                                                            label = "",
                                                                            -- bloodlines changed from 1 to 0.9
                                                                            -- position = Vector(0, 0.1, 1),
                                                                            position = Vector(0, 0.1, 0.9),
                                                                            width = 0,
                                                                            height = 0,
                                                                            font_size = 400,
                                                                            font_color = "White"
                                                                        })
                                                                        PlayBoard._updateBagCounts(playBoard.content.completedContractBag)

                                                                        local InstructionTextAnchorPosition = playBoard.content.board.getPosition() + playBoard:_newSymmetricBoardPosition(8, -0.5, 3.5)
                                                                        Helper.createTransientAnchor("InstructionTextAnchor", InstructionTextAnchorPosition).doAfter(function (anchor)
                                                                            playBoard.instructionTextAnchor = anchor
                                                                        end)
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard:_updateInstructionLabel(instruction)
                                                                    if self.instructionTextAnchor then
                                                                        Helper.clearButtons(self.instructionTextAnchor)
                                                                        if instruction then
                                                                            Helper.createAbsoluteButtonWithRoundness(self.instructionTextAnchor, 1, {
                                                                                click_function = Helper.registerGlobalCallback(),
                                                                                label = instruction,
                                                                                position = self.instructionTextAnchor.getPosition() + Vector(0, 0.7, 0),
                                                                                width = 0,
                                                                                height = 0,
                                                                                font_size = 200,
                                                                                scale = Vector(1, 1, 1),
                                                                                color = {0, 0, 0, 0.90},
                                                                            font_color = Color.fromString("White")})
                                                                        end
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard:_recall()
                                                                    local minimicFilm = PlayBoard.hasTech(self.color, "minimicFilm")
                                                                    -- bloodlines tech self destroying messages
                                                                    local bl_SelfDestroyingMessages = PlayBoard.hasTech(self.color, "bl_SelfDestroyingMessages")
                                                                    -- bloodlines y'rkoon persuasion navigation card (tagged as tech)
                                                                    local bl_YrkoonPersuasion = PlayBoard.hasTech(self.color, "bl_YrkoonPersuasion")
                                                                    local restrictedOrdnance = PlayBoard.hasTech(self.color, "restrictedOrdnance")
                                                                    local councilSeat = PlayBoard.hasHighCouncilSeat(self.color)
                                                                    local swordmasterBonus = TurnControl.getPlayerCount() == 6 and PlayBoard.hasSwordmaster(self.color)

                                                                    self.revealed = false
                                                                    self.persuasion:set((councilSeat and 2 or 0) + (minimicFilm and 1 or 0) + (bl_SelfDestroyingMessages and 1 or 0) + (bl_YrkoonPersuasion and 1 or 0))
                                                                    self.strength:set(((restrictedOrdnance and councilSeat) and 4 or 0) + (swordmasterBonus and 2 or 0))

                                                                    self:_createButtons()

                                                                    local stackHeight = 0
                                                                    local nextDiscardPosition = function ()
                                                                        stackHeight = stackHeight + 1
                                                                        return self.content.discardZone.getPosition() + Vector(0, stackHeight * 0.5, 0)
                                                                    end

                                                                    -- Send all played cards to the discard, save those which shouldn't.
                                                                    Helper.forEach(Helper.filter(Park.getObjects(self.agentCardPark), Types.isImperiumCard), function (_, card)
                                                                        local cardName = Helper.getID(card)
                                                                        if cardName == "foldspace" then
                                                                            --card.setPosition(Reserve.foldspaceSlotZone.getPosition())
                                                                            self:trash(card)
                                                                        elseif Helper.isElementOf(cardName, {"seekAllies", "emperorSeekAllies", "muadDibSeekAllies", "powerPlay", "treachery", "dangerousRhetoric"}) then
                                                                            self:trash(card)
                                                                        else
                                                                            card.setPosition(nextDiscardPosition())
                                                                        end
                                                                    end)

                                                                    -- Send all revealed cards to the discard.
                                                                    Helper.forEach(Helper.filter(Park.getObjects(self.revealCardPark), Types.isImperiumCard), function (i, card)
                                                                        card.setPosition(nextDiscardPosition())
                                                                    end)

                                                                    -- Send all played intrigues to their discard.
                                                                    local playedIntrigueCards = Helper.concatTables(
                                                                        Helper.filter(Park.getObjects(self.agentCardPark), Types.isIntrigueCard),
                                                                    Helper.filter(Park.getObjects(self.revealCardPark), Types.isIntrigueCard))
                                                                    Helper.forEach(playedIntrigueCards, function (i, card)
                                                                        Intrigue.discard(card)
                                                                    end)

                                                                    -- Flip any used tech.
                                                                    for _, techTile in ipairs(Park.getObjects(self.techPark)) do
                                                                        if Types.isTech(techTile) and techTile.is_face_down then
                                                                            techTile.flip()
                                                                        end
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard._setActivePlayer(phase, color, refreshing)
                                                                    local indexedColors = {"Green", "Yellow", "Blue", "Red", "White", "Purple"}
                                                                    for i, otherColor in ipairs(indexedColors) do
                                                                        local playBoard = PlayBoard.playBoards[otherColor]
                                                                        if playBoard then
                                                                            local effectIndex = 0 -- black index (no color actually)
                                                                            if otherColor == color then
                                                                                effectIndex = i
                                                                                if playBoard.opponent == "rival" and not refreshing then
                                                                                    Hagal.activate(phase, color)
                                                                                end
                                                                            else
                                                                                -- As stated in the rule, reset swords after a reveal for non-combatants.
                                                                                if not refreshing
                                                                                    and TurnControl.getPlayerCount() == 6
                                                                                    and not Commander.isCommander(otherColor)
                                                                                    and playBoard.revealed
                                                                                    and not Combat.isInCombat(otherColor)
                                                                                    then
                                                                                    playBoard.strength:set(0)
                                                                                end
                                                                            end
                                                                            playBoard.content.colorband.setColorTint(effectIndex > 0 and indexedColors[effectIndex] or "Black")
                                                                        end
                                                                    end

                                                                    if phase ~= "leaderSelection" then
                                                                        PlayBoard._updateControlButtons()
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard._updateControlButtons()
                                                                    for color, playBoard in pairs(PlayBoard._getPlayBoards()) do
                                                                        if color == TurnControl.getCurrentPlayer() then
                                                                            local player = Helper.findPlayerByColor(color)
                                                                            if player and player.seated then
                                                                                playBoard:_createEndOfTurnButton()
                                                                            else
                                                                                playBoard:_createTakePlaceButton()
                                                                            end
                                                                        elseif TurnControl.isHotSeatEnabled() then
                                                                            playBoard:_createTakePlaceButton()
                                                                        else
                                                                            Helper.clearButtons(playBoard.content.endTurnButton)
                                                                        end
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard.createEndOfTurnButton(color)
                                                                    PlayBoard.playBoards[color]:_createEndOfTurnButton()
                                                                end

                                                                ---
                                                                function PlayBoard:_createEndOfTurnButton()
                                                                    Helper.clearButtons(self.content.endTurnButton)
                                                                    local action = function ()
                                                                        self.content.endTurnButton.AssetBundle.playTriggerEffect(0)
                                                                        TurnControl.endOfTurn()
                                                                        Helper.clearButtons(self.content.endTurnButton)
                                                                    end
                                                                    local callback = self:_createExclusiveCallback(action)
                                                                    self.content.endTurnButton.createButton({
                                                                        click_function = callback,
                                                                        position = Vector(0, 0.6, 0),
                                                                        label = I18N("endTurn"),
                                                                        width = 1500,
                                                                        height = 1500,
                                                                        color = {0, 0, 0, 0},
                                                                        font_size = 450,
                                                                    font_color = Helper.concatTables(PlayBoard._getTextColor(self.color), {100})})
                                                                end

                                                                ---
                                                                function PlayBoard:_createTakePlaceButton()
                                                                    Helper.clearButtons(self.content.endTurnButton)
                                                                    self.content.endTurnButton.createButton({
                                                                        click_function = self:_createSharedCallback(function (_, color, _)
                                                                            self.content.endTurnButton.AssetBundle.playTriggerEffect(0)
                                                                            local player = Helper.findPlayerByColor(color)
                                                                            if player then
                                                                                player.changeColor(self.color)
                                                                                Helper.onceFramesPassed(1).doAfter(PlayBoard._updateControlButtons)
                                                                            end
                                                                        end),
                                                                        position = Vector(0, 0.6, 0),
                                                                        label = I18N("takePlace"),
                                                                        width = 1500,
                                                                        height = 1500,
                                                                        color = {0, 0, 0, 0},
                                                                        font_size = 450,
                                                                    font_color = Helper.concatTables(PlayBoard._getTextColor(self.color), {100})})
                                                                end

                                                                ---
                                                                function PlayBoard.acceptTurn(phase, color)
                                                                    assert(color)
                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                    local accepted = false

                                                                    if phase == 'leaderSelection' then
                                                                        accepted = playBoard.leader == nil
                                                                    elseif phase == 'gameStart' then
                                                                        accepted = playBoard.lastPhase ~= phase and playBoard.leader.instruct(phase, color)
                                                                    elseif phase == 'roundStart' then
                                                                        accepted = playBoard.lastPhase ~= phase and playBoard.leader.instruct(phase, color)
                                                                    elseif phase == 'playerTurns' then
                                                                        accepted = PlayBoard.couldSendAgentOrReveal(color)
                                                                    elseif phase == 'combat' then
                                                                        if Combat.isInCombat(color) and Combat.isFormalCombatPhaseEnabled() then
                                                                            accepted = PlayBoard.combatPassCountdown > 0 and not PlayBoard.isRival(color) and #PlayBoard._getPotentialCombatIntrigues(color) > 0
                                                                            PlayBoard.combatPassCountdown = PlayBoard.combatPassCountdown - 1
                                                                        end
                                                                    elseif phase == 'combatEnd' then
                                                                        if playBoard.lastPhase ~= phase then
                                                                            accepted = true
                                                                            -- Rival collect their reward their own way.
                                                                            if PlayBoard.isHuman(color) then
                                                                                Helper.onceFramesPassed(1).doAfter(Helper.partialApply(PlayBoard.collectReward, color))
                                                                            end
                                                                        else
                                                                            return false
                                                                        end
                                                                    elseif phase == 'makers' then
                                                                        accepted = false
                                                                    elseif phase == 'recall' then
                                                                        accepted = false
                                                                    elseif phase == 'endgame' then
                                                                        accepted = playBoard.lastPhase ~= phase
                                                                    else
                                                                        accepted = playBoard.lastPhase ~= phase
                                                                    end

                                                                    playBoard.lastPhase = phase
                                                                    return accepted
                                                                end

                                                                ---
                                                                function PlayBoard.withLeader(action)
                                                                    return function (source, color, ...)
                                                                        local validPlayer = Helper.isElementOf(color, PlayBoard.getActivePlayBoardColors())
                                                                        if validPlayer then
                                                                            local leader = PlayBoard.getLeader(color)
                                                                            if leader then
                                                                                if not Commander.isCommander(color) or Commander.getActivatedAlly(color) then
                                                                                    -- Replace the source by the leader.
                                                                                    action(leader, color, ...)
                                                                                else
                                                                                    Dialog.broadcastToColor(I18N('noAlly'), color, "Purple")
                                                                                end
                                                                            else
                                                                                Dialog.broadcastToColor(I18N('noLeader'), color, "Purple")
                                                                            end
                                                                        else
                                                                            Dialog.broadcastToColor(I18N('noTouch'), color, "Purple")
                                                                        end
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard.collectReward(color)
                                                                    local conflictName = Combat.getCurrentConflictName()
                                                                    local rank = Combat.getRank(color).value
                                                                    local hasSandworms = Combat.hasSandworms(color)
                                                                    ConflictCard.collectReward(color, conflictName, rank, hasSandworms).doAfter(function ()
                                                                        if rank == 1 then
                                                                            local leader = PlayBoard.getLeader(color)
                                                                            if PlayBoard.hasTech(color, "windtraps") then
                                                                                leader.resources(color, "water", 1)
                                                                            end
                                                                            -- bloodlines tech planetary array
                                                                            if PlayBoard.hasTech(color, "bl_PlanetaryArray") then
                                                                                leader.drawImperiumCards(color, 1)
                                                                            end
                                                                            local dreadnoughts = Combat.getDreadnoughtsInConflict(color)
                                                                            if #dreadnoughts > 0 then
                                                                                Dialog.showInfoDialog(color, I18N("dreadnoughtMandatoryOccupation"))
                                                                            end
                                                                        end
                                                                    end)
                                                                end

                                                                ---
                                                                function PlayBoard.getPlayBoard(color)
                                                                    assert(color)
                                                                    assert(#Helper.getKeys(PlayBoard.playBoards) > 0, "No playBoard at all: too soon!")
                                                                    local playBoard = PlayBoard.playBoards[color]
                                                                    assert(playBoard, "No playBoard for color " .. tostring(color))
                                                                    return playBoard
                                                                end

                                                                ---
                                                                function PlayBoard._getPlayBoards(filterOutRival)
                                                                    assert(#Helper.getKeys(PlayBoard.playBoards) > 0, "No playBoard at all: too soon!")
                                                                    local filteredPlayBoards = {}
                                                                    for color, playBoard in pairs(PlayBoard.playBoards) do
                                                                        if playBoard.opponent and (not filterOutRival or playBoard.opponent ~= "rival") then
                                                                            filteredPlayBoards[color] = playBoard
                                                                        end
                                                                    end
                                                                    assert(#Helper.getKeys(filteredPlayBoards) > 0, "No playBoard at all in the end: still too soon! (Lazy PlayBoard setUp?)")
                                                                    return filteredPlayBoards
                                                                end

                                                                ---
                                                                function PlayBoard.getActivePlayBoardColors(filterOutRival)
                                                                    return Helper.getKeys(PlayBoard._getPlayBoards(filterOutRival))
                                                                end

                                                                ---
                                                                function PlayBoard._getBoard(color)
                                                                    return PlayBoard.getContent(color).board
                                                                end

                                                                ---
                                                                function PlayBoard:_createAgentCardPark()
                                                                    local origin = PlayBoard.generatePosition(self, "symmetric", Vector(-9.5, 0.2, -3.2))
                                                                    local step = PlayBoard.isLeft(self.color) and - 2.5 or 2.5

                                                                    local slots = {}
                                                                    for i = 0, 5 do
                                                                        table.insert(slots, origin + Vector(i * step, 0, 0))
                                                                    end

                                                                    local park = Park.createCommonPark({"Imperium", "Intrigue"}, slots, Vector(2.4, 0.5, 3.2), Vector(0, 180, 0), true)
                                                                    park.tagUnion = true
                                                                    park.smooth = false
                                                                    return park
                                                                end

                                                                ---
                                                                function PlayBoard:_createRevealCardPark()
                                                                    local origin = PlayBoard.generatePosition(self, "symmetric", Vector(-9.5, 0.2, -3.2))
                                                                    local step = PlayBoard.isLeft(self.color) and - 2.5 or 2.5

                                                                    local bottomSlots = {}
                                                                    for i = 0, 8 do
                                                                        table.insert(bottomSlots, origin + Vector(i * step, 0, -4))
                                                                    end
                                                                    local bottomZone = Park.createTransientBoundingZone(0, Vector(2.4, 0.5, 3.2), bottomSlots)
                                                                    local topSlots = {}
                                                                    for i = 8, 6, -1 do
                                                                        table.insert(topSlots, origin + Vector(i * step, 0, 0))
                                                                    end
                                                                    local topZone = Park.createTransientBoundingZone(0, Vector(2.4, 0.5, 3.2), topSlots)

                                                                    local slots = Helper.concatTables(bottomSlots, topSlots)

                                                                    local park = Park.createCommonPark({"Imperium", "Intrigue"}, slots, nil, Vector(0, 180, 0), true, {bottomZone, topZone})
                                                                    park.tagUnion = true
                                                                    park.smooth = false
                                                                    return park
                                                                end

                                                                ---
                                                                function PlayBoard:_createAgentPark(firstTime)
                                                                    -- Extrapolate the other positions (for the swordmaster)
                                                                    -- from the positions of the two existing agents.
                                                                    assert(#self.content.agentInitialPositions == 2)
                                                                    -- Copy does matter (since move update the positions).
                                                                    local p1 = self.content.agentInitialPositions[1]:copy()
                                                                    local p2 = self.content.agentInitialPositions[2]:copy()
                                                                    local slots = {
                                                                        p1,
                                                                        p2,
                                                                        p2 + (p2 - p1),
                                                                    }

                                                                    local park = Park.createCommonPark({"Agent"}, slots, Vector(0.75, 3, 0.75))
                                                                    -- Helping psychorigid players migrate from immorality.
                                                                    park.locked = true
                                                                    if firstTime then
                                                                        for i, agent in ipairs(self.content.agents) do
                                                                            agent.setPosition(slots[i])
                                                                        end
                                                                    end
                                                                    return park
                                                                end

                                                                ---
                                                                function PlayBoard:_createSpyPark(firstTime)
                                                                    assert(#self.content.spyInitialPositions == 3)
                                                                    local slots = Helper.mapValues(self.content.spyInitialPositions, function (slot)
                                                                        return slot:copy()
                                                                    end)
                                                                    local park = Park.createCommonPark({"Spy"}, slots, Vector(0.75, 1, 0.75))
                                                                    if firstTime then
                                                                        for i, spy in ipairs(self.content.spies) do
                                                                            spy.setPosition(slots[i])
                                                                        end
                                                                    end
                                                                    return park
                                                                end

                                                                ---
                                                                function PlayBoard:_createDreadnoughtPark(firstTime)
                                                                    -- bloodlines sardaukar commanders changed to 7
                                                                    assert(#self.content.dreadnoughtInitialPositions == 7)
                                                                    local slots = Helper.mapValues(self.content.dreadnoughtInitialPositions, function (slot)
                                                                        return slot:copy()
                                                                    end)
                                                                    -- bloodlines sardaukar commanders added tag to snaps and park.tagUnion = true
                                                                    local park = Park.createCommonPark({"Dreadnought", "SardaukarCommander"}, slots, Vector(1, 2, 1))
                                                                    park.tagUnion = true
                                                                    if firstTime then
                                                                        for i, dreadnought in ipairs(self.content.dreadnoughts) do
                                                                            dreadnought.setPosition(self.content.dreadnoughtInitialPositions[i])
                                                                        end
                                                                    end
                                                                    return park
                                                                end

                                                                ---
                                                                function PlayBoard:_createSupplyPark(firstTime)
                                                                    local origin = PlayBoard.generatePosition(self, "symmetric", Vector(0.5, 0, 2))

                                                                    local allSlots = {}
                                                                    local slots = {}
                                                                    for i = 1, 4 do
                                                                        for j = 1, 4 do
                                                                            local x = (i - 2.5) * 0.5
                                                                            local z = (j - 2.5) * 0.5
                                                                            local slot = Vector(x, 0.37, z):rotateOver('y', -45) + origin
                                                                            table.insert(allSlots, slot)
                                                                            if i > 2 or j > 2 then
                                                                                table.insert(slots, slot)
                                                                            end
                                                                        end
                                                                    end

                                                                    local supplyZone = Park.createTransientBoundingZone(45, Vector(0.5, 0.5, 0.5), allSlots)

                                                                    if firstTime then
                                                                        for i, troop in ipairs(self.content.troops) do
                                                                            troop.setLock(true)
                                                                            troop.setPosition(slots[i])
                                                                            troop.setRotation(Vector(0, 45, 0))
                                                                        end
                                                                    end

                                                                    return Park.createPark(
                                                                        "Supply" .. self.color,
                                                                        slots,
                                                                        Vector(0, -45, 0),
                                                                        {supplyZone},
                                                                        {"Troop", self.color},
                                                                        nil,
                                                                        true,
                                                                    true)
                                                                end

                                                                ---
                                                                function PlayBoard:_createTechPark()
                                                                    local origin = PlayBoard.generatePosition(self, "symmetric", Vector(-0.45, 0, 3.6))
                                                                    local color = self.color
                                                                    local slots = {}

                                                                    for h = 1, 3 do
                                                                        -- bloodlines tech park 4 columns
                                                                        for i = 1, 4 do
                                                                            for j = 3, 1, -1 do
                                                                                local x
                                                                                if i == 1 or i == 2 then
                                                                                    x = (i - 1.5) * 3 + 6
                                                                                elseif i == 3 then
                                                                                    -- bloodlines sardaukar commander skills 3rd column reduced spacing
                                                                                    x = (i - 1.5) * 2.48 + 6
                                                                                else
                                                                                    -- bloodlines sardaukar commander skills 4th column reduced spacing
                                                                                    x = (i - 1.5) * 2.16 + 6
                                                                                end

                                                                                if PlayBoard.isLeft(color) then
                                                                                    x = -x
                                                                                end

                                                                                local z = (j - 2) * 2 + 0.4
                                                                                local slot = Vector(x, 0.5 * h - 0.3, z) + origin
                                                                                table.insert(slots, slot)
                                                                            end
                                                                        end
                                                                    end

                                                                    -- bloodlines sardaukar commander skills added tag
                                                                    local park = Park.createCommonPark({"Tech", "Contract", "SardaukarSkill"}, slots, Vector(3, 1, 2), nil)
                                                                    park.tagUnion = true
                                                                    return park
                                                                end

                                                                ---
                                                                function PlayBoard:_generatePlayerScoreboardPositions()
                                                                    assert(self.content.scoreMarker, self.color .. ": no score marker!")
                                                                    local origin = self.content.scoreMarkerInitialPosition

                                                                    -- Avoid collision between markers by giving a different height to each.
                                                                    local heights = {
                                                                        Green = 1,
                                                                        Yellow = 1.5,
                                                                        Blue = 2,
                                                                        Red = 2.5,
                                                                        White = 3,
                                                                        Purple = 3.5,
                                                                    }

                                                                    self.scorePositions = {}
                                                                    for i = 0, 14 do
                                                                        self.scorePositions[i] = {
                                                                            origin.x,
                                                                            3 + heights[self.color],
                                                                            origin.z + i * 1.185
                                                                        }
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard:_createPlayerScorePark()
                                                                    local origin = self:_newSymmetricBoardPosition(-11.2, 0.20, -8.10) + self.content.board.getPosition()

                                                                    local direction = 1
                                                                    if PlayBoard.isLeft(self.color) then
                                                                        direction = -1
                                                                    end

                                                                    local slots = {}
                                                                    for i = 1, 18 do
                                                                        slots[i] = Vector(
                                                                            origin.x + (i - 1) * 1.075 * direction,
                                                                            origin.y,
                                                                        origin.z)
                                                                    end

                                                                    return Park.createCommonPark({"VictoryPointToken"}, slots, Vector(1, 0.2, 1), Vector(0, 180, 0))
                                                                end

                                                                ---
                                                                function PlayBoard:_updatePlayerScore()
                                                                    if self.content.scoreMarker then
                                                                        local rectifiedScore = self:getScore()
                                                                        rectifiedScore = rectifiedScore > 13 and rectifiedScore - 10 or rectifiedScore
                                                                        local scoreMarker = self.content.scoreMarker
                                                                        scoreMarker.setLock(false)
                                                                        scoreMarker.setPositionSmooth(self.scorePositions[rectifiedScore])
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard.onObjectEnterZone(zone, object)
                                                                    for color, playBoard in pairs(PlayBoard.playBoards) do
                                                                        if playBoard.opponent and playBoard.scorePark then
                                                                            if Helper.isElementOf(zone, Park.getZones(playBoard.scorePark)) then
                                                                                if Types.isVictoryPointToken(object) then
                                                                                    playBoard:_updatePlayerScore()
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard.onObjectLeaveZone(zone, object)
                                                                    for _, playBoard in pairs(PlayBoard.playBoards) do
                                                                        if playBoard.opponent and playBoard.scorePark then
                                                                            if Helper.isElementOf(zone, Park.getZones(playBoard.scorePark)) then
                                                                                if Types.isVictoryPointToken(object) then
                                                                                    playBoard:_updatePlayerScore()
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard:_tearDown()
                                                                    self:_cleanUp(true, true, true, true, true)
                                                                    PlayBoard.playBoards[self.color] = nil
                                                                end

                                                                ---
                                                                function PlayBoard:_cleanUp(base, ix, immortality, teamMode, full)
                                                                    local content = self.content

                                                                    local toBeRemoved = {}

                                                                    local collect = function (childName)
                                                                        local child = content[childName]
                                                                        if child then
                                                                            if type(child) == "table" then
                                                                                for _, leafChild in ipairs(child) do
                                                                                    table.insert(toBeRemoved, leafChild)
                                                                                end
                                                                            else
                                                                                table.insert(toBeRemoved, child)
                                                                            end
                                                                            content[childName] = nil
                                                                        end
                                                                    end

                                                                    if base then
                                                                        collect("councilToken")
                                                                        collect("scoreMarker")
                                                                        collect("endTurnButton")
                                                                        collect("drawDeckZone")
                                                                        collect("leaderZone")
                                                                        collect("discardZone")
                                                                        collect("firstPlayerMarkerZone")

                                                                        collect("spice")
                                                                        collect("solari")
                                                                        collect("water")
                                                                        collect("strength")
                                                                        collect("persuasion")
                                                                        collect("trash")
                                                                        collect("completedContractBag")

                                                                        collect("agents")
                                                                        collect("swordmaster")
                                                                        collect("swordmasterBonusToken")
                                                                        collect("spies")

                                                                        if not Commander.isCommander(self.color) then
                                                                            collect("controlMarkerBag")
                                                                            collect("forceMarker")
                                                                            collect("fourPlayerVictoryToken")
                                                                            collect("troops")
                                                                            collect("makerHook")
                                                                        end
                                                                    end

                                                                    if teamMode then
                                                                        collect("swordmasterBonusToken")
                                                                    end

                                                                    if ix then
                                                                        if not Commander.isCommander(self.color) then
                                                                            collect("dreadnoughts")
                                                                            collect("freighter")
                                                                        end
                                                                    end

                                                                    if immortality then
                                                                        if not Commander.isCommander(self.color) then
                                                                            collect("tleilaxToken")
                                                                            collect("researchToken")
                                                                        end
                                                                        collect("atomicsToken")
                                                                    end

                                                                    if full then
                                                                        self:_clearButtons()

                                                                        if Commander.isCommander(self.color) then
                                                                            collect("board")
                                                                            collect("colorband")

                                                                            local parkNames = {
                                                                                "agentCardPark",
                                                                                "revealCardPark",
                                                                                "agentPark",
                                                                                "spyPark",
                                                                                "techPark",
                                                                                "scorePark",
                                                                            }

                                                                            for _, parkName in ipairs(parkNames) do
                                                                                local park = self[parkName]
                                                                                self[parkName] = nil
                                                                                if park then
                                                                                    table.insert(toBeRemoved, park.anchor)
                                                                                    for _, zone in ipairs(Park.getZones(park)) do
                                                                                        table.insert(toBeRemoved, zone)
                                                                                    end
                                                                                end
                                                                            end

                                                                            local handTransform = Player[self.color].getHandTransform()
                                                                            if handTransform then
                                                                                for _, hand in ipairs(Hands.getHands()) do
                                                                                    if hand.getPosition() == handTransform.position then
                                                                                        hand.destruct()
                                                                                        break
                                                                                    end
                                                                                end
                                                                            end

                                                                            -- Only remove the commander's influence tokens since they are on their own boards.
                                                                            for _, object in ipairs(getObjects()) do
                                                                                if object.hasTag("InfluenceTokens") and object.hasTag(self.color) then
                                                                                    table.insert(toBeRemoved, object)
                                                                                end
                                                                            end
                                                                        end
                                                                    end

                                                                    for _, object in ipairs(toBeRemoved) do
                                                                        assert(object)
                                                                        object.interactable = true
                                                                        object.destruct()
                                                                    end

                                                                    content = {}
                                                                end

                                                                ---
                                                                function PlayBoard.findBoardColor(board)
                                                                    for color, _ in pairs(PlayBoard.playBoards) do
                                                                        if PlayBoard._getBoard(color) == board then
                                                                            return color
                                                                        end
                                                                    end
                                                                    return nil
                                                                end

                                                                ---
                                                                function PlayBoard:_createExclusiveCallback(innerCallback)
                                                                    return Helper.registerGlobalCallback(function (object, color, altClick)
                                                                        if self.leader and self.color == color or PlayBoard.isRival(self.color) or TurnControl.isHotSeatEnabled() then
                                                                            if not self.buttonsDisabled then
                                                                                self.buttonsDisabled = true
                                                                                Helper.onceTimeElapsed(0.5).doAfter(function ()
                                                                                    self.buttonsDisabled = false
                                                                                end)
                                                                                innerCallback(object, self.color, altClick)
                                                                            end
                                                                        else
                                                                            Dialog.broadcastToColor(I18N('noTouch'), color, "Purple")
                                                                        end
                                                                    end)
                                                                end

                                                                ---
                                                                function PlayBoard:_createSharedCallback(innerCallback)
                                                                    return Helper.registerGlobalCallback(function (object, color, altClick)
                                                                        local legitimateColors = Helper.mapValues(
                                                                            TurnControl.getLegitimatePlayers(self.color),
                                                                        Helper.field("color"))
                                                                        if Helper.isElementOf(color, legitimateColors) then
                                                                            if not self.buttonsDisabled then
                                                                                self.buttonsDisabled = true
                                                                                Helper.onceTimeElapsed(0.5).doAfter(function ()
                                                                                    self.buttonsDisabled = false
                                                                                end)
                                                                                innerCallback(object, color, altClick)
                                                                            end
                                                                        else
                                                                            Dialog.broadcastToColor(I18N('noTouch'), color, "Purple")
                                                                        end
                                                                    end)
                                                                end

                                                                ---
                                                                function PlayBoard:_clearButtons()
                                                                    Helper.clearButtons(self.content.board)
                                                                    if self.content.atomicsToken then
                                                                        Helper.clearButtons(self.content.atomicsToken)
                                                                    end
                                                                end

                                                                ---
                                                                function PlayBoard._getTextColor(color)
                                                                    local fontColor = {0.9, 0.9, 0.9}
                                                                    if color == "Green" or color == "Yellow" or color == "White" then
                                                                        fontColor = {0.1, 0.1, 0.1}
                                                                    end
                                                                    return fontColor
                                                                end

                                                                ---
                                                                function PlayBoard:_createButtons()
                                                                    self:_clearButtons()

                                                                    local chromae = {
                                                                        Red = "Red",
                                                                        Blue = "Blue",
                                                                        Green = "Green",
                                                                        Yellow = "Yellow",
                                                                        White = "White",
                                                                        Purple = "Purple",
                                                                    }
                                                                    local chroma = chromae[self.color]

                                                                    local fontColor = PlayBoard._getTextColor(self.color)

                                                                    local board = self.content.board

                                                                    if TurnControl.getCurrentRound() > 0 then
                                                                        board.createButton({
                                                                            click_function = self:_createExclusiveCallback(function (_, _, altClick)
                                                                                if PlayBoard.hasMakerHook(self.color) then
                                                                                    -- bloodlines liet sandworm button
                                                                                    if PlayBoard.getLeader(self.color).name == "bl_Liet" then
                                                                                        broadcastToAll(I18N("lietHatesTheMaker"), self.color)
                                                                                        self.leader.resources(self.color, "spice", 1)
                                                                                        self.leader.drawIntrigues(self.color, 1)
                                                                                    else
                                                                                        Combat.callSandworm(self.color, altClick and - 1 or 1)
                                                                                    end
                                                                                else
                                                                                    -- TODO Confirmation popup?
                                                                                    Combat.callSandworm(self.color, altClick and - 1 or 1)
                                                                                end
                                                                            end),
                                                                            label = I18N("sandwormButton"),
                                                                            position = self:_newSymmetricBoardPosition(-10.4, 0.2, 4),
                                                                            rotation = self:_newSymmetricBoardRotation(0, 0, 0),
                                                                            width = 700,
                                                                            height = 400,
                                                                            font_size = 120,
                                                                            color = chroma,
                                                                            font_color = fontColor
                                                                        })

                                                                        -- bloodlines sardaukar commander recruit button
                                                                        board.createButton({
                                                                            click_function = self:_createExclusiveCallback(function (_, _, altClick)
                                                                                local garrisonPark = Combat.dreadnoughtParks[self.color]
                                                                                local playerAreaPark = PlayBoard.getDreadnoughtPark(self.color)

                                                                                if altClick then
                                                                                    local commanderFound = false
                                                                                    -- move sardaukar commanders from garrison to player area in player area on alt-click
                                                                                    if PlayBoard.hasTech(self.color, "bl_SardaukarHighCommand") then
                                                                                        for _, object in ipairs(Park.getObjects(garrisonPark)) do
                                                                                            if Types.isUnit(object, self.color) then
                                                                                                if Types.isSardaukarCommander(object, self.color) then
                                                                                                    if not commanderFound then
                                                                                                        Park.putObject(object, playerAreaPark)
                                                                                                        broadcastToAll(I18N("undoSupplySardaukarCommander"), self.color)
                                                                                                        self.leader.resources(self.color, "solari", 1)
                                                                                                        commanderFound = true
                                                                                                    end
                                                                                                end
                                                                                            end
                                                                                        end
                                                                                    else
                                                                                        for _, object in ipairs(Park.getObjects(garrisonPark)) do
                                                                                            if Types.isUnit(object, self.color) then
                                                                                                if Types.isSardaukarCommander(object, self.color) then
                                                                                                    if not commanderFound then
                                                                                                        Park.putObject(object, playerAreaPark)
                                                                                                        broadcastToAll(I18N("undoSupplySardaukarCommander"), self.color)
                                                                                                        self.leader.resources(self.color, "solari", 2)
                                                                                                        commanderFound = true
                                                                                                    end
                                                                                                end
                                                                                            end
                                                                                        end
                                                                                    end

                                                                                    -- no commander found in garrison
                                                                                    if not commanderFound then
                                                                                        Dialog.broadcastToColor(I18N('noCommanderGarrison'), self.color, "Purple")
                                                                                    end
                                                                                else
                                                                                    local commanderFound = false
                                                                                    -- move sardaukar commanders from player area to garrison on regular click
                                                                                    if PlayBoard.hasTech(self.color, "bl_SardaukarHighCommand") then
                                                                                        if PlayBoard.getResource(self.color, "solari"):get() >= 1 then
                                                                                            for _, object in ipairs(Park.getObjects(playerAreaPark)) do
                                                                                                if Types.isUnit(object, self.color) then
                                                                                                    if Types.isSardaukarCommander(object, self.color) then
                                                                                                        if not commanderFound then
                                                                                                            Park.putObject(object, garrisonPark)
                                                                                                            broadcastToAll(I18N("recruitSupplySardaukarCommander"), self.color)
                                                                                                            self.leader.resources(self.color, "solari", -1)
                                                                                                            commanderFound = true
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                            end
                                                                                        else
                                                                                            Dialog.broadcastToColor(I18N('noSolari'), self.color, "Purple")
                                                                                        end
                                                                                    elseif PlayBoard.getResource(self.color, "solari"):get() >= 2 then
                                                                                        for _, object in ipairs(Park.getObjects(playerAreaPark)) do
                                                                                            if Types.isUnit(object, self.color) then
                                                                                                if Types.isSardaukarCommander(object, self.color) then
                                                                                                    if not commanderFound then
                                                                                                        Park.putObject(object, garrisonPark)
                                                                                                        broadcastToAll(I18N("recruitSupplySardaukarCommander"), self.color)
                                                                                                        self.leader.resources(self.color, "solari", -2)
                                                                                                        commanderFound = true
                                                                                                    end
                                                                                                end
                                                                                            end
                                                                                        end
                                                                                    else
                                                                                        Dialog.broadcastToColor(I18N('noSolari'), self.color, "Purple")
                                                                                    end

                                                                                    -- no commander found in player area
                                                                                    if not commanderFound then
                                                                                        Dialog.broadcastToColor(I18N('noCommanderSupply'), self.color, "Purple")
                                                                                    end
                                                                                end
                                                                            end),
                                                                            label = I18N("sardaukarCommanderButton"),
                                                                            position = self:_newSymmetricBoardPosition(-2.3, 0.2, 4),
                                                                            rotation = self:_newSymmetricBoardRotation(0, 0, 0),
                                                                            width = 900,
                                                                            height = 400,
                                                                            font_size = 120,
                                                                            color = chroma,
                                                                            font_color = fontColor
                                                                        })

                                                                        if not PlayBoard.hasHighCouncilSeat(self.color) then
                                                                            Helper.clearButtons(self.content.councilToken)
                                                                            if PlayBoard.isHuman(self.color) then
                                                                                self.content.councilToken.createButton({
                                                                                    click_function = self:_createExclusiveCallback(function ()
                                                                                        Dialog.showConfirmDialog(
                                                                                            self.color,
                                                                                            I18N("takeHighCouncilSeatByForceConfirm"),
                                                                                            function ()
                                                                                                local leader = PlayBoard.getLeader(self.color)
                                                                                                leader.takeHighCouncilSeat(self.color)
                                                                                            end)
                                                                                        end),
                                                                                        position = Vector(0, 0, 0),
                                                                                        tooltip = I18N("takeHighCouncilSeatByForce"),
                                                                                        width = 1500,
                                                                                        height = 1500,
                                                                                        color = {0, 0, 0, 0},
                                                                                    })
                                                                                end
                                                                            end
                                                                        end

                                                                        if PlayBoard.isHuman(self.color) then
                                                                            board.createButton({
                                                                                click_function = self:_createExclusiveCallback(function ()
                                                                                    self:drawCards(1, true)
                                                                                end),
                                                                                label = I18N("drawOneCardButton"),
                                                                                position = self:_newOffsetedBoardPosition(-10.4, 0.2, -0.6),
                                                                                width = 1100,
                                                                                height = 250,
                                                                                font_size = 150,
                                                                                color = chroma,
                                                                                font_color = fontColor
                                                                            })

                                                                            board.createButton({
                                                                                click_function = self:_createExclusiveCallback(function ()
                                                                                    self:_resetDiscard()
                                                                                end),
                                                                                label = I18N("resetDiscardButton"),
                                                                                position = self:_newOffsetedBoardPosition(-2.4, 0.2, -0.6),
                                                                                width = 1400,
                                                                                height = 250,
                                                                                font_size = 150,
                                                                                color = chroma,
                                                                                font_color = fontColor
                                                                            })

                                                                            board.createButton({
                                                                                click_function = Helper.registerGlobalCallback(),
                                                                                label = I18N("agentTurn"),
                                                                                position = self:_newSymmetricBoardPosition(-11.3, 0.2, -3.3),
                                                                                rotation = self:_newSymmetricBoardRotation(0, -90, 0),
                                                                                width = 0,
                                                                                height = 0,
                                                                                font_size = 280,
                                                                                color = {0, 0, 0, 1},
                                                                                font_color = chroma
                                                                            })

                                                                            board.createButton({
                                                                                click_function = self:_createExclusiveCallback(function (_, _, altClick)
                                                                                    if PlayBoard.isHuman(self.color) and not self.revealing then
                                                                                        self:onRevealHand(altClick)
                                                                                    end
                                                                                end),
                                                                                label = I18N("revealHandButton"),
                                                                                position = self:_newSymmetricBoardPosition(-11.3, 0.2, -7.3),
                                                                                rotation = self:_newSymmetricBoardRotation(0, -90, 0),
                                                                                width = 1600,
                                                                                height = 320,
                                                                                font_size = 280,
                                                                                color = chroma,
                                                                                font_color = fontColor,
                                                                            tooltip = I18N("revealHandTooltip")})

                                                                            self:_createNukeButton()
                                                                        end
                                                                    end

                                                                    ---
                                                                    function PlayBoard.onObjectDrop(color, object)
                                                                        local objectiveTags = {
                                                                            "MuadDibObjectiveToken",
                                                                            "CrysknifeObjectiveToken",
                                                                            "OrnithopterObjectiveToken",
                                                                            "JokerObjectiveToken",
                                                                        }
                                                                        for _, objectiveTag in ipairs(objectiveTags) do
                                                                            -- bloodlines disabled joker
                                                                            if object.hasTag(objectiveTag) and objectiveTag ~= "JokerObjectiveToken" then
                                                                                PlayBoard._convertObjectiveTokenPairsIntoVictoryPoints(object)
                                                                                break
                                                                            end
                                                                        end
                                                                    end

                                                                    ---
                                                                    function PlayBoard._convertObjectiveTokenPairsIntoVictoryPoints(object)
                                                                        local tagToName = {
                                                                            MuadDibObjectiveToken = "muadDibVictoryPoint",
                                                                            OrnithopterObjectiveToken = "ornithopterVictoryPoint",
                                                                            CrysknifeObjectiveToken = "crysknifeVictoryPoint",
                                                                            JokerObjectiveToken = "jokerVictoryPoint",
                                                                        }
                                                                        local objectiveTag = object.getTags()[1]
                                                                        for color, playBoard in pairs(PlayBoard.playBoards) do
                                                                            local board = playBoard.content.board
                                                                            for _, snapPoint in ipairs(board.getSnapPoints()) do
                                                                                if Helper.isElementOf(objectiveTag, snapPoint.tags) then
                                                                                    local absoluteSnapPointPosition = board.positionToWorld(snapPoint.position)
                                                                                    local d = Vector.sqrDistance(object.getPosition(), absoluteSnapPointPosition)
                                                                                    if d < 1.5 then
                                                                                        local leader = PlayBoard.getLeader(color)
                                                                                        if not leader then
                                                                                            return
                                                                                        end

                                                                                        local radius = 0.5
                                                                                        local hits = Physics.cast({
                                                                                            origin = absoluteSnapPointPosition,
                                                                                            direction = Vector(0, 1, 0),
                                                                                            type = 2,
                                                                                            size = Vector(radius, radius, radius),
                                                                                            max_distance = 2,
                                                                                        })

                                                                                        local hitTokens = Helper.filter(Helper.mapValues(hits, Helper.field("hit_object")), function (hitObject)
                                                                                            return hitObject.hasTag(objectiveTag)
                                                                                        end)

                                                                                        -- bloodlines disabled joker
                                                                                        while #hitTokens >= 2 and objectiveTag ~= "JokerObjectiveToken" do
                                                                                            for _ = 1, 2 do
                                                                                                hitTokens[1].destruct()
                                                                                                table.remove(hitTokens, 1)
                                                                                            end
                                                                                            leader.gainVictoryPoint(color, tagToName[objectiveTag], 1)
                                                                                        end

                                                                                        break
                                                                                    end
                                                                                end
                                                                            end
                                                                        end
                                                                    end

                                                                    --- The global event handler 'onObjectEnterContainer' automatically calls every
                                                                    --- '<Module>.onObjectEnterContainer' function thanks to 'Module.registerModuleRedirections'
                                                                    --- (see asyncOnLoad in Global.-1.lua).
                                                                    function PlayBoard.onObjectEnterContainer(container, object)
                                                                        PlayBoard._updateBagCounts(container)

                                                                        if object.type == "Card" then
                                                                            for color, playBoard in pairs(PlayBoard._getPlayBoards()) do
                                                                                if container == playBoard.content.trash then
                                                                                    -- The dump function actually accepts any number of arguments and is able to format each of them.
                                                                                    -- Since everything is a string here, simply concatenating things produces the same output (save the additional spaces).
                                                                                    --Helper.dump("The card '" .. Helper.getID(object) .. "'has been trashed in the " .. color .. "trash.")
                                                                                    Reserve.redirectUntrashableCards(container, object)
                                                                                end
                                                                            end
                                                                        end
                                                                    end

                                                                    ---
                                                                    function PlayBoard.onObjectLeaveContainer(container, object)
                                                                        PlayBoard._updateBagCounts(container)
                                                                    end

                                                                    ---
                                                                    function PlayBoard.getOpenContracts(color)
                                                                        local contracts = {}
                                                                        local playBoard = PlayBoard.getPlayBoard(color)
                                                                        for _, contractTile in ipairs(Park.getObjects(playBoard.techPark)) do
                                                                            if Types.isContract(contractTile) and not contractTile.is_face_down then
                                                                                table.insert(contracts, contractTile)
                                                                            end
                                                                        end
                                                                        return contracts
                                                                    end

                                                                    ---
                                                                    function PlayBoard._updateBagCounts(container)
                                                                        for _, playBoard in pairs(PlayBoard.playBoards) do
                                                                            if playBoard.opponent ~= "rival" then
                                                                                if container == playBoard.content.completedContractBag then
                                                                                    local count = #Helper.filter(container.getObjects(), function (element)
                                                                                        return element.tags and Helper.isElementOf("Contract", element.tags)
                                                                                    end)
                                                                                    playBoard.content.completedContractBag.editButton({
                                                                                        index = 0,
                                                                                        label = tostring(count),
                                                                                    })
                                                                                end
                                                                            end
                                                                        end
                                                                    end

                                                                    ---
                                                                    function PlayBoard.getCompletedContractCount(color)
                                                                        local playBoard = PlayBoard.getPlayBoard(color)
                                                                        if playBoard.opponent ~= "rival" then
                                                                            local objets = playBoard.content.completedContractBag.getObjects()
                                                                            return #Helper.filter(objets, function (element)
                                                                                return element.tags and Helper.isElementOf("Contract", element.tags)
                                                                            end)
                                                                        end
                                                                        return 0
                                                                    end

                                                                    ---
                                                                    function PlayBoard:_createNukeButton()
                                                                        if self.content.atomicsToken then
                                                                            self.content.atomicsToken.createButton({
                                                                                click_function = self:_createExclusiveCallback(function ()
                                                                                    if PlayBoard.isHuman(self.color) then
                                                                                        self:_nukeConfirm()
                                                                                    end
                                                                                end),
                                                                                tooltip = I18N('atomics'),
                                                                                position = Vector(0, 0, 0),
                                                                                width = 700,
                                                                                height = 700,
                                                                                scale = Vector(3, 3, 3),
                                                                                font_size = 300,
                                                                                font_color = {1, 1, 1, 100},
                                                                            color = {0, 0, 0, 0}})
                                                                        end
                                                                    end

                                                                    ---
                                                                    function PlayBoard:onRevealHand(brutal)
                                                                        local currentPlayer = TurnControl.getCurrentPlayer()
                                                                        if currentPlayer and currentPlayer ~= self.color then
                                                                            Dialog.broadcastToColor(I18N("revealNotTurn"), self.color, "Pink")
                                                                        else
                                                                            if not self.revealed and self:stillHavePlayableAgents() then
                                                                                self:tryRevealHandEarly(brutal)
                                                                            else
                                                                                self:revealHand(brutal)
                                                                            end
                                                                        end
                                                                    end

                                                                    ---
                                                                    function PlayBoard:tryRevealHandEarly(brutal)
                                                                        local origin = PlayBoard.getPlayBoard(self.color):_newSymmetricBoardPosition(-2, 0.2, -6.5)

                                                                        local board = self.content.board

                                                                        local indexHolder = {}

                                                                        local function reset()
                                                                            self.revealing = false
                                                                            Helper.removeButtons(board, Helper.getValues(indexHolder))
                                                                        end

                                                                        self.revealing = true

                                                                        indexHolder.messageButtonIndex = Helper.createButton(board, {
                                                                            click_function = Helper.registerGlobalCallback(),
                                                                            label = I18N("revealEarlyConfirm"),
                                                                            position = origin,
                                                                            width = 0,
                                                                            height = 0,
                                                                            scale = {0.5, 0.5, 0.5},
                                                                            font_size = 500,
                                                                            font_color = self.color,
                                                                        color = {0, 0, 0, 1}})

                                                                        indexHolder.validateButtonIndex = Helper.createButton(board, {
                                                                            click_function = self:_createExclusiveCallback(function ()
                                                                                reset()
                                                                                self:revealHand(brutal)
                                                                            end),
                                                                            label = I18N('yes'),
                                                                            position = origin + Vector(-1, 0, 1),
                                                                            width = 1000,
                                                                            height = 600,
                                                                            scale = {0.5, 0.5, 0.5},
                                                                            font_size = 500,
                                                                            font_color = {1, 1, 1},
                                                                            color = "Green"
                                                                        })

                                                                        indexHolder.cancelButtonIndex = Helper.createButton(board, {
                                                                            click_function = self:_createExclusiveCallback(reset),
                                                                            label = I18N('no'),
                                                                            position = origin + Vector(1, 0, 1),
                                                                            width = 1000,
                                                                            height = 600,
                                                                            scale = {0.5, 0.5, 0.5},
                                                                            font_size = 500,
                                                                            font_color = {1, 1, 1},
                                                                            color = "Red"
                                                                        })
                                                                    end

                                                                    ---
                                                                    function PlayBoard:revealHand(brutal)
                                                                        PlayBoard._onceCardParkSpread(self.agentCardPark).doAfter(function ()
                                                                            PlayBoard._onceCardParkSpread(self.revealCardPark).doAfter(function ()
                                                                                self:_revealHand(brutal)
                                                                            end)
                                                                        end)
                                                                    end

                                                                    ---
                                                                    function PlayBoard._onceCardParkSpread(park)
                                                                        local continuation = Helper.createContinuation("PlayBoard.spreadCardPark")
                                                                        -- FIXME Useless indirection.
                                                                        local holder = {
                                                                            count = 0
                                                                        }

                                                                        local next = function ()
                                                                            if holder.count == 0 then
                                                                                Helper.onceFramesPassed(1).doAfter(continuation.run)
                                                                            end
                                                                        end

                                                                        local freeSlots = Park.findEmptySlots(park)

                                                                        for _, object in ipairs(Park.getObjects(park)) do
                                                                            if object.type == "Deck" then
                                                                                local cardCound = Helper.getCardCount(object)
                                                                                for _ = 2, cardCound do
                                                                                    if holder.count >= #freeSlots then
                                                                                        break
                                                                                    end
                                                                                    holder.count = holder.count + 1
                                                                                    local p = freeSlots[holder.count]
                                                                                    local parameters = {
                                                                                        position = freeSlots[holder.count],
                                                                                        smooth = false,
                                                                                        -- It matters that the target position is not directly a deck or card.
                                                                                        -- Otherwise, the taken card won't be created and the callback won't be
                                                                                        -- called.
                                                                                        callback_function = function ()
                                                                                            holder.count = holder.count - 1
                                                                                            next()
                                                                                        end
                                                                                    }
                                                                                    object.takeObject(parameters)
                                                                                end
                                                                            end
                                                                        end

                                                                        next()

                                                                        return continuation
                                                                    end

                                                                    ---
                                                                    function PlayBoard:_revealHand(brutal)
                                                                        local playedIntrigues = Helper.filter(Park.getObjects(self.agentCardPark), Types.isIntrigueCard)
                                                                        local playedCards = Helper.filter(Park.getObjects(self.agentCardPark), Types.isImperiumCard)

                                                                        local properCard = function (card)
                                                                            assert(card)
                                                                            if Types.isImperiumCard(card) then
                                                                                --[[
                We leave the cards with a choice (not an option) in the player's hand to simplify
                things and make clear to the player that the card must be manually revealed.
            ]]
                                                                                local choiceOfferingCards = {
                                                                                    "beneGesseritSister",
                                                                                    "undercoverAsset",
                                                                                    "desertPower",
                                                                                    -- bloodlines choice cards
                                                                                    "bl_DeliverLogistics",
                                                                                }
                                                                                if brutal then
                                                                                    choiceOfferingCards = Helper.concatTables(choiceOfferingCards, {
                                                                                        "deliveryAgreement",
                                                                                        "priorityContracts",
                                                                                    })
                                                                                    if not PlayBoard.hasHighCouncilSeat(self.color) then
                                                                                        table.insert(choiceOfferingCards, "corrinthCity")
                                                                                    end
                                                                                end
                                                                                return not Helper.isElementOf(Helper.getID(card), choiceOfferingCards)
                                                                            else
                                                                                return false
                                                                            end
                                                                        end

                                                                        local revealedCards = Helper.filter(Player[self.color].getHandObjects(), properCard)
                                                                        local alreadyRevealedCards = Helper.filter(Park.getObjects(self.revealCardPark), properCard)
                                                                        local allRevealedCards = Helper.concatTables(revealedCards, alreadyRevealedCards)

                                                                        -- FIXME The agent could have been removed (e.g. Kwisatz Haderach)
                                                                        local techNegotiation = MainBoard.hasAgentInSpace("techNegotiation", self.color)
                                                                        local assemblyHall = MainBoard.hasAgentInSpace("assemblyHall", self.color)

                                                                        local minimicFilm = PlayBoard.hasTech(self.color, "minimicFilm")
                                                                        -- bloodlines tech self destroying messages
                                                                        local bl_SelfDestroyingMessages = PlayBoard.hasTech(self.color, "bl_SelfDestroyingMessages")
                                                                        -- bloodlines y'rkoon persuasion navigation card (tagged as tech)
                                                                        local bl_YrkoonPersuasion = PlayBoard.hasTech(self.color, "bl_YrkoonPersuasion")
                                                                        local restrictedOrdnance = PlayBoard.hasTech(self.color, "restrictedOrdnance")
                                                                        local councilSeat = PlayBoard.hasHighCouncilSeat(self.color)
                                                                        local artillery = PlayBoard.hasTech(self.color, "artillery")
                                                                        local swordmasterBonus = TurnControl.getPlayerCount() == 6 and PlayBoard.hasSwordmaster(self.color)

                                                                        local imperiumCardContributions = ImperiumCard.evaluateReveal(self.color, playedCards, allRevealedCards, artillery)

                                                                        self.persuasion:set(
                                                                            (imperiumCardContributions.persuasion or 0) +
                                                                            (techNegotiation and 1 or 0) +
                                                                            (assemblyHall and 1 or 0) +
                                                                            (councilSeat and 2 or 0) +
                                                                            (minimicFilm and 1 or 0) +
                                                                            (bl_SelfDestroyingMessages and 1 or 0) +
                                                                        (bl_YrkoonPersuasion and 1 or 0))
                                                                        -- bloodlines tech self destroying messages and y'rkoon persuasion (previous lines)

                                                                        self.strength:set(
                                                                            (imperiumCardContributions.strength or 0) +
                                                                            ((restrictedOrdnance and councilSeat) and 4 or 0) +
                                                                        (swordmasterBonus and 2 or 0))

                                                                        --Helper.dump("imperiumCardContributions:", imperiumCardContributions)

                                                                        if brutal and not self.revealed then
                                                                            for _, resourceName in ipairs({"spice", "solari", "water"}) do
                                                                                local amount = imperiumCardContributions[resourceName]
                                                                                if amount then
                                                                                    self.leader.resources(self.color, resourceName, amount)
                                                                                end
                                                                            end

                                                                            local intrigues = imperiumCardContributions.intrigues
                                                                            if intrigues then
                                                                                self.leader.drawIntrigues(self.color, intrigues)
                                                                            end

                                                                            local createMove = function (category, to)
                                                                                return function ()
                                                                                    local amount = imperiumCardContributions[category] or 0
                                                                                    if amount > 0 then
                                                                                        self.leader.troops(self.color, "supply", to, amount)
                                                                                        return Park.onceStabilized(Action.getTroopPark(self.color, to))
                                                                                    else
                                                                                        return Helper.fakeContinuation()
                                                                                    end
                                                                                end
                                                                            end

                                                                            Helper.chainActions({
                                                                                createMove("troops", "garrison"),
                                                                                createMove("fighters", "combat"),
                                                                                createMove("negotiators", "negotiation"),
                                                                                createMove("specimens", "tanks"),
                                                                            })
                                                                        end

                                                                        Park.putObjects(revealedCards, self.revealCardPark)

                                                                        Helper.emitEvent("reveal", self.color)

                                                                        -- bloodlines sardaukar commander skill - charismatic
                                                                        local sc_Charismatic = PlayBoard.hasSkill(self.color, "sc_Charismatic")
                                                                        if sc_Charismatic and Combat.hasSardaukarCommander(self.color) then
                                                                            self.leader.resources(self.color, "persuasion", 1)
                                                                        end

                                                                        -- bloodlines sardaukar commander skill - driven
                                                                        local sc_Driven = PlayBoard.hasSkill(self.color, "sc_Driven")
                                                                        if sc_Driven and Combat.hasSardaukarCommander(self.color) then
                                                                            self.leader.resources(self.color, "spice", 1)
                                                                        end

                                                                        -- bloodlines sardaukar commander skill - hardy
                                                                        local sc_Hardy = PlayBoard.hasSkill(self.color, "sc_Hardy")
                                                                        if sc_Hardy and Combat.hasSardaukarCommander(self.color) then
                                                                            Helper.onceFramesPassed(9).doAfter(function ()
                                                                                self.leader.troops(self.color, "supply", "garrison", 1)
                                                                            end)
                                                                        end

                                                                        -- bloodlines tech panopticon
                                                                        local bl_Panopticon = PlayBoard.hasTech(self.color, "bl_Panopticon")
                                                                        if bl_Panopticon then
                                                                            Helper.onceFramesPassed(3).doAfter(function ()
                                                                                self.leader.troops(self.color, "supply", "garrison", 1)
                                                                            end)
                                                                        end

                                                                        -- bloodlines tech training depot
                                                                        local bl_TrainingDepot = PlayBoard.hasTech(self.color, "bl_TrainingDepot")
                                                                        if bl_TrainingDepot and PlayBoard.hasCommand(self.color) then
                                                                            self.strength:change(2)
                                                                        end

                                                                        -- bloodlines tech training depot
                                                                        local bl_DeliveryBay = PlayBoard.hasTech(self.color, "bl_DeliveryBay")
                                                                        if bl_DeliveryBay and PlayBoard.hasCommand(self.color) then
                                                                            self.leader.resources(self.color, "solari", 2)
                                                                        end

                                                                        -- bloodlines command bombast
                                                                        local bl_Bombast = PlayBoard.hasRevealedCard(self.color, "bl_Bombast")
                                                                        if bl_Bombast and PlayBoard.hasCommand(self.color) then
                                                                            self.leader.resources(self.color, "solari", 3)
                                                                        end

                                                                        -- bloodlines command i believe
                                                                        local bl_IBelieve = PlayBoard.hasRevealedCard(self.color, "bl_IBelieve")
                                                                        if bl_IBelieve and PlayBoard.hasCommand(self.color) then
                                                                            Helper.onceFramesPassed(6).doAfter(function ()
                                                                                self.leader.troops(self.color, "supply", "garrison", 2)
                                                                            end)
                                                                        end

                                                                        -- bloodlines command southern faith
                                                                        local bl_SouthernFaith = PlayBoard.hasRevealedCard(self.color, "bl_SouthernFaith")
                                                                        if bl_SouthernFaith and PlayBoard.hasCommand(self.color) then
                                                                            self.leader.resources(self.color, "spice", 2)
                                                                        end

                                                                        self.revealed = true
                                                                    end

                                                                    ---
                                                                    function PlayBoard:stillHavePlayableAgents()
                                                                        return #Park.getObjects(self.agentPark) > 0
                                                                    end

                                                                    ---
                                                                    -- bloodlines command cards
                                                                    function PlayBoard.hasRevealedCard(color, cardName)
                                                                        for _, card in ipairs(PlayBoard.getHandedCards(color)) do
                                                                            if Helper.getID(card) == cardName then
                                                                                return true
                                                                            end
                                                                        end
                                                                        return false
                                                                    end

                                                                    ---
                                                                    function PlayBoard.getCardsPlayedThisTurn(color)
                                                                        local playBoard = PlayBoard.getPlayBoard(color)

                                                                        local playedCards = Helper.filter(Park.getObjects(playBoard.agentCardPark), function (card)
                                                                            return Types.isImperiumCard(card) or Types.isIntrigueCard(card)
                                                                        end)

                                                                        return (Set.newFromList(playedCards) - Set.newFromList(playBoard.alreadyPlayedCards or {})):toList()
                                                                    end

                                                                    ---
                                                                    function PlayBoard.hasPlayedThisTurn(color, cardName)
                                                                        for _, card in ipairs(PlayBoard.getCardsPlayedThisTurn(color)) do
                                                                            if Helper.getID(card) == cardName then
                                                                                return true
                                                                            end
                                                                        end
                                                                        return false
                                                                    end

                                                                    ---
                                                                    function PlayBoard.couldSendAgentOrReveal(color)
                                                                        local playBoard = PlayBoard.getPlayBoard(color)
                                                                        if playBoard.opponent == "rival" then
                                                                            return playBoard:stillHavePlayableAgents()
                                                                        else
                                                                            return not playBoard.revealed
                                                                        end
                                                                    end

                                                                    ---
                                                                    function PlayBoard:tryToDrawCards(count)
                                                                        local continuation = Helper.createContinuation("PlayBoard:tryToDrawCards")

                                                                        if not self.drawCardsCoalescentQueue then

                                                                            local function coalesce(c1, c2)
                                                                                return {
                                                                                    parameteredContinuations = Helper.concatTables(c1.parameteredContinuations, c2.parameteredContinuations),
                                                                                    count = c1.count + c2.count
                                                                                }
                                                                            end

                                                                            local function handle(c)
                                                                                local runAllContinuations = function (_)
                                                                                    for _, parameteredContinuation in ipairs(c.parameteredContinuations) do
                                                                                        parameteredContinuation.continuation.run(parameteredContinuation.parameter)
                                                                                    end
                                                                                end

                                                                                if c.count > 0 then
                                                                                    self:_tryToDrawCards(c.count).doAfter(runAllContinuations)
                                                                                else
                                                                                    runAllContinuations(0)
                                                                                end
                                                                            end

                                                                            self.drawCardsCoalescentQueue = Helper.createCoalescentQueue("draw", 1, coalesce, handle)
                                                                        end

                                                                        self.drawCardsCoalescentQueue.submit({
                                                                            parameteredContinuations = {{continuation = continuation, parameter = count}},
                                                                            count = count
                                                                        })

                                                                        return continuation
                                                                    end

                                                                    ---
                                                                    function PlayBoard:_tryToDrawCards(count)
                                                                        local continuation = Helper.createContinuation("PlayBoard:_tryToDrawCards")

                                                                        local content = self.content
                                                                        local deck = Helper.getDeckOrCard(content.drawDeckZone)
                                                                        local discard = Helper.getDeckOrCard(content.discardZone)

                                                                        local needDiscardReset = Helper.getCardCount(deck) < count
                                                                        local availableCardCount = Helper.getCardCount(deck) + Helper.getCardCount(discard)
                                                                        local notEnoughCards = availableCardCount < count

                                                                        if availableCardCount == 0 then
                                                                            continuation.run(0)
                                                                        elseif needDiscardReset or notEnoughCards then
                                                                            local leaderName = PlayBoard.getLeaderName(self.color)
                                                                            broadcastToAll(I18N("isDecidingToDraw", {leader = leaderName}), "Pink")
                                                                            local maxCount = math.min(count, availableCardCount)
                                                                            Dialog.showYesOrNoDialog(
                                                                                self.color,
                                                                                I18N("warningBeforeDraw", {count = count, maxCount = maxCount}),
                                                                                continuation,
                                                                                function (confirmed)
                                                                                    if confirmed then
                                                                                        self:drawCards(count, false).doAfter(continuation.run)
                                                                                    else
                                                                                        continuation.run(0)
                                                                                    end
                                                                                end)
                                                                            else
                                                                                self:drawCards(count, false).doAfter(continuation.run)
                                                                            end

                                                                            return continuation
                                                                        end

                                                                        ---
                                                                        function PlayBoard:drawCards(count, button)
                                                                            Types.assertIsInteger(count)

                                                                            local continuation = Helper.createContinuation("PlayBoard:drawCards")

                                                                            local deckOrCard = Helper.getDeckOrCard(self.content.drawDeckZone)
                                                                            local drawableCardCount = Helper.getCardCount(deckOrCard)

                                                                            local dealCardCount = math.min(count, drawableCardCount)
                                                                            -- The getCardCount function is ok with nil arg, but we add a check for the sake of VS Code.
                                                                            if deckOrCard and dealCardCount > 0 then
                                                                                if button then
                                                                                    Action.log(I18N("drawObjectsManually", {amount = dealCardCount, object = I18N.agree(dealCardCount, "imperiumCard")}), self.color)
                                                                                end
                                                                                deckOrCard.deal(dealCardCount, self.color)
                                                                            end

                                                                            -- Dealing cards take an unknown amout of time.
                                                                            Helper.onceTimeElapsed(0.5).doAfter(function ()
                                                                                local remainingCardToDrawCount = count - dealCardCount
                                                                                if remainingCardToDrawCount > 0 then
                                                                                    self:_resetDiscard().doAfter(function ()
                                                                                        self:drawCards(remainingCardToDrawCount).doAfter(function (dealOfOtherCardCount)
                                                                                            continuation.run(dealCardCount + dealOfOtherCardCount)
                                                                                        end)
                                                                                    end)
                                                                                else
                                                                                    continuation.run(dealCardCount)
                                                                                end
                                                                            end)

                                                                            return continuation
                                                                        end

                                                                        ---
                                                                        function PlayBoard:_resetDiscard()
                                                                            local continuation = Helper.createContinuation("PlayBoard:_resetDiscard")
                                                                            local discard = Helper.getDeckOrCard(self.content.discardZone)
                                                                            if discard then
                                                                                discard.setRotationSmooth({0, 180, 180}, false, false)
                                                                                discard.setPositionSmooth(self.content.drawDeckZone.getPosition() + Vector(0, 1, 0), false, true)
                                                                                Helper.onceOneDeck(self.content.drawDeckZone).doAfter(function ()
                                                                                    local replenishedDeckOrCard = Helper.getDeckOrCard(self.content.drawDeckZone)
                                                                                    assert(replenishedDeckOrCard)
                                                                                    if replenishedDeckOrCard.type == "Deck" then
                                                                                        Helper.shuffleDeck(replenishedDeckOrCard)
                                                                                        Helper.onceShuffled(replenishedDeckOrCard).doAfter(continuation.run)
                                                                                    else
                                                                                        continuation.run(replenishedDeckOrCard)
                                                                                    end
                                                                                end)
                                                                            else
                                                                                continuation.cancel()
                                                                            end
                                                                            return continuation
                                                                        end

                                                                        ---
                                                                        function PlayBoard:_nukeConfirm()
                                                                            local token = self.content.atomicsToken
                                                                            Helper.clearButtons(token)

                                                                            local function reset()
                                                                                Helper.clearButtons(token)
                                                                                self:_createNukeButton()
                                                                            end

                                                                            Helper.createButton(token, {
                                                                                click_function = self:_createExclusiveCallback(function ()
                                                                                    reset()
                                                                                    self.leader.atomics(self.color)
                                                                                    self.content.atomicsToken.destruct()
                                                                                    self.content.atomicsToken = nil
                                                                                end),
                                                                                label = I18N('yes'),
                                                                                position = Vector(-5, 0, 0),
                                                                                width = 550,
                                                                                height = 350,
                                                                                scale = Vector(3, 3, 3),
                                                                                font_size = 300,
                                                                                font_color = {1, 1, 1},
                                                                                color = "Green"
                                                                            })

                                                                            Helper.createButton(token, {
                                                                                click_function = self:_createExclusiveCallback(function ()
                                                                                    reset()
                                                                                end),
                                                                                label = I18N('no'),
                                                                                position = Vector(5, 0, 0),
                                                                                width = 550,
                                                                                height = 350,
                                                                                scale = Vector(3, 3, 3),
                                                                                font_size = 300,
                                                                                font_color = {1, 1, 1},
                                                                                color = "Red"
                                                                            })
                                                                        end

                                                                        ---
                                                                        function PlayBoard:_createAllySelector()
                                                                            assert(Commander.isCommander(self.color))

                                                                            local p = self.content.board.getPosition() + self:_newSymmetricBoardPosition(0.5, 0, -3)
                                                                            Helper.createTransientAnchor(self.color .. "AllySelector", p).doAfter(function (anchor)

                                                                                Helper.createAbsoluteButtonWithRoundness(anchor, 1, {
                                                                                    click_function = Helper.registerGlobalCallback(),
                                                                                    label = I18N("activatedAlly"),
                                                                                    position = anchor.getPosition() + Vector(0, 0.2, 0),
                                                                                    width = 0,
                                                                                    height = 0,
                                                                                    font_size = 120,
                                                                                    font_color = {0, 0, 0, 100},
                                                                                color = {0, 0, 0, 0}})

                                                                                for i, allyColor in ipairs(Commander.getAllies(self.color)) do
                                                                                    Helper.createAbsoluteButtonWithRoundness(anchor, 1, {
                                                                                        click_function = self:_createExclusiveCallback(function ()
                                                                                            Commander.setActivatedAlly(self.color, allyColor)
                                                                                        end),
                                                                                        label = Helper.chopName(PlayBoard.getLeaderName(allyColor), 2),
                                                                                        position = anchor.getPosition() + Vector(0, 0.2, (i - 1.5) * 1.5),
                                                                                        width = 1600,
                                                                                        height = 300,
                                                                                        font_size = 150,
                                                                                        font_color = PlayBoard._getTextColor(allyColor),
                                                                                    color = Color.fromString("Grey")})
                                                                                end

                                                                                local onAllyChange = function (color, allyColor)
                                                                                    if color == self.color then
                                                                                        for i, otherAllyColor in ipairs(Commander.getAllies(self.color)) do
                                                                                            anchor.editButton({
                                                                                                index = i,
                                                                                                color = Color.fromString(otherAllyColor == allyColor and allyColor or "Grey"),
                                                                                            })
                                                                                        end
                                                                                    end
                                                                                end

                                                                                Helper.registerEventListener("selectAlly", onAllyChange)
                                                                                onAllyChange(self.color, Commander.getActivatedAlly(self.color))
                                                                            end)
                                                                        end

                                                                        ---
                                                                        function PlayBoard.isRival(color)
                                                                            local playerBoard = PlayBoard.getPlayBoard(color)
                                                                            return playerBoard.opponent == "rival"
                                                                        end

                                                                        ---
                                                                        function PlayBoard.isHuman(color)
                                                                            local playerBoard = PlayBoard.getPlayBoard(color)
                                                                            return playerBoard.opponent ~= "rival"
                                                                        end

                                                                        ---
                                                                        function PlayBoard.setLeader(color, leaderCard)
                                                                            Types.assertIsPlayerColor(color)
                                                                            assert(leaderCard)

                                                                            local playBoard = PlayBoard.getPlayBoard(color)
                                                                            if playBoard.opponent == "rival" then
                                                                                assert(leaderCard.hasTag("RivalLeader"))
                                                                                playBoard.leader = Hagal.newRival(Helper.getID(leaderCard))
                                                                            else
                                                                                assert(leaderCard.hasTag("Leader"))
                                                                                playBoard.leader = Leader.newLeader(Helper.getID(leaderCard))
                                                                                if Commander.isCommander(color) then
                                                                                    playBoard.leader = Commander.newCommander(color, playBoard.leader)
                                                                                end
                                                                            end

                                                                            assert(playBoard.leader)
                                                                            local position = playBoard.content.leaderZone.getPosition()
                                                                            leaderCard.setPosition(position)
                                                                            playBoard.leaderCard = leaderCard

                                                                            local continuation = Helper.onceMotionless(leaderCard)

                                                                            continuation.doAfter(function ()
                                                                                Helper.noPhysics(leaderCard)
                                                                                playBoard:_createButtons()
                                                                            end)

                                                                            return continuation
                                                                        end

                                                                        ---
                                                                        function PlayBoard.findLeaderCard(color)
                                                                            local leaderZone = PlayBoard.getContent(color).leaderZone
                                                                            for _, object in ipairs(leaderZone.getObjects(true)) do
                                                                                if object.hasTag("Leader") or object.hasTag("RivalLeader") then
                                                                                    return object
                                                                                end
                                                                            end
                                                                            return nil
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getLeader(color)
                                                                            return PlayBoard.getPlayBoard(color).leader
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getLeaderName(color)
                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                            return leaderCard and leaderCard.getName() or "?"
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getContent(color)
                                                                            local playBoard = PlayBoard.getPlayBoard(color)
                                                                            assert(playBoard, "Unknow player color: " .. tostring(color))
                                                                            return playBoard.content
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getAgentCardPark(color)
                                                                            return PlayBoard.getPlayBoard(color).agentCardPark
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getRevealCardPark(color)
                                                                            return PlayBoard.getPlayBoard(color).revealCardPark
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getAgentPark(color)
                                                                            return PlayBoard.getPlayBoard(color).agentPark
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getSpyPark(color)
                                                                            return PlayBoard.getPlayBoard(color).spyPark
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getDreadnoughtPark(color)
                                                                            return PlayBoard.getPlayBoard(color).dreadnoughtPark
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getSupplyPark(color)
                                                                            return PlayBoard.getPlayBoard(color).supplyPark
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getTechPark(color)
                                                                            return PlayBoard.getPlayBoard(color).techPark
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getScorePark(color)
                                                                            return PlayBoard.getPlayBoard(color).scorePark
                                                                        end

                                                                        ---
                                                                        function PlayBoard:getScore()
                                                                            local score = 0
                                                                            if self.scorePark then
                                                                                for _, object in ipairs(Park.getObjects(self.scorePark)) do
                                                                                    if Types.isVictoryPointToken(object) then
                                                                                        score = score + 1
                                                                                    end
                                                                                end
                                                                            else
                                                                                log("Missing score park for player " .. self.color)
                                                                            end
                                                                            return score
                                                                        end

                                                                        ---
                                                                        function PlayBoard.grantTechTile(color, techTile)
                                                                            return Park.putObject(techTile, PlayBoard.getPlayBoard(color).techPark)
                                                                        end

                                                                        ---
                                                                        function PlayBoard.grantContractTile(color, contractTile)
                                                                            return Park.putObject(contractTile, PlayBoard.getPlayBoard(color).techPark)
                                                                        end

                                                                        ---
                                                                        -- bloodlines sardaukar commanders skill
                                                                        function PlayBoard.grantSkillTile(color, skillTile)
                                                                            return Park.putObject(skillTile, PlayBoard.getPlayBoard(color).techPark)
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getScoreTokens(color)
                                                                            return Park.getObjects(PlayBoard.getPlayBoard(color).scorePark)
                                                                        end

                                                                        ---
                                                                        function PlayBoard.grantScoreToken(color, token)
                                                                            token.setInvisibleTo({})
                                                                            return Park.putObject(token, PlayBoard.getPlayBoard(color).scorePark)
                                                                        end

                                                                        ---
                                                                        function PlayBoard.grantScoreTokenFromBag(color, tokenBag, count)
                                                                            return Park.putObjectFromBag(tokenBag, PlayBoard.getPlayBoard(color).scorePark, count)
                                                                        end

                                                                        ---
                                                                        function PlayBoard.hasTech(color, techName)
                                                                            return PlayBoard.getTech(color, techName) ~= nil
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getTech(color, techName)
                                                                            local techs = Park.getObjects(PlayBoard.getPlayBoard(color).techPark)
                                                                            for _, tech in ipairs(techs) do
                                                                                if Helper.getID(tech) == techName then
                                                                                    return tech
                                                                                end
                                                                            end
                                                                            return nil
                                                                        end

                                                                        ---
                                                                        function PlayBoard.useTech(color, techName)
                                                                            local tech = PlayBoard.getTech(color, techName)
                                                                            if tech and not tech.is_face_down then
                                                                                tech.flip()
                                                                                return true
                                                                            else
                                                                                return false
                                                                            end
                                                                        end

                                                                        ---
                                                                        -- bloodlines sardaukar commander skills
                                                                        function PlayBoard.hasSkill(color, skillName)
                                                                            return PlayBoard.getSkill(color, skillName) ~= nil
                                                                        end

                                                                        ---
                                                                        -- bloodlines sardaukar commander skills
                                                                        function PlayBoard.getSkill(color, skillName)
                                                                            local skills = Park.getObjects(PlayBoard.getPlayBoard(color).techPark)
                                                                            for _, skill in ipairs(skills) do
                                                                                if Helper.getID(skill) == skillName then
                                                                                    return skill
                                                                                end
                                                                            end
                                                                            return nil
                                                                        end

                                                                        ---
                                                                        -- bloodlines command
                                                                        function PlayBoard.hasCommand(color)
                                                                            local playBoard = PlayBoard.getPlayBoard(color)

                                                                            if playBoard.persuasion:get() >= 6 then
                                                                                return true
                                                                            end
                                                                            return false
                                                                        end

                                                                        ---
                                                                        function PlayBoard.hasHighCouncilSeat(color)
                                                                            local token = PlayBoard._getCouncilToken(color)
                                                                            for _, zone in ipairs(Park.getZones(MainBoard.getHighCouncilSeatPark())) do
                                                                                if Helper.contains(zone, token) then
                                                                                    return true
                                                                                end
                                                                            end
                                                                            return false
                                                                        end

                                                                        ---
                                                                        function PlayBoard.takeHighCouncilSeat(color)
                                                                            local token = PlayBoard._getCouncilToken(color)
                                                                            if not PlayBoard.hasHighCouncilSeat(color) then
                                                                                if Park.putObject(token, MainBoard.getHighCouncilSeatPark()) then
                                                                                    Helper.clearButtons(token)
                                                                                    token.interactable = true
                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                    playBoard.persuasion:change(2)
                                                                                    if PlayBoard.hasTech(color, "restrictedOrdnance") then
                                                                                        playBoard.strength:change(4)
                                                                                    end
                                                                                    Helper.emitEvent("highCouncilSeatTaken", color)
                                                                                    return true
                                                                                end
                                                                            end
                                                                            return false
                                                                        end

                                                                        ---
                                                                        function PlayBoard.hasMakerHook(color)
                                                                            local content = PlayBoard.getContent(color)
                                                                            if content.makerHook then
                                                                                local d = content.makerHook.getPosition():distance(Combat.getMakerHookPosition(color))
                                                                                return d < 1
                                                                            else
                                                                                return false
                                                                            end
                                                                        end

                                                                        ---
                                                                        function PlayBoard.canTakeMakerHook(color)
                                                                            local normalOrAllyColor = color
                                                                            if TurnControl.getPlayerCount() == 6 and Commander.isCommander(color) then
                                                                                normalOrAllyColor = Commander.getActivatedAlly(color)
                                                                            end

                                                                            return not PlayBoard.hasMakerHook(normalOrAllyColor) and (TurnControl.getPlayerCount() < 6 or Commander.isTeamMuadDib(normalOrAllyColor))
                                                                        end

                                                                        ---
                                                                        function PlayBoard.takeMakerHook(color)
                                                                            if PlayBoard.canTakeMakerHook(color) then
                                                                                local normalOrAllyColor = color
                                                                                if TurnControl.getPlayerCount() == 6 and Commander.isCommander(color) then
                                                                                    normalOrAllyColor = Commander.getActivatedAlly(color)
                                                                                end

                                                                                local makerHook = PlayBoard._getMakerHook(normalOrAllyColor)
                                                                                makerHook.setPositionSmooth(Combat.getMakerHookPosition(normalOrAllyColor))
                                                                                Helper.onceMotionless(makerHook).doAfter(function ()
                                                                                    Helper.noPlay(makerHook)
                                                                                    Helper.emitEvent("makerHookTaken", normalOrAllyColor)
                                                                                    PlayBoard.getPlayBoard(normalOrAllyColor):_createButtons()

                                                                                    if TurnControl.getPlayerCount() == 6 then
                                                                                        assert(Commander.isTeamMuadDib(normalOrAllyColor))
                                                                                        local otherAllyColor = Commander.getOtherAlly(normalOrAllyColor)
                                                                                        assert(otherAllyColor ~= normalOrAllyColor)
                                                                                        if not PlayBoard.hasMakerHook(otherAllyColor) then
                                                                                            local leader = PlayBoard.getLeader(otherAllyColor)
                                                                                            leader.takeMakerHook(otherAllyColor)
                                                                                        end
                                                                                    end
                                                                                end)
                                                                                return true
                                                                            end
                                                                            return false
                                                                        end

                                                                        ---
                                                                        function PlayBoard.hasSwordmaster(color)
                                                                            local content = PlayBoard.getContent(color)
                                                                            if TurnControl.getPlayerCount() == 6 then
                                                                                return content.swordmasterBonusToken
                                                                                and content.swordmasterBonusToken.getPosition():distance(PlayBoard.swordmasterBonusPositions[color]) < 1
                                                                            else
                                                                                return PlayBoard.isInside(color, content.swordmaster)
                                                                                or MainBoard.isInside(content.swordmaster)
                                                                                or TechMarket.isInside(content.swordmaster)
                                                                            end
                                                                        end

                                                                        ---
                                                                        function PlayBoard.recruitSwordmaster(color)
                                                                            local playBoard = PlayBoard.getPlayBoard(color)
                                                                            if playBoard.content.swordmaster and Park.putObject(playBoard.content.swordmaster, PlayBoard.getAgentPark(color)) then
                                                                                if TurnControl.getPlayerCount() == 6 then
                                                                                    playBoard.content.swordmasterBonusToken.setPosition(PlayBoard.swordmasterBonusPositions[color] + Vector(0, -0.15, 0))
                                                                                    Helper.noPhysics(playBoard.content.swordmasterBonusToken)
                                                                                    playBoard.strength:change(2)
                                                                                end
                                                                                Helper.emitEvent("swordmasterTaken", color)
                                                                                return true
                                                                            else
                                                                                return false
                                                                            end
                                                                        end

                                                                        ---
                                                                        function PlayBoard.destroySwordmaster(color)
                                                                            local playBoard = PlayBoard.getPlayBoard(color)
                                                                            if playBoard.content.swordmaster then
                                                                                --playBoard:trash(playBoard.content.swordmaster)
                                                                                playBoard.content.swordmaster.destruct()
                                                                                playBoard.content.swordmaster = nil
                                                                            end
                                                                        end

                                                                        ---
                                                                        function PlayBoard._getCouncilToken(color)
                                                                            local content = PlayBoard.getContent(color)
                                                                            return content.councilToken
                                                                        end

                                                                        ---
                                                                        function PlayBoard._getMakerHook(color)
                                                                            local content = PlayBoard.getContent(color)
                                                                            return content.makerHook
                                                                        end

                                                                        ---
                                                                        function PlayBoard.getResource(color, resourceName)
                                                                            Types.assertIsResourceName(resourceName)
                                                                            return PlayBoard.getPlayBoard(color)[resourceName]
                                                                        end

                                                                        ---
                                                                        function PlayBoard.giveCard(color, card, isTleilaxuCard)
                                                                            Types.assertIsPlayerColor(color)
                                                                            assert(card)

                                                                            local content = PlayBoard.getContent(color)
                                                                            assert(content)

                                                                            -- Acquire the card (not smoothly to avoid being grabbed by a player hand zone).
                                                                            card.setPosition(content.discardZone.getPosition())
                                                                            printToAll(I18N(isTleilaxuCard and "acquireTleilaxuCard" or "acquireImperiumCard", {card = I18N(Helper.getID(card))}), color)
                                                                            ImperiumCard.applyAcquireEffect(color, card)

                                                                            -- Move it on the top of the content deck if possible and wanted.
                                                                            if (isTleilaxuCard and TleilaxuResearch.hasReachedOneHelix(color)) or PlayBoard.hasTech(color, "spaceport") then
                                                                                Dialog.showYesOrNoDialog(
                                                                                    color,
                                                                                    I18N("dialogCardAbove"),
                                                                                    nil,
                                                                                    function (confirmed)
                                                                                        if confirmed then
                                                                                            Helper.moveCardFromZone(content.discardZone, content.drawDeckZone.getPosition(), Vector(0, 180, 180))
                                                                                        end
                                                                                    end)
                                                                                end
                                                                            end

                                                                            ---
                                                                            function PlayBoard.giveCardFromZone(color, zone, isTleilaxuCard)
                                                                                Types.assertIsPlayerColor(color)

                                                                                local content = PlayBoard.getContent(color)
                                                                                assert(content)

                                                                                -- Acquire the card (not smoothly to avoid being grabbed by a player hand zone).
                                                                                Helper.moveCardFromZone(zone, content.discardZone.getPosition()).doAfter(function (card)
                                                                                    assert(card)
                                                                                    local cardName = I18N(Helper.getID(card))
                                                                                    printToAll(I18N(isTleilaxuCard and "acquireTleilaxuCard" or "acquireImperiumCard", {card = cardName}), color)
                                                                                    ImperiumCard.applyAcquireEffect(color, card)
                                                                                end)

                                                                                -- Move it on the top of the player deck if possible and wanted.
                                                                                if (isTleilaxuCard and TleilaxuResearch.hasReachedOneHelix(color)) or PlayBoard.hasTech(color, "spaceport") then
                                                                                    Dialog.showYesOrNoDialog(
                                                                                        color,
                                                                                        I18N("dialogCardAbove"),
                                                                                        nil,
                                                                                        function (confirmed)
                                                                                            if confirmed then
                                                                                                Helper.moveCardFromZone(content.discardZone, content.drawDeckZone.getPosition() + Vector(0, 1, 0), Vector(0, 180, 180))
                                                                                            end
                                                                                        end)
                                                                                    end
                                                                                end

                                                                                ---
                                                                                function PlayBoard.giveCardFromTrash(color, cardName)
                                                                                    Types.assertIsPlayerColor(color)

                                                                                    local content = PlayBoard.getContent(color)
                                                                                    assert(content)

                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                    for _, object in ipairs(playBoard.content.trash.getObjects()) do
                                                                                        if Helper.getID(object) == cardName then
                                                                                            local parameters = {
                                                                                                guid = object.guid,
                                                                                                position = content.discardZone.getPosition(),
                                                                                                smooth = false,
                                                                                                rotation = Vector(0, 180, 0),
                                                                                                callback_function = function (card)
                                                                                                    printToAll(I18N("acquireImperiumCard", {card = I18N(cardName)}), color)
                                                                                                end
                                                                                            }
                                                                                            playBoard.content.trash.takeObject(parameters)
                                                                                            break
                                                                                        end
                                                                                    end
                                                                                end

                                                                                ---
                                                                                function PlayBoard.giveObjectiveCardFromZone(color, zone)
                                                                                    Types.assertIsPlayerColor(color)
                                                                                    local content = PlayBoard.getContent(color)
                                                                                    assert(content)
                                                                                    local firstSlot = Park.findEmptySlots(PlayBoard.getAgentCardPark(color))[1]
                                                                                    local continuation = Helper.moveCardFromZone(zone, firstSlot + Vector(0, 1, 0), nil, false, true)
                                                                                    continuation.doAfter(function (card)
                                                                                        local cardName = Helper.getID(card)
                                                                                        assert(cardName)
                                                                                        local cardToObjective = {
                                                                                            muadDibFirstPlayer = "muadDib",
                                                                                            muadDib4to6p = "muadDib",
                                                                                            crysknife4to6p = "crysknife",
                                                                                            crysknife = "crysknife",
                                                                                            ornithopter1to3p = "ornithopter",
                                                                                        }
                                                                                        local objective = cardToObjective[cardName]
                                                                                        assert(objective, cardName)
                                                                                        Combat.gainObjective(color, objective)

                                                                                        Helper.onceTimeElapsed(3).doAfter(function ()
                                                                                            -- original
                                                                                            -- PlayBoard.getPlayBoard(color):trash(card)
                                                                                            -- bloodlines delete objective card
                                                                                            card.destruct()
                                                                                        end)
                                                                                    end)
                                                                                    return continuation
                                                                                end

                                                                                ---
                                                                                function PlayBoard.gainObjective(color, objective)
                                                                                    return Combat.gainObjective(color, objective).doAfter(PlayBoard._convertObjectiveTokenPairsIntoVictoryPoints)
                                                                                end

                                                                                ---
                                                                                function PlayBoard.getObjectiveStackPosition(color, objective)
                                                                                    local tag = Helper.toPascalCase(objective, "ObjectiveToken")
                                                                                    local board = PlayBoard.getPlayBoard(color).content.board
                                                                                    for _, snapPoint in ipairs(board.getSnapPoints()) do
                                                                                        if Helper.isElementOf(tag, snapPoint.tags) then
                                                                                            return board.positionToWorld(snapPoint.position)
                                                                                        end
                                                                                    end
                                                                                    error(tag)
                                                                                    return nil
                                                                                end

                                                                                ---
                                                                                function PlayBoard.getDrawDeck(color)
                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                    local deckOrCard = Helper.getDeckOrCard(playBoard.content.drawDeckZone)
                                                                                    return deckOrCard
                                                                                end

                                                                                ---
                                                                                function PlayBoard.getDiscard(color)
                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                    local deckOrCard = Helper.getDeckOrCard(playBoard.content.discardZone)
                                                                                    return deckOrCard
                                                                                end

                                                                                ---
                                                                                function PlayBoard.getHandedCards(color)
                                                                                    return Helper.filter(Player[color].getHandObjects(), Types.isImperiumCard)
                                                                                end

                                                                                ---
                                                                                function PlayBoard.getDiscardedCards(color)
                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                    local deckOrCard = Helper.getDeckOrCard(playBoard.content.discardZone)
                                                                                    return Helper.getCards(deckOrCard)
                                                                                end

                                                                                ---
                                                                                function PlayBoard.getDiscardedCardCount(color)
                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                    local deckOrCard = Helper.getDeckOrCard(playBoard.content.discardZone)
                                                                                    return Helper.getCardCount(deckOrCard)
                                                                                end

                                                                                ---
                                                                                function PlayBoard.getIntrigues(color)
                                                                                    return Helper.filter(Player[color].getHandObjects(), Types.isIntrigueCard)
                                                                                end

                                                                                ---
                                                                                function PlayBoard._getPotentialCombatIntrigues(color)
                                                                                    local predicate
                                                                                    if Hagal.getRivalCount() == 2 then
                                                                                        predicate = function (card)
                                                                                            return Types.isIntrigueCard(card)
                                                                                        end
                                                                                    else
                                                                                        predicate = Types.isIntrigueCard
                                                                                    end
                                                                                    return Helper.filter(Player[color].getHandObjects(), predicate)
                                                                                end

                                                                                ---
                                                                                function PlayBoard.getAquiredDreadnoughtCount(color)
                                                                                    local park = PlayBoard.getPlayBoard(color).dreadnoughtPark
                                                                                    return #Park.findEmptySlots(park)
                                                                                end

                                                                                ---
                                                                                function PlayBoard.getControlMarkerBag(color)
                                                                                    local content = PlayBoard.getContent(color)
                                                                                    assert(content)
                                                                                    return content.controlMarkerBag
                                                                                end

                                                                                ---
                                                                                function PlayBoard:_newSymmetricBoardPosition(x, y, z)
                                                                                    if PlayBoard.isLeft(self.color) then
                                                                                        return self:_newBoardPosition(-x, y, z)
                                                                                    else
                                                                                        return self:_newBoardPosition(x, y, z)
                                                                                    end
                                                                                end

                                                                                ---
                                                                                function PlayBoard:_newSymmetricBoardRotation(x, y, z)
                                                                                    if PlayBoard.isLeft(self.color) then
                                                                                        return self:_newBoardPosition(x, -y, z)
                                                                                    else
                                                                                        return self:_newBoardPosition(x, y, z)
                                                                                    end
                                                                                end

                                                                                ---
                                                                                function PlayBoard:_newOffsetedBoardPosition(x, y, z)
                                                                                    if PlayBoard.isLeft(self.color) then
                                                                                        return self:_newBoardPosition(12.75 + x, y, z)
                                                                                    else
                                                                                        return self:_newBoardPosition(x, y, z)
                                                                                    end
                                                                                end

                                                                                ---
                                                                                function PlayBoard:_newBoardPosition(x, y, z)
                                                                                    return Vector(x, y, -z)
                                                                                end

                                                                                --- Relative to the board, not a commander.
                                                                                function PlayBoard.isLeft(color)
                                                                                    return color == "Red" or color == "White" or color == "Blue"
                                                                                end

                                                                                --- Relative to the board, not a commander.
                                                                                function PlayBoard.isRight(color)
                                                                                    return color == "Green" or color == "Purple" or color == "Yellow"
                                                                                end

                                                                                ---
                                                                                -- bloodlines bug fix - hook clashes with dreadnought park
                                                                                function PlayBoard.isBottom(color)
                                                                                    return color == "Blue" or color == "Yellow"
                                                                                end

                                                                                ---
                                                                                function PlayBoard:trash(object)
                                                                                    self.trashQueue = self.trashQueue or Helper.createSpaceQueue()
                                                                                    self.trashQueue.submit(function (height)
                                                                                        object.interactable = true
                                                                                        object.setLock(false)
                                                                                        object.setPosition(self.content.trash.getPosition() + Vector(0, 1 + height * 0.5, 0))
                                                                                    end)
                                                                                end

                                                                                ---
                                                                                function PlayBoard.isInside(color, object)
                                                                                    local position = object.getPosition()
                                                                                    local center = PlayBoard.getPlayBoard(color).content.board.getPosition()
                                                                                    local offset = position - center
                                                                                    return math.abs(offset.x) < 12 and math.abs(offset.z) < 10
                                                                                end

                                                                                ---
                                                                                function PlayBoard.getHandOrientedPosition(color)
                                                                                    -- Add an offset to put the card on the left side of the player's hand.
                                                                                    local handTransform = Player[color].getHandTransform()
                                                                                    local position = handTransform.position
                                                                                    if handTransform.rotation == Vector(0, 0, 0) then
                                                                                        position = position + Vector(-12.5, 0, 0)
                                                                                    elseif handTransform.rotation == Vector(0, 270, 0) then
                                                                                        position = position + Vector(0, 0, -8.5)
                                                                                    elseif handTransform.rotation == Vector(0, 90, 0) then
                                                                                        position = position + Vector(0, 0, 8.5)
                                                                                    else
                                                                                        -- Should not happen.
                                                                                        position = position + Vector(0, 0, 0)
                                                                                    end
                                                                                    local rotation = handTransform.rotation + Vector(0, 180, 0)
                                                                                    return {
                                                                                        position = position,
                                                                                        rotation = rotation
                                                                                    }
                                                                                end

                                                                                ---
                                                                                function PlayBoard.acquireVoice(color, voiceToken)
                                                                                    Types.assertIsPlayerColor(color)
                                                                                    assert(voiceToken)
                                                                                    local position = PlayBoard.getPlayBoard(color).content.firstPlayerInitialPosition
                                                                                    voiceToken.setPositionSmooth(position + Vector(0, 1, -1.8))
                                                                                    return true
                                                                                end

                                                                                return PlayBoard

                                                                            end)
                                                                            __bundle_register("Pdf", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                local Helper = require("utils.Helper")
                                                                                local I18N = require("utils.I18N")

                                                                                local Pdf = {
                                                                                    books = {
                                                                                        base = {guid = "dc6297", position = Vector(-13, 0.61, -29), scale = Vector(1.67, 1, 1.67)},
                                                                                        guide = {guid = "43fd49", position = Vector(-5, 0.61, -29), scale = Vector(1.59, 1, 1.59)},
                                                                                        --riseOfIx = { guid = "2ed556", position = Vector(5, 0.61, -29), scale = Vector(1.5, 1, 1.5) },
                                                                                        --immortality = { guid = "e2ef02", position = Vector(13, 0.61, -29), scale = Vector(1.1, 1, 1.1) },
                                                                                    }}

                                                                                    ---
                                                                                    function Pdf.onLoad()
                                                                                        Pdf.fr = require("fr.Pdf")
                                                                                        Pdf.en = require("en.Pdf")
                                                                                    end

                                                                                    ---
                                                                                    function Pdf.setUp()
                                                                                        local locale = I18N.getLocale()

                                                                                        if locale == "en" then
                                                                                            -- Bail out since the starting PDFs are in english.
                                                                                            return
                                                                                        end

                                                                                        for bookName, bookInfo in pairs(Pdf.books) do
                                                                                            local bookUrl = Pdf[locale][bookName]
                                                                                            Helper.onceFramesPassed(1).doAfter(function ()
                                                                                                Pdf._mututateBook(bookName, bookInfo, bookUrl)
                                                                                            end)
                                                                                        end
                                                                                    end

                                                                                    function Pdf._mututateBook(_, info, url)
                                                                                        --- We cannot create PDF ex nihilo, but need an existing PDF to be mutated.
                                                                                        local book = getObjectFromGUID(info.guid)
                                                                                        local data = book.getData()
                                                                                        data.CustomPDF.PDFUrl = url
                                                                                        book.destruct()
                                                                                        spawnObjectData({data = data})
                                                                                    end

                                                                                    return Pdf

                                                                                end)
                                                                                __bundle_register("en.Pdf", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                    return {
                                                                                        base = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141310401/5D80D79E4DE7E7D43B4D9EC7FAFDAAEB1772F30C/",
                                                                                        guide = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141310081/F2BA836F3CFB5B076AC051794400FFC15812CACF/",
                                                                                        riseOfIx = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141356865/F55C0BC54AD4F658FFF7A511D5740BF93A0CB19E/",
                                                                                        immortality = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141359158/DE61CF514A5C813C2E46CAA7C7FF76DDB3069641/",
                                                                                    }

                                                                                end)
                                                                                __bundle_register("fr.Pdf", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                    return {
                                                                                        base = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141312592/5DABE09D5D6B5430AD1EFC1179AEE743A18CA802/",
                                                                                        guide = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141312881/328FD1BA1D23DD410440ABBFED3F2507EDBAC40C/",
                                                                                        riseOfIx = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141357832/C7ACC9E96C2C162A13761F3C7C285AB9CF6D1C96/",
                                                                                        immortality = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141359528/8542ECE0CBCE22F7B43D305B72718C7D689C1128/",
                                                                                    }

                                                                                end)
                                                                                __bundle_register("Music", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                    local Helper = require("utils.Helper")

                                                                                    local Music = {
                                                                                        sounds = {
                                                                                            atomics = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141278359/C9F0035DAF76EE6B353F9885C2859EBB282A9988/",
                                                                                            battle = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141336378/474E09BB37578C5FC1CFDE001E7D6785EE54C52F/",
                                                                                            turn = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141336932/2C9434C28270DDD87D33648DA7B17B23DA0D5ECF/",
                                                                                            chomp = "https://raw.githubusercontent.com/cozos/dune-custom/master/eating-a-cracker-mouth-open-81375.mp3"
                                                                                        }}

                                                                                        ---
                                                                                        function Music.onLoad(state)
                                                                                            if state.settings then
                                                                                                Music.enabled = state.settings.soundEnabled
                                                                                            end
                                                                                        end

                                                                                        ---
                                                                                        function Music.setUp(settings)
                                                                                            Music.enabled = settings.soundEnabled
                                                                                        end

                                                                                        ---
                                                                                        function Music.play(sound)
                                                                                            if Music.enabled and Music.sounds[sound] then
                                                                                                MusicPlayer.setCurrentAudioclip({
                                                                                                    url = Music.sounds[sound],
                                                                                                    title = sound
                                                                                                })
                                                                                            end
                                                                                            -- Do nothing, but introduces a pause in sync with the music which highlights a noticable event.
                                                                                            Helper.onceTimeElapsed(1)
                                                                                        end

                                                                                        return Music

                                                                                    end)
                                                                                    __bundle_register("MainBoard", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                        local Module = require("utils.Module")
                                                                                        local Helper = require("utils.Helper")
                                                                                        local Park = require("utils.Park")
                                                                                        local I18N = require("utils.I18N")
                                                                                        local Dialog = require("utils.Dialog")

                                                                                        local Types = Module.lazyRequire("Types")
                                                                                        local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                        local InfluenceTrack = Module.lazyRequire("InfluenceTrack")
                                                                                        local ShippingTrack = Module.lazyRequire("ShippingTrack")
                                                                                        local TechMarket = Module.lazyRequire("TechMarket")
                                                                                        local Combat = Module.lazyRequire("Combat")
                                                                                        local Resource = Module.lazyRequire("Resource")
                                                                                        local Action = Module.lazyRequire("Action")
                                                                                        local TurnControl = Module.lazyRequire("TurnControl")
                                                                                        local Commander = Module.lazyRequire("Commander")
                                                                                        local Music = Module.lazyRequire("Music")
                                                                                        local Hagal = Module.lazyRequire("Hagal")
                                                                                        local Board = Module.lazyRequire("Board")
                                                                                        local ImperiumRow = Module.lazyRequire("ImperiumRow")

                                                                                        local MainBoard = {
                                                                                            spaceDetails = {
                                                                                                sardaukar = {group = "emperor", posts = {"emperor"}},
                                                                                                vastWealth = {group = "emperor", posts = {"emperor"}},
                                                                                                dutifulService = {group = "emperor", posts = {"emperor"}},

                                                                                                militarySupport = {group = "greatHouses", posts = {"greatHouses"}},
                                                                                                economicSupport = {group = "greatHouses", posts = {"greatHouses"}},

                                                                                                heighliner = {group = "spacingGuild", combat = true, posts = {"spacingGuild"}},
                                                                                                deliverSupplies = {group = "spacingGuild", posts = {"spacingGuild"}},

                                                                                                espionage = {group = "beneGesserit", posts = {"beneGesserit"}},
                                                                                                secrets = {group = "beneGesserit", posts = {"beneGesserit"}},

                                                                                                controversialTechnology = {group = "fringeWorlds", posts = {"fringeWorlds"}},
                                                                                                expedition = {group = "fringeWorlds", posts = {"fringeWorlds"}},

                                                                                                desertTactics = {group = "fremen", combat = true, posts = {"fremen"}},
                                                                                                fremkit = {group = "fremen", combat = true, posts = {"fremen"}},
                                                                                                hardyWarriors = {group = "fremen", combat = true, posts = {"fremen"}},
                                                                                                desertMastery = {group = "fremen", combat = true, posts = {"fremen"}},

                                                                                                highCouncil = {group = "landsraad", posts = {"landsraadCouncil1"}},
                                                                                                imperialPrivilege = {group = "landsraad", posts = {"landsraadCouncil1"}},
                                                                                                swordmaster = {group = "landsraad", posts = {"landsraadCouncil1"}},
                                                                                                assemblyHall = {group = "landsraad", posts = {"landsraadCouncil2"}},
                                                                                                gatherSupport = {group = "landsraad", posts = {"landsraadCouncil2"}},

                                                                                                techNegotiation = {group = "ix", posts = {"ix"}},
                                                                                                dreadnought = {group = "ix", posts = {"ix"}},

                                                                                                shipping = {group = "choam", posts = {"choam"}},
                                                                                                acceptContract = {group = "choam", posts = {"choam"}},

                                                                                                smuggling = {group = "choam", posts = {"ixChoam"}},
                                                                                                interstellarShipping = {group = "choam", posts = {"ixChoam"}},

                                                                                                sietchTabr = {group = "city", combat = true, posts = {"sietchTabrResearchStation"}},
                                                                                                researchStation = {group = "city", combat = true, posts = {"sietchTabrResearchStation", "researchStationSpiceRefinery"}},
                                                                                                spiceRefinery = {group = "city", combat = true, posts = {"researchStationSpiceRefinery", "spiceRefineryArrakeen"}},
                                                                                                arrakeen = {group = "city", combat = true, posts = {"spiceRefineryArrakeen"}},
                                                                                                carthag = {group = "city", combat = true, posts = {"carthag"}},

                                                                                                deepDesert = {group = "desert", combat = true, posts = {"deepDesert"}},
                                                                                                haggaBasin = {group = "desert", combat = true, posts = {"haggaBasin"}},
                                                                                                habbanyaErg = {group = "desert", combat = true, posts = {"habbanyaErg"}},
                                                                                                imperialBasin = {group = "desert", combat = true, posts = {"imperialBasin"}},
                                                                                                -- bloodlines tuek's sietch spice bonus token
                                                                                                tueksSietch = {group = "desert", combat = true, posts = {"tueksSietch"}},
                                                                                            }}

                                                                                            ---
                                                                                            function MainBoard.onLoad(state)
                                                                                                Helper.append(MainBoard, Helper.resolveGUIDs(false, {
                                                                                                    immortalityPatch = "6cf62a",
                                                                                                    -- bloodlines tuek's sietch board
                                                                                                    bl_EsmarBoard = "290e79",
                                                                                                    spiceBonusTokens = {
                                                                                                        deepDesert = "116807",
                                                                                                        haggaBasin = "c24705",
                                                                                                        imperialBasin = "3cdb2d",
                                                                                                        habbanyaErg = "394db2",
                                                                                                        -- bloodlines tuek's sietch spice bonus token
                                                                                                        tueksSietch = "0984aa",
                                                                                                    },
                                                                                                    firstPlayerMarker = "1f5576",
                                                                                                    shieldWallToken = "31d6b0",
                                                                                                    -- bloodlines sardaukar commanders
                                                                                                    sardaukarCommanders = {
                                                                                                        sc_GatherSupport = "f951ae",
                                                                                                        sc_AssemblyHall = "21e46d",
                                                                                                        sc_HighCouncil = "d226f7",
                                                                                                        sc_Sardaukar = "f8e9ea",
                                                                                                        sc_DutifulService = "eb7b9d",
                                                                                                        sc_DeliverSupplies = "47ef40",
                                                                                                        sc_Standard = "a0605f",
                                                                                                        sc_NoPopup = "e070d6",
                                                                                                    },
                                                                                                }))
                                                                                                MainBoard.spiceBonuses = {}

                                                                                                Helper.forEachValue(MainBoard.spiceBonusTokens, Helper.noPhysicsNorPlay)

                                                                                                if state.settings then
                                                                                                    for name, token in pairs(MainBoard.spiceBonusTokens) do
                                                                                                        if token then
                                                                                                            local value = state.MainBoard and state.MainBoard.spiceBonuses[name] or 0
                                                                                                            MainBoard.spiceBonuses[name] = Resource.new(token, nil, "spice", value, name)
                                                                                                        end
                                                                                                    end

                                                                                                    MainBoard.mainBoard = Board.getBoard("mainBoard4P") or Board.getBoard("mainBoard6P")
                                                                                                    MainBoard.emperorBoard = Board.getBoard("emperorBoard")
                                                                                                    MainBoard.fremenBoard = Board.getBoard("fremenBoard")

                                                                                                    MainBoard._transientSetUp(state.settings)
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.onSave(state)
                                                                                                state.MainBoard = {
                                                                                                    spiceBonuses = Helper.map(MainBoard.spiceBonuses, function (_, resource)
                                                                                                        return resource:get()
                                                                                                    end),
                                                                                                }
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.setUp(settings)
                                                                                                local continuation = Helper.createContinuation("MainBoard.setUp")

                                                                                                if settings.numberOfPlayers == 6 then
                                                                                                    MainBoard.mainBoard = Board.selectBoard("mainBoard6P", settings.language)
                                                                                                    MainBoard.emperorBoard = Board.selectBoard("emperorBoard", settings.language)
                                                                                                    MainBoard.fremenBoard = Board.selectBoard("fremenBoard", settings.language)
                                                                                                    continuation.run()
                                                                                                    if settings.immortality then
                                                                                                        local position = MainBoard.immortalityPatch.getPosition()
                                                                                                        MainBoard.immortalityPatch.setPosition(position + Vector(1.6, 0, -1.9))
                                                                                                    end
                                                                                                else
                                                                                                    MainBoard.mainBoard = Board.selectBoard("mainBoard4P", settings.language)
                                                                                                    Board.destructBoard("emperorBoard")
                                                                                                    MainBoard.emperorBoard = nil
                                                                                                    Board.destructBoard("fremenBoard")
                                                                                                    MainBoard.fremenBoard = nil
                                                                                                    MainBoard.spiceBonusTokens.habbanyaErg.destruct()
                                                                                                    MainBoard.spiceBonusTokens.habbanyaErg = nil
                                                                                                    continuation.run()
                                                                                                end

                                                                                                Board.destructInactiveBoards()

                                                                                                if settings.immortality then
                                                                                                else
                                                                                                    MainBoard.immortalityPatch.destruct()
                                                                                                    MainBoard.immortalityPatch = nil
                                                                                                end

                                                                                                local nextContinuation = Helper.createContinuation("MainBoard.setUp.next")
                                                                                                continuation.doAfter(function ()
                                                                                                    MainBoard._transientSetUp(settings)
                                                                                                    nextContinuation.run()
                                                                                                end)

                                                                                                return nextContinuation
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._transientSetUp(settings)
                                                                                                MainBoard._processSnapPoints(settings)

                                                                                                if MainBoard.shieldWallToken then
                                                                                                    MainBoard.shieldWallToken.clearButtons()
                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.shieldWallToken, 7, {
                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)
                                                                                                            MainBoard.blowUpShieldWall(color)
                                                                                                        end),
                                                                                                        position = MainBoard.shieldWallToken.getPosition() + Vector(0.2, 0.1, 0.2),
                                                                                                        width = 800,
                                                                                                        height = 800,
                                                                                                        color = {0, 0, 0, 0},
                                                                                                    tooltip = I18N("explosion")})
                                                                                                end

                                                                                                MainBoard._createRoundIndicator()
                                                                                                -- bloodlines sardaukar commander buttons
                                                                                                MainBoard._createSardaukarCommanderButtons()

                                                                                                Helper.registerEventListener("phaseStart", function (phase)
                                                                                                    if phase == "makers" then
                                                                                                        for desert, _ in pairs(MainBoard.spiceBonusTokens) do
                                                                                                            local space = MainBoard.spaces[desert]
                                                                                                            if space then
                                                                                                                local spiceBonus = MainBoard.spiceBonuses[desert]
                                                                                                                if Park.isEmpty(space.park) then
                                                                                                                    spiceBonus:change(1)
                                                                                                                end
                                                                                                            end
                                                                                                        end

                                                                                                        if settings.wormEatsTheCard then
                                                                                                            -- TODO(arwin.tio) Get better sound
                                                                                                            -- Music.play("chomp")
                                                                                                            ImperiumRow.wormEatsTheCard()
                                                                                                        end
                                                                                                    elseif phase == "recall" then

                                                                                                        -- Recalling dreadnoughts in controlable spaces.
                                                                                                        for _, bannerZone in pairs(MainBoard.banners) do
                                                                                                            for _, dreadnought in ipairs(Helper.filter(bannerZone.getObjects(), Types.isDreadnought)) do
                                                                                                                for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                    if dreadnought.hasTag(color) then
                                                                                                                        if dreadnought.hasTag("toBeRecalled") then
                                                                                                                            dreadnought.removeTag("toBeRecalled")
                                                                                                                            Park.putObject(dreadnought, Combat.getDreadnoughtPark(color))
                                                                                                                        else
                                                                                                                            dreadnought.addTag("toBeRecalled")
                                                                                                                        end
                                                                                                                    end
                                                                                                                end
                                                                                                            end
                                                                                                        end

                                                                                                        -- Recalling agents.
                                                                                                        for _, space in pairs(MainBoard.spaces) do
                                                                                                            if space.park then
                                                                                                                for _, object in ipairs(Park.getObjects(space.park)) do
                                                                                                                    if object.hasTag("Agent") then
                                                                                                                        for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                            if object.hasTag(color) then
                                                                                                                                if settings.numberOfPlayers == 6 and object.hasTag("Swordmaster") then
                                                                                                                                    PlayBoard.destroySwordmaster(color)
                                                                                                                                else
                                                                                                                                    Park.putObject(object, PlayBoard.getAgentPark(color))
                                                                                                                                end
                                                                                                                            end
                                                                                                                        end
                                                                                                                    end
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                    end
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._createRoundIndicator()
                                                                                                local primaryTable = getObjectFromGUID("2b4b92")
                                                                                                local origin = primaryTable.getPosition() + Vector(-3.7, 1.8, -16.5)

                                                                                                Helper.createAbsoluteButtonWithRoundness(primaryTable, 1, {
                                                                                                    click_function = Helper.registerGlobalCallback(),
                                                                                                    label = I18N("roundNumber"),
                                                                                                    position = origin,
                                                                                                    width = 1000,
                                                                                                    height = 200,
                                                                                                    font_size = 140,
                                                                                                    color = {0, 0, 0, 0},
                                                                                                    font_color = {1, 1, 1, 80},
                                                                                                })

                                                                                                Helper.createAbsoluteButtonWithRoundness(primaryTable, 1, {
                                                                                                    click_function = Helper.registerGlobalCallback(),
                                                                                                    position = origin + Vector(0, 0, -1),
                                                                                                    width = 1000,
                                                                                                    height = 1000,
                                                                                                    font_size = 700,
                                                                                                    color = {0, 0, 0, 0},
                                                                                                    font_color = {1, 1, 1, 80},
                                                                                                })

                                                                                                local function updateContent()
                                                                                                    primaryTable.editButton({index = 1, label = tostring(TurnControl.getCurrentRound())})
                                                                                                end

                                                                                                Helper.registerEventListener("phaseStart", function (phase)
                                                                                                    if phase == "roundStart" then
                                                                                                        updateContent()
                                                                                                    end
                                                                                                end)

                                                                                                Helper.onceTimeElapsed(1).doAfter(updateContent)
                                                                                            end

                                                                                            ---
                                                                                            -- bloodlines sardaukar commander buttons
                                                                                            function MainBoard._createSardaukarCommanderButtons()
                                                                                                -- bloodlines sardaukar commander assembly hall
                                                                                                if MainBoard.sardaukarCommanders.sc_AssemblyHall then
                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_AssemblyHall, 7, {
                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)
                                                                                                            MainBoard.recruitSardaukarCommanderFromAssemblyHall(color)
                                                                                                        end),
                                                                                                        position = MainBoard.sardaukarCommanders.sc_AssemblyHall.getPosition() + Vector(0.2, 0.1, 0.2),
                                                                                                        width = 1000,
                                                                                                        height = 1000,
                                                                                                        color = {0, 0, 0, 0},
                                                                                                    tooltip = I18N("sardaukarCommanderAssemblyHall")})
                                                                                                end

                                                                                                -- bloodlines sardaukar commander gather support
                                                                                                if MainBoard.sardaukarCommanders.sc_GatherSupport then
                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_GatherSupport, 7, {
                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)
                                                                                                            MainBoard.recruitSardaukarCommanderFromGatherSupport(color)
                                                                                                        end),
                                                                                                        position = MainBoard.sardaukarCommanders.sc_GatherSupport.getPosition() + Vector(0.2, 0.1, 0.2),
                                                                                                        width = 1000,
                                                                                                        height = 1000,
                                                                                                        color = {0, 0, 0, 0},
                                                                                                    tooltip = I18N("sardaukarCommanderGatherSupport")})
                                                                                                end

                                                                                                -- bloodlines sardaukar commander high council
                                                                                                if MainBoard.sardaukarCommanders.sc_HighCouncil then
                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_HighCouncil, 7, {
                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)
                                                                                                            MainBoard.recruitSardaukarCommanderFromHighCouncil(color)
                                                                                                        end),
                                                                                                        position = MainBoard.sardaukarCommanders.sc_HighCouncil.getPosition() + Vector(0.2, 0.1, 0.2),
                                                                                                        width = 1000,
                                                                                                        height = 1000,
                                                                                                        color = {0, 0, 0, 0},
                                                                                                    tooltip = I18N("sardaukarCommanderHighCouncil")})
                                                                                                end

                                                                                                -- bloodlines sardaukar commander sardaukar
                                                                                                if MainBoard.sardaukarCommanders.sc_Sardaukar then
                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_Sardaukar, 7, {
                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)
                                                                                                            MainBoard.recruitSardaukarCommanderFromSardaukar(color)
                                                                                                        end),
                                                                                                        position = MainBoard.sardaukarCommanders.sc_Sardaukar.getPosition() + Vector(0.2, 0.1, 0.2),
                                                                                                        width = 1000,
                                                                                                        height = 1000,
                                                                                                        color = {0, 0, 0, 0},
                                                                                                    tooltip = I18N("sardaukarCommanderSardaukar")})
                                                                                                end

                                                                                                -- bloodlines sardaukar commander dutiful service
                                                                                                if MainBoard.sardaukarCommanders.sc_DutifulService then
                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_DutifulService, 7, {
                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)
                                                                                                            MainBoard.recruitSardaukarCommanderFromDutifulService(color)
                                                                                                        end),
                                                                                                        position = MainBoard.sardaukarCommanders.sc_DutifulService.getPosition() + Vector(0.2, 0.1, 0.2),
                                                                                                        width = 1000,
                                                                                                        height = 1000,
                                                                                                        color = {0, 0, 0, 0},
                                                                                                    tooltip = I18N("sardaukarCommanderDutifulService")})
                                                                                                end

                                                                                                -- bloodlines sardaukar commander deliver supplies
                                                                                                if MainBoard.sardaukarCommanders.sc_DeliverSupplies then
                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_DeliverSupplies, 7, {
                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)
                                                                                                            MainBoard.recruitSardaukarCommanderFromDeliverSupplies(color)
                                                                                                        end),
                                                                                                        position = MainBoard.sardaukarCommanders.sc_DeliverSupplies.getPosition() + Vector(0.2, 0.1, 0.2),
                                                                                                        width = 1000,
                                                                                                        height = 1000,
                                                                                                        color = {0, 0, 0, 0},
                                                                                                    tooltip = I18N("sardaukarCommanderDeliverSupplies")})
                                                                                                end

                                                                                                -- bloodlines sardaukar commander standard
                                                                                                if MainBoard.sardaukarCommanders.sc_Standard then
                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_Standard, 7, {
                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)
                                                                                                            MainBoard.recruitSardaukarCommanderFromStandard(color)
                                                                                                        end),
                                                                                                        position = MainBoard.sardaukarCommanders.sc_Standard.getPosition() + Vector(0.2, 0.1, 0.2),
                                                                                                        width = 1000,
                                                                                                        height = 1000,
                                                                                                        color = {0, 0, 0, 0},
                                                                                                    tooltip = I18N("sardaukarCommanderStandard")})
                                                                                                end

                                                                                                -- bloodlines sardaukar commander no popup
                                                                                                if MainBoard.sardaukarCommanders.sc_NoPopup then
                                                                                                    Helper.createAbsoluteButtonWithRoundness(MainBoard.sardaukarCommanders.sc_NoPopup, 7, {
                                                                                                        click_function = Helper.registerGlobalCallback(function (_, color, _)
                                                                                                            MainBoard.recruitSardaukarCommanderNoPopup(color)
                                                                                                        end),
                                                                                                        position = MainBoard.sardaukarCommanders.sc_NoPopup.getPosition() + Vector(0.2, 0.1, 0.2),
                                                                                                        width = 1000,
                                                                                                        height = 1000,
                                                                                                        color = {0, 0, 0, 0},
                                                                                                    tooltip = I18N("sardaukarCommanderNoPopup")})
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            -- bloodlines sardaukar commander assembly hall
                                                                                            function MainBoard.recruitSardaukarCommanderFromAssemblyHall(color)
                                                                                                if MainBoard.sardaukarCommanders.sc_AssemblyHall ~= nil then
                                                                                                    if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                        if PlayBoard.getResource(color, "solari"):get() >= 1 then
                                                                                                            Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                                if confirmed then
                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                    broadcastToAll(I18N("recruitSardaukarCommanderAssemblyHall"), color)
                                                                                                                    Combat.recruitSardaukarCommander(color)
                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                        playBoard.leader.resources(color, "solari", -1)
                                                                                                                        MainBoard.sardaukarCommanders.sc_AssemblyHall.destruct()
                                                                                                                        MainBoard.sardaukarCommanders.sc_AssemblyHall = nil
                                                                                                                    end)
                                                                                                                end
                                                                                                            end)
                                                                                                        else
                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                        end
                                                                                                    elseif PlayBoard.getResource(color, "solari"):get() >= 2 then
                                                                                                        Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                            if confirmed then
                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                broadcastToAll(I18N("recruitSardaukarCommanderAssemblyHall"), color)
                                                                                                                Combat.recruitSardaukarCommander(color)
                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                    playBoard.leader.resources(color, "solari", -2)
                                                                                                                    MainBoard.sardaukarCommanders.sc_AssemblyHall.destruct()
                                                                                                                    MainBoard.sardaukarCommanders.sc_AssemblyHall = nil
                                                                                                                end)
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                    end
                                                                                                end
                                                                                            end

                                                                                            -- bloodlines sardaukar commander gather support
                                                                                            function MainBoard.recruitSardaukarCommanderFromGatherSupport(color)
                                                                                                if MainBoard.sardaukarCommanders.sc_GatherSupport ~= nil then
                                                                                                    if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                        if PlayBoard.getResource(color, "solari"):get() >= 1 then
                                                                                                            Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                                if confirmed then
                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                    broadcastToAll(I18N("recruitSardaukarCommanderGatherSupport"), color)
                                                                                                                    Combat.recruitSardaukarCommander(color)
                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                        playBoard.leader.resources(color, "solari", -1)
                                                                                                                        MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()
                                                                                                                        MainBoard.sardaukarCommanders.sc_GatherSupport = nil
                                                                                                                    end)
                                                                                                                end
                                                                                                            end)
                                                                                                        else
                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                        end
                                                                                                    elseif PlayBoard.getResource(color, "solari"):get() >= 2 then
                                                                                                        Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                            if confirmed then
                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                broadcastToAll(I18N("recruitSardaukarCommanderGatherSupport"), color)
                                                                                                                Combat.recruitSardaukarCommander(color)
                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                    playBoard.leader.resources(color, "solari", -2)
                                                                                                                    MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()
                                                                                                                    MainBoard.sardaukarCommanders.sc_GatherSupport = nil
                                                                                                                end)
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                    end
                                                                                                end
                                                                                            end

                                                                                            -- bloodlines sardaukar commander high council
                                                                                            function MainBoard.recruitSardaukarCommanderFromHighCouncil(color)
                                                                                                if MainBoard.sardaukarCommanders.sc_HighCouncil ~= nil then
                                                                                                    if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                        if PlayBoard.getResource(color, "solari"):get() >= 1 then
                                                                                                            Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                                if confirmed then
                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                    broadcastToAll(I18N("recruitSardaukarCommanderHighCouncil"), color)
                                                                                                                    Combat.recruitSardaukarCommander(color)
                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                        playBoard.leader.resources(color, "solari", -1)
                                                                                                                        MainBoard.sardaukarCommanders.sc_HighCouncil.destruct()
                                                                                                                        MainBoard.sardaukarCommanders.sc_HighCouncil = nil
                                                                                                                    end)
                                                                                                                end
                                                                                                            end)
                                                                                                        else
                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                        end
                                                                                                    elseif PlayBoard.getResource(color, "solari"):get() >= 2 then
                                                                                                        Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                            if confirmed then
                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                broadcastToAll(I18N("recruitSardaukarCommanderHighCouncil"), color)
                                                                                                                Combat.recruitSardaukarCommander(color)
                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                    playBoard.leader.resources(color, "solari", -2)
                                                                                                                    MainBoard.sardaukarCommanders.sc_HighCouncil.destruct()
                                                                                                                    MainBoard.sardaukarCommanders.sc_HighCouncil = nil
                                                                                                                end)
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                    end
                                                                                                end
                                                                                            end

                                                                                            -- bloodlines sardaukar commander sardaukar
                                                                                            function MainBoard.recruitSardaukarCommanderFromSardaukar(color)
                                                                                                if MainBoard.sardaukarCommanders.sc_Sardaukar ~= nil then
                                                                                                    if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                        if PlayBoard.getResource(color, "solari"):get() >= 1 then
                                                                                                            Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                                if confirmed then
                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                    broadcastToAll(I18N("recruitSardaukarCommanderSardaukar"), color)
                                                                                                                    Combat.recruitSardaukarCommander(color)
                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                        playBoard.leader.resources(color, "solari", -1)
                                                                                                                        MainBoard.sardaukarCommanders.sc_Sardaukar.destruct()
                                                                                                                        MainBoard.sardaukarCommanders.sc_Sardaukar = nil
                                                                                                                    end)
                                                                                                                end
                                                                                                            end)
                                                                                                        else
                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                        end
                                                                                                    elseif PlayBoard.getResource(color, "solari"):get() >= 2 then
                                                                                                        Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                            if confirmed then
                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                broadcastToAll(I18N("recruitSardaukarCommanderSardaukar"), color)
                                                                                                                Combat.recruitSardaukarCommander(color)
                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                    playBoard.leader.resources(color, "solari", -2)
                                                                                                                    MainBoard.sardaukarCommanders.sc_Sardaukar.destruct()
                                                                                                                    MainBoard.sardaukarCommanders.sc_Sardaukar = nil
                                                                                                                end)
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                    end
                                                                                                end
                                                                                            end

                                                                                            -- bloodlines sardaukar commander dutiful service
                                                                                            function MainBoard.recruitSardaukarCommanderFromDutifulService(color)
                                                                                                if MainBoard.sardaukarCommanders.sc_DutifulService ~= nil then
                                                                                                    if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                        if PlayBoard.getResource(color, "solari"):get() >= 1 then
                                                                                                            Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                                if confirmed then
                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                    broadcastToAll(I18N("recruitSardaukarCommanderDutifulService"), color)
                                                                                                                    Combat.recruitSardaukarCommander(color)
                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                        playBoard.leader.resources(color, "solari", -1)
                                                                                                                        MainBoard.sardaukarCommanders.sc_DutifulService.destruct()
                                                                                                                        MainBoard.sardaukarCommanders.sc_DutifulService = nil
                                                                                                                    end)
                                                                                                                end
                                                                                                            end)
                                                                                                        else
                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                        end
                                                                                                    elseif PlayBoard.getResource(color, "solari"):get() >= 2 then
                                                                                                        Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                            if confirmed then
                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                broadcastToAll(I18N("recruitSardaukarCommanderDutifulService"), color)
                                                                                                                Combat.recruitSardaukarCommander(color)
                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                    playBoard.leader.resources(color, "solari", -2)
                                                                                                                    MainBoard.sardaukarCommanders.sc_DutifulService.destruct()
                                                                                                                    MainBoard.sardaukarCommanders.sc_DutifulService = nil
                                                                                                                end)
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                    end
                                                                                                end
                                                                                            end

                                                                                            -- bloodlines sardaukar commander deliver supplies
                                                                                            function MainBoard.recruitSardaukarCommanderFromDeliverSupplies(color)
                                                                                                if MainBoard.sardaukarCommanders.sc_DeliverSupplies ~= nil then
                                                                                                    if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                        if PlayBoard.getResource(color, "solari"):get() >= 1 then
                                                                                                            Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                                if confirmed then
                                                                                                                    local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                    broadcastToAll(I18N("recruitSardaukarCommanderDeliverSupplies"), color)
                                                                                                                    Combat.recruitSardaukarCommander(color)
                                                                                                                    Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                        playBoard.leader.resources(color, "solari", -1)
                                                                                                                        MainBoard.sardaukarCommanders.sc_DeliverSupplies.destruct()
                                                                                                                        MainBoard.sardaukarCommanders.sc_DeliverSupplies = nil
                                                                                                                    end)
                                                                                                                end
                                                                                                            end)
                                                                                                        else
                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                        end
                                                                                                    elseif PlayBoard.getResource(color, "solari"):get() >= 2 then
                                                                                                        Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                            if confirmed then
                                                                                                                local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                broadcastToAll(I18N("recruitSardaukarCommanderDeliverSupplies"), color)
                                                                                                                Combat.recruitSardaukarCommander(color)
                                                                                                                Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                    playBoard.leader.resources(color, "solari", -2)
                                                                                                                    MainBoard.sardaukarCommanders.sc_DeliverSupplies.destruct()
                                                                                                                    MainBoard.sardaukarCommanders.sc_DeliverSupplies = nil
                                                                                                                end)
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                    end
                                                                                                end
                                                                                            end

                                                                                            -- bloodlines sardaukar commander standard
                                                                                            function MainBoard.recruitSardaukarCommanderFromStandard(color)
                                                                                                if MainBoard.sardaukarCommanders.sc_Standard ~= nil then
                                                                                                    Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderFreeConfirm"), continuation, function (confirmed)
                                                                                                        if confirmed then
                                                                                                            local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                            broadcastToAll(I18N("recruitSardaukarCommanderStandard"), color)
                                                                                                            Combat.recruitSardaukarCommander(color)
                                                                                                            Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                MainBoard.sardaukarCommanders.sc_Standard.destruct()
                                                                                                                MainBoard.sardaukarCommanders.sc_Standard = nil
                                                                                                            end)
                                                                                                        end
                                                                                                    end)
                                                                                                end
                                                                                            end

                                                                                            -- bloodlines sardaukar commander no popup
                                                                                            function MainBoard.recruitSardaukarCommanderNoPopup(color)
                                                                                                if MainBoard.sardaukarCommanders.sc_NoPopup ~= nil then
                                                                                                    if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                        if PlayBoard.getResource(color, "solari"):get() >= 1 then
                                                                                                            local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                            broadcastToAll(I18N("recruitSardaukarCommanderNoPopup"), color)
                                                                                                            Combat.recruitSardaukarCommander(color)
                                                                                                            Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                                playBoard.leader.resources(color, "solari", -1)
                                                                                                            end)
                                                                                                        else
                                                                                                            Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                        end
                                                                                                    elseif PlayBoard.getResource(color, "solari"):get() >= 2 then
                                                                                                        local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                        broadcastToAll(I18N("recruitSardaukarCommanderNoPopup"), color)
                                                                                                        Combat.recruitSardaukarCommander(color)
                                                                                                        Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                            playBoard.leader.resources(color, "solari", -2)
                                                                                                        end)
                                                                                                    else
                                                                                                        Dialog.broadcastToColor(I18N('noSolari'), color, "Purple")
                                                                                                    end
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._processSnapPoints(settings)
                                                                                                local highCouncilSeats = {}
                                                                                                MainBoard.spaces = {}
                                                                                                MainBoard.observationPosts = {}
                                                                                                MainBoard.banners = {}

                                                                                                MainBoard.collectSnapPointsOnAllBoards(settings, {

                                                                                                    seat = function (name, position)
                                                                                                        local str = name:sub(12)
                                                                                                        local index = tonumber(str)
                                                                                                        assert(index, "Not a number: " .. str)
                                                                                                        highCouncilSeats[index] = position
                                                                                                    end,

                                                                                                    space = function (name, position)
                                                                                                        if settings.riseOfIx then
                                                                                                            local ignoredSpaceNames = {
                                                                                                                "assemblyHall",
                                                                                                                "gatherSupport",
                                                                                                                "shipping",
                                                                                                                "acceptContract",
                                                                                                            }
                                                                                                            for _, ignoredSpaceName in ipairs(ignoredSpaceNames) do
                                                                                                                if Helper.startsWith(name, ignoredSpaceName) then
                                                                                                                    return
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                        MainBoard.spaces[name] = {name = name, position = position}
                                                                                                    end,

                                                                                                    post = function (name, position)
                                                                                                        if settings.riseOfIx then
                                                                                                            local ignoredSpaceNames = {
                                                                                                                "choam",
                                                                                                                "landsraadCouncil2"
                                                                                                            }
                                                                                                            for _, ignoredSpaceName in ipairs(ignoredSpaceNames) do
                                                                                                                if Helper.startsWith(name, ignoredSpaceName) then
                                                                                                                    return
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                        MainBoard.observationPosts[name] = {name = name, position = position}
                                                                                                    end,

                                                                                                    spice = function (name, position)
                                                                                                        local token = MainBoard.spiceBonusTokens[name]
                                                                                                        -- bloodlines tuek's sietch spice token higher than others
                                                                                                        -- token.setPosition(position + Vector(0, -0.05, 0))
                                                                                                        token.setPosition(position + Vector(0, 0, 0))
                                                                                                        Helper.noPhysics(token)
                                                                                                        if not MainBoard.spiceBonuses[name] then
                                                                                                            MainBoard.spiceBonuses[name] = Resource.new(token, nil, "spice", 0, name)
                                                                                                        end
                                                                                                    end,

                                                                                                    flag = function (name, position)
                                                                                                        local zone = spawnObject({
                                                                                                            type = 'ScriptingTrigger',
                                                                                                            position = position,
                                                                                                            scale = {0.8, 1, 0.8},
                                                                                                        })
                                                                                                        Helper.markAsTransient(zone)
                                                                                                        MainBoard.banners[name .. "BannerZone"] = zone
                                                                                                    end
                                                                                                })

                                                                                                assert(#highCouncilSeats > 0)
                                                                                                MainBoard.highCouncilPark = Park.createPark(
                                                                                                    "HighCouncil",
                                                                                                    highCouncilSeats,
                                                                                                    Vector(0, 0, 0),
                                                                                                    {Park.createTransientBoundingZone(0, Vector(0.5, 1, 0.5), highCouncilSeats)},
                                                                                                    {"HighCouncilSeatToken"},
                                                                                                    nil,
                                                                                                    true,
                                                                                                true)

                                                                                                -- A trick to ensure that parent space are created before
                                                                                                -- their child spaces (which always have a longer name).
                                                                                                local orderedSpaces = Helper.getValues(MainBoard.spaces)
                                                                                                table.sort(orderedSpaces, function (s1, s2)
                                                                                                    return s1.name:len() < s2.name:len()
                                                                                                end)
                                                                                                for _, space in ipairs(orderedSpaces) do
                                                                                                    MainBoard._createSpaceButton(space)
                                                                                                end

                                                                                                for _, observationPost in pairs(MainBoard.observationPosts) do
                                                                                                    MainBoard._createObservationPostButton(observationPost)
                                                                                                end

                                                                                                for _, bannerZone in pairs(MainBoard.banners) do
                                                                                                    MainBoard._createBannerSpace(bannerZone)
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._getAllBoards(settings)
                                                                                                local boards = {MainBoard.mainBoard}

                                                                                                if settings.numberOfPlayers == 6 then
                                                                                                    assert(MainBoard.emperorBoard)
                                                                                                    table.insert(boards, MainBoard.emperorBoard)
                                                                                                    assert(MainBoard.fremenBoard)
                                                                                                    table.insert(boards, MainBoard.fremenBoard)
                                                                                                end

                                                                                                if settings.riseOfIx then
                                                                                                    table.insert(boards, ShippingTrack.getBoard())
                                                                                                    table.insert(boards, TechMarket.getBoard())
                                                                                                end

                                                                                                return boards
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.collectSnapPointsOnAllBoards(settings, net)
                                                                                                for _, board in ipairs(MainBoard._getAllBoards(settings)) do
                                                                                                    Helper.collectSnapPoints(board, net)
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getHighCouncilSeatPark()
                                                                                                return MainBoard.highCouncilPark
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.occupy(controlableSpace, color)
                                                                                                for _, object in ipairs(controlableSpace.getObjects()) do
                                                                                                    for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                        if Types.isControlMarker(object, otherColor) then
                                                                                                            if otherColor ~= color then
                                                                                                                local p = PlayBoard.getControlMarkerBag(otherColor).getPosition() + Vector(0, 1, 0)
                                                                                                                object.setLock(false)
                                                                                                                object.setPosition(p)
                                                                                                            else
                                                                                                                return
                                                                                                            end
                                                                                                        end
                                                                                                    end
                                                                                                end

                                                                                                local p = controlableSpace.getPosition()
                                                                                                PlayBoard.getControlMarkerBag(color).takeObject({
                                                                                                    -- Position is adjusted so as to insert the token below any dreadnought.
                                                                                                    position = Vector(p.x, 1.79, p.z),
                                                                                                    rotation = Vector(0, 180, 0),
                                                                                                    smooth = false,
                                                                                                    callback_function = function (controlMarker)
                                                                                                        controlMarker.setLock(true)
                                                                                                    end
                                                                                                })
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._createSpaceButton(space)
                                                                                                Helper.createTransientAnchor("AgentPark", space.position - Vector(0, 0.5, 0)).doAfter(function (anchor)
                                                                                                    if MainBoard._findParentSpace(space) == space then

                                                                                                        local p = space.position
                                                                                                        -- FIXME Hardcoded height, use an existing parent anchor.
                                                                                                        local slots = {
                                                                                                            Vector(p.x - 0.36, 1.68, p.z - 0.3),
                                                                                                            Vector(p.x + 0.36, 1.68, p.z + 0.3),
                                                                                                            Vector(p.x - 0.36, 1.68, p.z + 0.3),
                                                                                                        Vector(p.x + 0.36, 1.68, p.z - 0.3)}

                                                                                                        space.zone = Park.createTransientBoundingZone(0, Vector(1, 3, 0.7), slots)
                                                                                                        local tags = {"Agent"}
                                                                                                        space.park = Park.createPark("AgentPark", slots, nil, {space.zone}, tags, nil, false, true)
                                                                                                        local snapPoints = {}
                                                                                                        for _, slot in ipairs(slots) do
                                                                                                            table.insert(snapPoints, Helper.createRelativeSnapPoint(anchor, slot, false, tags))
                                                                                                        end
                                                                                                        anchor.setSnapPoints(snapPoints)
                                                                                                    else
                                                                                                        space.zone = Park.createTransientBoundingZone(0, Vector(0.75, 1, 0.75), {space.position})
                                                                                                    end

                                                                                                    local tooltip = I18N("sendAgentTo", {space = I18N(space.name)})
                                                                                                    Helper.createAreaButton(space.zone, anchor, 1.75, tooltip, PlayBoard.withLeader(function (leader, color, altClick)
                                                                                                        if TurnControl.getCurrentPlayer() == color then
                                                                                                            leader.sendAgent(color, space.name, altClick)
                                                                                                        else
                                                                                                            Dialog.broadcastToColor(I18N('notYourTurn'), color, "Purple")
                                                                                                        end
                                                                                                    end))
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._createObservationPostButton(observationPost)
                                                                                                local slots = {}
                                                                                                for i = 1, 4 do
                                                                                                    table.insert(slots, observationPost.position + Vector(0, (i - 1) * 0.5, 0))
                                                                                                end
                                                                                                Helper.createTransientAnchor("AgentPark", observationPost.position - Vector(0, 0.5, 0)).doAfter(function (anchor)
                                                                                                    observationPost.zone = Park.createTransientBoundingZone(0, Vector(0.75, 1, 0.75), slots)

                                                                                                    local tags = {"Spy"}
                                                                                                    observationPost.park = Park.createPark("SpyPark", slots, nil, {observationPost.zone}, tags, nil, false, true)

                                                                                                    local snapPoints = {}
                                                                                                    for _, slot in ipairs(slots) do
                                                                                                        table.insert(snapPoints, Helper.createRelativeSnapPoint(anchor, slot, false, tags))
                                                                                                    end
                                                                                                    anchor.setSnapPoints(snapPoints)

                                                                                                    local tooltip = I18N("sendSpyTo", {observationPost = I18N(observationPost.name)})
                                                                                                    Helper.createAreaButton(observationPost.zone, anchor, 1.75, tooltip, PlayBoard.withLeader(function (leader, color)
                                                                                                        leader.sendSpy(color, observationPost.name)
                                                                                                    end))
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._createBannerSpace(bannerZone)
                                                                                                Helper.createTransientAnchor("BannerPark", bannerZone.getPosition() - Vector(0, 0.5, 0)).doAfter(function (anchor)
                                                                                                    anchor.setSnapPoints({{
                                                                                                        position = anchor.positionToLocal(bannerZone.getPosition()),
                                                                                                        tags = {"Flag", "Dreadnought"},
                                                                                                        rotation_snap = true,
                                                                                                    }})
                                                                                                end)
                                                                                            end

                                                                                            function MainBoard._findParentSpace(space)
                                                                                                return MainBoard.spaces[MainBoard.findParentSpaceName(space.name)]
                                                                                            end

                                                                                            function MainBoard.findParentSpaceName(spaceName)
                                                                                                assert(MainBoard.spaces[spaceName], "No space named: " .. spaceName)
                                                                                                local parentSpaceName = spaceName
                                                                                                local underscoreIndex = spaceName:find("_")
                                                                                                if underscoreIndex then
                                                                                                    parentSpaceName = spaceName:sub(1, underscoreIndex - 1)
                                                                                                    assert(MainBoard.spaces[parentSpaceName], "No parent space named: " .. parentSpaceName)
                                                                                                end
                                                                                                return parentSpaceName
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.sendAgent(color, spaceName, recallSpy)
                                                                                                local continuation = Helper.createContinuation("MainBoard.sendAgent")

                                                                                                local agent = MainBoard._findProperAgent(color)

                                                                                                local space = MainBoard.spaces[spaceName]
                                                                                                local functionSpaceName = Helper.toCamelCase("_go", space.name)
                                                                                                local goSpace = MainBoard[functionSpaceName]
                                                                                                assert(goSpace, "Unknow go space function: " .. functionSpaceName)

                                                                                                local parentSpace = MainBoard._findParentSpace(space)
                                                                                                local parentSpaceName = parentSpace.name

                                                                                                if not agent then
                                                                                                    Dialog.broadcastToColor(I18N("noAgent"), color, "Purple")
                                                                                                    continuation.cancel()
                                                                                                elseif MainBoard.hasAgentInSpace(parentSpaceName, color) then
                                                                                                    Dialog.broadcastToColor(I18N("agentAlreadyPresent"), color, "Purple")
                                                                                                    continuation.cancel()
                                                                                                else
                                                                                                    local leader = PlayBoard.getLeader(color)
                                                                                                    local innerContinuation = Helper.createContinuation("MainBoard." .. parentSpaceName)

                                                                                                    goSpace(color, leader, innerContinuation)
                                                                                                    innerContinuation.doAfter(function (action)
                                                                                                        -- The innerContinuation never cancels (but returns nil) to allow us to cancel the root continuation.
                                                                                                        if action then
                                                                                                            MainBoard._manageIntelligenceAndInfiltrate(color, parentSpaceName, recallSpy).doAfter(function (goAhead, spy, otherSpy, recallMode)
                                                                                                                if goAhead then
                                                                                                                    local innerInnerContinuation = Helper.createContinuation("MainBoard." .. spaceName .. ".goAhead")
                                                                                                                    Helper.emitEvent("agentSent", color, parentSpaceName)
                                                                                                                    Action.setContext("agentSent", {space = parentSpaceName, cards = Helper.mapValues(PlayBoard.getCardsPlayedThisTurn(color), Helper.getID)})
                                                                                                                    Park.putObject(agent, parentSpace.park)
                                                                                                                    if spy then
                                                                                                                        Park.putObject(spy, PlayBoard.getSpyPark(color))
                                                                                                                        if recallMode == "infiltrateAndIntelligence" then
                                                                                                                            Park.putObject(otherSpy, PlayBoard.getSpyPark(color))
                                                                                                                            Action.log(I18N("infiltrateWithSpy"), color)
                                                                                                                            Action.log(I18N("gatherIntelligenceWithSpy"), color)
                                                                                                                            leader.drawImperiumCards(color, 1, true).doAfter(innerInnerContinuation.run)
                                                                                                                        elseif recallMode == "infiltrate" then
                                                                                                                            Action.log(I18N("infiltrateWithSpy"), color)
                                                                                                                            innerInnerContinuation.run()
                                                                                                                        elseif recallMode == "intelligence" then
                                                                                                                            Action.log(I18N("gatherIntelligenceWithSpy"), color)
                                                                                                                            leader.drawImperiumCards(color, 1, true).doAfter(innerInnerContinuation.run)
                                                                                                                        else
                                                                                                                            error("Unexpected mode: " .. tostring(recallMode))
                                                                                                                            innerInnerContinuation.run()
                                                                                                                        end
                                                                                                                    else
                                                                                                                        innerInnerContinuation.run()
                                                                                                                    end
                                                                                                                    innerInnerContinuation.doAfter(function ()
                                                                                                                        action()
                                                                                                                        -- FIXME We are cheating here...
                                                                                                                        Helper.onceTimeElapsed(2).doAfter(function ()
                                                                                                                            Action.log(nil, color)
                                                                                                                            Action.unsetContext("agentSent")
                                                                                                                        end)
                                                                                                                        continuation.run()
                                                                                                                    end)
                                                                                                                else
                                                                                                                    continuation.cancel()
                                                                                                                end
                                                                                                            end)
                                                                                                        else
                                                                                                            continuation.cancel()
                                                                                                        end
                                                                                                    end)
                                                                                                end

                                                                                                return continuation
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._findProperAgent(color)
                                                                                                local leftAlly = Commander.getLeftSeatedAlly(color)
                                                                                                local rightAlly = Commander.getRightSeatedAlly(color)
                                                                                                local agentPark = PlayBoard.getAgentPark(color)
                                                                                                local candidates = {}
                                                                                                if Commander.isCommander(color) then
                                                                                                    local allyColor = Commander.getActivatedAlly(color)
                                                                                                    if allyColor then
                                                                                                        for _, agent in ipairs(Park.getObjects(agentPark)) do
                                                                                                            if (leftAlly == allyColor and agent.hasTag("Left"))
                                                                                                                or (rightAlly == allyColor and agent.hasTag("Right")) then
                                                                                                                table.insert(candidates, agent)
                                                                                                            end
                                                                                                        end
                                                                                                    end
                                                                                                else
                                                                                                    for _, agent in ipairs(Park.getObjects(agentPark)) do
                                                                                                        table.insert(candidates, agent)
                                                                                                    end
                                                                                                end
                                                                                                if #candidates == 0 then
                                                                                                    return nil
                                                                                                elseif #candidates > 1 then
                                                                                                    for i, agent in ipairs(candidates) do
                                                                                                        if agent.hasTag("Swordmaster") then
                                                                                                            table.remove(candidates, i)
                                                                                                            break
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                                return candidates[1]
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.sendSpy(color, observationPostName)
                                                                                                local observationPost = MainBoard.observationPosts[observationPostName]
                                                                                                assert(observationPost, observationPostName)

                                                                                                local spyPark = PlayBoard.getSpyPark(color)
                                                                                                if not Park.isEmpty(spyPark) then
                                                                                                    Helper.emitEvent("spySent", color, observationPostName)
                                                                                                    Park.transfert(1, spyPark, observationPost.park)
                                                                                                    return true
                                                                                                else
                                                                                                    return false
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.recallSpy(color, observationPostName)
                                                                                                local observationPost = MainBoard.observationPosts[observationPostName]
                                                                                                assert(observationPost, observationPostName)

                                                                                                local spyPark = PlayBoard.getSpyPark(color)
                                                                                                return Park.transfert(1, observationPost.park, spyPark) > 0
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.findRecallableSpies(color)
                                                                                                local recallableSpies = {}
                                                                                                for observationPostName, observationPost in pairs(MainBoard.observationPosts) do
                                                                                                    for _, spy in ipairs(Park.getObjects(observationPost.park)) do
                                                                                                        if spy.hasTag(color) then
                                                                                                            table.insert(recallableSpies, observationPostName)
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                                return recallableSpies
                                                                                            end

                                                                                            ---@param recallSpy boolean? Explicitly require the action and fail if it cannot be executed.
                                                                                            ---In the case of the "infiltrate + gather intelligence" combo , only applies to the first.
                                                                                            function MainBoard._manageIntelligenceAndInfiltrate(color, spaceName, recallSpy)
                                                                                                local continuation = Helper.createContinuation("MainBoard._manageIntelligenceAndInfiltrate")

                                                                                                local recallableSpies = MainBoard.getRecallableSpies(color, spaceName)

                                                                                                local hasCardsToDraw = PlayBoard.getDrawDeck(color) or PlayBoard.getDiscard(color)

                                                                                                -- We have already verified that there is no agent of the same color,
                                                                                                -- so any remaining agent must be an enemy.
                                                                                                local enemyAgentPresent = MainBoard.hasAgentInSpace(spaceName)

                                                                                                if not enemyAgentPresent or MainBoard._couldInfiltrateByOtherMeans(color, spaceName) then
                                                                                                    if #recallableSpies == 0 or not hasCardsToDraw then
                                                                                                        if recallSpy then
                                                                                                            Dialog.broadcastToColor(I18N('noSpyToRecallOrCardToDraw'), color, "Purple")
                                                                                                            continuation.run(false)
                                                                                                        else
                                                                                                            continuation.run(true)
                                                                                                        end
                                                                                                    elseif recallSpy then
                                                                                                        MainBoard._recallSpy(color, recallableSpies, continuation, "intelligence")
                                                                                                    else
                                                                                                        Dialog.showYesOrNoDialog(color, I18N("confirmSpyRecall"), continuation, function (confirmed)
                                                                                                            if confirmed then
                                                                                                                MainBoard._recallSpy(color, recallableSpies, continuation, "intelligence")
                                                                                                            else
                                                                                                                continuation.run(true)
                                                                                                            end
                                                                                                        end)
                                                                                                    end
                                                                                                else
                                                                                                    if #recallableSpies == 0 then
                                                                                                        Dialog.broadcastToColor(I18N("noSpyToInfiltrate"), color, "Purple")
                                                                                                        continuation.run(false)
                                                                                                    elseif #recallableSpies > 1 and hasCardsToDraw then
                                                                                                        Dialog.showYesOrNoDialog(color, I18N("confirmSpyRecall"), continuation, function (confirmed)
                                                                                                            if confirmed then
                                                                                                                MainBoard._recallSpy(color, recallableSpies, continuation, "infiltrateAndIntelligence")
                                                                                                            else
                                                                                                                MainBoard._recallSpy(color, recallableSpies, continuation, "infiltrate")
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        MainBoard._recallSpy(color, recallableSpies, continuation, "infiltrate")
                                                                                                    end
                                                                                                end

                                                                                                return continuation
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._couldInfiltrateByOtherMeans(color, spaceName)
                                                                                                local details = MainBoard.spaceDetails[spaceName]
                                                                                                assert(details, spaceName)

                                                                                                -- Should be equivalent to the (unused) function 'ImperiumCard._resolveCard(card).factions'.
                                                                                                local infiltrationCards = {
                                                                                                    kwisatzHaderach = {},
                                                                                                    courtIntrigue = {"emperor", "greatHouses"},
                                                                                                    guildAccord = {"spacingGuild"},
                                                                                                    webOfPower = {"beneGesserit"},
                                                                                                    jamis = {"fremen", "fringeWorlds"},
                                                                                                    choamDelegate = {"desert", "choam"},
                                                                                                    bountyHunter = {"city"},
                                                                                                    embeddedAgent = {"landsraad", "ix"},
                                                                                                    tleilaxuInfiltrator = {},
                                                                                                }

                                                                                                -- TODO Introduce IoD.
                                                                                                local leader = PlayBoard.getLeader(color)
                                                                                                if leader.name == "helenaRichese" and Helper.isElementOf(details.group, {"landsraad", "ix"}) then
                                                                                                    return true
                                                                                                end

                                                                                                for cardName, groups in pairs(infiltrationCards) do
                                                                                                    local groupMatchs = Helper.isEmpty(groups) or Helper.isElementOf(details.group, groups)
                                                                                                    if groupMatchs and PlayBoard.hasPlayedThisTurn(color, cardName) then
                                                                                                        return true
                                                                                                    end
                                                                                                end
                                                                                                return false
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._recallSpy(color, recallableSpies, continuation, recallMode)
                                                                                                if recallMode == "infiltrateAndIntelligence" then
                                                                                                    -- Choosing 2 spies among 3 or more, or choosing twice in a row,
                                                                                                    -- is inconvenient. Good thing it can't happen.
                                                                                                    assert(#recallableSpies == 2)
                                                                                                    continuation.run(true, recallableSpies[1].spy, recallableSpies[2].spy, recallMode)
                                                                                                elseif #recallableSpies == 1 then
                                                                                                    continuation.run(true, recallableSpies[1].spy, nil, recallMode)
                                                                                                else
                                                                                                    local options = Helper.mapValues(recallableSpies, function (recallableSpy)
                                                                                                        return I18N(recallableSpy.toSpaceName)
                                                                                                    end)
                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N("selectSpyToRecall"), options, continuation, function (index)
                                                                                                        if index > 0 then
                                                                                                            continuation.run(true, recallableSpies[index].spy, nil, recallMode)
                                                                                                        else
                                                                                                            continuation.run(false)
                                                                                                        end
                                                                                                    end)
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getRecallableSpies(color, spaceName)
                                                                                                local details = MainBoard.spaceDetails[spaceName]
                                                                                                assert(details, spaceName)

                                                                                                local findConnectedSpaceName = function (postName)
                                                                                                    for otherSpaceName, otherDetails in pairs(MainBoard.spaceDetails) do
                                                                                                        if otherSpaceName ~= spaceName and Helper.isElementOf(postName, otherDetails.posts) then
                                                                                                            return otherSpaceName
                                                                                                        end
                                                                                                    end
                                                                                                    return nil
                                                                                                end

                                                                                                local recallableSpies = {}
                                                                                                for _, postName in ipairs(details.posts) do
                                                                                                    local observationPost = MainBoard.observationPosts[postName]
                                                                                                    if observationPost then
                                                                                                        for _, spy in ipairs(Park.getObjects(observationPost.park)) do
                                                                                                            if spy.hasTag(color) then
                                                                                                                table.insert(recallableSpies, {
                                                                                                                    toSpaceName = findConnectedSpaceName(postName),
                                                                                                                    spy = spy,
                                                                                                                })
                                                                                                                break
                                                                                                            end
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                                return recallableSpies
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.sendRivalAgent(color, spaceName)
                                                                                                local space = MainBoard.spaces[spaceName]
                                                                                                if not Park.isEmpty(PlayBoard.getAgentPark(color)) then
                                                                                                    local agentPark = PlayBoard.getAgentPark(color)
                                                                                                    Helper.emitEvent("agentSent", color, spaceName)
                                                                                                    Action.setContext("agentSent", {space = spaceName})
                                                                                                    Park.transfert(1, agentPark, space.park)
                                                                                                    return true
                                                                                                else
                                                                                                    return false
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._hasResource(leader, color, resourceName, amount)
                                                                                                local realAmount = leader.bargain(color, resourceName, amount)
                                                                                                return PlayBoard.getResource(color, resourceName):get() >= realAmount
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._checkGenericAccess(color, leader, requirements)
                                                                                                if PlayBoard.isRival(color) then
                                                                                                    return true
                                                                                                end

                                                                                                for requirement, value in pairs(requirements) do
                                                                                                    if Helper.isElementOf(requirement, {"spice", "water", "solari"}) then
                                                                                                        if not MainBoard._hasResource(leader, color, requirement, value) then
                                                                                                            Dialog.broadcastToColor(I18N("noResource", {resource = I18N(requirement .. "Amount")}), color, "Purple")
                                                                                                            return false
                                                                                                        end
                                                                                                    elseif requirement == "friendship" then
                                                                                                        local exemptionCards = {
                                                                                                            "undercoverAsset",
                                                                                                        }
                                                                                                        for _, cardName in ipairs(exemptionCards) do
                                                                                                            if PlayBoard.hasPlayedThisTurn(color, cardName) then
                                                                                                                return true
                                                                                                            end
                                                                                                        end
                                                                                                        if not InfluenceTrack.hasFriendship(color, value) then
                                                                                                            Dialog.broadcastToColor(I18N("noFriendship", {withFaction = I18N(Helper.toCamelCase("with", value))}), color, "Purple")
                                                                                                            return false
                                                                                                        end
                                                                                                    end
                                                                                                end

                                                                                                return true
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goFremkit(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    leader.drawImperiumCards(color, 1)
                                                                                                    leader.influence(color, "fremen", 1)
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goDesertTactics(color, leader, continuation)
                                                                                                if MainBoard._checkGenericAccess(color, leader, {water = 1}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "water", -1)
                                                                                                        leader.troops(color, "supply", "garrison", 1)
                                                                                                        leader.influence(color, "fremen", 1)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goSecrets(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    leader.drawIntrigues(color, 1)
                                                                                                    for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                        if otherColor ~= color then
                                                                                                            -- bloodlines tech gene-locked vault
                                                                                                            if PlayBoard.hasTech(otherColor, "bl_GeneLockedVault") then
                                                                                                                if #PlayBoard.getIntrigues(otherColor) > 4 then
                                                                                                                    leader.stealIntrigues(color, otherColor, 1)
                                                                                                                end
                                                                                                            elseif #PlayBoard.getIntrigues(otherColor) > 3 then
                                                                                                                leader.stealIntrigues(color, otherColor, 1)
                                                                                                            end
                                                                                                        end
                                                                                                    end
                                                                                                    leader.influence(color, "beneGesserit", 1)
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goEspionage(color, leader, continuation)
                                                                                                -- bloodlines tech navigation chamber
                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, {spice = 0}) then
                                                                                                        continuation.run(function ()
                                                                                                            leader.resources(color, "spice", 0)
                                                                                                            leader.drawImperiumCards(color, 1)
                                                                                                            leader.influence(color, "beneGesserit", 1)
                                                                                                        end)
                                                                                                    end
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {spice = 1}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "spice", -1)
                                                                                                        leader.drawImperiumCards(color, 1)
                                                                                                        leader.influence(color, "beneGesserit", 1)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goDeliverSupplies(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    leader.resources(color, "water", 1)
                                                                                                    leader.influence(color, "spacingGuild", 1)
                                                                                                end)

                                                                                                -- bloodlines sardaukar commander
                                                                                                -- if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                --     if MainBoard._hasResource(leader, color, "solari", 1) then
                                                                                                --         if MainBoard.sardaukarCommanders.sc_DeliverSupplies ~= nil then
                                                                                                --             Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                --                 if confirmed then
                                                                                                --                     local leader = PlayBoard.getLeader(color)
                                                                                                --                     broadcastToAll(I18N("recruitSardaukarCommanderDeliverSupplies"), color)
                                                                                                --                     Combat.recruitSardaukarCommander(color)
                                                                                                --                     Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                --                         leader.resources(color, "solari", -1)
                                                                                                --                         MainBoard.sardaukarCommanders.sc_DeliverSupplies.destruct()
                                                                                                --                         MainBoard.sardaukarCommanders.sc_DeliverSupplies = nil
                                                                                                --                     end)
                                                                                                --                 else
                                                                                                --                     continuation.run(true)
                                                                                                --                 end
                                                                                                --             end)
                                                                                                --         end
                                                                                                --     end
                                                                                                -- elseif MainBoard._hasResource(leader, color, "solari", 2) then
                                                                                                --     if MainBoard.sardaukarCommanders.sc_DeliverSupplies ~= nil then
                                                                                                --         Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                --             if confirmed then
                                                                                                --                 local leader = PlayBoard.getLeader(color)
                                                                                                --                 broadcastToAll(I18N("recruitSardaukarCommanderDeliverSupplies"), color)
                                                                                                --                 Combat.recruitSardaukarCommander(color)
                                                                                                --                 Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                --                     leader.resources(color, "solari", -2)
                                                                                                --                     MainBoard.sardaukarCommanders.sc_DeliverSupplies.destruct()
                                                                                                --                     MainBoard.sardaukarCommanders.sc_DeliverSupplies = nil
                                                                                                --                 end)
                                                                                                --             else
                                                                                                --                 continuation.run(true)
                                                                                                --             end
                                                                                                --         end)
                                                                                                --     end
                                                                                                -- end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goHeighliner(color, leader, continuation)
                                                                                                -- bloodlines tech navigation chamber
                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, {spice = 4}) then
                                                                                                        continuation.run(function ()
                                                                                                            leader.resources(color, "spice", -4)
                                                                                                            leader.troops(color, "supply", "garrison", 5)
                                                                                                            leader.influence(color, "spacingGuild", 1)
                                                                                                        end)
                                                                                                    end
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {spice = 5}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "spice", -5)
                                                                                                        leader.troops(color, "supply", "garrison", 5)
                                                                                                        leader.influence(color, "spacingGuild", 1)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goDutifulService(color, leader, continuation)
                                                                                                assert(TurnControl.getPlayerCount() < 6)
                                                                                                continuation.run(function ()
                                                                                                    leader.pickContract(color)
                                                                                                    leader.influence(color, "emperor", 1)
                                                                                                end)

                                                                                                -- bloodlines sardaukar commander
                                                                                                -- if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                --     if MainBoard._hasResource(leader, color, "solari", 1) then
                                                                                                --         if MainBoard.sardaukarCommanders.sc_DutifulService ~= nil then
                                                                                                --             Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                --                 if confirmed then
                                                                                                --                     local leader = PlayBoard.getLeader(color)
                                                                                                --                     broadcastToAll(I18N("recruitSardaukarCommanderDutifulService"), color)
                                                                                                --                     Combat.recruitSardaukarCommander(color)
                                                                                                --                     Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                --                         leader.resources(color, "solari", -1)
                                                                                                --                         MainBoard.sardaukarCommanders.sc_DutifulService.destruct()
                                                                                                --                         MainBoard.sardaukarCommanders.sc_DutifulService = nil
                                                                                                --                     end)
                                                                                                --                 else
                                                                                                --                     continuation.run(true)
                                                                                                --                 end
                                                                                                --             end)
                                                                                                --         end
                                                                                                --     end
                                                                                                -- elseif MainBoard._hasResource(leader, color, "solari", 2) then
                                                                                                --     if MainBoard.sardaukarCommanders.sc_DutifulService ~= nil then
                                                                                                --         Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                --             if confirmed then
                                                                                                --                 local leader = PlayBoard.getLeader(color)
                                                                                                --                 broadcastToAll(I18N("recruitSardaukarCommanderDutifulService"), color)
                                                                                                --                 Combat.recruitSardaukarCommander(color)
                                                                                                --                 Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                --                     leader.resources(color, "solari", -2)
                                                                                                --                     MainBoard.sardaukarCommanders.sc_DutifulService.destruct()
                                                                                                --                     MainBoard.sardaukarCommanders.sc_DutifulService = nil
                                                                                                --                 end)
                                                                                                --             else
                                                                                                --                 continuation.run(true)
                                                                                                --             end
                                                                                                --         end)
                                                                                                --     end
                                                                                                -- end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goSardaukar(color, leader, continuation)
                                                                                                -- Used in both 4P and 6P modes.
                                                                                                if TurnControl.getPlayerCount() < 6 or Commander.isShaddam(color) then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, {spice = MainBoard.getSardaukarCost()}) then
                                                                                                        continuation.run(function ()
                                                                                                            leader.resources(color, "spice", -MainBoard.getSardaukarCost())
                                                                                                            leader.troops(color, "supply", "garrison", 4)
                                                                                                            leader.drawIntrigues(color, 1)
                                                                                                            leader.influence(color, "emperor", 1)
                                                                                                        end)
                                                                                                    else
                                                                                                        continuation.run()
                                                                                                    end
                                                                                                else
                                                                                                    Dialog.broadcastToColor(I18N("forbiddenAccess"), color, "Purple")
                                                                                                    continuation.run()
                                                                                                end

                                                                                                -- bloodlines sardaukar commander
                                                                                                -- if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                --     if MainBoard._hasResource(leader, color, "solari", 1) then
                                                                                                --         if MainBoard.sardaukarCommanders.sc_Sardaukar ~= nil then
                                                                                                --             Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                --                 if confirmed then
                                                                                                --                     local leader = PlayBoard.getLeader(color)
                                                                                                --                     broadcastToAll(I18N("recruitSardaukarCommanderSardaukar"), color)
                                                                                                --                     Combat.recruitSardaukarCommander(color)
                                                                                                --                     Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                --                         leader.resources(color, "solari", -1)
                                                                                                --                         MainBoard.sardaukarCommanders.sc_Sardaukar.destruct()
                                                                                                --                         MainBoard.sardaukarCommanders.sc_Sardaukar = nil
                                                                                                --                     end)
                                                                                                --                 else
                                                                                                --                     continuation.run(true)
                                                                                                --                 end
                                                                                                --             end)
                                                                                                --         end
                                                                                                --     end
                                                                                                -- elseif MainBoard._hasResource(leader, color, "solari", 2) then
                                                                                                --     if MainBoard.sardaukarCommanders.sc_Sardaukar ~= nil then
                                                                                                --         Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                --             if confirmed then
                                                                                                --                 local leader = PlayBoard.getLeader(color)
                                                                                                --                 broadcastToAll(I18N("recruitSardaukarCommanderSardaukar"), color)
                                                                                                --                 Combat.recruitSardaukarCommander(color)
                                                                                                --                 Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                --                     leader.resources(color, "solari", -2)
                                                                                                --                     MainBoard.sardaukarCommanders.sc_Sardaukar.destruct()
                                                                                                --                     MainBoard.sardaukarCommanders.sc_Sardaukar = nil
                                                                                                --                 end)
                                                                                                --             else
                                                                                                --                 continuation.run(true)
                                                                                                --             end
                                                                                                --         end)
                                                                                                --     end
                                                                                                -- end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getSardaukarCost()
                                                                                                -- bloodlines tech navigation chamber
                                                                                                local color = TurnControl.players[TurnControl.currentPlayerLuaIndex]

                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    return TurnControl.getPlayerCount() == 6 and 2 or 3
                                                                                                else
                                                                                                    return TurnControl.getPlayerCount() == 6 and 3 or 4
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goVastWealth(color, leader, continuation)
                                                                                                assert(TurnControl.getPlayerCount() == 6)
                                                                                                if Commander.isShaddam(color) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "solari", 3)
                                                                                                        leader.influence(color, "emperor", 1)
                                                                                                    end)
                                                                                                else
                                                                                                    Dialog.broadcastToColor(I18N("forbiddenAccess"), color, "Purple")
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goMilitarySupport(color, leader, continuation)
                                                                                                assert(TurnControl.getPlayerCount() == 6)
                                                                                                if MainBoard._checkGenericAccess(color, leader, {spice = 2}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "spice", -2)
                                                                                                        leader.influence(color, "greatHouses", 1)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goEconomicSupport(color, leader, continuation)
                                                                                                assert(TurnControl.getPlayerCount() == 6)
                                                                                                continuation.run(function ()
                                                                                                    leader.resources(color, "spice", 1)
                                                                                                    leader.influence(color, "greatHouses", 1)
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goControversialTechnology(color, leader, continuation)
                                                                                                assert(TurnControl.getPlayerCount() == 6)
                                                                                                if MainBoard._checkGenericAccess(color, leader, {spice = 2}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "spice", -2)
                                                                                                        leader.drawImperiumCards(color, 1)
                                                                                                        leader.drawIntrigues(color, 1)
                                                                                                        leader.influence(color, "fringeWorlds", 1)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goExpedition(color, leader, continuation)
                                                                                                assert(TurnControl.getPlayerCount() == 6)
                                                                                                continuation.run(function ()
                                                                                                    leader.influence(color, "fringeWorlds", 1)
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goHardyWarriors(color, leader, continuation)
                                                                                                assert(TurnControl.getPlayerCount() == 6)
                                                                                                if not Commander.isMuadDib(color) then
                                                                                                    Dialog.broadcastToColor(I18N("forbiddenAccess"), color, "Purple")
                                                                                                    continuation.run()
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {water = 1}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "water", -1)
                                                                                                        leader.troops(color, "supply", "garrison", 2)
                                                                                                        leader.influence(color, "fremen", 1)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            function MainBoard._goDesertMastery(color, leader, continuation)
                                                                                                assert(TurnControl.getPlayerCount() == 6)
                                                                                                if Commander.isMuadDib(color) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.drawImperiumCards(color, 1)
                                                                                                        leader.resources(color, "spice", 1)
                                                                                                        leader.influence(color, "fremen", 1)
                                                                                                    end)
                                                                                                else
                                                                                                    Dialog.broadcastToColor(I18N("forbiddenAccess"), color, "Purple")
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goHighCouncil(color, leader, continuation)
                                                                                                -- bloodlines tech navigation chamber
                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, {solari = 4}) then
                                                                                                        continuation.run(function ()
                                                                                                            leader.resources(color, "solari", -4)
                                                                                                            -- bloodlines tech buy space
                                                                                                            TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 1)
                                                                                                            if PlayBoard.hasHighCouncilSeat(color) then
                                                                                                                leader.resources(color, "spice", 2)
                                                                                                                leader.drawIntrigues(color, 1)
                                                                                                                leader.troops(color, "supply", "garrison", 3)
                                                                                                            else
                                                                                                                leader.takeHighCouncilSeat(color)
                                                                                                            end
                                                                                                        end)
                                                                                                    end
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {solari = 5}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "solari", -5)
                                                                                                        -- bloodlines tech buy space
                                                                                                        TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 1)
                                                                                                        if PlayBoard.hasHighCouncilSeat(color) then
                                                                                                            leader.resources(color, "spice", 2)
                                                                                                            leader.drawIntrigues(color, 1)
                                                                                                            leader.troops(color, "supply", "garrison", 3)
                                                                                                        else
                                                                                                            leader.takeHighCouncilSeat(color)
                                                                                                        end
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end

                                                                                                -- bloodlines sardaukar commander
                                                                                                -- Helper.onceTimeElapsed(1).doAfter(function ()
                                                                                                --     if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                --         if MainBoard._hasResource(leader, color, "solari", 1) then
                                                                                                --             if MainBoard.sardaukarCommanders.sc_HighCouncil ~= nil then
                                                                                                --                 Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                --                     if confirmed then
                                                                                                --                         local leader = PlayBoard.getLeader(color)
                                                                                                --                         broadcastToAll(I18N("recruitSardaukarCommanderHighCouncil"), color)
                                                                                                --                         Combat.recruitSardaukarCommander(color)
                                                                                                --                         Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                --                             leader.resources(color, "solari", -1)
                                                                                                --                             MainBoard.sardaukarCommanders.sc_HighCouncil.destruct()
                                                                                                --                             MainBoard.sardaukarCommanders.sc_HighCouncil = nil
                                                                                                --                         end)
                                                                                                --                     else
                                                                                                --                         continuation.run(true)
                                                                                                --                     end
                                                                                                --                 end)
                                                                                                --             end
                                                                                                --         end
                                                                                                --     elseif MainBoard._hasResource(leader, color, "solari", 2) then
                                                                                                --         if MainBoard.sardaukarCommanders.sc_HighCouncil ~= nil then
                                                                                                --             Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                --                 if confirmed then
                                                                                                --                     local leader = PlayBoard.getLeader(color)
                                                                                                --                     broadcastToAll(I18N("recruitSardaukarCommanderHighCouncil"), color)
                                                                                                --                     Combat.recruitSardaukarCommander(color)
                                                                                                --                     Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                --                         leader.resources(color, "solari", -2)
                                                                                                --                         MainBoard.sardaukarCommanders.sc_HighCouncil.destruct()
                                                                                                --                         MainBoard.sardaukarCommanders.sc_HighCouncil = nil
                                                                                                --                     end)
                                                                                                --                 else
                                                                                                --                     continuation.run(true)
                                                                                                --                 end
                                                                                                --             end)
                                                                                                --         end
                                                                                                --     end
                                                                                                -- end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goImperialPrivilege(color, leader, continuation)
                                                                                                -- bloodlines tech navigation chamber
                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, {solari = 2, friendship = "emperor"}) then
                                                                                                        continuation.run(function ()
                                                                                                            leader.resources(color, "solari", -2)
                                                                                                            -- bloodlines tech buy space
                                                                                                            if PlayBoard.hasHighCouncilSeat(color) then
                                                                                                                TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 1)
                                                                                                            else
                                                                                                                TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 0)
                                                                                                            end
                                                                                                            leader.drawImperiumCards(color, 1)
                                                                                                        end)
                                                                                                    end
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {solari = 3, friendship = "emperor"}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "solari", -3)
                                                                                                        -- bloodlines tech buy space
                                                                                                        if PlayBoard.hasHighCouncilSeat(color) then
                                                                                                            TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 1)
                                                                                                        else
                                                                                                            TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 0)
                                                                                                        end
                                                                                                        leader.drawImperiumCards(color, 1)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goSwordmaster(color, leader, continuation)
                                                                                                if not Hagal.isSwordmasterAvailable() then
                                                                                                    Dialog.broadcastToColor(I18N("unavailableSwordmaster"), color, "Purple")
                                                                                                    continuation.run()
                                                                                                elseif PlayBoard.hasSwordmaster(color) then
                                                                                                    Dialog.broadcastToColor(I18N("alreadyHaveSwordmaster"), color, "Purple")
                                                                                                    continuation.run()
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {solari = MainBoard._getSwordmasterCost()}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "solari", -MainBoard._getSwordmasterCost())
                                                                                                        -- bloodlines tech buy space
                                                                                                        if PlayBoard.hasHighCouncilSeat(color) then
                                                                                                            TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 1)
                                                                                                        else
                                                                                                            TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 0)
                                                                                                        end
                                                                                                        -- Wait for the first agent sent to be marked as moving (not resting),
                                                                                                        -- then move the swordmaster. Otherwise, the target agent park will
                                                                                                        -- grab the first agent back to the park when tidying it up.
                                                                                                        Helper.onceFramesPassed(1).doAfter(function ()
                                                                                                            leader.recruitSwordmaster(color)
                                                                                                        end)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._getSwordmasterCost()
                                                                                                local firstAccess = #Helper.filter(PlayBoard.getActivePlayBoardColors(), PlayBoard.hasSwordmaster) == 0
                                                                                                -- bloodlines duncan swordmaster cost
                                                                                                local color = TurnControl.players[TurnControl.currentPlayerLuaIndex]

                                                                                                -- bloodlines tech navigation chamber
                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    if PlayBoard.getLeader(color).name == "bl_Duncan" then
                                                                                                        return firstAccess and 5 or 3
                                                                                                    else
                                                                                                        return firstAccess and 7 or 5
                                                                                                    end
                                                                                                else
                                                                                                    if PlayBoard.getLeader(color).name == "bl_Duncan" then
                                                                                                        return firstAccess and 6 or 4
                                                                                                    else
                                                                                                        return firstAccess and 8 or 6
                                                                                                    end
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goAssemblyHall(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    -- bloodlines tech buy space
                                                                                                    if PlayBoard.hasHighCouncilSeat(color) then
                                                                                                        TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 1)
                                                                                                    else
                                                                                                        TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 0)
                                                                                                    end
                                                                                                    leader.drawIntrigues(color, 1)
                                                                                                    leader.resources(color, "persuasion", 1)

                                                                                                    -- bloodlines sardaukar commander
                                                                                                    -- if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                    --     if MainBoard._hasResource(leader, color, "solari", 1) then
                                                                                                    --         if MainBoard.sardaukarCommanders.sc_AssemblyHall ~= nil then
                                                                                                    --             Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                    --                 if confirmed then
                                                                                                    --                     local leader = PlayBoard.getLeader(color)
                                                                                                    --                     broadcastToAll(I18N("recruitSardaukarCommanderAssemblyHall"), color)
                                                                                                    --                     Combat.recruitSardaukarCommander(color)
                                                                                                    --                     Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                    --                         leader.resources(color, "solari", -1)
                                                                                                    --                         MainBoard.sardaukarCommanders.sc_AssemblyHall.destruct()
                                                                                                    --                         MainBoard.sardaukarCommanders.sc_AssemblyHall = nil
                                                                                                    --                     end)
                                                                                                    --                 else
                                                                                                    --                     continuation.run(true)
                                                                                                    --                 end
                                                                                                    --             end)
                                                                                                    --         end
                                                                                                    --     end
                                                                                                    -- elseif MainBoard._hasResource(leader, color, "solari", 2) then
                                                                                                    --     if MainBoard.sardaukarCommanders.sc_AssemblyHall ~= nil then
                                                                                                    --         Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                    --             if confirmed then
                                                                                                    --                 local leader = PlayBoard.getLeader(color)
                                                                                                    --                 broadcastToAll(I18N("recruitSardaukarCommanderAssemblyHall"), color)
                                                                                                    --                 Combat.recruitSardaukarCommander(color)
                                                                                                    --                 Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                    --                     leader.resources(color, "solari", -2)
                                                                                                    --                     MainBoard.sardaukarCommanders.sc_AssemblyHall.destruct()
                                                                                                    --                     MainBoard.sardaukarCommanders.sc_AssemblyHall = nil
                                                                                                    --                 end)
                                                                                                    --             else
                                                                                                    --                 continuation.run(true)
                                                                                                    --             end
                                                                                                    --         end)
                                                                                                    --     end
                                                                                                    -- end
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goGatherSupport(color, leader, continuation)
                                                                                                -- bloodlines tech navigation chamber
                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    if MainBoard._hasResource(leader, color, "solari", 1) then
                                                                                                        local options = {
                                                                                                            I18N("noWaterOption"),
                                                                                                            I18N("withWaterOption"),
                                                                                                        }
                                                                                                        Dialog.showOptionsAndCancelDialog(color, I18N("goGatherSupport"), options, continuation, function (index)
                                                                                                            if index == 1 then
                                                                                                                MainBoard._goGatherSupport_NoWater(color, leader, continuation)
                                                                                                            elseif index == 2 then
                                                                                                                MainBoard._goGatherSupport_WithWater(color, leader, continuation)
                                                                                                            else
                                                                                                                assert(index == 0)
                                                                                                                continuation.run()
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        MainBoard._goGatherSupport_NoWater(color, leader, continuation)
                                                                                                    end
                                                                                                elseif MainBoard._hasResource(leader, color, "solari", 2) then
                                                                                                    local options = {
                                                                                                        I18N("noWaterOption"),
                                                                                                        I18N("withWaterOption"),
                                                                                                    }
                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N("goGatherSupport"), options, continuation, function (index)
                                                                                                        if index == 1 then
                                                                                                            MainBoard._goGatherSupport_NoWater(color, leader, continuation)
                                                                                                        elseif index == 2 then
                                                                                                            MainBoard._goGatherSupport_WithWater(color, leader, continuation)
                                                                                                        else
                                                                                                            assert(index == 0)
                                                                                                            continuation.run()
                                                                                                        end
                                                                                                    end)
                                                                                                else
                                                                                                    MainBoard._goGatherSupport_NoWater(color, leader, continuation)
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goGatherSupport_WithWater(color, leader, continuation)
                                                                                                -- bloodlines tech navigation chamber
                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, {solari = 1}) then
                                                                                                        continuation.run(function ()
                                                                                                            leader.resources(color, "solari", -1)
                                                                                                            -- bloodlines tech buy space
                                                                                                            if PlayBoard.hasHighCouncilSeat(color) then
                                                                                                                TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 1)
                                                                                                            else
                                                                                                                TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 0)
                                                                                                            end
                                                                                                            leader.troops(color, "supply", "garrison", 2)
                                                                                                            leader.resources(color, "water", 1)
                                                                                                        end)
                                                                                                    end
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {solari = 2}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "solari", -2)
                                                                                                        -- bloodlines tech buy space
                                                                                                        if PlayBoard.hasHighCouncilSeat(color) then
                                                                                                            TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 1)
                                                                                                        else
                                                                                                            TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 0)
                                                                                                        end
                                                                                                        leader.troops(color, "supply", "garrison", 2)
                                                                                                        leader.resources(color, "water", 1)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end

                                                                                                -- bloodlines sardaukar commander
                                                                                                -- Helper.onceTimeElapsed(1).doAfter(function ()
                                                                                                --     if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                --         if MainBoard._hasResource(leader, color, "solari", 1) then
                                                                                                --             if MainBoard.sardaukarCommanders.sc_GatherSupport ~= nil then
                                                                                                --                 Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                --                     if confirmed then
                                                                                                --                         local leader = PlayBoard.getLeader(color)
                                                                                                --                         broadcastToAll(I18N("recruitSardaukarCommanderGatherSupport"), color)
                                                                                                --                         Combat.recruitSardaukarCommander(color)
                                                                                                --                         Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                --                             leader.resources(color, "solari", -1)
                                                                                                --                             MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()
                                                                                                --                             MainBoard.sardaukarCommanders.sc_GatherSupport = nil
                                                                                                --                         end)
                                                                                                --                     else
                                                                                                --                         continuation.run(true)
                                                                                                --                     end
                                                                                                --                 end)
                                                                                                --             end
                                                                                                --         end
                                                                                                --     elseif MainBoard._hasResource(leader, color, "solari", 2) then
                                                                                                --         if MainBoard.sardaukarCommanders.sc_GatherSupport ~= nil then
                                                                                                --             Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                --                 if confirmed then
                                                                                                --                     local leader = PlayBoard.getLeader(color)
                                                                                                --                     broadcastToAll(I18N("recruitSardaukarCommanderGatherSupport"), color)
                                                                                                --                     Combat.recruitSardaukarCommander(color)
                                                                                                --                     Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                --                         leader.resources(color, "solari", -2)
                                                                                                --                         MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()
                                                                                                --                         MainBoard.sardaukarCommanders.sc_GatherSupport = nil
                                                                                                --                     end)
                                                                                                --                 else
                                                                                                --                     continuation.run(true)
                                                                                                --                 end
                                                                                                --             end)
                                                                                                --         end
                                                                                                --     end
                                                                                                -- end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goGatherSupport_NoWater(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    -- bloodlines tech buy space
                                                                                                    if PlayBoard.hasHighCouncilSeat(color) then
                                                                                                        TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 1)
                                                                                                    else
                                                                                                        TechMarket.registerAcquireTechOption(color, "TechBuyOption", "spice", 0)
                                                                                                    end
                                                                                                    leader.troops(color, "supply", "garrison", 2)

                                                                                                    -- bloodlines sardaukar commander
                                                                                                    -- if PlayBoard.hasTech(color, "bl_SardaukarHighCommand") then
                                                                                                    --     if MainBoard._hasResource(leader, color, "solari", 1) then
                                                                                                    --         if MainBoard.sardaukarCommanders.sc_GatherSupport ~= nil then
                                                                                                    --             Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirmOneSolari"), continuation, function (confirmed)
                                                                                                    --                 if confirmed then
                                                                                                    --                     local leader = PlayBoard.getLeader(color)
                                                                                                    --                     broadcastToAll(I18N("recruitSardaukarCommanderGatherSupport"), color)
                                                                                                    --                     Combat.recruitSardaukarCommander(color)
                                                                                                    --                     Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                    --                         leader.resources(color, "solari", -1)
                                                                                                    --                         MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()
                                                                                                    --                         MainBoard.sardaukarCommanders.sc_GatherSupport = nil
                                                                                                    --                     end)
                                                                                                    --                 else
                                                                                                    --                     continuation.run(true)
                                                                                                    --                 end
                                                                                                    --             end)
                                                                                                    --         end
                                                                                                    --     end
                                                                                                    -- elseif MainBoard._hasResource(leader, color, "solari", 2) then
                                                                                                    --     if MainBoard.sardaukarCommanders.sc_GatherSupport ~= nil then
                                                                                                    --         Dialog.showYesOrNoDialog(color, I18N("recruitSardaukarCommanderConfirm"), continuation, function (confirmed)
                                                                                                    --             if confirmed then
                                                                                                    --                 local leader = PlayBoard.getLeader(color)
                                                                                                    --                 broadcastToAll(I18N("recruitSardaukarCommanderGatherSupport"), color)
                                                                                                    --                 Combat.recruitSardaukarCommander(color)
                                                                                                    --                 Helper.onceFramesPassed(5).doAfter(function ()
                                                                                                    --                     leader.resources(color, "solari", -2)
                                                                                                    --                     MainBoard.sardaukarCommanders.sc_GatherSupport.destruct()
                                                                                                    --                     MainBoard.sardaukarCommanders.sc_GatherSupport = nil
                                                                                                    --                 end)
                                                                                                    --             else
                                                                                                    --                 continuation.run(true)
                                                                                                    --             end
                                                                                                    --         end)
                                                                                                    --     end
                                                                                                    -- end
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goShipping(color, leader, continuation)
                                                                                                -- bloodlines tech navigation chamber
                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, {spice = 2, friendship = "spacingGuild"}) then
                                                                                                        continuation.run(function ()
                                                                                                            leader.resources(color, "spice", -2)
                                                                                                            leader.resources(color, "solari", 5)
                                                                                                        end)
                                                                                                    end
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {spice = 3, friendship = "spacingGuild"}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "spice", -3)
                                                                                                        leader.resources(color, "solari", 5)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goAcceptContract(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    leader.pickContract(color)
                                                                                                    leader.drawImperiumCards(color, 1)
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goCarthag(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    leader.drawIntrigues(color, 1)
                                                                                                    leader.troops(color, "supply", "garrison", 1)
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goSietchTabr(color, leader, continuation)
                                                                                                -- bloodlines liet sietch access
                                                                                                if PlayBoard.getLeader(color).name == "bl_Liet" then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, continuation) then
                                                                                                        local options = {
                                                                                                            PlayBoard.canTakeMakerHook(color) and I18N("hookTroopWaterOption") or I18N("troopWaterOption"),
                                                                                                            I18N("waterShieldWallOption"),
                                                                                                        }
                                                                                                        Dialog.showOptionsAndCancelDialog(color, I18N("goSietchTabr"), options, continuation, function (index)
                                                                                                            if index == 1 then
                                                                                                                MainBoard._goSietchTabr_HookTroopWater(color, leader, continuation)
                                                                                                            elseif index == 2 then
                                                                                                                MainBoard._goSietchTabr_WaterShieldWall(color, leader, continuation)
                                                                                                            else
                                                                                                                assert(index == 0)
                                                                                                                continuation.run()
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        continuation.run()
                                                                                                    end
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {friendship = "fremen"}) then
                                                                                                    local options = {
                                                                                                        PlayBoard.canTakeMakerHook(color) and I18N("hookTroopWaterOption") or I18N("troopWaterOption"),
                                                                                                        I18N("waterShieldWallOption"),
                                                                                                    }
                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N("goSietchTabr"), options, continuation, function (index)
                                                                                                        if index == 1 then
                                                                                                            MainBoard._goSietchTabr_HookTroopWater(color, leader, continuation)
                                                                                                        elseif index == 2 then
                                                                                                            MainBoard._goSietchTabr_WaterShieldWall(color, leader, continuation)
                                                                                                        else
                                                                                                            assert(index == 0)
                                                                                                            continuation.run()
                                                                                                        end
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                                -- original
                                                                                                -- if MainBoard._checkGenericAccess(color, leader, { friendship = "fremen" }) then
                                                                                                --     local options = {
                                                                                                --         PlayBoard.canTakeMakerHook(color) and I18N("hookTroopWaterOption") or I18N("troopWaterOption"),
                                                                                                --         I18N("waterShieldWallOption"),
                                                                                                --     }
                                                                                                --     Dialog.showOptionsAndCancelDialog(color, I18N("goSietchTabr"), options, continuation, function (index)
                                                                                                --         if index == 1 then
                                                                                                --             MainBoard._goSietchTabr_HookTroopWater(color, leader, continuation)
                                                                                                --         elseif index == 2 then
                                                                                                --             MainBoard._goSietchTabr_WaterShieldWall(color, leader, continuation)
                                                                                                --         else
                                                                                                --             assert(index == 0)
                                                                                                --             continuation.run()
                                                                                                --         end
                                                                                                --     end)
                                                                                                -- else
                                                                                                --     continuation.run()
                                                                                                -- end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goSietchTabr_HookTroopWater(color, leader, continuation)
                                                                                                -- bloodlines liet sietch access
                                                                                                if PlayBoard.getLeader(color).name == "bl_Liet" then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, continuation) then
                                                                                                        continuation.run(function ()
                                                                                                            leader.takeMakerHook(color)
                                                                                                            leader.troops(color, "supply", "garrison", 1)
                                                                                                            leader.resources(color, "water", 1)
                                                                                                        end)
                                                                                                    else
                                                                                                        continuation.run()
                                                                                                    end
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {friendship = "fremen"}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.takeMakerHook(color)
                                                                                                        leader.troops(color, "supply", "garrison", 1)
                                                                                                        leader.resources(color, "water", 1)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                                -- original
                                                                                                -- if MainBoard._checkGenericAccess(color, leader, { friendship = "fremen" }) then
                                                                                                --     continuation.run(function ()
                                                                                                --         leader.takeMakerHook(color)
                                                                                                --         leader.troops(color, "supply", "garrison", 1)
                                                                                                --         leader.resources(color, "water", 1)
                                                                                                --     end)
                                                                                                -- else
                                                                                                --     continuation.run()
                                                                                                -- end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goSietchTabr_WaterShieldWall(color, leader, continuation)
                                                                                                -- bloodlines liet sietch access
                                                                                                if PlayBoard.getLeader(color).name == "bl_Liet" then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, continuation) then
                                                                                                        continuation.run(function ()
                                                                                                            leader.resources(color, "water", 1)
                                                                                                            MainBoard.blowUpShieldWall(color, true)
                                                                                                        end)
                                                                                                    else
                                                                                                        continuation.run()
                                                                                                    end
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {friendship = "fremen"}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "water", 1)
                                                                                                        MainBoard.blowUpShieldWall(color, true)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                                -- original
                                                                                                -- if MainBoard._checkGenericAccess(color, leader, { friendship = "fremen" }) then
                                                                                                --     continuation.run(function ()
                                                                                                --         leader.resources(color, "water", 1)
                                                                                                --         MainBoard.blowUpShieldWall(color, true)
                                                                                                --     end)
                                                                                                -- else
                                                                                                --     continuation.run()
                                                                                                -- end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goResearchStation(color, leader, continuation)
                                                                                                if MainBoard._checkGenericAccess(color, leader, {water = 2}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "water", -2)
                                                                                                        leader.drawImperiumCards(color, 2)
                                                                                                        if MainBoard.immortalityPatch then
                                                                                                            leader.research(color, nil)
                                                                                                        else
                                                                                                            leader.troops(color, "supply", "garrison", 2)
                                                                                                        end
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goSpiceRefinery(color, leader, continuation)
                                                                                                -- bloodlines tech navigation chamber
                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    if MainBoard._hasResource(leader, color, "spice", 0) then
                                                                                                        MainBoard._goSpiceRefinery_WithSpice(color, leader, continuation)
                                                                                                    end
                                                                                                elseif MainBoard._hasResource(leader, color, "spice", 1) then
                                                                                                    local options = {
                                                                                                        I18N("noSpiceOption"),
                                                                                                        I18N("withSpiceOption"),
                                                                                                    }
                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N("goSpiceRefinery"), options, continuation, function (index)
                                                                                                        if index == 1 then
                                                                                                            MainBoard._goSpiceRefinery_NoSpice(color, leader, continuation)
                                                                                                        elseif index == 2 then
                                                                                                            MainBoard._goSpiceRefinery_WithSpice(color, leader, continuation)
                                                                                                        else
                                                                                                            assert(index == 0)
                                                                                                            continuation.run()
                                                                                                        end
                                                                                                    end)
                                                                                                else
                                                                                                    MainBoard._goSpiceRefinery_NoSpice(color, leader, continuation)
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goSpiceRefinery_WithSpice(color, leader, continuation)
                                                                                                -- bloodlines tech navigation chamber
                                                                                                if PlayBoard.hasTech(color, "bl_NavigationChamber") then
                                                                                                    if MainBoard._checkGenericAccess(color, leader, {spice = 0}) then
                                                                                                        continuation.run(function ()
                                                                                                            leader.resources(color, "spice", 0)
                                                                                                            leader.resources(color, "solari", 4)
                                                                                                            MainBoard._applyControlOfAnySpace(MainBoard.banners.spiceRefineryBannerZone, "solari")
                                                                                                        end)
                                                                                                    end
                                                                                                elseif MainBoard._checkGenericAccess(color, leader, {spice = 1}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "spice", -1)
                                                                                                        leader.resources(color, "solari", 4)
                                                                                                        MainBoard._applyControlOfAnySpace(MainBoard.banners.spiceRefineryBannerZone, "solari")
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goSpiceRefinery_NoSpice(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    leader.resources(color, "solari", 2)
                                                                                                    MainBoard._applyControlOfAnySpace(MainBoard.banners.spiceRefineryBannerZone, "solari")
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goArrakeen(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    leader.troops(color, "supply", "garrison", 1)
                                                                                                    leader.drawImperiumCards(color, 1)
                                                                                                    MainBoard._applyControlOfAnySpace(MainBoard.banners.arrakeenBannerZone, "solari")
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goDeepDesert(color, leader, continuation)
                                                                                                -- bloodlines liet deep desert
                                                                                                if PlayBoard.getLeader(color).name == "bl_Liet" then
                                                                                                    if PlayBoard.hasMakerHook(color) then
                                                                                                        local options = {
                                                                                                            I18N("fourSpicesOption"),
                                                                                                            I18N("twoWormsOption"),
                                                                                                        }
                                                                                                        Dialog.showOptionsAndCancelDialog(color, I18N("goDeepDesert"), options, continuation, function (index)
                                                                                                            if index == 1 then
                                                                                                                MainBoard._goDeepDesert_Spice(color, leader, continuation)
                                                                                                            elseif index == 2 then
                                                                                                                MainBoard._goDeepDesert_WormsIfHook(color, leader, continuation)
                                                                                                            else
                                                                                                                assert(index == 0)
                                                                                                                continuation.run()
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        MainBoard._goDeepDesert_Spice(color, leader, continuation)
                                                                                                    end
                                                                                                elseif PlayBoard.hasMakerHook(color) and (not MainBoard.shieldWallIsStanding() or not Combat.isCurrentConflictBehindTheWall()) then
                                                                                                    local options = {
                                                                                                        I18N("fourSpicesOption"),
                                                                                                        I18N("twoWormsOption"),
                                                                                                    }
                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N("goDeepDesert"), options, continuation, function (index)
                                                                                                        if index == 1 then
                                                                                                            MainBoard._goDeepDesert_Spice(color, leader, continuation)
                                                                                                        elseif index == 2 then
                                                                                                            MainBoard._goDeepDesert_WormsIfHook(color, leader, continuation)
                                                                                                        else
                                                                                                            assert(index == 0)
                                                                                                            continuation.run()
                                                                                                        end
                                                                                                    end)
                                                                                                else
                                                                                                    MainBoard._goDeepDesert_Spice(color, leader, continuation)
                                                                                                end
                                                                                                -- original
                                                                                                -- if PlayBoard.hasMakerHook(color) and (not MainBoard.shieldWallIsStanding() or not Combat.isCurrentConflictBehindTheWall()) then
                                                                                                --     local options = {
                                                                                                --         I18N("fourSpicesOption"),
                                                                                                --         I18N("twoWormsOption"),
                                                                                                --     }
                                                                                                --     Dialog.showOptionsAndCancelDialog(color, I18N("goDeepDesert"), options, continuation, function (index)
                                                                                                --         if index == 1 then
                                                                                                --             MainBoard._goDeepDesert_Spice(color, leader, continuation)
                                                                                                --         elseif index == 2 then
                                                                                                --             MainBoard._goDeepDesert_WormsIfHook(color, leader, continuation)
                                                                                                --         else
                                                                                                --             assert(index == 0)
                                                                                                --             continuation.run()
                                                                                                --         end
                                                                                                --     end)
                                                                                                -- else
                                                                                                --     MainBoard._goDeepDesert_Spice(color, leader, continuation)
                                                                                                -- end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goDeepDesert_Spice(color, leader, continuation)
                                                                                                MainBoard._anySpiceSpace(color, leader, 3, 4, MainBoard.spiceBonuses.deepDesert, continuation)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goDeepDesert_WormsIfHook(color, leader, continuation)
                                                                                                -- bloodlines liet deep desert
                                                                                                if PlayBoard.getLeader(color).name == "bl_Liet" then
                                                                                                    if not PlayBoard.hasMakerHook(color) then
                                                                                                        Dialog.broadcastToColor(I18N("noMakerHook"), color, "Purple")
                                                                                                        continuation.run()
                                                                                                    else
                                                                                                        MainBoard._anySpiceSpace(color, leader, 3, 0, MainBoard.spiceBonuses.deepDesert, continuation, function ()
                                                                                                            broadcastToAll(I18N("lietHatesTheMakerDeepDesert"), color)
                                                                                                            leader.resources(color, "spice", 2)
                                                                                                            leader.drawIntrigues(color, 2)
                                                                                                        end)
                                                                                                    end
                                                                                                elseif not PlayBoard.hasMakerHook(color) then
                                                                                                    Dialog.broadcastToColor(I18N("noMakerHook"), color, "Purple")
                                                                                                    continuation.run()
                                                                                                elseif MainBoard.shieldWallIsStanding() and Combat.isCurrentConflictBehindTheWall() then
                                                                                                    Dialog.broadcastToColor(I18N("shieldWallIsStanding"), color, "Purple")
                                                                                                    continuation.run()
                                                                                                else
                                                                                                    MainBoard._anySpiceSpace(color, leader, 3, 0, MainBoard.spiceBonuses.deepDesert, continuation, function ()
                                                                                                        leader.callSandworm(color, 2)
                                                                                                    end)
                                                                                                end
                                                                                                -- original
                                                                                                -- if not PlayBoard.hasMakerHook(color) then
                                                                                                --     Dialog.broadcastToColor(I18N("noMakerHook"), color, "Purple")
                                                                                                --     continuation.run()
                                                                                                -- elseif MainBoard.shieldWallIsStanding() and Combat.isCurrentConflictBehindTheWall() then
                                                                                                --     Dialog.broadcastToColor(I18N("shieldWallIsStanding"), color, "Purple")
                                                                                                --     continuation.run()
                                                                                                -- else
                                                                                                --     MainBoard._anySpiceSpace(color, leader, 3, 0, MainBoard.spiceBonuses.deepDesert, continuation, function ()
                                                                                                --         leader.callSandworm(color, 2)
                                                                                                --     end)
                                                                                                -- end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goHabbanyaErg(color, leader, continuation)
                                                                                                assert(TurnControl.getPlayerCount() == 6)
                                                                                                MainBoard._anySpiceSpace(color, leader, 1, 2, MainBoard.spiceBonuses.habbanyaErg, continuation, function ()
                                                                                                    leader.drawImperiumCards(color, 1)
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goHaggaBasin(color, leader, continuation)
                                                                                                -- bloodlines liet hagga
                                                                                                if PlayBoard.getLeader(color).name == "bl_Liet" then
                                                                                                    if PlayBoard.hasMakerHook(color) then
                                                                                                        local options = {
                                                                                                            I18N("twoSpicesOption"),
                                                                                                            I18N("oneWormOption"),
                                                                                                        }
                                                                                                        Dialog.showOptionsAndCancelDialog(color, I18N("goHaggaBasin"), options, continuation, function (index)
                                                                                                            if index == 1 then
                                                                                                                MainBoard._goHaggaBasin_Spice(color, leader, continuation)
                                                                                                            elseif index == 2 then
                                                                                                                MainBoard._goHaggaBasin_WormIfHook(color, leader, continuation)
                                                                                                            else
                                                                                                                assert(index == 0)
                                                                                                                continuation.run()
                                                                                                            end
                                                                                                        end)
                                                                                                    else
                                                                                                        MainBoard._goHaggaBasin_Spice(color, leader, continuation)
                                                                                                    end
                                                                                                elseif PlayBoard.hasMakerHook(color) and (not MainBoard.shieldWallIsStanding() or not Combat.isCurrentConflictBehindTheWall()) then
                                                                                                    local options = {
                                                                                                        I18N("twoSpicesOption"),
                                                                                                        I18N("oneWormOption"),
                                                                                                    }
                                                                                                    Dialog.showOptionsAndCancelDialog(color, I18N("goHaggaBasin"), options, continuation, function (index)
                                                                                                        if index == 1 then
                                                                                                            MainBoard._goHaggaBasin_Spice(color, leader, continuation)
                                                                                                        elseif index == 2 then
                                                                                                            MainBoard._goHaggaBasin_WormIfHook(color, leader, continuation)
                                                                                                        else
                                                                                                            assert(index == 0)
                                                                                                            continuation.run()
                                                                                                        end
                                                                                                    end)
                                                                                                else
                                                                                                    MainBoard._goHaggaBasin_Spice(color, leader, continuation)
                                                                                                end
                                                                                                -- original
                                                                                                -- if PlayBoard.hasMakerHook(color) and (not MainBoard.shieldWallIsStanding() or not Combat.isCurrentConflictBehindTheWall()) then
                                                                                                --     local options = {
                                                                                                --         I18N("twoSpicesOption"),
                                                                                                --         I18N("oneWormOption"),
                                                                                                --     }
                                                                                                --     Dialog.showOptionsAndCancelDialog(color, I18N("goHaggaBasin"), options, continuation, function (index)
                                                                                                --         if index == 1 then
                                                                                                --             MainBoard._goHaggaBasin_Spice(color, leader, continuation)
                                                                                                --         elseif index == 2 then
                                                                                                --             MainBoard._goHaggaBasin_WormIfHook(color, leader, continuation)
                                                                                                --         else
                                                                                                --             assert(index == 0)
                                                                                                --             continuation.run()
                                                                                                --         end
                                                                                                --     end)
                                                                                                -- else
                                                                                                --     MainBoard._goHaggaBasin_Spice(color, leader, continuation)
                                                                                                -- end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goHaggaBasin_Spice(color, leader, continuation)
                                                                                                return MainBoard._anySpiceSpace(color, leader, 1, 2, MainBoard.spiceBonuses.haggaBasin, continuation)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goHaggaBasin_WormIfHook(color, leader, continuation)
                                                                                                -- bloodlines liet hagga
                                                                                                if PlayBoard.getLeader(color).name == "bl_Liet" then
                                                                                                    if not PlayBoard.hasMakerHook(color) then
                                                                                                        Dialog.broadcastToColor(I18N("noMakerHook"), color, "Purple")
                                                                                                        continuation.run()
                                                                                                    else
                                                                                                        MainBoard._anySpiceSpace(color, leader, 1, 0, MainBoard.spiceBonuses.haggaBasin, continuation, function ()
                                                                                                            broadcastToAll(I18N("lietHatesTheMaker"), color)
                                                                                                            leader.resources(color, "spice", 1)
                                                                                                            leader.drawIntrigues(color, 1)
                                                                                                        end)
                                                                                                    end
                                                                                                elseif not PlayBoard.hasMakerHook(color) then
                                                                                                    Dialog.broadcastToColor(I18N("noMakerHook"), color, "Purple")
                                                                                                    continuation.run()
                                                                                                elseif MainBoard.shieldWallIsStanding() and Combat.isCurrentConflictBehindTheWall() then
                                                                                                    Dialog.broadcastToColor(I18N("shieldWallIsStanding"), color, "Purple")
                                                                                                    continuation.run()
                                                                                                else
                                                                                                    MainBoard._anySpiceSpace(color, leader, 1, 0, MainBoard.spiceBonuses.haggaBasin, continuation, function ()
                                                                                                        leader.callSandworm(color, 1)
                                                                                                    end)
                                                                                                end
                                                                                                -- original
                                                                                                -- if not PlayBoard.hasMakerHook(color) then
                                                                                                --     Dialog.broadcastToColor(I18N("noMakerHook"), color, "Purple")
                                                                                                --     continuation.run()
                                                                                                -- elseif MainBoard.shieldWallIsStanding() and Combat.isCurrentConflictBehindTheWall() then
                                                                                                --     Dialog.broadcastToColor(I18N("shieldWallIsStanding"), color, "Purple")
                                                                                                --     continuation.run()
                                                                                                -- else
                                                                                                --     MainBoard._anySpiceSpace(color, leader, 1, 0, MainBoard.spiceBonuses.haggaBasin, continuation, function ()
                                                                                                --         leader.callSandworm(color, 1)
                                                                                                --     end)
                                                                                                -- end
                                                                                            end

                                                                                            ---
                                                                                            -- bloodlines tuek's sietch
                                                                                            function MainBoard._goTueksSietch(color, leader, continuation)
                                                                                                local options = {
                                                                                                    I18N("tueksSpiceOption"),
                                                                                                    I18N("tueksDrawOption"),
                                                                                                }
                                                                                                Dialog.showOptionsAndCancelDialog(color, I18N("goTueksSietch"), options, continuation, function (index)
                                                                                                    if index == 1 then
                                                                                                        MainBoard._goTueksSietch_Spice(color, leader, continuation)
                                                                                                    elseif index == 2 then
                                                                                                        MainBoard._goTueksSietch_Draw(color, leader, continuation)
                                                                                                    else
                                                                                                        assert(index == 0)
                                                                                                        continuation.run()
                                                                                                    end
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            -- bloodlines tuek's sietch spice
                                                                                            function MainBoard._goTueksSietch_Spice(color, leader, continuation)
                                                                                                MainBoard._anySpiceSpace(color, leader, 0, 1, MainBoard.spiceBonuses.tueksSietch, continuation, function ()
                                                                                                    -- bloodlines esmar passive - 1 solari
                                                                                                    if PlayBoard.getLeader(color).name == "bl_Esmar" then
                                                                                                        leader.resources(color, "solari", 1)
                                                                                                    end
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            -- bloodlines tuek's sietch draw
                                                                                            function MainBoard._goTueksSietch_Draw(color, leader, continuation)
                                                                                                MainBoard._anySpiceSpace(color, leader, 0, 0, MainBoard.spiceBonuses.tueksSietch, continuation, function ()
                                                                                                    -- bloodlines esmar passive - 1 solari
                                                                                                    if PlayBoard.getLeader(color).name == "bl_Esmar" then
                                                                                                        leader.resources(color, "solari", 1)
                                                                                                    end
                                                                                                    leader.drawImperiumCards(color, 1)
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goImperialBasin(color, leader, continuation)
                                                                                                MainBoard._anySpiceSpace(color, leader, 0, 1, MainBoard.spiceBonuses.imperialBasin, continuation, function ()
                                                                                                    MainBoard._applyControlOfAnySpace(MainBoard.banners.imperialBasinBannerZone, "spice")
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._anySpiceSpace(color, leader, waterCost, spiceBaseAmount, spiceBonus, continuation, additionalAction)
                                                                                                if MainBoard._checkGenericAccess(color, leader, {water = waterCost}) then
                                                                                                    continuation.run(function ()
                                                                                                        local harvestedSpiceAmount = MainBoard._harvestSpice(spiceBaseAmount, spiceBonus)
                                                                                                        leader.resources(color, "water", -waterCost)
                                                                                                        leader.resources(color, "spice", harvestedSpiceAmount)
                                                                                                        if additionalAction then
                                                                                                            additionalAction()
                                                                                                        end
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getSpiceBonus(desertSpaceName)
                                                                                                assert(MainBoard.isDesertSpace(desertSpaceName))
                                                                                                return MainBoard.spiceBonuses[desertSpaceName]
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._harvestSpice(baseAmount, spiceBonus)
                                                                                                assert(spiceBonus)
                                                                                                local spiceAmount = baseAmount + spiceBonus:get()
                                                                                                spiceBonus:set(0)
                                                                                                return spiceAmount
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._applyControlOfAnySpace(bannerZone, resourceName)
                                                                                                local controllingPlayer = MainBoard.getControllingPlayer(bannerZone)
                                                                                                if controllingPlayer then
                                                                                                    PlayBoard.getLeader(controllingPlayer).resources(controllingPlayer, resourceName, 1)
                                                                                                end
                                                                                                return true
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.applyControlOfAnySpace(name)
                                                                                                local bannerZone = MainBoard.findControlableSpace(name)
                                                                                                if bannerZone then
                                                                                                    local resourceName
                                                                                                    if name == "arrakeen" or name == "spiceRefinery" then
                                                                                                        resourceName = "solari"
                                                                                                    elseif name == "imperialBasin" then
                                                                                                        resourceName = "spice"
                                                                                                    else
                                                                                                        error(name)
                                                                                                    end
                                                                                                    return MainBoard._applyControlOfAnySpace(bannerZone, resourceName)
                                                                                                else
                                                                                                    return false
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.findControlableSpace(name)
                                                                                                for bannerZoneName, zone in pairs(MainBoard.banners) do
                                                                                                    if Helper.startsWith(bannerZoneName, name) then
                                                                                                        return zone
                                                                                                    end
                                                                                                end
                                                                                                return nil
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getControllingPlayer(bannerZone)
                                                                                                local controllingPlayer = nil

                                                                                                -- Check player dreadnoughts first since they supersede flags.
                                                                                                for _, object in ipairs(bannerZone.getObjects()) do
                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                        if Types.isDreadnought(object, color) then
                                                                                                            assert(not controllingPlayer, "Too many dreadnoughts")
                                                                                                            controllingPlayer = color
                                                                                                        end
                                                                                                    end
                                                                                                end

                                                                                                -- Check player flags otherwise.
                                                                                                if not controllingPlayer then
                                                                                                    for _, object in ipairs(bannerZone.getObjects()) do
                                                                                                        for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                            if Types.isControlMarker(object, color) then
                                                                                                                assert(not controllingPlayer, "Too many flags around")
                                                                                                                controllingPlayer = color
                                                                                                            end
                                                                                                        end
                                                                                                    end
                                                                                                end

                                                                                                return controllingPlayer
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getControllingDreadnought(bannerZone)
                                                                                                for _, object in ipairs(bannerZone.getObjects()) do
                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                        if Types.isDreadnought(object, color) then
                                                                                                            return object
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                                return nil
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goSmuggling(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    leader.resources(color, "solari", 1)
                                                                                                    leader.shipments(color, 1)
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goInterstellarShipping(color, leader, continuation)
                                                                                                if MainBoard._checkGenericAccess(color, leader, {friendship = "spacingGuild"}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.shipments(color, 2)
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            function MainBoard._goTechNegotiation(color, leader, continuation)
                                                                                                local options = {
                                                                                                    I18N("sendNegotiatorOption"),
                                                                                                    I18N("buyTechWithDiscont1Option"),
                                                                                                }
                                                                                                Dialog.showOptionsAndCancelDialog(color, I18N("goTechNegotiation"), options, continuation, function (index)
                                                                                                    if index == 1 then
                                                                                                        MainBoard._goTechNegotiation_Negotiate(color, leader, continuation)
                                                                                                    elseif index == 2 then
                                                                                                        MainBoard._goTechNegotiation_Buy(color, leader, continuation)
                                                                                                    else
                                                                                                        assert(index == 0)
                                                                                                        continuation.run()
                                                                                                    end
                                                                                                end)
                                                                                                return continuation
                                                                                            end

                                                                                            function MainBoard._goTechNegotiation_Buy(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    leader.resources(color, "persuasion", 1)
                                                                                                    TechMarket.registerAcquireTechOption(color, "techNegotiationTechBuyOption", "spice", 1)
                                                                                                end)
                                                                                            end

                                                                                            function MainBoard._goTechNegotiation_Negotiate(color, leader, continuation)
                                                                                                continuation.run(function ()
                                                                                                    leader.resources(color, "persuasion", 1)
                                                                                                    leader.troops(color, "supply", "negotiation", 1)
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._goDreadnought(color, leader, continuation)
                                                                                                if MainBoard._checkGenericAccess(color, leader, {solari = 3}) then
                                                                                                    continuation.run(function ()
                                                                                                        leader.resources(color, "solari", -3)
                                                                                                        TechMarket.registerAcquireTechOption(color, "dreadnoughtTechBuyOption", "spice", 0)
                                                                                                        Park.transfert(1, PlayBoard.getDreadnoughtPark(color), Combat.getDreadnoughtPark(color))
                                                                                                    end)
                                                                                                else
                                                                                                    continuation.run()
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.blowUpShieldWall(color, skipConfirmation)
                                                                                                if MainBoard.shieldWallToken then
                                                                                                    local kaBoom = function (_)
                                                                                                        Music.play("atomics")
                                                                                                        broadcastToAll(I18N('blowUpShieldWall', {leader = PlayBoard.getLeaderName(color)}), color, "Purple")
                                                                                                        Helper.onceTimeElapsed(3).doAfter(function ()
                                                                                                            MainBoard.trash(MainBoard.shieldWallToken)
                                                                                                            MainBoard.shieldWallToken = nil
                                                                                                        end)
                                                                                                    end

                                                                                                    if skipConfirmation then
                                                                                                        kaBoom()
                                                                                                    else
                                                                                                        Dialog.showConfirmDialog(color, I18N("confirmShieldWallDestruction"), kaBoom)
                                                                                                    end
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.shieldWallIsStanding()
                                                                                                return MainBoard.shieldWallToken ~= nil
                                                                                            end

                                                                                            --- The color could be nil (the same way it could be nil with Types.isAgent)
                                                                                            function MainBoard.hasAgentInSpace(spaceName, color)
                                                                                                local space = MainBoard.spaces[spaceName]
                                                                                                -- Avoid since it depends on the active extensions.
                                                                                                --assert(space, "Unknow space: " .. spaceName)
                                                                                                if space then
                                                                                                    for _, object in ipairs(space.zone.getObjects()) do
                                                                                                        if Types.isAgent(object, color) then
                                                                                                            return true
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                                return false
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.hasEnemyAgentInSpace(spaceName, color)
                                                                                                for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                    if otherColor ~= color and MainBoard.hasAgentInSpace(spaceName, otherColor) then
                                                                                                        return true
                                                                                                    end
                                                                                                end
                                                                                                return false
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.observationPostIsOccupied(observationPostName, color)
                                                                                                local observationPost = MainBoard.observationPosts[observationPostName]
                                                                                                assert(observationPost, observationPostName)
                                                                                                for _, spy in ipairs(Park.getObjects(observationPost.park)) do
                                                                                                    if not color or spy.hasTag(color) then
                                                                                                        return true
                                                                                                    end
                                                                                                end
                                                                                                return false
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getDeployedSpyCount(color, onlyInMakerSpace)
                                                                                                local count = 0
                                                                                                for observationPostName, observationPost in pairs(MainBoard.observationPosts) do
                                                                                                    local ok = true;
                                                                                                    if onlyInMakerSpace then
                                                                                                        ok = false;
                                                                                                        local spaceNames = MainBoard._getConnectedSpaceNames(observationPostName)
                                                                                                        for _, spaceName in ipairs(spaceNames) do
                                                                                                            if MainBoard.isDesertSpace(spaceName) then
                                                                                                                ok = true;
                                                                                                                break;
                                                                                                            end
                                                                                                        end
                                                                                                    end
                                                                                                    if ok then
                                                                                                        for _, spy in ipairs(Park.getObjects(observationPost.park)) do
                                                                                                            if spy.hasTag(color) then
                                                                                                                count = count + 1
                                                                                                            end
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                                return count
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard._getConnectedSpaceNames(observationPostName)
                                                                                                local connectedSpaceNames = {}
                                                                                                for spaceName, spaceDetail in pairs(MainBoard.spaceDetails) do
                                                                                                    for _, otherObservationPostName in ipairs(spaceDetail.posts) do
                                                                                                        if otherObservationPostName == observationPostName then
                                                                                                            table.insert(connectedSpaceNames, spaceName)
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                                return connectedSpaceNames
                                                                                            end

                                                                                            --
                                                                                            function MainBoard.isSpying(spaceName, color)
                                                                                                local spaceDetail = MainBoard.spaceDetails[spaceName]
                                                                                                for _, observationPostName in ipairs(spaceDetail.posts) do
                                                                                                    local observationPost = MainBoard.observationPosts[observationPostName]
                                                                                                    for _, spy in ipairs(Park.getObjects(observationPost.park)) do
                                                                                                        if spy.hasTag(color) then
                                                                                                            return true
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                                return false
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.hasVoiceToken(spaceName)
                                                                                                local space = MainBoard.spaces[spaceName]
                                                                                                if space then
                                                                                                    return #Helper.filter(space.zone.getObjects(), Types.isVoiceToken) > 0
                                                                                                end
                                                                                                return false
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isEmperorSpace(spaceName)
                                                                                                return MainBoard.spaceDetails[spaceName].group == "emperor"
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isSpacingGuildSpace(spaceName)
                                                                                                return MainBoard.spaceDetails[spaceName].group == "spacingGuild"
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isBeneGesseritSpace(spaceName)
                                                                                                return MainBoard.spaceDetails[spaceName].group == "beneGesserit"
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isFremenSpace(spaceName)
                                                                                                return MainBoard.spaceDetails[spaceName].group == "fremen"
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isGreatHouses(spaceName)
                                                                                                return MainBoard.spaceDetails[spaceName].group == "greatHouses"
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isFringeWorlds(spaceName)
                                                                                                return MainBoard.spaceDetails[spaceName].group == "fringeWorlds"
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isFactionSpace(spaceName)
                                                                                                return MainBoard.isEmperorSpace(spaceName)
                                                                                                or MainBoard.isSpacingGuildSpace(spaceName)
                                                                                                or MainBoard.isBeneGesseritSpace(spaceName)
                                                                                                or MainBoard.isFremenSpace(spaceName)
                                                                                                or MainBoard.isGreatHouses(spaceName)
                                                                                                or MainBoard.isFringeWorlds(spaceName)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isCitySpace(spaceName)
                                                                                                return MainBoard.spaceDetails[spaceName].group == "city"
                                                                                            end

                                                                                            --- aka Maker space
                                                                                            function MainBoard.isDesertSpace(spaceName)
                                                                                                return MainBoard.spaceDetails[spaceName].group == "desert"
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isSpiceTradeSpace(spaceName)
                                                                                                return MainBoard.isDesertSpace(spaceName)
                                                                                                or MainBoard.isCHOAMSpace(spaceName)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isCombatSpace(spaceName)
                                                                                                return MainBoard.spaceDetails[spaceName].combat
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getEmperorSpaces()
                                                                                                local emperorSpaces = {}
                                                                                                for space, details in pairs(MainBoard.spaceDetails) do
                                                                                                    if Helper.isElementOf(details.group, {"emperor", "greatHouses"}) then
                                                                                                        table.insert(emperorSpaces, space)
                                                                                                    end
                                                                                                end
                                                                                                return emperorSpaces
                                                                                            end

                                                                                            ---
                                                                                            -- bloodlines sardaukar commander skill - canny
                                                                                            function MainBoard.getLandsraadSpaces()
                                                                                                local landsraadSpaces = {}
                                                                                                for space, details in pairs(MainBoard.spaceDetails) do
                                                                                                    if Helper.isElementOf(details.group, {"landsraad"}) then
                                                                                                        table.insert(landsraadSpaces, space)
                                                                                                    end
                                                                                                end
                                                                                                return landsraadSpaces
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getBannerZones()
                                                                                                return {
                                                                                                    MainBoard.banners.imperialBasinBannerZone,
                                                                                                    MainBoard.banners.arrakeenBannerZone,
                                                                                                    MainBoard.banners.spiceRefineryBannerZone,
                                                                                                }
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.addSpaceBonus(spaceName, bonuses)
                                                                                                local space = MainBoard.spaces[spaceName]
                                                                                                assert(space, "Unknown space: " .. tostring(spaceName))
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getSnooperTrackPosition(faction)

                                                                                                local getAveragePosition = function (spaceNames)
                                                                                                    local p = Vector(0, 0, 0)
                                                                                                    local count = 0
                                                                                                    for _, spaceName in ipairs(spaceNames) do
                                                                                                        local space = MainBoard.spaces[spaceName]
                                                                                                        assert(space, spaceName)
                                                                                                        p = p + space.zone.getPosition()
                                                                                                        count = count + 1
                                                                                                    end
                                                                                                    return p * (1 / count)
                                                                                                end

                                                                                                local positions
                                                                                                if TurnControl.getPlayerCount() == 6 then
                                                                                                    positions = {
                                                                                                        emperor = getAveragePosition({"militarySupport", "economicSupport"}),
                                                                                                        spacingGuild = getAveragePosition({"heighliner", "deliverSupplies"}),
                                                                                                        beneGesserit = getAveragePosition({"espionage", "secrets"}),
                                                                                                        fremen = getAveragePosition({"controversialTechnology", "expedition"}),
                                                                                                    }
                                                                                                else
                                                                                                    positions = {
                                                                                                        emperor = getAveragePosition({"sardaukar", "dutifulService"}),
                                                                                                        spacingGuild = getAveragePosition({"heighliner", "deliverSupplies"}),
                                                                                                        beneGesserit = getAveragePosition({"espionage", "secrets"}),
                                                                                                        fremen = getAveragePosition({"desertTactics", "fremkit"}),
                                                                                                    }
                                                                                                end

                                                                                                return positions[faction]
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.getFirstPlayerMarker()
                                                                                                return MainBoard.firstPlayerMarker
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.trash(object)
                                                                                                MainBoard.trashQueue = MainBoard.trashQueue or Helper.createSpaceQueue()
                                                                                                MainBoard.trashQueue.submit(function (height)
                                                                                                    object.interactable = true
                                                                                                    object.setLock(false)
                                                                                                    object.setPosition(getObjectFromGUID('ef8614').getPosition() + Vector(0, 1 + height * 0.5, 0))
                                                                                                end)
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.isInside(object)
                                                                                                local position = object.getPosition()
                                                                                                local center = MainBoard.mainBoard.getPosition()
                                                                                                local offset = position - center
                                                                                                return math.abs(offset.x) < 11 and math.abs(offset.z) < 11
                                                                                            end

                                                                                            function MainBoard.getMainBoard()
                                                                                                return MainBoard.mainBoard
                                                                                            end

                                                                                            ---
                                                                                            function MainBoard.createOtherMemoriesPark(color)

                                                                                                local origin = MainBoard.spaces.espionage.position + Vector(-0.4, 0, 1.5)
                                                                                                origin:setAt('y', 1.86) -- ground level
                                                                                                local slots = {}
                                                                                                for j = 1, 2 do
                                                                                                    for i = 1, 6 do
                                                                                                        local x = (i - 1.5) * 0.4
                                                                                                        local z = (1.5 - j) * 0.4
                                                                                                        local slot = origin + Vector(x, 0, z)
                                                                                                        table.insert(slots, slot)
                                                                                                    end
                                                                                                end

                                                                                                local zone = Park.createTransientBoundingZone(0, Vector(0.25, 0.25, 0.25), slots)

                                                                                                return Park.createPark(
                                                                                                    "OtherMemories",
                                                                                                    slots,
                                                                                                    Vector(0, 0, 0),
                                                                                                    {zone},
                                                                                                    {"Troop", color},
                                                                                                    nil,
                                                                                                    false,
                                                                                                true)
                                                                                            end

                                                                                            return MainBoard

                                                                                        end)
                                                                                        __bundle_register("Locale", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                            local I18N = require("utils.I18N")

                                                                                            local Locale = {}

                                                                                            ---
                                                                                            function Locale.onLoad(state)
                                                                                                I18N.locales.en = require("en.Locale")
                                                                                                I18N.locales.fr = require("fr.Locale")
                                                                                                -- The state could be undefined when explicitly called from Deck.rebuildPreloadAreas.
                                                                                                if state and state.settings then
                                                                                                    I18N.setLocale(state.settings.language)
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function Locale.setUp(settings)
                                                                                                I18N.setLocale(settings.language)
                                                                                            end

                                                                                            ---
                                                                                            function Locale.getAllLocales()
                                                                                                return {
                                                                                                    "en",
                                                                                                    "fr"
                                                                                                }
                                                                                            end

                                                                                            return Locale

                                                                                        end)
                                                                                        __bundle_register("fr.Locale", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                            return {
                                                                                                ["?"] = "?",

                                                                                                Green = "vert",
                                                                                                Yellow = "jaune",
                                                                                                Blue = "bleu",
                                                                                                Red = "rouge",
                                                                                                Purple = "violet",
                                                                                                White = "blanc",

                                                                                                -- Setup UI
                                                                                                prolog = "?? Buvez r??guli??rement et sans attendre d'avoir soif ! ??",
                                                                                                language = "Langue",
                                                                                                players = "Joueurs",
                                                                                                virtualHotSeat = "Sp??cial / Hotseat",
                                                                                                virtualHotSeatTooltip = "Permet de jouer en solo, ?? 2 joueurs ou\nbien en ?? hotseat ?? pour les autres modes.",
                                                                                                firstPlayer = "Premier joueur",
                                                                                                randomizePlayersPositions = "M??langer les positions des joueurs",
                                                                                                randomizePlayersPositionTooltip = "Aucun joueur ne doit utiliser le si??ge noir pendant\nque les positions des joueurs sont m??lang??es.",
                                                                                                wormEatsTheCardTooltip = "LMAO FRENCH PEOPLE TABARNAK",
                                                                                                extensions = "Extensions",
                                                                                                useContracts = "Contrats de la CHOM",
                                                                                                legacy = "Dune : Imperium",
                                                                                                merakon = "Choix de cartes de Paul Dennen",
                                                                                                riseOfIx = "L???Av??nement de Ix",
                                                                                                epicMode = "Mode ??pique",
                                                                                                immortality = "Immortalit??",
                                                                                                goTo11 = "Pousser jusqu????? 11",
                                                                                                leaderSelection = "Dirigeants",
                                                                                                leaderPoolSize = "Taille de la s??lection",
                                                                                                leaderPoolSizeLabel = "Nombre de dirigeants ({value})",
                                                                                                tweakLeaderSelection = "Personnaliser les dirigeants",
                                                                                                variants = "Variantes",
                                                                                                miscellanous = "Divers",
                                                                                                horizontalHandLayout = "Mains ?? l???horizontale ?? 4 joueurs",
                                                                                                assistedRevelation = "R??v??lation assist??e",
                                                                                                soundEnabled = "Sons activ??s",
                                                                                                formalCombatPhase = "Phase de combat formelle",
                                                                                                formalCombatPhaseTooltip = "Les joueurs poss??dant une ou plusieurs cartes\nd???intrigue doivent explicitement finir leur tour\napr??s en avoir jou?? une ou pour passer.",
                                                                                                setup = "Mise en place",
                                                                                                notEnoughPlayers = "Pas assez de joueurs",
                                                                                                playerColorWarning = "(Les couleurs blanche et violette ne sont valides que dans le mode ?? 6.)",
                                                                                                english = "English",
                                                                                                french = "Fran??ais",
                                                                                                random = "al??atoire",
                                                                                                reversePick = "en sens inverse",
                                                                                                reverseHiddenPick = "secr??tement en sens inverse",
                                                                                                altHiddenPick = "secr??tement + sens 4??3??1??2",
                                                                                                onePlayerTwoRivals = "1 (+2)",
                                                                                                twoPlayersOneRival = "2 (+1)",
                                                                                                threePlayers = "3",
                                                                                                fourPlayers = "4",
                                                                                                twoTeams = "2 x 3",
                                                                                                normal = "normal",
                                                                                                streamlined = "simplifi??",

                                                                                                -- Solo Setup UI
                                                                                                soloSettings = "Hagal",
                                                                                                difficulty = "Difficult??",
                                                                                                all = "tous",
                                                                                                novice = "mercenaire",
                                                                                                veteran = "sardaukar",
                                                                                                expert = "mentat",
                                                                                                expertPlus = "kwisatz",
                                                                                                autoTurnInSoloOption = "Passage de tour automatique",
                                                                                                imperiumRowChurnOption = "Barattage de la rang??e de l???Imperium",
                                                                                                streamlinedRivalsOption = "Rivaux simplifi??s",
                                                                                                brutalEscalationOption = "Escalade brutale",
                                                                                                expertDeploymentOption = "D??ploiement expert",
                                                                                                smartPoliticsOption = "Politiques habiles",

                                                                                                -- Phases
                                                                                                phaseLeaderSelection = "Phase : s??lection des dirigeants",
                                                                                                phaseGameStart = "Phase : d??but du jeu",
                                                                                                phaseRoundStart = "Phase : d??but de la manche n??{round}\n??????????????????????????????????????????????????????????????????????????????????????????",
                                                                                                phasePlayerTurns = "Phase : tours des joueurs",
                                                                                                phaseCombat = "Phase : combat",
                                                                                                phaseCombatEnd = "Phase : fin du combat",
                                                                                                phaseMakers = "Phase : faiseurs",
                                                                                                phaseRecall = "Phase : rappel",
                                                                                                phaseEndgame = "Phase : fin de jeu",
                                                                                                phaseArrakeenScouts = "Phase : ??claireurs d???Arrakeen",
                                                                                                endgameReached = "Fin de jeu th??orique atteinte",
                                                                                                takeHighCouncilSeatByForce = "Prend de force",
                                                                                                takeHighCouncilSeatByForceConfirm = "Prendre de force son si??ge au Haut-Conseil ?",
                                                                                                notEnoughLeaderLeft = "Pas assez de dirigeants !",

                                                                                                -- Card
                                                                                                acquireButton = "Acqu??rir",
                                                                                                notFremenCard = "Tentative d???ajout d???un pouilleux de Fremen dans la salle du tr??ne !",
                                                                                                noEnoughSpecimen = "Vous n???avez pas assez de sp??cimens !",

                                                                                                -- Playboards
                                                                                                noTouch = "Ne touchez pas ?? ce bouton !",
                                                                                                noLeader = "Vous n???avez pas encore de dirigeant !",
                                                                                                noAlly = "You n???avez pas s??lectionn?? d???alli?? !",
                                                                                                notYourTurn = "Ce n???est pas votre tour !",
                                                                                                noAgent = "Il ne vous reste plus d???agent !",
                                                                                                agentAlreadyPresent = "Vous avez d??j?? un agent pr??sent sur cette case !",
                                                                                                noFriendship = "Vous n???avez pas assez d???influence aupr??s {withFaction} !",
                                                                                                alreadyHaveSwordmaster = "Vous avez d??j?? un ma??tre d???armes !",
                                                                                                noResource = "Vous n?????tes pas assez pourvu en {resource} !",
                                                                                                forbiddenAccess = "Vous n???avez pas acc??s ?? cet espace !",
                                                                                                notShaddamTeam = "Vous n?????tes pas alli?? ?? l???Empereur de l???univers connu !",
                                                                                                notMuadDibTeam = "Vous n?????tes pas alli?? ?? Usul Muad-Dib, le Lisan al-Gaib !",
                                                                                                sandwormButton = "Ver des\nsables : ??1",
                                                                                                drawOneCardButton = "Piocher 1 carte",
                                                                                                drawFiveCardsButton = "??? Piocher 5 cartes ???",
                                                                                                resetDiscardButton = "D??fausse ??? pioche",
                                                                                                agentTurn = "Tour d???agent",
                                                                                                revealHandButton = "R??v??lation",
                                                                                                revealHandTooltip = "Clic droit pour une r??v??lation ??tendue.",
                                                                                                atomics = "Atomiser",
                                                                                                revealNotTurn = "Vous ne pouvez pas r??v??ler en dehors de votre tour.",
                                                                                                revealEarlyConfirm = "R??v??ler votre main ?",
                                                                                                isDecidingToDraw = "{leader} est en train de d??cider de piocher des cartes tout de suite ou non car sa d??fausse va ??tre rem??lang??e.",
                                                                                                warningBeforeDraw = "Attention : votre d??fausse va ??tre rem??lang??e et/ou vous avez moins de {count} carte(s). Voulez-vous piocher {maxCount} carte(s) tout de suite ? (Vous devrez piocher manuellement si vous annulez)",
                                                                                                atomicsConfirm = "Confirmer",
                                                                                                yes = "Oui",
                                                                                                no = "Non",
                                                                                                ok = "Ok",
                                                                                                cancel = "Annuler",
                                                                                                dialogCardAbove = "Voulez-vous mettre la carte sur le dessus de votre paquet ?",
                                                                                                endTurn = "Finir\ntour",
                                                                                                activatedAlly = "??? Alli?? activ??",
                                                                                                noSeatedPlayer = "Le joueur {color} est absent !",
                                                                                                takePlace = "Piquer\nla\nplace",
                                                                                                forwardMessage = "Au joueur {color} : {message}",

                                                                                                -- Leader selection
                                                                                                leaderSelectionAdjust = "Ajustez le nombre de dirigeants s??lectionn??s au hasard\nparmi lesquels les joueurs devront choisir :",
                                                                                                leaderSelectionExclude = "Vous pouvez retourner (ou d??truire) n???importe quel dirigeant pour l???exclure.\nUne fois satisfait, appuyez sur le bouton ?? D??marrer ??.",
                                                                                                start = "D??marrer",
                                                                                                claimLeader = "Prendre {leader} comme dirigeant",
                                                                                                incompatibleLeader = "Ce n???est pas un dirigeant pour un humain !",
                                                                                                incompatibleRivalLeader = "Ce n???est pas un dirigeant pour un rival !",

                                                                                                -- Instructions
                                                                                                leaderSelectionActiveInstruction = "S??lectionnez un dirigeant\nsur le plateau sup??rieur.",
                                                                                                leaderSelectionInactiveInstruction = "Attendez que vos adversaires\naient s??lectionn?? leurs dirigeants.",
                                                                                                playerTurnsActiveInstruction = "Envoyez un agent\nou r??v??lez votre main,\npuis appuyez sur Finir tour.",
                                                                                                playerTurnsInactiveInstruction = "Attendez que vos adversaires\naient jou?? leurs tours\nd???agent / r??v??lation.",
                                                                                                combatActiveInstruction = "Jouez une intrigue et\nappuyez sur Finir tour\nou appuyez directement\nsur Finir tour pour passer.",
                                                                                                combatInactiveInstruction = "Attendez que vos\nadversaires en combat\naient jou?? une intrigue\nou pass?? leur tour.",
                                                                                                combatEndActiveInstruction = "Prenez votre butin et\njouez des cartes d???intrigue\nle cas ??ch??ant,\npuis appuyez sur Finir tour.",
                                                                                                combatEndInactiveInstruction = "Attendez que vos adversaires\naient r??colt?? leur butin\net jou?? des intrigues.",
                                                                                                endgameActiveInstruction = "Jouez vos cartes de fin de jeu et\ntuiles tech que vous poss??dez\nafin de gagner des PV finaux.",
                                                                                                endgameInactiveInstruction = "Attendez que vos adversaires aient\njou?? leurs cartes de fin de jeu\net tuiles tech qu???ils poss??dent.",
                                                                                                -- Special instructions
                                                                                                gameStartActiveInstructionForVladimirHarkonnen = "Choisissez secr??tement\ndeux factions.",
                                                                                                gameStartInactiveInstructionForVladimirHarkonnen = "Attendez que Vladimir Harkonnen\nait secr??tement choisi\nses deux factions.",
                                                                                                gameStartActiveInstructionForIlesaEcaz = "Mettez de c??t?? une carte\nde votre main.",
                                                                                                gameStartInactiveInstructionForIlesaEcaz = "Attendez que Ilesa Ecaz\nait mis de c??t?? une carte\nde sa main.",
                                                                                                gameStartActiveInstructionForHundroMoritani = "Gardez une intrigue\net reposez l???autre\nau dessus du paquet d???intrigues.",
                                                                                                gameStartInactiveInstructionForHundroMoritani = "Attendez que Hundro Moritani\nait choisi entre\nses deux intrigues.",

                                                                                                -- Resource
                                                                                                spiceAmount = "??pice",
                                                                                                spice = "unit?? d?????pice",
                                                                                                spices = "unit??s d?????pices",
                                                                                                waterAmount = "Eau",
                                                                                                water = "mesure d???eau",
                                                                                                waters = "mesures d???eau",
                                                                                                solariAmount = "Solari",
                                                                                                solari = "solari",
                                                                                                solaris = "solaris",
                                                                                                persuasionAmount = "Persuasion",
                                                                                                persuasion = "point de persuasion",
                                                                                                persuasions = "points de persuasion",
                                                                                                strengthAmount = "Force",
                                                                                                strength = "??p??e",
                                                                                                strengths = "??p??es",
                                                                                                spendManually = "??? {leader} d??pense {amount} {resource} manuellement.",
                                                                                                receiveManually = "??? {leader} re??oit {amount} {resource} manuellement.",
                                                                                                fixManually = "Correction de {amount} {resource} manuellement ({location}).",
                                                                                                influence = "influence",
                                                                                                beetle = "scarab??e",
                                                                                                beetles = "scarab??es",
                                                                                                card = "carte",
                                                                                                cards = "cartes",

                                                                                                -- Actions
                                                                                                playerTurn = "??? Tour : {leader}",
                                                                                                drawObjects = "??? Pioche de {amount} {object}",
                                                                                                imperiumCard = "carte",
                                                                                                imperiumCards = "cartes",
                                                                                                intrigueCard = "carte d???intrigue",
                                                                                                intrigueCards = "cartes d???intrigue",
                                                                                                beetleAdvance = "??? Progression x{count} sur la piste du Tleilax.",
                                                                                                beetleRollback = "??? R??gression sur la piste du Tleilax.",
                                                                                                researchAdvance = "??? Progression sur la piste de recherche.",
                                                                                                researchRollback = "??? R??gression sur la piste de recherche.",
                                                                                                credit = "??? +{amount} {what}",
                                                                                                debit = "??? -{amount} {what}",
                                                                                                transfer = "??? Transfert de {count} {what} : {from} ??? {to}.",
                                                                                                troop = "troupe",
                                                                                                troops = "troupes",
                                                                                                dreadnoughts = "cuirass??s",
                                                                                                supplyPark = "r??serve",
                                                                                                garrisonPark = "garnison",
                                                                                                combatPark = "champ de bataille",
                                                                                                negotiationPark = "n??gociation tech.",
                                                                                                tanksPark = "cuves axolotls",
                                                                                                otherMemoriesPark = "m??moire seconde",
                                                                                                advanceFreighter = "??? Progression sur la piste d???exp??dition.",
                                                                                                recallFreighter = "??? Rappel de cargo.",
                                                                                                recruitSwordmaster = "??? Recrutement du ma??tre d???armes.",
                                                                                                takeHighCouncilSeat = "??? Prise de si??ge au Haut-Conseil.",
                                                                                                takeMakerHook = "??? Acquisition d???un hame??on ?? faiseur.",
                                                                                                gainInfluence = "??? +{amount} influence aupr??s {withFaction}.",
                                                                                                loseInfluence = "??? -{amount} influence aupr??s {withFaction}.",
                                                                                                acquireTleilaxuCard = "??? Acquisition carte tleilaxu : ?? {card} ??.",
                                                                                                acquireImperiumCard = "??? Acquisition carte Imperium : ?? {card} ??.",
                                                                                                buyTech = "??? Acquisition pour {amount} {resource} de la tech. : ?? {name} ??.",
                                                                                                acquireContract = "??? Prise du contrat : ?? {name} ??.",
                                                                                                sendingAgent = "??? Envoi d???un agent vers : {space} ({cards}).",
                                                                                                stealIntrigues = "??? Vol de ?? {card} ?? ?? {victim}.",
                                                                                                gainVictoryPoint = "??? Gain de PV ({name}).",

                                                                                                -- Rival Actions
                                                                                                triggeringScheme = "??? Manigance de {leader} !",
                                                                                                brutalEscalation = "??? Escalade brutale !",
                                                                                                smartPolitics = "??? Applique une politique habile.",
                                                                                                expertDeploymentLimit = "??? Limitation du d??ploiement de forces ?? {limit}.",

                                                                                                -- Shield Wall
                                                                                                confirmShieldWallDestruction = "Confirmez-vous cette violation flagrante de la Grande Convention ?",
                                                                                                blowUpShieldWall = "{leader} fait exploser le Mur du Bouclier !",
                                                                                                explosion = "Ka-Boom !",

                                                                                                -- Combat
                                                                                                announceCombat = "Le combat de la manche est : ?? {combat} ??",
                                                                                                dreadnoughtMandatoryOccupation = "Rappel : vous devez envoyer un cuirass?? occuper un espace.",
                                                                                                troopEdit = "Troupes : ??1",

                                                                                                -- Boards
                                                                                                sendAgentTo = "Envoyer un agent vers ??? {space}",
                                                                                                sendSpyTo = "Envoyer un espion",
                                                                                                infiltrateWithSpy = "Espion rappel?? pour s???infiltrer",
                                                                                                gatherIntelligenceWithSpy = "Espion rappel?? pour collecter des renseignements",
                                                                                                noSpyToInfiltrate = "Vous n???avez pas d???espion pr??sent vous permettant de vous infiltrer !",
                                                                                                noSpyToRecallOrCardToDraw = "Vous n???avez pas d???espion ?? rappeler ou de carte ?? tirer !",
                                                                                                selectSpyToRecall = "Selectionnez ?? partir de quel poste d???observation vous rappelez votre espion.",
                                                                                                confirmSpyRecall = "Voulez-vous rappeler un espion pour piocher une carte ?",
                                                                                                progressOnInfluenceTrack = "Progresser sur la piste d???influence {withFaction}",
                                                                                                recallYourFreighter = "Rappeler son cargo",
                                                                                                progressOnShipmentTrack = "Progresser sur la piste d???exp??dition",
                                                                                                pickBonus = "Prendre le bonus : {bonus}",
                                                                                                troopsAndInfluence = "troupes et influence",
                                                                                                forbiddenMove = "Mouvement interdit. Voulez-vous quand m??me le r??aliser ?",
                                                                                                progressOnTleilaxTrack = "Progresser sur la piste du Tleilax",
                                                                                                specimenEdit = "Sp??cimen: ??1",
                                                                                                progressOnResearchTrack = "Progresser sur la piste de recherche",
                                                                                                progressAfterResearchTrack = "Progresser au-del?? de la piste de recherche",
                                                                                                negotiatorEdit = "N??gociateur: ??1",
                                                                                                goGatherSupport = "Selectionnez une option.",
                                                                                                noWaterOption = "Gratuit",
                                                                                                withWaterOption = "2 solaris",
                                                                                                goSietchTabr = "Selectionnez une option.",
                                                                                                hookTroopWaterOption = "Hame??on ?? ver",
                                                                                                troopWaterOption = "Troupe",
                                                                                                waterShieldWallOption = "Mur du Bouclier",
                                                                                                goSpiceRefinery = "Selectionnez une option.",
                                                                                                noSpiceOption = "Pas d?????pice",
                                                                                                withSpiceOption = "1 ??pice",
                                                                                                reclaimRewards = "R??clamer les r??compenses",
                                                                                                makersAndRecall = "Faiseurs + Rappel",
                                                                                                doublingConflictRewards = "R??compenses doubl??es",
                                                                                                unavailableSwordmaster = "Pas de ma??tre d???armes avec ce niveau de difficult?? !",

                                                                                                goDeepDesert = "Selectionnez une option.",
                                                                                                fourSpicesOption = "4 ??pices",
                                                                                                twoWormsOption = "2 vers des sables",
                                                                                                goHaggaBasin = "Selectionnez une option.",
                                                                                                twoSpicesOption = "2 ??pices",
                                                                                                oneWormOption = "1 ver des sables",
                                                                                                noMakerHook = "Vous ne poss??dez pas de hame??on ?? faiseur!",
                                                                                                shieldWallIsStanding = "The Mur du Bouclier est toujours debout !",

                                                                                                goTechNegotiation = "S??lectionnez une option.",
                                                                                                sendNegotiatorOption = "N??gociateur",
                                                                                                buyTechWithDiscont1Option = "Tech. avec un rabais",
                                                                                                buyTechSelection = "Selectionnez votre option d???achat de tech.",
                                                                                                freighterTechBuyOption = "Piste d???exp??dition",
                                                                                                techNegotiationTechBuyOption = "N??gociation tech.",
                                                                                                dreadnoughtTechBuyOption = "Cuirass??",
                                                                                                appropriateTechBuyOption = "Appropriation",
                                                                                                ixianEngineerTechBuyOption = "Ing??nieur Ixien",
                                                                                                machineCultureTechBuyOption = "Culture des machines",
                                                                                                rhomburVerniusTechBuyOption = "Chevali??re de Rhombur Vernius",
                                                                                                manuallyBuyTech = "Acqu??rir manuellement une tech sans en payer le prix ?",
                                                                                                notAffordableOption = "Vous n???avez pas les moyens d???utiliser cette option d???achat !",
                                                                                                pruneTechCard = "Retrait de la tuile tech. : ?? {card} ??",
                                                                                                roundNumber = "Manche n??",
                                                                                                doYouWantAnotherRound = "Jouer encore une manche ?",

                                                                                                -- Arrakeen Scouts
                                                                                                joinCommittee = "Rejoindre le sous-comit?? : {committee}",
                                                                                                appropriations = "appropriations",
                                                                                                development = "d??veloppement",
                                                                                                information = "information",
                                                                                                investigation = "investigation",
                                                                                                joinForces = "forces combin??es",
                                                                                                politicalAffairs = "affaires politiques",
                                                                                                preparation = "pr??paration",
                                                                                                relations = "r??v??lations",
                                                                                                supervision = "supervision",
                                                                                                dataAnalysis = "analyse des donn??es",
                                                                                                developmentProject = "projet de d??veloppement",
                                                                                                tleilaxuRelations = "relations tleixlaxu",
                                                                                                committeeReminder = "Vous avez maintenant la possibilit?? de rejoindre un sous-comit?? ce tour-ci.",
                                                                                                first = "1er",
                                                                                                firstExAequo = "1er ex aequo",
                                                                                                second = "2nd",
                                                                                                secondExAequo = "2nd ex aequo",
                                                                                                third = "3??me",
                                                                                                thirdExAequo = "3??me ex aequo",
                                                                                                fourth = "4??me",
                                                                                                fourthExAequo = "4??me ex aequo",
                                                                                                lose = "perdu",
                                                                                                passOption = "Passer",
                                                                                                waitOption = "Attendre",
                                                                                                refuseOption = "Refuser",
                                                                                                acceptOption = "Accepter",
                                                                                                discardOption = "D??fausser",
                                                                                                discardNonStarterCard = "D??fausser une carte (hors cartes de d??part)",
                                                                                                discardACard = "D??fausser une carte",
                                                                                                discardAnIntrigue = "D??fausser une intrigue",
                                                                                                trashACard = "D??truire une carte",
                                                                                                doAResearch = "R??aliser une recherche",
                                                                                                destroyACardFromYourHand = "D??truire 1 carte de sa main",
                                                                                                spendOption = "D??penser {amount} {resource}",
                                                                                                amount = "{amount} {resource}",

                                                                                                -- Ranking
                                                                                                firstInCombat = "??? 1er : {leader}",
                                                                                                firstExAequoInCombat = "??? 1er ex aequo : {leader}",
                                                                                                secondInCombat = "??? 2nd : {leader}",
                                                                                                secondExAequoInCombat = "??? 2nd ex aequo : {leader}",
                                                                                                thirdInCombat = "??? 3??me : {leader}",
                                                                                                thirdExAequoInCombat = "??? 3??me ex aequo : {leader}",
                                                                                                fourthInCombat = "??? 4??me : {leader}",
                                                                                                fourthExAequoInCombat = "??? 4??me ex aequo : {leader}",

                                                                                                -- Tleilax board
                                                                                                confirmSolarisToBeetles = "Voulez-vous payer 7 solaris pour avancer deux fois sur la piste Tleilaxu ?",
                                                                                                tleilaxTrack = "Piste du Tleilax",

                                                                                                -- Factions
                                                                                                withEmperor = "de l???Empereur",
                                                                                                withSpacingGuild = "de la Guilde spatiale",
                                                                                                withBeneGesserit = "du Bene Gesserit",
                                                                                                withFremen = "des Fremens",
                                                                                                withGreatHouses = "des maisons majeures",
                                                                                                withFringeWorlds = "des mondes de l???autre c??t?? du p??riph",

                                                                                                -- Leaders
                                                                                                vladimirHarkonnen = "Baron Vladimir Harkonnen",
                                                                                                glossuRabban = "Glossu ?? la b??te ?? Rabban",
                                                                                                ilbanRichese = "Comte Ilban Richese",
                                                                                                helenaRichese = "Helena Richese",
                                                                                                letoAtreides = "Duc Leto Atr??ides",
                                                                                                paulAtreides = "Paul Atr??ides",
                                                                                                arianaThorvald = "Comtesse Ariana Thorvald",
                                                                                                memnonThorvald = "Comte Memnon Thorvald",
                                                                                                armandEcaz = "Archiduc Armand Ecaz",
                                                                                                ilesaEcaz = "Ilesa Ecaz",
                                                                                                rhomburVernius = "Prince Rhombur Vernius",
                                                                                                tessiaVernius = "Tessia Vernius",
                                                                                                yunaMoritani = "?? Princesse ?? Yuna Moritani",
                                                                                                hundroMoritani = "Vicomte Hundro Moritani",

                                                                                                -- Leader abilities
                                                                                                schemeTooltip = "Manigancer un sale tour de derri??re les fagots",
                                                                                                brutalityTooltip = "Faut r'conna??tre c'est du brutal",
                                                                                                manufacturingTooltip = "Faire des profits",
                                                                                                prescienceTooltip = "Inspecter facilement la prochaine carte de votre pioche.",
                                                                                                prescienceUsed = "??? Paul Atreides utilise sa prescience used his prescience pour entrevoir l???avenir.",
                                                                                                prescienceVoid = "Difficile d???entrevoir l???avenir quand on ne voit m??me pas son deck correctement???",
                                                                                                prescienceManual = "Vous devez inspecter manuellement votre pioche (ALT + SHIFT), car elle se r??sume ?? une unique carte.",
                                                                                                disciplineTooltip = "Piocher une carte de votre pioche.",
                                                                                                hiddenReservoirTooltip = "Siphonner votre r??servoir cach??",
                                                                                                spiceHoardTooltip = "Amasser de l?????pice",
                                                                                                guildContactsTooltip = "Faire jouer ses contacts aupr??s de la Guilde",
                                                                                                noAvailableFoldspaceCards = "Il n???y a plus de cartes (et non de paquet !) ?? Replier l???espace ?? dans votre poubelle.",
                                                                                                fillCoffersTooltip = "S???en mettre plein les poches",
                                                                                                warmasterTooltip = "Pour survivre ?? la guerre, il faut devenir la guerre",
                                                                                                spiceAgonyTooltip = "D??clencher l???agonie de l?????pice",
                                                                                                confirmOtherMemories = "Utiliser votre m??moire seconde ?",
                                                                                                otherMemoriesTooltip = "Activer la m??moire seconde",
                                                                                                otherMemoriesUsed = "??? Dame Jessica a utilis??e sa m??moire seconde.",
                                                                                                waterOfLifeTooltip = "Boire l???eau de vie",
                                                                                                leadTheWayTooltip = "Montrer la voie",
                                                                                                firstSnooperRecall = "??? Tessia Vernius a rappel?? son premier fouineur {withFaction}.",
                                                                                                secondSnooperRecall = "??? Tessia Vernius a rappel?? son second fouineur {withFaction}.",
                                                                                                thirdSnooperRecall = "??? Tessia Vernius a rappel?? son troisi??me fouineur {withFaction}.",
                                                                                                fourthSnooperRecall = "??? Tessia Vernius a rappel?? son quatri??me fouineur {withFaction}.",
                                                                                                firstSnooperRecallEffectInfo = "Ayant rappel?? votre premier fouineur, vous pouvez d??fausser une carte pour gagne 1 mesure d?????pice.",
                                                                                                finalDeliveryTooltip = "Derni??re livraison.",
                                                                                                gurneySmile = "??? Gurney montre ses dents.",
                                                                                                imperialBirthright = "??? Irulan exerce son droit de naissance.",
                                                                                                loyalty = "??? Margot r??colte les fruits de sa loyaut??",
                                                                                                stabanSpiceSmuggling = "??? Staban d??tourne sa part d?????pice.",
                                                                                                muadDibBeingUnpredictable = "??? Muad'Dib devient un peu plus impr??visible.",

                                                                                                -- Uprising leaders
                                                                                                stabanTuek = "Staban Tuek",
                                                                                                amberMetulli = "Dame Amber Metulli",
                                                                                                --gurneyHalleck = "Gurney Halleck",
                                                                                                margotFenring = "Dame Margot Fenring",
                                                                                                irulanCorrino = "Princesse Irulan",
                                                                                                reverendMotherJessica = "R??v??rende M??re Jessica",
                                                                                                jessica = "Dame Jessica",
                                                                                                feydRauthaHarkonnen = "Feyd-Rautha Harkonnen",
                                                                                                shaddamCorrino = "Shaddam IV",
                                                                                                muadDib = "Muad???Dib",

                                                                                                -- Spaces
                                                                                                conspire = "Conspirer",
                                                                                                wealth = "Richesse",
                                                                                                heighliner = "Long-courrier",
                                                                                                foldspace = "Replier l???espace",
                                                                                                selectiveBreeding = "S??lection g??n??tique",
                                                                                                secrets = "Secrets",
                                                                                                hardyWarriors = "Guerriers endurcis",
                                                                                                stillsuits = "Distilles",
                                                                                                highCouncil = "Haut Conseil",
                                                                                                mentat = "Mentat",
                                                                                                swordmaster = "Ma??tre d???armes",
                                                                                                rallyTroops = "Rallier des troupes",
                                                                                                hallOfOratory = "Hall de l???oratoire",
                                                                                                secureContract = "S??curiser un contrat",
                                                                                                arrakeen = "Arrakeen",
                                                                                                carthag = "Carthag",
                                                                                                researchStation = "Station de recherche",
                                                                                                researchStationImmortality = "Station de recherche",
                                                                                                sietchTabr = "Sietch Tabr",
                                                                                                imperialBasin = "Bassin imp??rial",
                                                                                                haggaBasin = "Bassin de Hagga",
                                                                                                theGreatFlat = "La grande plaine",
                                                                                                smuggling = "Contrebande",
                                                                                                interstellarShipping = "Livraison interstellaire",
                                                                                                techNegotiation = "N??gociation tech.",
                                                                                                techNegotiation_Buy = "Acheter une tech.",
                                                                                                techNegotiation_Negotiate = "Envoyer un n??gociateur.",
                                                                                                dreadnought = "Cuirass??",

                                                                                                fremkit = "Fremkit",
                                                                                                desertTactics = "Tactiques du d??sert",
                                                                                                --secrets = "Secrets",
                                                                                                espionage = "Espionage",
                                                                                                deliverSupplies = "Livrer des fournitures",
                                                                                                --heighliner = "Heighliner",
                                                                                                dutifulService = "Service assidu",
                                                                                                sardaukar = "Sardaukar",
                                                                                                --highCouncil = "HighCouncil",
                                                                                                imperialPrivilege = "Privil??ge imp??rial",
                                                                                                --swordmaster = "Swordmaster",
                                                                                                assemblyHall = "Salle de l???assembl??e",
                                                                                                gatherSupport = "Rassembler du soutien",
                                                                                                gatherSupport_NoWater = "Gratuit",
                                                                                                gatherSupport_WithWater = "2 solaris",
                                                                                                shipping = "Exp??dition",
                                                                                                acceptContract = "Accepter le contrat",
                                                                                                --sietchTabr = "SietchTabr",
                                                                                                sietchTabr_HookTroopWater = "Provisions",
                                                                                                sietchTabr_WaterShieldWall = "Mur du Bouclier",
                                                                                                --researchStation = "ResearchStation",
                                                                                                spiceRefinery = "Raffinerie d?????pice",
                                                                                                spiceRefinery_NoSpice = "2 solaris",
                                                                                                spiceRefinery_WithSpice = "4 solaris pour 1 ??pice",
                                                                                                --arrakeen = "Arrakeen",
                                                                                                deepDesert = "D??sert profond",
                                                                                                deepDesert_Spice = "4 unit??s d?????pice",
                                                                                                deepDesert_WormsIfHook = "2 vers des sables",
                                                                                                --haggaBasin = "HaggaBasin",
                                                                                                haggaBasin_Spice = "2 unit??s d?????pice",
                                                                                                haggaBasin_WormIfHook = "1 ver des sables",
                                                                                                --imperialBasin = "ImperialBasin",
                                                                                                militarySupport = "Support militaire",
                                                                                                economicSupport = "Support ??conomique",
                                                                                                controversialTechnology = "Technologie controvers??e",
                                                                                                expedition = "??xpedition",
                                                                                                habbanyaErg = "Erg de la Habbanya",
                                                                                                desertMastery = "Desert Mastery",
                                                                                                vastWealth = "Vaste richesse",

                                                                                                -- Hagal
                                                                                                placeSpyYellow = "Placer un espion",
                                                                                                placeSpyBlue = "Placer un espion",
                                                                                                placeSpyGreen = "Placer un espion",
                                                                                                deliverSuppliesAndHeighliner = "Livrer des fournitures / Long-courrier",
                                                                                                gatherSupport1 = "Rassembler du soutien",
                                                                                                gatherSupport2 = "Rassembler du soutien",
                                                                                                acceptContractAndShipping1 = "Accepter un contract / Exp??dition",
                                                                                                acceptContractAndShipping2 = "Accepter un contract / Exp??dition",
                                                                                                haggaBasinAndImperialBasin = "Bassin de Hagga / Bassin imperial",
                                                                                                reshuffle = "R??m??langer",
                                                                                                churnImperiumRow = "Barattage de la rang??e de l???Imperium ({count} {card})",
                                                                                                deliverSuppliesAndInterstellarShipping = "Livrer des fournitures / Livraison interstellaire",
                                                                                                smugglingAndInterstellarShipping = "Contrebande / Livraison interstellaire",
                                                                                                dreadnought1p = "Cuirass??",
                                                                                                dreadnought2p = "Cuirass??",
                                                                                                tleilaxuBonus1 = "Bonus Tleilaxu",
                                                                                                tleilaxuBonus2 = "Bonus Tleilaxu",
                                                                                                tleilaxuBonus3 = "Bonus Tleilaxu",

                                                                                                -- Objective cards
                                                                                                --crysknife = "",
                                                                                                ornithopter1to3p = "Ornithopt??re",
                                                                                                muadDib4to6p = "Muad???Dib",
                                                                                                crysknife4to6p = "Krys",
                                                                                                muadDibFirstPlayer = "Muad???Dib (premier joueur)",

                                                                                                -- Imperium cards
                                                                                                duneTheDesertPlanet = "Dune, la plan??te d??sertique",
                                                                                                seekAllies = "?? la recherche d???alli??s",
                                                                                                signetRing = "Chevali??re",
                                                                                                diplomacy = "Diplomatie",
                                                                                                reconnaissance = "Reconnaissance",
                                                                                                convincingArgument = "Argument convaincant",
                                                                                                dagger = "Dague",
                                                                                                controlTheSpice = "Contr??ler l?????pice",
                                                                                                experimentation = "Exp??rimentation",
                                                                                                jessicaOfArrakis = "Jessica d???Arrakis",
                                                                                                sardaukarLegion = "L??gion Sardaukar",
                                                                                                drYueh = "Dr Yueh",
                                                                                                assassinationMission = "Mission d???assassination",
                                                                                                sardaukarInfantry = "Infantrie Sardaukar",
                                                                                                beneGesseritInitiate = "Initi??e Bene Gesserit",
                                                                                                guildAdministrator = "Administrateur de la guilde",
                                                                                                theVoice = "La Voix",
                                                                                                scout = "??claireur",
                                                                                                imperialSpy = "Espion imp??rial",
                                                                                                beneGesseritSister = "S??ur du Bene Gesserit",
                                                                                                missionariaProtectiva = "Missionaria Protectiva",
                                                                                                spiceHunter = "Chasseur d?????pice",
                                                                                                spiceSmugglers = "Contrebandier d?????pice",
                                                                                                fedaykinDeathCommando = "Commando de la mort Fedaykin",
                                                                                                geneManipulation = "Manipulation g??n??tique",
                                                                                                guildBankers = "Banquiers de la Guilde",
                                                                                                choamDirectorship = "Directoire de CHOM",
                                                                                                crysknife = "Krys",
                                                                                                chani = "Chani",
                                                                                                spaceTravel = "Voyage spatial",
                                                                                                duncanIdaho = "Duncan Idaho",
                                                                                                shiftingAllegiances = "All??giances changeantes",
                                                                                                kwisatzHaderach = "Kwisatz Haderach",
                                                                                                sietchReverendMother = "R??v??rende m??re de sietch",
                                                                                                arrakisRecruiter = "Recruteur d???Arrakis",
                                                                                                firmGrip = "Poigne de fer",
                                                                                                smugglersThopter = "Orni de contrebandiers",
                                                                                                carryall = "Aile portante",
                                                                                                gunThopter = "Orni-mitrailleur",
                                                                                                guildAmbassador = "Ambassadeur de la Guilde",
                                                                                                testOfHumanity = "Test d???humanit??",
                                                                                                fremenCamp = "Camp fremen",
                                                                                                opulence = "Opulence",
                                                                                                ladyJessica = "Dame Jessica",
                                                                                                stilgar = "Stilgar",
                                                                                                piterDeVries = "Piter de Vries",
                                                                                                gurneyHalleck = "Gurney Halleck",
                                                                                                thufirHawat = "Thufir Hawat",
                                                                                                otherMemory = "M??moire seconde",
                                                                                                lietKynes = "Liet Kynes",
                                                                                                wormRiders = "Chevaucheurs de ver",
                                                                                                reverendMotherMohiam = "R??v??rende m??re Mohiam",
                                                                                                powerPlay = "Jeu de pouvoir",
                                                                                                duncanLoyalBlade = "Duncan, lame fid??le",
                                                                                                --thumper = "Marteleur",
                                                                                                boundlessAmbition = "Ambition sans limites",
                                                                                                guildChiefAdministrator = "Administrateur en chef de la Guilde",
                                                                                                guildAccord = "Accord de la Guilde",
                                                                                                localFence = "Receleur local",
                                                                                                shaiHulud = "Shai Hulud",
                                                                                                ixGuildCompact = "Contrat Ix-Guild",
                                                                                                choamDelegate = "D??l??g?? de la CHOM",
                                                                                                bountyHunter = "Chasseur de primes",
                                                                                                embeddedAgent = "Agent infiltr??",
                                                                                                --esmarTuek = "Esmar Tuek",
                                                                                                courtIntrigue = "Intrigue de cour",
                                                                                                sayyadina = "Sayyadina",
                                                                                                imperialShockTrooper = "Troupe de choc imp??riale",
                                                                                                appropriate = "Appropriation",
                                                                                                desertAmbush = "Embuscade dans le d??sert",
                                                                                                inTheShadows = "Parmi les ombres",
                                                                                                satelliteBan = "Ban satellitaire",
                                                                                                freighterFleet = "Flotte de cargos",
                                                                                                imperialBashar = "Bashar imp??rial",
                                                                                                jamis = "Jamis",
                                                                                                landingRights = "Droits d???atterrissage",
                                                                                                waterPeddler = "Porteuse d???eau",
                                                                                                treachery = "Trahison",
                                                                                                truthsayer = "Diseuse de v??rit??",
                                                                                                spiceTrader = "Vendeur d?????pice",
                                                                                                ixianEngineer = "Ing??nieurs ixiens",
                                                                                                webOfPower = "Toile du pouvoir",
                                                                                                weirdingWay = "Art ??trange",
                                                                                                negotiatedWithdrawal = "Retait n??goci??",
                                                                                                fullScaleAssault = "Assaut plan??taire",
                                                                                                beneTleilaxLab = "Laboratoire du Bene Tleilax",
                                                                                                beneTleilaxResearcher = "Chercheur du Bene Tleilax",
                                                                                                blankSlate = "Ardoise vierge",
                                                                                                clandestineMeeting = "R??union clandestine",
                                                                                                corruptSmuggler = "Contrebandier corrompu",
                                                                                                dissectingKit = "Kit de dissection",
                                                                                                forHumanity = "Pour l???Humanit??",
                                                                                                highPriorityTravel = "Voyage en haute priorit??",
                                                                                                imperiumCeremony = "C??r??monie de l???Imperium",
                                                                                                interstellarConspiracy = "Conspiration interstellaire",
                                                                                                keysToPower = "Les clefs du pouvoir",
                                                                                                lisanAlGaib = "Lisan Al-Gaib",
                                                                                                longReach = "Bras long",
                                                                                                occupation = "Occupation",
                                                                                                organMerchants = "Marchands d???organes",
                                                                                                plannedCoupling = "Mariage arrang??",
                                                                                                replacementEyes = "Yeux de rechange",
                                                                                                sardaukarQuartermaster = "Quartier-ma??tre Sardaukar",
                                                                                                shadoutMapes = "Shadout Mapes",
                                                                                                showOfStrength = "D??monstration de force",
                                                                                                spiritualFervor = "Ferveur spirituel",
                                                                                                stillsuitManufacturer = "Fabricant de distilles",
                                                                                                throneRoomPolitics = "R??union du conseil",
                                                                                                tleilaxuMaster = "Ma??tre tleilaxu",
                                                                                                tleilaxuSurgeon = "Chirurgien tleilaxu",
                                                                                                --foldspace = "Espace pliss??",
                                                                                                reclaimedForces = "Forces reconquises",
                                                                                                piterGeniusAdvisor = "Piter, conseiller de g??nie",
                                                                                                beguilingPheromones = "Ph??romones ensorcelantes",
                                                                                                chairdog = "Canisi??ge",
                                                                                                contaminator = "Contaminateur",
                                                                                                corrinoGenes = "G??nes Corrino",
                                                                                                faceDancer = "Danseur-visage",
                                                                                                faceDancerInitiate = "Initi?? danseur visage",
                                                                                                fromTheTanks = "N?? des cuves",
                                                                                                ghola = "Ghola",
                                                                                                guildImpersonator = "Imposteur de la Guilde",
                                                                                                industrialEspionage = "Espionnage industriel",
                                                                                                scientificBreakthrough = "Perc??e scientifique",
                                                                                                sligFarmer = "??leveur de limachons",
                                                                                                stitchedHorror = "Amalgame horrifique",
                                                                                                subjectX137 = "Sujet X-137",
                                                                                                tleilaxuInfiltrator = "Infiltrateur tleilaxu",
                                                                                                twistedMentat = "Mentat ?? tordu ??",
                                                                                                unnaturalReflexes = "R??flexes anormaux",
                                                                                                usurp = "Usurper",

                                                                                                unswervingLoyalty = "Loyaut?? ind??fectible",
                                                                                                spaceTimeFolding = "Replier l???espace-temps",
                                                                                                weirdingWoman = "Femme de l???art ??trange",
                                                                                                sardaukarSoldier = "Soldat Sardaukar",
                                                                                                smugglerHarvester = "Moissonneur de contrebande",
                                                                                                makerKeeper = "Gardien du Faiseur",
                                                                                                reliableInformant = "Informateur fiable",
                                                                                                hiddenMissive = "Missive secr??te",
                                                                                                wheelsWithinWheels = "Des rouages dans les rouages",
                                                                                                fedaykinStilltent = "Abris Fedaykin",
                                                                                                imperialSpymaster = "Ma??tre espion imp??rial",
                                                                                                spyNetwork = "R??seau d???espionnage",
                                                                                                desertSurvival = "Survie dans le d??sert",
                                                                                                undercoverAsset = "Agent sous couverture",
                                                                                                beneGesseritOperative = "Op??ratrice Bene Gesserit",
                                                                                                maulaPistol = "Pistolet Maula",
                                                                                                thumper = "Marteleur",
                                                                                                nothernWatermaster = "Ma??tre de l???Eau du Nord",
                                                                                                covertOperation = "Op??ration clandestine",
                                                                                                doubleAgent = "Agent double",
                                                                                                guildEnvoy = "??missaire de la Guilde",
                                                                                                rebelSupplier = "Fournisseur rebelle",
                                                                                                calculusOfPower = "Calcul de la pouvoir",
                                                                                                guildSpy = "Espion de la Guilde",
                                                                                                dangerousRhetoric = "Rh??torique dangereuse",
                                                                                                branchingPath = "Cheminement ramifi??",
                                                                                                ecologicalTestingStation = "Station de test ??cologique",
                                                                                                theBeastSpoils = "Le butin de la b??te",
                                                                                                smugglerHaven = "Repaire de contrebandiers",
                                                                                                shishakli = "Shishakli",
                                                                                                paracompass = "Paracompas",
                                                                                                sardaukarCoordination = "Coordination Sardaukar",
                                                                                                truthtrance = "Transe de v??rit??",
                                                                                                publicSpectable = "Spectacle public",
                                                                                                southernElders = "A??n??s du Sud",
                                                                                                treadInDarkness = "Avancer dans l???obscurit??",
                                                                                                spacingGuildFavor = "Faveur de la Guilde",
                                                                                                capturedMentat = "Mentat captur??",
                                                                                                subversiveAdvisor = "Conseiller subversif",
                                                                                                leadership = "Commandement",
                                                                                                inHighPlaces = "En haut lieu",
                                                                                                strikeFleet = "Flotte de frappe",
                                                                                                trecherousManeuver = "Man??uvre sournoise",
                                                                                                chaniCleverTactician = "Chani, tacticienne rus??e",
                                                                                                junctionHeadquarters = "Quartier g??n??ral de Jonction",
                                                                                                corrinthCity = "Corrinth",
                                                                                                stilgarTheDevoted = "Stilgar, le d??vou??",
                                                                                                desertPower = "La puissance du d??sert",
                                                                                                arrakisRevolt = "La r??volte d???Arrakis",
                                                                                                priceIsNoObject = "L???argent n???est pas un probl??me",
                                                                                                longLiveTheFighters = "Vive les combattants",
                                                                                                overthrow = "Renversement",
                                                                                                steersman = "Timonier",
                                                                                                cargoRunner = "Convoyeur de fret",
                                                                                                deliveryAgreement = "Accords de livraison",
                                                                                                priorityContracts = "Contrats prioritaires",
                                                                                                interstellarTrade = "Commerce interstellaire",
                                                                                                prepareTheWay = "Pr??parer la voie",
                                                                                                theSpiceMustFlow = "L?????pice doit couler",

                                                                                                emperorConvincingArgument = "Argument convaincant",
                                                                                                emperorCorrinoMight = "Puissance des Corrino",
                                                                                                emperorCriticalShipments = "Livraisons critiques",
                                                                                                emperorDemandResults = "Exiger des r??sultats",
                                                                                                emperorDevastatingAssault = "Assaut d??vastateur",
                                                                                                emperorImperialOrnithopter = "Ornithopt??re imp??rial",
                                                                                                emperorSignetRing = "Chevali??re",
                                                                                                emperorSeekAllies = "?? la recherche d???alli??s",
                                                                                                emperorImperialTent = "Tente imp??riale",

                                                                                                muadDibCommandRespect = "Imposer le respect",
                                                                                                muadDibConvincingArgument = "Argument convaincant",
                                                                                                muadDibDemandAttention = "Exiger de l'attention",
                                                                                                muadDibDesertCall = "Appel du d??sert",
                                                                                                muadDibLimitedLandsraadAccess = "Acc??s limit?? au Landsraad",
                                                                                                muadDibSeekAllies = "?? la recherche d???alli??s",
                                                                                                muadDibUsul = "Usul",
                                                                                                muadDibThreatenSpiceProduction = "Menacer la production d?????pice",
                                                                                                muadDibSignetRing = "Chevali??re",

                                                                                                -- Intrigue
                                                                                                bribery = "Pot-de-vin",
                                                                                                refocus = "recentrage",
                                                                                                ambush = "Embuscade",
                                                                                                alliedArmada = "Armada alli??e",
                                                                                                favoredSubject = "Sujet favori",
                                                                                                demandRespect = "Demander le respect",
                                                                                                poisonSnooper = "Go??te-poison",
                                                                                                guildAuthorization = "Autorisation de la Guilde",
                                                                                                dispatchAnEnvoy = "D??p??cher un envoy??",
                                                                                                infiltrate = "Infiltrer",
                                                                                                knowTheirWays = "Conna??tre leurs coutumes",
                                                                                                masterTactician = "Ma??tre tacticien",
                                                                                                plansWithinPlans = "Des plans dans des plans",
                                                                                                privateArmy = "Arm??e priv??e",
                                                                                                doubleCross = "Trahison",
                                                                                                councilorsDispensation = "Dispense des conseillers",
                                                                                                cornerTheMarket = "Accaparer le march??",
                                                                                                charisma = "Charisme",
                                                                                                calculatedHire = "Recrutement calcul??",
                                                                                                choamShares = "Part de la CHOM",
                                                                                                bypassProtocol = "Contourner les proc??dures",
                                                                                                recruitmentMission = "Mission de recrutement",
                                                                                                reinforcements = "Renforts",
                                                                                                binduSuspension = "Suspension bindu",
                                                                                                secretOfTheSisterhood = "Secret de la sororit??",
                                                                                                rapidMobilization = "Mobilisation ??clair",
                                                                                                stagedIncident = "Incident mise en sc??ne",
                                                                                                theSleeperMustAwaken = "Le dormeur doit se r??veiller",
                                                                                                tiebreaker = "tir au but",
                                                                                                toTheVictor = "Au vainqueur",
                                                                                                waterPeddlersUnion = "Syndicat des porteurs d???eau",
                                                                                                windfall = "Aubaine",
                                                                                                waterOfLife = "Eau de la vie",
                                                                                                urgentMission = "Mission urgente",
                                                                                                diversion = "Diversion",
                                                                                                warChest = "Butin de guerre",
                                                                                                advancedWeaponry = "Armement avanc??",
                                                                                                secretForces = "Forces secr??tes",
                                                                                                grandConspiracy = "Grande conspiration",
                                                                                                cull = "??limination",
                                                                                                strategicPush = "Pouss??e strat??gique",
                                                                                                blackmail = "Chantage",
                                                                                                machineCulture = "Culte de la machine",
                                                                                                cannonTurrets = "Tourelles de canons",
                                                                                                expedite = "Acc??l??rer",
                                                                                                ixianProbe = "Sonde ixienne",
                                                                                                secondWave = "Second vague",
                                                                                                glimpseThePath = "Entrevoir le chemin",
                                                                                                finesse = "Finesse",
                                                                                                strongarm = "Rapport de force",
                                                                                                quidProQuo = "Quid Pro Quo",
                                                                                                breakthrough = "Perc??e",
                                                                                                counterattack = "Contre attaque",
                                                                                                disguisedBureaucrat = "D??guisement de bureaucrate",
                                                                                                economicPositioning = "Positionnement ??conomique",
                                                                                                gruesomeSacrifice = "Sacrifice sanglant",
                                                                                                harvestCells = "Pr??l??vement de cellules",
                                                                                                illicitDealings = "Transactions illicites",
                                                                                                shadowyBargain = "Combine foireuse",
                                                                                                studyMelange = "??tudier le m??lange",
                                                                                                tleilaxuPuppet = "Marionnette tleilaxu",
                                                                                                viciousTalents = "Talents vicieux",

                                                                                                sietchRitual = "Rituel du sietch",
                                                                                                mercenaries = "Mercenaires",
                                                                                                councilorAmbition = "Ambition du conseiller",
                                                                                                strategicStockpiling = "Constitution de stocks strat??giques",
                                                                                                detonation = "D??tonation",
                                                                                                departForArrakis = "D??part pour Arrakis",
                                                                                                cunning = "Ruse",
                                                                                                opportunism = "Opportunisme",
                                                                                                changeAllegiances = "Changement d???all??geances",
                                                                                                specialMission = "Mission sp??ciale",
                                                                                                unexpectedAllies = "Alli??s inattendus",
                                                                                                callToArms = "Appel aux armes",
                                                                                                buyAccess = "Acheter le passage",
                                                                                                imperiumPolitics = "Politique de l???Empire",
                                                                                                shaddamFavor = "Faveur de Shaddam",
                                                                                                intelligenceReport = "Rapport des renseignements",
                                                                                                manipulate = "Manipuler",
                                                                                                distraction = "D??tourner l???attention",
                                                                                                marketOpportunity = "Opportunit?? du march??",
                                                                                                goToGround = "Cachette",
                                                                                                contingencyPlan = "Plan contingence",
                                                                                                inspireAwe = "Inspirer le respect",
                                                                                                findWeakness = "Trouver la faiblesse",
                                                                                                spiceIsPower = "L?????pice, c???est le pouvoir",
                                                                                                devour = "Engloutir",
                                                                                                impress = "Impressionner",
                                                                                                springTheTrap = "D??clencher le pi??ge",
                                                                                                weirdingCombat = "Combat ??trange",
                                                                                                tacticalOption = "Option tactique",
                                                                                                questionableMethods = "M??thodes douteuses",
                                                                                                desertMouse = "Souris du d??sert",
                                                                                                ornithopter = "Ornithopt??re",
                                                                                                --crysknife = "Krys",
                                                                                                joker = "Joker",
                                                                                                shadowAlliance = "Alliance de l???ombre",
                                                                                                secureSpiceTrade = "S??curiser le commerce de l?????pice",

                                                                                                -- Conflicts
                                                                                                skirmishA = "Escarmouche",
                                                                                                skirmishB = "Escarmouche",
                                                                                                skirmishC = "Escarmouche",
                                                                                                choamSecurity = "S??curit?? de la CHOM",
                                                                                                spiceFreighters = "Camtars d?????pice",
                                                                                                siegeOfArrakeen = "Si??ge d???Arrakeen",
                                                                                                seizeSpiceRefinery = "Capturer la raffinerie d?????pice",
                                                                                                testOfLoyalty = "Test de loyaut??",
                                                                                                shadowContest = "??preuve de l???ombre",
                                                                                                secureImperialBasin = "S??curiser le bassin imp??rial",
                                                                                                protectTheSietches = "Prot??ger les sietchs",
                                                                                                tradeDispute = "Diff??rend commercial",
                                                                                                economicSupremacy = "Supr??macie ??conomique",
                                                                                                propaganda = "Propagande",
                                                                                                battleForImperialBasin = "Bataille pour le bassin imp??rial",
                                                                                                battleForArrakeen = "Battaille pour Arrakeen",
                                                                                                battleForSpiceRefinery = "Bataille pour la raffinerie d?????pice",

                                                                                                -- Techs
                                                                                                spaceport = "Spatioport",
                                                                                                restrictedOrdnance = "Ordonnance restrictive",
                                                                                                artillery = "Artillerie",
                                                                                                disposalFacility = "Installation d?????limination",
                                                                                                holoprojectors = "Holoprojecteurs",
                                                                                                minimicFilm = "Film Minimic",
                                                                                                windtraps = "Pi??ges ?? vent",
                                                                                                detonationDevices = "Engins de d??tonation",
                                                                                                memocorders = "Memocorders",
                                                                                                flagship = "Navire amiral",
                                                                                                shuttleFleet = "Flotte de navettes",
                                                                                                spySatellites = "Satellites espions",
                                                                                                chaumurky = "Chaumurky",
                                                                                                sonicSnoopers = "Fouineurs soniques",
                                                                                                trainingDrones = "Drones d???entra??nement",
                                                                                                troopTransports = "Transports de troupes",
                                                                                                holtzmanEngine = "Moteur Holtzman",
                                                                                                invasionShips = "Vaisseaux d???invasion",

                                                                                                -- Contracts
                                                                                                fulfilledContract = "Contrat ?? {contract} ?? rempli.",
                                                                                                harvest3orMore = "R??colter 3+",
                                                                                                harvest4orMore = "R??colter 4+",
                                                                                                --deliverSupplies = "Livrer des fournitures",
                                                                                                highCouncilWithSolaris = "Haut-Conseil (solaris)",
                                                                                                highCouncilWithInfluence = "Haut-Conseil (influence)",
                                                                                                acquireTheSpiceMustFlow = "Acqu??rir ?? l?????pice doit couler ??",
                                                                                                immediate = "Imm??diat",
                                                                                                --researchStation = "Station de recherche",
                                                                                                researchStationWithSpy = "Station de recherche (espion)",
                                                                                                --espionage = "Espionnage",
                                                                                                heighlinerWithWater = "Long-courrier (eau)",
                                                                                                heighlinerWithTroops = "Long-courrier (troupes)",
                                                                                                sardaukarWithCards = "Sardaukar (cartes)",
                                                                                                sardaukarWithRecall = "Sardaukar (rappel)",
                                                                                                spiceRefineryWithCards = "Raffinerie d?????pice (cartes)",
                                                                                                spiceRefineryWithWater = "Raffinerie d?????pice (eau)",
                                                                                                arrakeenWithWater = "Arrakeen (eau)",
                                                                                                arrakeenWithSpy = "Arrakeen (espion)",
                                                                                                --dreadnought = "Cuirass??",
                                                                                                --techNegotiation = "N??gociation tech.",
                                                                                                highCouncilWithTech = "Haut-Conseil (tech.)",
                                                                                                --interstellarShipping = "Livraison interstellaire",,
                                                                                                harvest3orMoreWithTech = "R??colter 3+ (tech.)",
                                                                                                harvest4orMoreWithTech = "R??colter 4+ (tech.)",
                                                                                                --smuggling = "Contrebande",
                                                                                                heighlinerWithTech = "Long-courrier (tech.)",
                                                                                                espionageWithTech = "Espionnage (tech.)",
                                                                                                secretsWithTech = "Secrets (tech.)",

                                                                                                -- Specific victory tokens
                                                                                                endgame = "Carte de fin de partie",
                                                                                                endgameTech = "Tech. de fin de partie",
                                                                                                combat = "Combat",
                                                                                                rivalIntrigue = "Rival - Intrigue",
                                                                                                rivalSolari = "Rival - Solari",
                                                                                                rivalWater = "Rival - Eau",
                                                                                                rivalSpice = "Rival - ??pice",
                                                                                                --beneTleilax = "Bene Tleilax",
                                                                                                objective = "Objectif",
                                                                                                priorityContract = "Contrat prioritaire",
                                                                                                strategicStockpiling1 = "Stocks strat??giques (??pice)",
                                                                                                strategicStockpiling2 = "Stocks strat??giques (eau)",
                                                                                                --opportunism = "Opportunisme",
                                                                                                emperorAlliance = "Alliance avec l???Empereur",
                                                                                                emperorFriendship = "Amiti?? avec l???Empereur",
                                                                                                greatHousesAlliance = "Alliance avec les grandes maisons",
                                                                                                greatHousesFriendship = "Amiti?? avec les grandes maisons",
                                                                                                spacingGuildAlliance = "Alliance avec la Guilde spatiale",
                                                                                                spacingGuildFriendship = "Amiti?? avec la Guilde spatiale",
                                                                                                beneGesseritAlliance = "Alliance avec le Bene Gesserit",
                                                                                                beneGesseritFriendship = "Amiti?? avec le Bene Gesserit",
                                                                                                fringeWorldsAlliance = "Alliance avec les mondes p??riph??riques",
                                                                                                fringeWorldsFriendship = "Amiti?? avec les mondes p??riph??riques",
                                                                                                fremenAlliance = "Alliance avec les Fremens",
                                                                                                fremenFriendship = "Amiti?? avec les Fremens",
                                                                                                muadDibVictoryPoint = "Objectif Muad'Dib",
                                                                                                crysknifeVictoryPoint = "Objective krys",
                                                                                                ornithopterVictoryPoint = "Objective ornithopt??re",

                                                                                                -- Submit game
                                                                                                submitGame = "Soumettre la partie",
                                                                                                submitGameRankedGame = "Partie class??e",
                                                                                                submitGameTournament = "Partie de tournoi",
                                                                                                openSubmitScreen = "Ouvrir l?????cran de soumission",
                                                                                                placement = "Classement",
                                                                                                victoryPoints = "PV",
                                                                                                name = "Nom",
                                                                                                leaderName = "Nom du dirigeant",
                                                                                                submitGameMessage = "Assurez-vous que tous les ajustements sont effectu??s avant la soumission.\nLes erreurs dans les scores ne pourront plus ??tre modifi??es apr??s la soumission !",
                                                                                                close = "Fermer",
                                                                                                noPlayerMetEndGameCondition = "Aucun joueur n???a rempli la condition de fin de partie.",
                                                                                                gameSubmitted = "Partie soumise dans Google Sheets",
                                                                                                gameAlreadySubmitted = "Jeu d??j?? soumis - Rien a faire.",
                                                                                            }

                                                                                        end)
                                                                                        __bundle_register("en.Locale", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                            return {
                                                                                                ["?"] = "?",

                                                                                                Green = "green",
                                                                                                Yellow = "yellow",
                                                                                                Blue = "blue",
                                                                                                Red = "red",
                                                                                                Purple = "purple",
                                                                                                White = "white",

                                                                                                -- Setup UI
                                                                                                prolog = '"A setup is a very delicate time..."',
                                                                                                language = "Language",
                                                                                                players = "Players",
                                                                                                virtualHotSeat = "Special / Hotseat",
                                                                                                virtualHotSeatTooltip = "Allows you to play solo, with 2 players\nor in ???hotseat??? for the other modes.",
                                                                                                firstPlayer = "First Player",
                                                                                                randomizePlayersPositions = "Randomize players' positions",
                                                                                                randomizePlayersPositionTooltip = "No player must use the black seat while\nthe player positions are shuffled.",
                                                                                                wormEatsTheCardTooltip = "Enable Worm Eats The Card mode https://boardgamegeek.com/thread/2577038/the-sand-worms-eats-cards",
                                                                                                extensions = "Extensions",
                                                                                                useContracts = "CHOAM contracts",
                                                                                                legacy = "Dune: Imperium",
                                                                                                merakon = "Paul Dennen's House Blend",
                                                                                                riseOfIx = "Rise of Ix",
                                                                                                epicMode = "Epic mode",
                                                                                                immortality = "Immortality",
                                                                                                goTo11 = "Go to 11",
                                                                                                leaderSelection = "Leader selection",
                                                                                                leaderPoolSize = "Leader pool size",
                                                                                                leaderPoolSizeLabel = "Leader pool size ({value})",
                                                                                                tweakLeaderSelection = "Tweak leader pool",
                                                                                                variants = "Variants",
                                                                                                miscellanous = "Miscellanous",
                                                                                                horizontalHandLayout = "Horizontal hands layout with 4 players",
                                                                                                assistedRevelation = "Assisted revelation",
                                                                                                soundEnabled = "Sounds enabled",
                                                                                                formalCombatPhase = "Formal combat phase",
                                                                                                formalCombatPhaseTooltip = "Players with one or more plot cards\nmust explicitly end their turn after\nplaying one or to pass.",
                                                                                                setup = "Setup",
                                                                                                notEnoughPlayers = "Not enough players",
                                                                                                playerColorWarning = "(Teal and purple colors are only valid in 6P mode.)",
                                                                                                english = "English",
                                                                                                french = "Fran??ais",
                                                                                                random = "random",
                                                                                                reversePick = "hidden pick",
                                                                                                reverseHiddenPick = "reverse hidden pick",
                                                                                                altHiddenPick = "4??3??1??2 hidden pick",
                                                                                                onePlayerTwoRivals = "1 (+2)",
                                                                                                twoPlayersOneRival = "2 (+1)",
                                                                                                threePlayers = "3",
                                                                                                fourPlayers = "4",
                                                                                                twoTeams = "2 x 3",
                                                                                                normal = "normal",
                                                                                                streamlined = "streamlined",

                                                                                                -- Solo Setup UI
                                                                                                soloSettings = "Hagal",
                                                                                                difficulty = "Difficulty",
                                                                                                all = "all",
                                                                                                novice = "mercenary",
                                                                                                veteran = "sardaukar",
                                                                                                expert = "mentat",
                                                                                                expertPlus = "kwisatz",
                                                                                                autoTurnInSoloOption = "Automatic turn pass",
                                                                                                imperiumRowChurnOption = "Imperium Row Churn",
                                                                                                streamlinedRivalsOption = "streamlined Rivals",
                                                                                                brutalEscalationOption = "Brutal Escalation",
                                                                                                expertDeploymentOption = "Expert Deployment",
                                                                                                smartPoliticsOption = "Smart Politics",

                                                                                                -- Phases
                                                                                                phaseLeaderSelection = "Phase: leader selection",
                                                                                                phaseGameStart = "Phase: game start",
                                                                                                phaseRoundStart = "Phase: round start #{round}\n??????????????????????????????????????????????????????????????????????????????????????????",
                                                                                                phasePlayerTurns = "Phase: player turns",
                                                                                                phaseCombat = "Phase: combat",
                                                                                                phaseCombatEnd = "Phase: combat end",
                                                                                                phaseMakers = "Phase: makers",
                                                                                                phaseRecall = "Phase: recall",
                                                                                                phaseEndgame = "Phase: endgame",
                                                                                                phaseArrakeenScouts = "Phase: Arrakeen scouts",
                                                                                                notEnoughLeaderLeft = "Not enough leaders left!",

                                                                                                -- Card
                                                                                                acquireButton = "Acquire",
                                                                                                notFremenCard = "Attempting to add a filthy Fremen to the Throne room!",
                                                                                                noEnoughSpecimen = "You don't have enough specimens!",

                                                                                                -- Playboard
                                                                                                noTouch = "Don't touch this button!",
                                                                                                noLeader = "You don't have a leader yet!",
                                                                                                noAlly = "You haven't selected an ally!",
                                                                                                notYourTurn = "It's not your turn!",
                                                                                                noAgent = "You don't have any agent left",
                                                                                                agentAlreadyPresent = "You already have an agent present there!",
                                                                                                noFriendship = "You don't have enough influence with {withFaction}!",
                                                                                                alreadyHaveSwordmaster = "You already have a swordmaster!",
                                                                                                noResource = "You don't have enough {resource}!",
                                                                                                -- bloodlines no solari
                                                                                                noSolari = "You don't have enough solari!",
                                                                                                forbiddenAccess = "You cannot access this space!",
                                                                                                notShaddamTeam = "You are not allied to the Emperor of the Known Universe!",
                                                                                                notMuadDibTeam = "You are not allied with Usul Muad-Dib, the Lisan al-Gaib!",
                                                                                                -- bloodlines changed to sandworm
                                                                                                sandwormButton = "Sandworm:\n??1",
                                                                                                -- bloodlines sardaukar commanders
                                                                                                sardaukarCommanderButton = "Sardaukar\nCommander: ??1",
                                                                                                drawOneCardButton = "Draw 1 Card",
                                                                                                drawFiveCardsButton = "??? Draw 5 Cards ???",
                                                                                                resetDiscardButton = "Discard ??? Deck",
                                                                                                agentTurn = "Agent Turn",
                                                                                                revealHandButton = "Reveal Turn",
                                                                                                revealHandTooltip = "Right click for an extended reveal.",
                                                                                                atomics = "Atomics",
                                                                                                revealNotTurn = "You can't Reveal while it's not your turn.",
                                                                                                revealEarlyConfirm = "Reveal Hand ?",
                                                                                                isDecidingToDraw = "{leader} is deciding wether to draw cards right away or not cause their discard will be reshuffled.",
                                                                                                warningBeforeDraw = "Warning: your discard will be reshuffled and/or you have less than {count} card(s). Do you want to draw {maxCount} card(s) right away ? (You will have to draw manually if you cancel)",
                                                                                                atomicsConfirm = "Confirm",
                                                                                                yes = "Yes",
                                                                                                no = "No",
                                                                                                ok = "Ok",
                                                                                                cancel = "Cancel",
                                                                                                dialogCardAbove = "Do you want to put the card on top of your deck?",
                                                                                                endTurn = "End\nTurn",
                                                                                                takeHighCouncilSeatByForce = "Take by force",
                                                                                                takeHighCouncilSeatByForceConfirm = "Taking High-Council seat by force?",
                                                                                                activatedAlly = "Activated ally",
                                                                                                noSeatedPlayer = "The {color} player is missing!",
                                                                                                takePlace = "Take\nPlace",
                                                                                                forwardMessage = "To the {color} player: {message}",

                                                                                                -- Leader selection
                                                                                                leaderSelectionAdjust = "Adjust the number of leaders who will be randomly\nselected for the players to choose among:",
                                                                                                leaderSelectionExclude = "You can flip out (or delete) any leader you want to exclude.\nOnce satisfied, hit the 'Start' button.",
                                                                                                start = "Start",
                                                                                                claimLeader = "Claim {leader} as leader",
                                                                                                incompatibleLeader = "Not a human leader!",
                                                                                                incompatibleRivalLeader = "Not a rival leader!",

                                                                                                -- Instructions
                                                                                                leaderSelectionActiveInstruction = "Select a leader\non the upper board",
                                                                                                leaderSelectionInactiveInstruction = "Wait for your opponents\nto select their leader.",
                                                                                                playerTurnsActiveInstruction = "Send an agent\nor reveal your hand,\nthen press End of Turn.",
                                                                                                playerTurnsInactiveInstruction = "Wait for your opponents\nto play their\nagent / reveal turns.",
                                                                                                combatActiveInstruction = "Play an intrigue and\npress End of Turn or simply\npress End of Turn to pass.",
                                                                                                combatInactiveInstruction = "Wait for your opponents\nin combat to play an\nintrigue or pass their turns.",
                                                                                                combatEndActiveInstruction = "Take your reward and play\nintrigue cards if you may,\nthen press End of Turn.",
                                                                                                combatEndInactiveInstruction = "Wait for your opponents\nto collect their rewards\nand play any intrigue.",
                                                                                                endgameActiveInstruction = "Play any Endgame card and\nTech tile you possess\nto gain final victory points.",
                                                                                                endgameInactiveInstruction = "Wait for your opponents\nto play any Endgame card\nor Tech tiles they possess.",
                                                                                                -- Special instructions
                                                                                                gameStartActiveInstructionForVladimirHarkonnen = "Secretly choose two factions.",
                                                                                                gameStartInactiveInstructionForVladimirHarkonnen = "Wait for Vladimir Harkonnen\nto secretly choose\nits two factions.",
                                                                                                gameStartActiveInstructionForIlesaEcaz = "Set aside a card\nfrom your hand.",
                                                                                                gameStartInactiveInstructionForIlesaEcaz = "Wait for Ilesa Ecaz\nto set aside a card\nfrom her hand.",
                                                                                                gameStartActiveInstructionForHundroMoritani = "Keep one intrigue\nand put the other\non top of the intrigue deck.",
                                                                                                gameStartInactiveInstructionForHundroMoritani = "Wait for Hundro Moritani\nto choose between\nits two intrigues.",
                                                                                                -- bloodlines added kota and y'rkoon
                                                                                                gameStartActiveInstructionForKotaOdax = "Wait for Kota Odax\nto choose her secret project.",
                                                                                                gameStartActiveInstructionForSteersmanYrkoon = "Wait for Steersman Y'rkoon\nto plot his course.",

                                                                                                -- Resource
                                                                                                spiceAmount = "Spice",
                                                                                                spice = "spice unit",
                                                                                                spices = "spice units",
                                                                                                waterAmount = "Water",
                                                                                                water = "measure of water",
                                                                                                waters = "measures of water",
                                                                                                solariAmount = "Solari",
                                                                                                solari = "solari",
                                                                                                solaris = "solaris",
                                                                                                persuasionAmount = "Persuasion",
                                                                                                persuasion = "Persuasion point",
                                                                                                persuasions = "Persuasion points",
                                                                                                strengthAmount = "Strength",
                                                                                                strength = "Sword",
                                                                                                strengths = "Swords",
                                                                                                spendManually = "??? {leader} spent {amount} {resource} manually.",
                                                                                                receiveManually = "??? {leader} received {amount} {resource} manually.",
                                                                                                fixManually = "Fixed {amount} {resource} manually ({location}).",
                                                                                                influence = "influence",
                                                                                                beetle = "beetle",
                                                                                                beetles = "beetles",
                                                                                                card = "card",
                                                                                                cards = "cards",

                                                                                                -- Actions
                                                                                                playerTurn = "??? Turn: {leader}",
                                                                                                drawObjects = "??? Draw {amount} {object}",
                                                                                                drawObjectsManually = "??? Draw {amount} {object} manually",
                                                                                                imperiumCard = "card",
                                                                                                imperiumCards = "cards",
                                                                                                intrigueCard = "intrigue card",
                                                                                                intrigueCards = "intrigue cards",
                                                                                                beetleAdvance = "??? Progress x{count} on the Tleilax track.",
                                                                                                beetleRollback = "??? Regress on the Tleilax track.",
                                                                                                researchAdvance = "??? Progress on the research track.",
                                                                                                researchRollback = "??? R??gress on the research track.",
                                                                                                credit = "??? +{amount} {what}",
                                                                                                debit = "??? -{amount} {what}",
                                                                                                transfer = "??? Transfer of {count} {what}: {from} ??? {to}.",
                                                                                                troop = "troop",
                                                                                                troops = "troops",
                                                                                                dreadnoughts = "dreadnoughts",
                                                                                                supplyPark = "reserve",
                                                                                                garrisonPark = "garrison",
                                                                                                combatPark = "battlefield",
                                                                                                negotiationPark = "tech negotiation",
                                                                                                tanksPark = "Axolotl tanks",
                                                                                                otherMemoriesPark = "Other Memories",
                                                                                                advanceFreighter = "??? Progress on the shipment track.",
                                                                                                recallFreighter = "??? Recall freighter.",
                                                                                                recruitSwordmaster = "??? Recruit Swordmaster.",
                                                                                                takeHighCouncilSeat = "??? Take High-Council seat.",
                                                                                                takeMakerHook = "??? Learn to use a Maker hook.",
                                                                                                gainInfluence = "??? +{amount} influence with {withFaction}.",
                                                                                                loseInfluence = "??? -{amount} influence with {withFaction}.",
                                                                                                acquireTleilaxuCard = '??? Acquire Tleixlaxu card: "{card}".',
                                                                                                acquireImperiumCard = '??? Acquire Imperium card: "{card}".',
                                                                                                buyTech = '??? Acquire tech for {amount} {resource}: "{name}".',
                                                                                                -- bloodlines changed from pick to acquired
                                                                                                acquireContract = '??? Acquired contract: "{name}".',
                                                                                                sendingAgent = "??? Sending an agent to: {space} ({cards}).",
                                                                                                stealIntrigues = '??? Stealing "{card}" from {victim}.',
                                                                                                gainVictoryPoint = "??? Gaining VP ({name}).",
                                                                                                -- bloodlines sardaukar commander
                                                                                                acquireSkill = '??? Acquired Sardaukar Commander skill: "{name}"',
                                                                                                recruitSupplySardaukarCommander = "??? Transfer of 1 Sardaukar Commander: Supply ??? Garrison",
                                                                                                undoSupplySardaukarCommander = "??? Transfer of 1 Sardaukar Commander: Garrison ??? Supply",
                                                                                                recruitSardaukarCommanderAssemblyHall = "??? Recruit Sardaukar Commander: Assembly Hall",
                                                                                                recruitSardaukarCommanderGatherSupport = "??? Recruit Sardaukar Commander: Gather Support",
                                                                                                recruitSardaukarCommanderHighCouncil = "??? Recruit Sardaukar Commander: High Council",
                                                                                                recruitSardaukarCommanderSardaukar = "??? Recruit Sardaukar Commander: Sardaukar",
                                                                                                recruitSardaukarCommanderDutifulService = "??? Recruit Sardaukar Commander: Dutiful Service",
                                                                                                recruitSardaukarCommanderDeliverSupplies = "??? Recruit Sardaukar Commander: Deliver Supplies",
                                                                                                recruitSardaukarCommanderStandard = "??? Recruit Sardaukar Commander: Sardaukar Standard",
                                                                                                recruitSardaukarCommanderNoPopup = '??? Recruit Sardaukar Commander: "MANUAL" IF NEEDED, MAKE PROPER ADJUSTMENT ON BOARD!',
                                                                                                recruitSardaukarCommanderConfirm = "Recruit Sardaukar Commander?\n(costs 2 solari)",
                                                                                                recruitSardaukarCommanderFreeConfirm = "Recruit Sardaukar Commander?",
                                                                                                recruitSardaukarCommanderConfirmOneSolari = "Recruit Sardaukar Commander?\n(costs 1 solari)",
                                                                                                sardaukarCommanderAssemblyHall = "Sardaukar Commander - Assembly Hall",
                                                                                                sardaukarCommanderGatherSupport = "Sardaukar Commander - Gather Support",
                                                                                                sardaukarCommanderHighCouncil = "Sardaukar Commander - High Council",
                                                                                                sardaukarCommanderSardaukar = "Sardaukar Commander - Sardaukar",
                                                                                                sardaukarCommanderDutifulService = "Sardaukar Commander - Dutiful Service",
                                                                                                sardaukarCommanderDeliverSupplies = "Sardaukar Commander - Deliver Supplies",
                                                                                                sardaukarCommanderStandard = "Sardaukar Commander - Sardaukar Standard",
                                                                                                sardaukarCommanderNoPopup = "Sardaukar Commander - No Popup",
                                                                                                noCommanderSupply = "No Sardaukar Commanders in Supply!",
                                                                                                noCommanderGarrison = "No Sardaukar Commanders in Garrison!",

                                                                                                -- Rival Actions
                                                                                                triggeringScheme = "??? Triggering {leader}'s scheme.",
                                                                                                brutalEscalation = "??? Brutal Escalation!",
                                                                                                smartPolitics = "??? Applying Smart Politics.",
                                                                                                expertDeploymentLimit = "??? Limit deployed forces to {limit}.",

                                                                                                -- Shield Wall
                                                                                                confirmShieldWallDestruction = "Do you really want not to obey the forms of the Great Convention?",
                                                                                                blowUpShieldWall = "{leader} is blowing up the Shield Wall!",
                                                                                                explosion = "Kaboom!",

                                                                                                -- Combat
                                                                                                announceCombat = 'Round combat is: "{combat}"',
                                                                                                dreadnoughtMandatoryOccupation = "Reminder: you must sent a dreadnought and occupy a space.",
                                                                                                troopEdit = "Troops: ??1",

                                                                                                -- Boards
                                                                                                sendAgentTo = "Send agent to ??? {space}",
                                                                                                sendSpyTo = "Send spy",
                                                                                                infiltrateWithSpy = "Spy recalled to infiltrate",
                                                                                                gatherIntelligenceWithSpy = "Spy recalled to gather intelligence",
                                                                                                noSpyToInfiltrate = "No spy present to allow you to infiltrate!",
                                                                                                noSpyToRecallOrCardToDraw = "You don't have spies to recall or cards to draw!",
                                                                                                selectSpyToRecall = "Select from wich observation post you recall your spy.",
                                                                                                confirmSpyRecall = "Do you want to recall a spy to draw a card?",
                                                                                                progressOnInfluenceTrack = "Progress on {withFaction} influence track",
                                                                                                recallYourFreighter = "Recall your freighter",
                                                                                                progressOnShipmentTrack = "Progress on the shipment track",
                                                                                                pickBonus = "Pick your bonus: {bonus}",
                                                                                                troopsAndInfluence = "troops and influnce",
                                                                                                forbiddenMove = "Forbidden move. Do you confirm it neverless?",
                                                                                                progressOnTleilaxTrack = "Progress on the Tleilax track",
                                                                                                specimenEdit = "Specimen: ??1",
                                                                                                progressOnResearchTrack = "Progress on the research track",
                                                                                                progressAfterResearchTrack = "Progress beyond the research track",
                                                                                                negotiatorEdit = "Negotiator: ??1",
                                                                                                goGatherSupport = "Select an option.",
                                                                                                noWaterOption = "Without water",
                                                                                                withWaterOption = "With water",
                                                                                                goSietchTabr = "Select an option.",
                                                                                                hookTroopWaterOption = "Hook + Troop + Water",
                                                                                                troopWaterOption = "Troop + Water",
                                                                                                waterShieldWallOption = "Water + Atomics",
                                                                                                goSpiceRefinery = "Select an option.",
                                                                                                noSpiceOption = "0 spice unit",
                                                                                                withSpiceOption = "1 spice unit",
                                                                                                reclaimRewards = "Reclaim Rewards",
                                                                                                makersAndRecall = "Makers + Recall",
                                                                                                doublingConflictRewards = "Double rewards",
                                                                                                unavailableSwordmaster = "No swordmaster with this level of difficulty!",

                                                                                                goDeepDesert = "Select an option.",
                                                                                                fourSpicesOption = "4 spice units",
                                                                                                twoWormsOption = "2 sandworm",
                                                                                                goHaggaBasin = "Select an option.",
                                                                                                twoSpicesOption = "2 spice units",
                                                                                                oneWormOption = "1 sandworm",
                                                                                                noMakerHook = "You don't have a maker's hook!",
                                                                                                shieldWallIsStanding = "The Shield Wall is still standing!",

                                                                                                goTechNegotiation = "Select an option.",
                                                                                                sendNegotiatorOption = "Negotiator",
                                                                                                buyTechWithDiscont1Option = "Discounted tech.",
                                                                                                buyTechSelection = "Select which tech acquisition option you want to use.",
                                                                                                freighterTechBuyOption = "Shipment track",
                                                                                                techNegotiationTechBuyOption = "Tech. negotiation",
                                                                                                dreadnoughtTechBuyOption = "Dreadnought",
                                                                                                appropriateTechBuyOption = "Appropriate",
                                                                                                ixianEngineerTechBuyOption = "Ixian Engineer",
                                                                                                machineCultureTechBuyOption = "Machine Culture",
                                                                                                rhomburVerniusTechBuyOption = "Rhombur Vernius' ring",
                                                                                                -- bloodlines changed text
                                                                                                manuallyBuyTech = "Acquire tech? Pay cost manually.",
                                                                                                -- bloodlines maybe reword?
                                                                                                notAffordableOption = "You can't afford this buying option!",
                                                                                                pruneTechCard = 'Pruning tech tile: "{card}"',
                                                                                                roundNumber = "Round #",
                                                                                                doYouWantAnotherRound = "Play another round?",
                                                                                                -- bloodlines tuek's sietch option
                                                                                                goTueksSietch = "Select an option.",
                                                                                                tueksSpiceOption = "1 spice unit",
                                                                                                tueksDrawOption = "1 card draw",

                                                                                                -- Arrakeen Scouts
                                                                                                joinCommittee = "Join the subcommittee: {committee}",
                                                                                                appropriations = "Appropriations",
                                                                                                development = "Development",
                                                                                                information = "Information",
                                                                                                investigation = "Investigation",
                                                                                                joinForces = "Join Forces",
                                                                                                politicalAffairs = "Political Affairs",
                                                                                                preparation = "Preparation",
                                                                                                relations = "Relations",
                                                                                                supervision = "Supervision",
                                                                                                dataAnalysis = "Data Analysis",
                                                                                                developmentProject = "Development Project",
                                                                                                tleilaxuRelations = "Tleilaxu Relations",
                                                                                                committeeReminder = "You now have the opportunity to join a subcommittee this turn.",
                                                                                                first = "1st",
                                                                                                firstExAequo = "1st ex aequo",
                                                                                                second = "2nd",
                                                                                                secondExAequo = "2nd ex aequo",
                                                                                                third = "3rd",
                                                                                                thirdExAequo = "3rd ex aequo",
                                                                                                fourth = "4th",
                                                                                                fourthExAequo = "4th ex aequo",
                                                                                                lose = "perdu",
                                                                                                passOption = "Pass",
                                                                                                waitOption = "Wait",
                                                                                                refuseOption = "Refuse",
                                                                                                acceptOption = "Accept",
                                                                                                discardOption = "Discard",
                                                                                                discardNonStarterCard = "Discard a non starter card",
                                                                                                discardACard = "Discard a card",
                                                                                                discardAnIntrigue = "Discard an intrigue",
                                                                                                trashACard = "Trash a card",
                                                                                                doAResearch = "Do a research",
                                                                                                destroyACardFromYourHand = "Destroy a card from your hand",
                                                                                                spendOption = "Spend {amount} {resource}",
                                                                                                amount = "{amount} {resource}",

                                                                                                -- Ranking
                                                                                                firstInCombat = "??? 1st: {leader}",
                                                                                                firstExAequoInCombat = "??? 1st ex aequo: {leader}",
                                                                                                secondInCombat = "??? 2nd: {leader}",
                                                                                                secondExAequoInCombat = "??? 2nd ex aequo: {leader}",
                                                                                                thirdInCombat = "??? 3rd: {leader}",
                                                                                                thirdExAequoInCombat = "??? 3rd ex aequo: {leader}",
                                                                                                fourthInCombat = "??? 4th: {leader}",
                                                                                                fourthExAequoInCombat = "??? 4th ex aequo: {leader}",

                                                                                                -- Tleilax board
                                                                                                confirmSolarisToBeetles = "Do you want to pay 7 Solaris to Advance Twice on the Tleilaxu Track ?",

                                                                                                -- Factions
                                                                                                withEmperor = "the Emperor",
                                                                                                withSpacingGuild = "the Spacing Guild",
                                                                                                withBeneGesserit = "the Bene Gesserit",
                                                                                                withFremen = "the Fremens",
                                                                                                withGreatHouses = "the Great Houses",
                                                                                                withFringeWorlds = "the Fringe Worlds",

                                                                                                -- Leaders
                                                                                                vladimirHarkonnen = "Baron Vladimir Harkonnen",
                                                                                                glossuRabban = 'Glossu "The Beast" Rabban',
                                                                                                ilbanRichese = "Count Ilban Richese",
                                                                                                helenaRichese = "Helena Richese",
                                                                                                letoAtreides = "Duke Leto Atreides",
                                                                                                paulAtreides = "Paul Atreides",
                                                                                                arianaThorvald = "Countess Ariana Thorvald",
                                                                                                memnonThorvald = "Earl Memnon Thorvald",
                                                                                                armandEcaz = "Archduke Armand Ecaz",
                                                                                                ilesaEcaz = "Ilesa Ecaz",
                                                                                                rhomburVernius = "Prince Rhombur Vernius",
                                                                                                tessiaVernius = "Tessia Vernius",
                                                                                                yunaMoritani = '"Princess" Yuna Moritani',
                                                                                                hundroMoritani = "Viscount Hundro Moritani",

                                                                                                -- Leader abilities
                                                                                                schemeTooltip = "Scheme a plot",
                                                                                                brutalityTooltip = "Don't be gentle",
                                                                                                manufacturingTooltip = "Make a profit",
                                                                                                prescienceTooltip = "Look at top card of your deck easily with this.",
                                                                                                prescienceUsed = "??? Paul Atreides used his prescience to look into the future.",
                                                                                                prescienceVoid = "All you see is the void ! (Your deck it empty actually???)",
                                                                                                prescienceManual = "You need to peek manually (ALT + SHIFT) because there is only one card in your deck.",
                                                                                                disciplineTooltip = "Draw a card.",
                                                                                                hiddenReservoirTooltip = "Siphon your hidden reservoir",
                                                                                                spiceHoardTooltip = "Hoard spice",
                                                                                                guildContactsTooltip = "Use your contacts with the Guild",
                                                                                                noAvailableFoldspaceCards = 'No "Foldspace" card (not deck!) found in your trash.',
                                                                                                fillCoffersTooltip = "Fill coffers",
                                                                                                warmasterTooltip = "Warmaster",
                                                                                                spiceAgonyTooltip = "Trigger the Spice Agony.",
                                                                                                confirmOtherMemories = "Use your Other Memories?",
                                                                                                otherMemoriesTooltip = "Use your Other Memories.",
                                                                                                otherMemoriesUsed = "??? Lady Jessica used her Other Memories.",
                                                                                                waterOfLifeTooltip = "Drink the Water of Life",
                                                                                                leadTheWayTooltip = "Lead the Way",
                                                                                                firstSnooperRecall = "??? Tessia Vernius has recalled her first snooper from {withFaction}.",
                                                                                                secondSnooperRecall = "??? Tessia Vernius has recalled her second snooper from {withFaction}.",
                                                                                                thirdSnooperRecall = "??? Tessia Vernius has recalled her third snooper from {withFaction}.",
                                                                                                fourthSnooperRecall = "??? Tessia Vernius has recalled her fourth snooper from {withFaction}.",
                                                                                                firstSnooperRecallEffectInfo = "Having recalled your first snooper, you may discard a card to get 1 spice unit.",
                                                                                                finalDeliveryTooltip = "Final Delivery.",
                                                                                                gurneySmile = "??? Gurney is showing his teeths.",
                                                                                                imperialBirthright = "??? Irulan exercises his imperial birthright.",
                                                                                                loyalty = "??? Margot reaps the rewards of her loyalty",
                                                                                                stabanSpiceSmuggling = "??? Staban smuggles away some spice.",
                                                                                                muadDibBeingUnpredictable = "??? Muad'Dib becomes a bit more unpredictable.",
                                                                                                -- bloodlines leader abilities in chat log
                                                                                                harkonnenAdvisorTooltip = "Harkonnen Advisor",
                                                                                                reverseEngineeringTooltip = "Reverse Engineering - 1 spice",
                                                                                                tueksSietchPayment = "??? Tuek's Sietch is open for business!",
                                                                                                piterTwistedGenius = "??? Piter De Vries is a twisted genius!",
                                                                                                lietHatesTheMaker = "??? Liet Kynes hates the Maker! Gets 1 trash, 1 spice and 1 intrigue.",
                                                                                                lietHatesTheMakerDeepDesert = "??? Liet Kynes really hates the Maker! Gets 2 trash, 2 spice and 2 intrigue.",

                                                                                                -- Uprising leaders
                                                                                                stabanTuek = "Staban Tuek",
                                                                                                amberMetulli = "Lady Amber Metulli",
                                                                                                gurneyHalleck = "Gurney Halleck",
                                                                                                margotFenring = "Lady Margot Fenring",
                                                                                                irulanCorrino = "Princess Irulan",
                                                                                                reverendMotherJessica = "Reverend Mother Jessica",
                                                                                                jessica = "Lady Jessica",
                                                                                                feydRauthaHarkonnen = "Feyd-Rautha Harkonnen",
                                                                                                shaddamCorrino = "Shaddam IV",
                                                                                                muadDib = "Muad'Dib",
                                                                                                -- bloodlines leaders
                                                                                                bl_Chani = "Chani",
                                                                                                bl_Duncan = "Duncan Idaho",
                                                                                                bl_Esmar = "Esmar Tuek",
                                                                                                bl_Hasimir = "Count Hasimir Fenring",
                                                                                                bl_Kota = "Kota Odax of Ix",
                                                                                                bl_Liet = "Liet Kynes",
                                                                                                bl_Mohiam = "Gaius Helen Mohiam",
                                                                                                bl_Piter = "Piter De Vries",
                                                                                                bl_Yrkoon = "Steersman Y'rkoon",

                                                                                                -- Spaces
                                                                                                conspire = "Conspire",
                                                                                                wealth = "Wealth",
                                                                                                heighliner = "Heighliner",
                                                                                                foldspace = "Foldspace",
                                                                                                selectiveBreeding = "Selective Breeding",
                                                                                                secrets = "Secrets",
                                                                                                hardyWarriors = "Hardy Warriors",
                                                                                                stillsuits = "Stillsuits",
                                                                                                highCouncil = "High Council",
                                                                                                mentat = "Mentat",
                                                                                                swordmaster = "Swordmaster",
                                                                                                rallyTroops = "Rally Troops",
                                                                                                hallOfOratory = "Hall of Oratory",
                                                                                                secureContract = "Secure Contract",
                                                                                                arrakeen = "Arrakeen",
                                                                                                carthag = "Carthag",
                                                                                                researchStation = "Research Station",
                                                                                                researchStationImmortality = "Research Station",
                                                                                                sietchTabr = "Sietch Tabr",
                                                                                                imperialBasin = "Imperial Basin",
                                                                                                haggaBasin = "Hagga Basin",
                                                                                                theGreatFlat = "The Great Flat",
                                                                                                smuggling = "Smuggling",
                                                                                                interstellarShipping = "Interstellar Shipping",
                                                                                                techNegotiation = "Tech Negotiation",
                                                                                                techNegotiation_Buy = "Buy Tech",
                                                                                                techNegotiation_Negotiate = "Send Negotiator",
                                                                                                dreadnought = "Dreadnought",

                                                                                                fremkit = "Fremkit",
                                                                                                desertTactics = "Desert Tactics",
                                                                                                --secrets = "Secrets",
                                                                                                espionage = "Espionage",
                                                                                                deliverSupplies = "Deliver Supplies",
                                                                                                --heighliner = "Heighliner",
                                                                                                dutifulService = "Dutiful Service",
                                                                                                sardaukar = "Sardaukar",
                                                                                                --highCouncil = "HighCouncil",
                                                                                                imperialPrivilege = "Imperial Privilege",
                                                                                                --swordmaster = "Swordmaster",
                                                                                                assemblyHall = "Assembly Hall",
                                                                                                gatherSupport = "Gather Support",
                                                                                                gatherSupport_NoWater = "Free and no water",
                                                                                                gatherSupport_WithWater = "2 solaris for 1 water measure",
                                                                                                shipping = "Shipping",
                                                                                                acceptContract = "Accept Contract",
                                                                                                --sietchTabr = "SietchTabr",
                                                                                                sietchTabr_HookTroopWater = "Taking supplies",
                                                                                                sietchTabr_WaterShieldWall = "Breaking the Wall",
                                                                                                --researchStation = "ResearchStation",
                                                                                                spiceRefinery = "Spice Refinery",
                                                                                                spiceRefinery_NoSpice = "2 solaris for no spice",
                                                                                                spiceRefinery_WithSpice = "4 solaris for 1 spice unit",
                                                                                                --arrakeen = "Arrakeen",
                                                                                                deepDesert = "Deep Desert",
                                                                                                deepDesert_Spice = "Take the spice",
                                                                                                deepDesert_WormsIfHook = "Call two sandworms",
                                                                                                --haggaBasin = "HaggaBasin",
                                                                                                haggaBasin_Spice = "Take the spice",
                                                                                                haggaBasin_WormIfHook = "Call a sandworm",
                                                                                                --imperialBasin = "ImperialBasin",
                                                                                                militarySupport = "Military Support",
                                                                                                economicSupport = "Economic Support",
                                                                                                controversialTechnology = "controversial Technology",
                                                                                                expedition = "Expedition",
                                                                                                habbanyaErg = "Habbanya Erg",
                                                                                                desertMastery = "Desert Mastery",
                                                                                                vastWealth = "Vast Wealth",
                                                                                                -- bloodlines spaces
                                                                                                tueksSietch = "Tuek's Sietch",
                                                                                                tueksSietch_Spice = "1 spice unit",
                                                                                                tueksSietch_Draw = "1 card draw",

                                                                                                -- Hagal
                                                                                                placeSpyYellow = "Place Spy",
                                                                                                placeSpyBlue = "Place Spy",
                                                                                                placeSpyGreen = "Place Spy",
                                                                                                deliverSuppliesAndHeighliner = "Deliver Supplies / Heighliner",
                                                                                                gatherSupport1 = "Gather Support",
                                                                                                gatherSupport2 = "Gather Support",
                                                                                                acceptContractAndShipping1 = "Accept Contract / Shipping",
                                                                                                acceptContractAndShipping2 = "Accept Contract / Shipping",
                                                                                                haggaBasinAndImperialBasin = "Hagga Basin / Imperial Basin",
                                                                                                reshuffle = "Reshuffle",
                                                                                                churnImperiumRow = "Imperium Row Churn ({count} {card})",
                                                                                                deliverSuppliesAndInterstellarShipping = "Deliver Supplies / Interstellar Shipping",
                                                                                                smugglingAndInterstellarShipping = "Smuggling / Interstellar Shipping",
                                                                                                dreadnought1p = "Dreadnought",
                                                                                                dreadnought2p = "Dreadnought",
                                                                                                tleilaxuBonus1 = "Tleilaxu Bonus",
                                                                                                tleilaxuBonus2 = "Tleilaxu Bonus",
                                                                                                tleilaxuBonus3 = "Tleilaxu Bonus",

                                                                                                -- Objective cards
                                                                                                --crysknife = "",
                                                                                                ornithopter1to3p = "Ornithopter",
                                                                                                muadDib4to6p = "Muad'Dib",
                                                                                                crysknife4to6p = "Crysknife",
                                                                                                muadDibFirstPlayer = "Muad'Dib (First Player)",

                                                                                                -- Imperium cards
                                                                                                duneTheDesertPlanet = "Dune the Desert Planet",
                                                                                                seekAllies = "Seek Allies",
                                                                                                signetRing = "Signet Ring",
                                                                                                diplomacy = "Diplomacy",
                                                                                                reconnaissance = "Reconnaissance",
                                                                                                convincingArgument = "Convincing Argument",
                                                                                                dagger = "Dagger",
                                                                                                controlTheSpice = "Control the Spice",
                                                                                                experimentation = "Experimentation",
                                                                                                jessicaOfArrakis = "Jessica of Arrakis",
                                                                                                sardaukarLegion = "Sardaukar Legion",
                                                                                                drYueh = "Dr Yueh",
                                                                                                assassinationMission = "Assassination Mission",
                                                                                                sardaukarInfantry = "Sardaukar Infantry",
                                                                                                beneGesseritInitiate = "Bene Gesserit Initiate",
                                                                                                guildAdministrator = "Guild Administrator",
                                                                                                theVoice = "The Voice",
                                                                                                scout = "Scout",
                                                                                                imperialSpy = "Imperial Spy",
                                                                                                beneGesseritSister = "Bene Gesserit Sister",
                                                                                                missionariaProtectiva = "Missionaria Protectiva",
                                                                                                spiceHunter = "Spice Hunter",
                                                                                                spiceSmugglers = "Spice Smugglers",
                                                                                                fedaykinDeathCommando = "Fedaykin Death Commando",
                                                                                                geneManipulation = "Gene Manipulation",
                                                                                                guildBankers = "Guild Bankers",
                                                                                                choamDirectorship = "CHOAM Directorship",
                                                                                                crysknife = "Crysknife",
                                                                                                chani = "Chani",
                                                                                                spaceTravel = "Space Travel",
                                                                                                duncanIdaho = "Duncan Idaho",
                                                                                                shiftingAllegiances = "Shifting Allegiances",
                                                                                                kwisatzHaderach = "Kwisatz Haderach",
                                                                                                sietchReverendMother = "Sietch Reverend Mother",
                                                                                                arrakisRecruiter = "Arrakis Recruiter",
                                                                                                firmGrip = "Firm Grip",
                                                                                                smugglersThopter = "Smuggler's Thopter",
                                                                                                carryall = "Carryall",
                                                                                                gunThopter = "Gun'Thopter",
                                                                                                guildAmbassador = "Guild Ambassador",
                                                                                                testOfHumanity = "Test of Humanity",
                                                                                                fremenCamp = "Fremen Camp",
                                                                                                opulence = "Opulence",
                                                                                                ladyJessica = "Lady Jessica",
                                                                                                stilgar = "Stilgar",
                                                                                                piterDeVries = "Piter de Vries",
                                                                                                --gurneyHalleck = "Gurney Halleck",
                                                                                                thufirHawat = "Thufir Hawat",
                                                                                                otherMemory = "Other Memory",
                                                                                                lietKynes = "lietKynes",
                                                                                                wormRiders = "Worm Riders",
                                                                                                reverendMotherMohiam = "Reverend Mother Mohiam",
                                                                                                powerPlay = "Power Play",
                                                                                                duncanLoyalBlade = "Duncan Loyal Blade",
                                                                                                --thumper = "Thumper",
                                                                                                boundlessAmbition = "Boundless Ambition",
                                                                                                guildChiefAdministrator = "Guild Chief Administrator",
                                                                                                guildAccord = "Guild Accord",
                                                                                                localFence = "Local Fence",
                                                                                                shaiHulud = "Shai Hulud",
                                                                                                ixGuildCompact = "Ix-Guild Compact",
                                                                                                choamDelegate = "CHOAM Delegate",
                                                                                                bountyHunter = "Bounty Hunter",
                                                                                                embeddedAgent = "Embedded Agent",
                                                                                                --esmarTuek = "esmarTuek",
                                                                                                courtIntrigue = "Court Intrigue",
                                                                                                sayyadina = "Sayyadina",
                                                                                                imperialShockTrooper = "Imperial Shock Trooper",
                                                                                                appropriate = "Appropriate",
                                                                                                desertAmbush = "Desert Ambush",
                                                                                                inTheShadows = "In the Shadows",
                                                                                                satelliteBan = "Satellite Ban",
                                                                                                freighterFleet = "Freighter Fleet",
                                                                                                imperialBashar = "Imperial Bashar",
                                                                                                jamis = "Jamis",
                                                                                                landingRights = "Landing Rights",
                                                                                                waterPeddler = "Water Peddler",
                                                                                                treachery = "Treachery",
                                                                                                truthsayer = "Truthsayer",
                                                                                                spiceTrader = "Spice Trader",
                                                                                                ixianEngineer = "Ixian Engineer",
                                                                                                webOfPower = "Web of Power",
                                                                                                weirdingWay = "Weirding Way",
                                                                                                negotiatedWithdrawal = "Negotiated Withdrawal",
                                                                                                fullScaleAssault = "Full Scale Assault",
                                                                                                beneTleilaxLab = "Bene Tleilax Lab",
                                                                                                beneTleilaxResearcher = "Bene Tleilax Researcher",
                                                                                                blankSlate = "Blank Slate",
                                                                                                clandestineMeeting = "Clandestine Meeting",
                                                                                                corruptSmuggler = "Corrupt Smuggler",
                                                                                                dissectingKit = "Dissecting Kit",
                                                                                                forHumanity = "For Humanity",
                                                                                                highPriorityTravel = "High Priority Travel",
                                                                                                imperiumCeremony = "Imperium Ceremony",
                                                                                                interstellarConspiracy = "Interstellar Conspiracy",
                                                                                                keysToPower = "Keys to Power",
                                                                                                lisanAlGaib = "Lisan Al-Gaib",
                                                                                                longReach = "Long Reach",
                                                                                                occupation = "Occupation",
                                                                                                organMerchants = "Organ Merchants",
                                                                                                plannedCoupling = "Planned Coupling",
                                                                                                replacementEyes = "Replacement Eyes",
                                                                                                sardaukarQuartermaster = "Sardaukar Quartermaster",
                                                                                                shadoutMapes = "Shadout Mapes",
                                                                                                showOfStrength = "Show of Strength",
                                                                                                spiritualFervor = "Spiritual Fervor",
                                                                                                stillsuitManufacturer = "Stillsuit Manufacturer",
                                                                                                throneRoomPolitics = "Throne Room Politics",
                                                                                                tleilaxuMaster = "Tleilaxu Master",
                                                                                                tleilaxuSurgeon = "Tleilaxu Surgeon",
                                                                                                --foldspace = "foldspace",
                                                                                                reclaimedForces = "Reclaimed Forces",
                                                                                                piterGeniusAdvisor = "Piter Genius Advisor",
                                                                                                beguilingPheromones = "Beguiling Pheromones",
                                                                                                chairdog = "Chairdog",
                                                                                                contaminator = "Contaminator",
                                                                                                corrinoGenes = "Corrino Genes",
                                                                                                faceDancer = "Face Dancer",
                                                                                                faceDancerInitiate = "Face Dancer Initiate",
                                                                                                fromTheTanks = "From the Tanks",
                                                                                                ghola = "Ghola",
                                                                                                guildImpersonator = "Guild Impersonator",
                                                                                                industrialEspionage = "Industrial Espionage",
                                                                                                scientificBreakthrough = "Scientific Breakthrough",
                                                                                                sligFarmer = "Slig Farmer",
                                                                                                stitchedHorror = "Stitched Horror",
                                                                                                subjectX137 = "Subject X-137",
                                                                                                tleilaxuInfiltrator = "Tleilaxu Infiltrator",
                                                                                                twistedMentat = "Twisted Mentat",
                                                                                                unnaturalReflexes = "Unnatural Reflexes",
                                                                                                usurp = "Usurp",

                                                                                                unswervingLoyalty = "Unswerving Loyalty",
                                                                                                spaceTimeFolding = "Space Time Folding",
                                                                                                weirdingWoman = "Weirding Woman",
                                                                                                sardaukarSoldier = "Sardaukar Soldier",
                                                                                                smugglerHarvester = "Smuggler Harvester",
                                                                                                makerKeeper = "Maker Keeper",
                                                                                                reliableInformant = "Reliable Informant",
                                                                                                hiddenMissive = "Hidden Missive",
                                                                                                wheelsWithinWheels = "Wheels within Wheels",
                                                                                                fedaykinStilltent = "Fedaykin Stilltent",
                                                                                                imperialSpymaster = "Imperial Spymaster",
                                                                                                spyNetwork = "Spy Network",
                                                                                                desertSurvival = "Desert Survival",
                                                                                                undercoverAsset = "Undercover Asset",
                                                                                                beneGesseritOperative = "Bene Gesserit Operative",
                                                                                                maulaPistol = "Maula Pistol",
                                                                                                thumper = "thumper",
                                                                                                nothernWatermaster = "Nothern Watermaster",
                                                                                                covertOperation = "Covert Operation",
                                                                                                doubleAgent = "Double Agent",
                                                                                                guildEnvoy = "Guild Envoy",
                                                                                                rebelSupplier = "Rebel Supplier",
                                                                                                calculusOfPower = "Calculus of Power",
                                                                                                guildSpy = "Guild Spy",
                                                                                                dangerousRhetoric = "Dangerous Rhetoric",
                                                                                                branchingPath = "Branching Path",
                                                                                                ecologicalTestingStation = "Ecological Testing Station",
                                                                                                theBeastSpoils = "The Beast Spoils",
                                                                                                smugglerHaven = "Smuggler Haven",
                                                                                                shishakli = "Shishakli",
                                                                                                paracompass = "Paracompass",
                                                                                                sardaukarCoordination = "Sardaukar Coordination",
                                                                                                truthtrance = "Truthtrance",
                                                                                                publicSpectable = "Public Spectable",
                                                                                                southernElders = "Southern Elders",
                                                                                                treadInDarkness = "Tread in Darkness",
                                                                                                spacingGuildFavor = "Spacing Guild Favor",
                                                                                                capturedMentat = "Captured Mentat",
                                                                                                subversiveAdvisor = "Subversive Advisor",
                                                                                                leadership = "Leadership",
                                                                                                inHighPlaces = "In High Places",
                                                                                                strikeFleet = "Strike Fleet",
                                                                                                trecherousManeuver = "Trecherous Maneuver",
                                                                                                chaniCleverTactician = "Chani Clever Tactician",
                                                                                                junctionHeadquarters = "Junction Headquarters",
                                                                                                corrinthCity = "Corrinth City",
                                                                                                stilgarTheDevoted = "Stilgar the Devoted",
                                                                                                desertPower = "Desert Power",
                                                                                                arrakisRevolt = "Arrakis Revolt",
                                                                                                priceIsNoObject = "Price is no Object",
                                                                                                longLiveTheFighters = "Long Live the Fighters",
                                                                                                overthrow = "Overthrow",
                                                                                                steersman = "Steersman",
                                                                                                cargoRunner = "CargoRunner",
                                                                                                deliveryAgreement = "Delivery Agreement",
                                                                                                priorityContracts = "Priority Contracts",
                                                                                                interstellarTrade = "Interstellar Trade",
                                                                                                prepareTheWay = "Prepare the Way",
                                                                                                theSpiceMustFlow = "The Spice must Flow",
                                                                                                -- bloodlines imperium cards
                                                                                                bl_Bombast = "Bombast",
                                                                                                bl_Sandwalk = "Sandwalk",
                                                                                                bl_DisruptionTactics = "Disruption Tactics",
                                                                                                bl_UrgentShigawire = "Urgent Shigawire",
                                                                                                bl_EliminateAllies = "Eliminate Allies",
                                                                                                bl_DeliverLogistics = "Deliver Logistics",
                                                                                                bl_CommandCenter = "Command Center",
                                                                                                bl_EngineeredMiracle = "Engineered Miracle",
                                                                                                bl_IBelieve = "I Believe",
                                                                                                bl_LitanyAgainstFear = "Litany Against Fear",
                                                                                                bl_EliteForces = "Elite Forces",
                                                                                                bl_ArrakisObserver = "Arrakis Observer",
                                                                                                bl_IntelligenceTraining = "Intelligence Training",
                                                                                                bl_RuthlessLeadership = "Ruthless Leadership",
                                                                                                bl_FremenWarName = "Fremen War Name",
                                                                                                bl_SardaukarStandard = "Sardaukar Standard",
                                                                                                bl_ShroudedCounsel = "Shrouded Counsel",
                                                                                                bl_CorruptBureaucrat = "Corrupt Bureaucrat",
                                                                                                bl_IxianAmbassador = "Ixian Ambassador",
                                                                                                bl_QuashRebellion = "Quash Rebellion",
                                                                                                bl_SouthernFaith = "Southern Faith",
                                                                                                bl_HolyWar = "Holy War",
                                                                                                bl_MercantileAffairs = "Mercantile Affairs",
                                                                                                bl_PointingTheWay = "Pointing The Way",
                                                                                                bl_ChoamDemands = "Chaom Demands",
                                                                                                bl_ImperialThroneship = "Imperial Throneship",
                                                                                                bl_PossibleFutures = "Possible Futures",

                                                                                                emperorConvincingArgument = "Convincing Argument",
                                                                                                emperorCorrinoMight = "Corrino Might",
                                                                                                emperorCriticalShipments = "Critical Shipments",
                                                                                                emperorDemandResults = "Demand Results",
                                                                                                emperorDevastatingAssault = "Devastating Assault",
                                                                                                emperorImperialOrnithopter = "Imperial Ornithopter",
                                                                                                emperorSignetRing = "Signet Ring",
                                                                                                emperorSeekAllies = "Seek Allies",
                                                                                                emperorImperialTent = "Imperial Tent",

                                                                                                muadDibCommandRespect = "Command Respect",
                                                                                                muadDibConvincingArgument = "Convincing Argument",
                                                                                                muadDibDemandAttention = "Demand Attention",
                                                                                                muadDibDesertCall = "Desert Call",
                                                                                                muadDibLimitedLandsraadAccess = "Limited Landsraad Access",
                                                                                                muadDibSeekAllies = "Seek Allies",
                                                                                                muadDibUsul = "Usul",
                                                                                                muadDibThreatenSpiceProduction = "Threaten Spice Production",
                                                                                                muadDibSignetRing = "Signet Ring",

                                                                                                bl_Bombast = "Bombast",
                                                                                                bl_Sandwalk = "Sandwalk",
                                                                                                bl_DisruptionTactics = "Disruption Tactics",
                                                                                                bl_UrgentShigawire = "Urgent Shigawire",
                                                                                                bl_EliminateAllies = "Eliminate Allies",
                                                                                                bl_DeliverLogistics = "Deliver Logistics",
                                                                                                bl_CommandCenter = "Command Center",
                                                                                                bl_EngineeredMiracle = "Engineered Miracle",
                                                                                                bl_IBelieve = "I Believe",
                                                                                                bl_LitanyAgainstFear = "Litany Against Fear",
                                                                                                bl_EliteForces = "Elite Forces",
                                                                                                bl_ArrakisObserver = "Arrakis Observer",
                                                                                                bl_IntelligenceTraining = "Intelligence Training",
                                                                                                bl_RuthlessLeadership = "Ruthless Leadership",
                                                                                                bl_FremenWarName = "Fremen War Name",
                                                                                                bl_SardaukarStandard = "Sardaukar Standard",
                                                                                                bl_ShroudedCounsel = "Shrouded Counsel",
                                                                                                bl_CorruptBureaucrat = "Corrupt Bureaucrat",
                                                                                                bl_IxianAmbassador = "Ixian Ambassador",
                                                                                                bl_QuashRebellion = "Quash Rebellion",
                                                                                                bl_SouthernFaith = "Southern Faith",
                                                                                                bl_HolyWar = "Holy War",
                                                                                                bl_MercantileAffairs = "Mercantile Affairs",
                                                                                                bl_PointingTheWay = "Pointing The Way",
                                                                                                bl_ChoamDemands = "Chaom Demands",
                                                                                                bl_ImperialThroneship = "Imperial Throneship",
                                                                                                bl_PossibleFutures = "Possible Futures",

                                                                                                -- Intrigue
                                                                                                bribery = "Bribery",
                                                                                                refocus = "Refocus",
                                                                                                ambush = "Ambush",
                                                                                                alliedArmada = "Allied Armada",
                                                                                                favoredSubject = "Favored Subject",
                                                                                                demandRespect = "Demand Respect",
                                                                                                poisonSnooper = "PoisonS nooper",
                                                                                                guildAuthorization = "Guild Authorization",
                                                                                                dispatchAnEnvoy = "Dispatch an Envoy",
                                                                                                infiltrate = "Infiltrate",
                                                                                                knowTheirWays = "Know their Ways",
                                                                                                masterTactician = "Master Tactician",
                                                                                                plansWithinPlans = "Plans within Plans",
                                                                                                privateArmy = "Private Army",
                                                                                                doubleCross = "Double Cross",
                                                                                                councilorsDispensation = "Councilors Dispensation",
                                                                                                cornerTheMarket = "Corner the Market",
                                                                                                charisma = "Charisma",
                                                                                                calculatedHire = "Calculated Hire",
                                                                                                choamShares = "CHOAM Shares",
                                                                                                bypassProtocol = "Bypass Protocol",
                                                                                                recruitmentMission = "Recruitment Mission",
                                                                                                reinforcements = "Reinforcements",
                                                                                                binduSuspension = "Bindu Suspension",
                                                                                                secretOfTheSisterhood = "Secret of the Sisterhood",
                                                                                                rapidMobilization = "Rapid Mobilization",
                                                                                                stagedIncident = "Staged Incident",
                                                                                                theSleeperMustAwaken = "The Sleeper must Awaken",
                                                                                                tiebreaker = "Tiebreaker",
                                                                                                toTheVictor = "To the Victor",
                                                                                                waterPeddlersUnion = "Water Peddlers Union",
                                                                                                windfall = "Windfall",
                                                                                                waterOfLife = "Water of Life",
                                                                                                urgentMission = "Urgent Mission",
                                                                                                diversion = "Diversion",
                                                                                                warChest = "WarChest",
                                                                                                advancedWeaponry = "Advanced Weaponry",
                                                                                                secretForces = "Secret Forces",
                                                                                                grandConspiracy = "Grand Conspiracy",
                                                                                                cull = "Cull",
                                                                                                strategicPush = "Strategic Push",
                                                                                                blackmail = "Blackmail",
                                                                                                machineCulture = "Machine Culture",
                                                                                                cannonTurrets = "Cannon Turrets",
                                                                                                expedite = "Expedite",
                                                                                                ixianProbe = "Ixian Probe",
                                                                                                secondWave = "Second Wave",
                                                                                                glimpseThePath = "Glimpse the Path",
                                                                                                finesse = "Finesse",
                                                                                                strongarm = "Strongarm",
                                                                                                quidProQuo = "Quid Pro Quo",
                                                                                                breakthrough = "Breakthrough",
                                                                                                counterattack = "Counterattack",
                                                                                                disguisedBureaucrat = "Disguised Bureaucrat",
                                                                                                economicPositioning = "Economic Positioning",
                                                                                                gruesomeSacrifice = "Gruesome Sacrifice",
                                                                                                harvestCells = "Harvest Cells",
                                                                                                illicitDealings = "Illicit Dealings",
                                                                                                shadowyBargain = "Shadowy Bargain",
                                                                                                studyMelange = "Study Melange",
                                                                                                tleilaxuPuppet = "Tleilaxu Puppet",
                                                                                                viciousTalents = "Vicious Talents",

                                                                                                sietchRitual = "Sietch Ritual",
                                                                                                mercenaries = "Mercenaries",
                                                                                                councilorAmbition = "Councilor Ambition",
                                                                                                strategicStockpiling = "Strategic Stockpiling",
                                                                                                detonation = "Detonation",
                                                                                                departForArrakis = "Depart for Arrakis",
                                                                                                cunning = "Cunning",
                                                                                                opportunism = "Opportunism",
                                                                                                changeAllegiances = "Change Allegiances",
                                                                                                specialMission = "Special Mission",
                                                                                                unexpectedAllies = "Unexpected Allies",
                                                                                                callToArms = "Call to Arms",
                                                                                                buyAccess = "Buy Access",
                                                                                                imperiumPolitics = "Imperium Politics",
                                                                                                shaddamFavor = "Shaddam Favor",
                                                                                                intelligenceReport = "Intelligence Report",
                                                                                                manipulate = "Manipulate",
                                                                                                distraction = "Distraction",
                                                                                                marketOpportunity = "Market Opportunity",
                                                                                                goToGround = "Go to Ground",
                                                                                                contingencyPlan = "Contingency Plan",
                                                                                                inspireAwe = "Inspire Awe",
                                                                                                findWeakness = "Find Weakness",
                                                                                                spiceIsPower = "Spice is Power",
                                                                                                devour = "Devour",
                                                                                                impress = "Impress",
                                                                                                springTheTrap = "Spring the Trap",
                                                                                                weirdingCombat = "Weirding Combat",
                                                                                                tacticalOption = "Tactical Option",
                                                                                                questionableMethods = "Questionable Methods",
                                                                                                desertMouse = "Desert Mouse",
                                                                                                ornithopter = "Ornithopter",
                                                                                                --crysknife = "Crysknife",
                                                                                                joker = "Joker",
                                                                                                shadowAlliance = "Shadow Alliance",
                                                                                                secureSpiceTrade = "Secure Spice Trade",
                                                                                                -- bloodlines intrigues
                                                                                                bl_AdaptiveTactics = "Adaptive Tactics",
                                                                                                bl_DesertSupport = "Desert Support",
                                                                                                bl_EmperorsInvitation = "Emperor's Invitation",
                                                                                                bl_HonorGuard = "Honor Guard",
                                                                                                bl_ReturnTheFavor = "Return The Favor",
                                                                                                bl_SacredPools = "Sacred Pools",
                                                                                                bl_SeizeProduction = "Seize Production",
                                                                                                bl_TheStrongSurvive = "The Strong Survive",
                                                                                                bl_TenuousBond = "Tenuous Bond",
                                                                                                bl_WithdrawalAgreement = "Withdrawal Agreement",
                                                                                                bl_FalseOrders = "False Orders",
                                                                                                bl_GraspArrakis = "Grasp Arrakis",
                                                                                                bl_InsiderInformation = "Insider Information",
                                                                                                bl_RipplesInTheSand = "Ripples in the Sand",
                                                                                                bl_SleeperUnit = "Sleeper Unit",
                                                                                                bl_CoerciveNegotiation = "Coercive Negotiation",
                                                                                                bl_BattlefieldResearch = "Battlefield Research",
                                                                                                bl_RapidEngineering = "Rapid Engineering",
                                                                                                -- bloodlines piter twisted intrigues
                                                                                                bl_Piter_Withdrawn = "Withdrawn",
                                                                                                bl_Piter_Unnatural = "Unnatural",
                                                                                                bl_Piter_Ambitious = "Ambitious",
                                                                                                bl_Piter_Resourceful = "Resourceful",
                                                                                                bl_Piter_Shrewd = "Shrewd",
                                                                                                bl_Piter_Sinister = "Sinister",
                                                                                                bl_Piter_Sadistic = "Sadistic",
                                                                                                bl_Piter_Discerning = "Discerning",
                                                                                                bl_Piter_Devious = "Devious",
                                                                                                bl_Piter_Controlled = "Controlled",
                                                                                                bl_Piter_Calculating = "Calculating",
                                                                                                bl_Piter_Insidious = "Insidious",

                                                                                                -- Conflicts
                                                                                                skirmishA = "Skirmish",
                                                                                                skirmishB = "Skirmish",
                                                                                                skirmishC = "Skirmish",
                                                                                                -- bloodlines conflicts
                                                                                                bl_Skirmish = "Skirmish",
                                                                                                bl_StormsInTheSouth = "Storms in the South",
                                                                                                choamSecurity = "CHOAM Security",
                                                                                                spiceFreighters = "Spice Freighters",
                                                                                                siegeOfArrakeen = "Siege of Arrakeen",
                                                                                                seizeSpiceRefinery = "Seize Spice Refinery",
                                                                                                testOfLoyalty = "Test of Loyalty",
                                                                                                shadowContest = "Shadow Contest",
                                                                                                secureImperialBasin = "Secure Imperial Basin",
                                                                                                protectTheSietches = "Protect the Sietches",
                                                                                                tradeDispute = "Trade Dispute",
                                                                                                economicSupremacy = "Economic Supremacy",
                                                                                                propaganda = "Propaganda",
                                                                                                battleForImperialBasin = "Battle for Imperial Basin",
                                                                                                battleForArrakeen = "Battle for Arrakeen",
                                                                                                battleForSpiceRefinery = "Battle for Spice Refinery",

                                                                                                -- Techs
                                                                                                spaceport = "Spaceport",
                                                                                                restrictedOrdnance = "Restricted Ordnance",
                                                                                                artillery = "Artillery",
                                                                                                disposalFacility = "Disposal Facility",
                                                                                                holoprojectors = "Holoprojectors",
                                                                                                minimicFilm = "Minimic Film",
                                                                                                windtraps = "Windtraps",
                                                                                                detonationDevices = "Detonation Devices",
                                                                                                memocorders = "Memocorders",
                                                                                                flagship = "Flagship",
                                                                                                shuttleFleet = "Shuttle Fleet",
                                                                                                spySatellites = "Spy Satellites",
                                                                                                chaumurky = "Chaumurky",
                                                                                                sonicSnoopers = "Sonic Snoopers",
                                                                                                trainingDrones = "Training Drones",
                                                                                                troopTransports = "Troop Transports",
                                                                                                holtzmanEngine = "Holtzman Engine",
                                                                                                invasionShips = "Invasion Ships",
                                                                                                -- bloodlines techs
                                                                                                bl_TrainingDepot = "Training Depot",
                                                                                                bl_GeneLockedVault = "Gene-Locked Vault",
                                                                                                bl_Glowglobes = "Glowglobes",
                                                                                                bl_PlanetaryArray = "Planetary Array",
                                                                                                bl_ServoReceivers = "Servo-Receivers",
                                                                                                bl_DeliveryBay = "Delivery Bay",
                                                                                                bl_PlasteelBlades = "Plasteel Blades",
                                                                                                bl_SuspensorSuits = "Suspensor Suits",
                                                                                                bl_RapidDropships = "Rapid Dropships",
                                                                                                bl_SelfDestroyingMessages = "Self-Destroying Messages",
                                                                                                bl_NavigationChamber = "Navigation Chamber",
                                                                                                bl_SardaukarHighCommand = "Sardaukar High Command",
                                                                                                bl_ForbiddenWeapons = "Forbidden Weapons",
                                                                                                bl_AdvancedDataAnalysis = "Advanced Data Analysis",
                                                                                                bl_OrnithopterFleet = "Ornithopter Fleet",
                                                                                                bl_Panopticon = "Panopticon",
                                                                                                bl_SpyDrones = "Spy Drones",
                                                                                                bl_ChoamTransports = "Choam Transports",

                                                                                                -- Contracts
                                                                                                fulfilledContract = 'Fulfilled contract "{contract}".',
                                                                                                harvest3orMore = "Harvest 3+",
                                                                                                harvest4orMore = "Harvest 4+",
                                                                                                --deliverSupplies = "Deliver Supplies",
                                                                                                highCouncilWithSolaris = "High Council (solaris)",
                                                                                                highCouncilWithInfluence = "High Council (influence)",
                                                                                                acquireTheSpiceMustFlow = 'Acquire "The Spice Must Flow"',
                                                                                                -- bloodlines added (solaris) for distinction
                                                                                                immediate = "Immediate (solaris)",
                                                                                                --researchStation = "ResearchStation",
                                                                                                researchStationWithSpy = "Research Station (spy)",
                                                                                                --espionage = "Espionage",
                                                                                                heighlinerWithWater = "Heighliner (water)",
                                                                                                heighlinerWithTroops = "Heighliner (troops)",
                                                                                                sardaukarWithCards = "Sardaukar (cards)",
                                                                                                sardaukarWithRecall = "Sardaukar (recall)",
                                                                                                spiceRefineryWithCards = "SpiceRefinery (cards)",
                                                                                                spiceRefineryWithWater = "SpiceRefinery (water)",
                                                                                                arrakeenWithWater = "Arrakeen (water)",
                                                                                                arrakeenWithSpy = "Arrakeen (spy)",
                                                                                                --dreadnought = "Dreadnought",
                                                                                                --techNegotiation = "Tech Negotiation",
                                                                                                highCouncilWithTech = "HighCouncilWithTech",
                                                                                                --interstellarShipping = "Interstellar Shipping",
                                                                                                harvest3orMoreWithTech = "Harvest 3+ (with tech)",
                                                                                                harvest4orMoreWithTech = "Harvest 4+ (with tech)",
                                                                                                --smuggling = "Smuggling",
                                                                                                heighlinerWithTech = "Heighliner (with tech)",
                                                                                                espionageWithTech = "Espionage (with tech)",
                                                                                                secretsWithTech = "Secrets (with tech)",
                                                                                                -- bloodlines contracts
                                                                                                immediateIntrigue = "Immediate (intrigue)",
                                                                                                earnAllianceWithTroops = "Earn Alliance (troops)",
                                                                                                highCouncilWithRecall = "High Council (recall)",
                                                                                                spiceRefineryWithTroops = "Spice Refinery (troops)",
                                                                                                harvest3orMoreWithSpy = "Harvest 3+ (spy)",
                                                                                                harvest4orMoreWithSpy = "Harvest 4+ (spy)",
                                                                                                deliverSuppliesWithSpy = "Deliver Supplies (spy)",
                                                                                                secretsWithCard = "Secrets (card)",

                                                                                                -- bloodlines sardaukar commander skills
                                                                                                sc_Canny = "Canny",
                                                                                                sc_Charismatic = "Charismatic",
                                                                                                sc_Desperate = "Desperate",
                                                                                                sc_Driven = "Driven",
                                                                                                sc_Fierce = "Fierce",
                                                                                                sc_Hardy = "Hardy",
                                                                                                sc_Loyal = "Loyal",

                                                                                                -- Specific victory tokens
                                                                                                endgame = "Endgame Card",
                                                                                                endgameTech = "Endgame Tech",
                                                                                                combat = "Combat",
                                                                                                rivalIntrigue = "Rival - Intrigue",
                                                                                                rivalSolari = "Rival - Solari",
                                                                                                rivalWater = "Rival - Water",
                                                                                                rivalSpice = "Rival - Spice",
                                                                                                --beneTleilax = "Bene Tleilax",
                                                                                                objective = "Objective",
                                                                                                priorityContract = "Priority Contract",
                                                                                                strategicStockpiling1 = "Strategic Stockpiling (Spice)",
                                                                                                strategicStockpiling2 = "Strategic Stockpiling (Water)",
                                                                                                --opportunism = "Opportunism",
                                                                                                emperorAlliance = "Emperor Alliance",
                                                                                                emperorFriendship = "Emperor Friendship",
                                                                                                greatHousesAlliance = "Great Houses Alliance",
                                                                                                greatHousesFriendship = "Great Houses Friendship",
                                                                                                spacingGuildAlliance = "Spacing Guild Alliance",
                                                                                                spacingGuildFriendship = "Spacing Guild Friendship",
                                                                                                beneGesseritAlliance = "Bene Gesserit Alliance",
                                                                                                beneGesseritFriendship = "Bene Gesserit Friendship",
                                                                                                fringeWorldsAlliance = "Fringe Worlds Alliance",
                                                                                                fringeWorldsFriendship = "Fringe Worlds Friendship",
                                                                                                fremenAlliance = "Fremen Alliance",
                                                                                                fremenFriendship = "Fremen Friendship",
                                                                                                muadDibVictoryPoint = "Muad'Dib Objective",
                                                                                                crysknifeVictoryPoint = "Crysknife Objective",
                                                                                                ornithopterVictoryPoint = "Ornithopter Objective",

                                                                                                -- Submit game
                                                                                                submitGame = "Submit Game",
                                                                                                submitGameRankedGame = "Ranked game",
                                                                                                submitGameTournament = "Tournament game",
                                                                                                openSubmitScreen = "Open submit screen",
                                                                                                placement = "Ranking",
                                                                                                victoryPoints = "VP",
                                                                                                name = "Name",
                                                                                                leaderName = "Leader Name",
                                                                                                submitGameMessage = "Ensure all adjustments are made before submission. Errors in scores cannot be modified after submission!",
                                                                                                close = "Close",
                                                                                                noPlayerMetEndGameCondition = "No player met the end game condition.",
                                                                                                gameSubmitted = "Game submitted to Google Sheets",
                                                                                                gameAlreadySubmitted = "Game already submited - Doing nothing",
                                                                                            }

                                                                                        end)
                                                                                        __bundle_register("LeaderSelection", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                            local Module = require("utils.Module")
                                                                                            local Helper = require("utils.Helper")
                                                                                            local I18N = require("utils.I18N")
                                                                                            local Dialog = require("utils.Dialog")

                                                                                            local Deck = Module.lazyRequire("Deck")
                                                                                            local TurnControl = Module.lazyRequire("TurnControl")
                                                                                            local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                            local Hagal = Module.lazyRequire("Hagal")
                                                                                            local MainBoard = Module.lazyRequire("MainBoard")
                                                                                            local Board = Module.lazyRequire("Board")

                                                                                            local LeaderSelection = {
                                                                                                dynamicLeaderSelection = {},
                                                                                                leaderSelectionPoolSize = 8,
                                                                                                turnSequence = {},
                                                                                            }

                                                                                            local Stage = {
                                                                                                INITIALIZED = 1,
                                                                                                STARTED = 2,
                                                                                                DONE = 3,
                                                                                            }

                                                                                            ---
                                                                                            function LeaderSelection.getSelectionMethods(numberOfPlayers)
                                                                                                local selectionMode = {
                                                                                                    random = "random",
                                                                                                    reversePick = "reversePick",
                                                                                                    reverseHiddenPick = "reverseHiddenPick",
                                                                                                }
                                                                                                if numberOfPlayers == 4 then
                                                                                                    selectionMode.altHiddenPick = "altHiddenPick"
                                                                                                end
                                                                                                return selectionMode
                                                                                            end

                                                                                            ---
                                                                                            function LeaderSelection.onLoad(state)
                                                                                                Helper.append(LeaderSelection, Helper.resolveGUIDs(false, {
                                                                                                    deckZone = "23f2b5",
                                                                                                    secondaryTable = "662ced",
                                                                                                }))

                                                                                                if state.settings then
                                                                                                    LeaderSelection._transientSetUp(
                                                                                                        state.settings,
                                                                                                        state.LeaderSelection.leaderSelectionPoolSize,
                                                                                                        state.LeaderSelection.players,
                                                                                                    state.LeaderSelection.stage)
                                                                                                end
                                                                                            end

                                                                                            ---
                                                                                            function LeaderSelection.onSave(state)
                                                                                                state.LeaderSelection = {
                                                                                                    leaderSelectionPoolSize = LeaderSelection.leaderSelectionPoolSize,
                                                                                                    players = LeaderSelection.players,
                                                                                                    stage = LeaderSelection.stage,
                                                                                                }
                                                                                            end

                                                                                            ---
                                                                                            function LeaderSelection.setUp(settings, activeOpponents)
                                                                                                LeaderSelection.leaderSelectionPoolSize = settings.leaderPoolSize

                                                                                                local preContinuation = Helper.createContinuation("LeaderSelection.setUp.preContinuation")
                                                                                                if settings.numberOfPlayers > 2 then
                                                                                                    preContinuation.run()
                                                                                                else
                                                                                                    Deck.generateRivalLeaderDeck(
                                                                                                        LeaderSelection.deckZone,
                                                                                                        settings.streamlinedRivals,
                                                                                                        settings.riseOfIx,
                                                                                                        settings.immortality,
                                                                                                        settings.legacy,
                                                                                                        settings.merakon
                                                                                                        ).doAfter(function (deck)
                                                                                                            LeaderSelection._layoutLeaderDeck(deck, 0).doAfter(preContinuation.run)
                                                                                                        end)
                                                                                                    end

                                                                                                    local postContinuation = Helper.createContinuation("LeaderSelection.setUp.postContinuation")

                                                                                                    local free = settings.tweakLeaderSelection and not settings.merakon

                                                                                                    preContinuation.doAfter(function ()
                                                                                                        -- Temporary tag to avoid counting the rival leader cards.
                                                                                                        LeaderSelection.deckZone.addTag("Leader")
                                                                                                        Deck.generateLeaderDeck(
                                                                                                            LeaderSelection.deckZone,
                                                                                                            settings.useContracts,
                                                                                                            settings.riseOfIx,
                                                                                                            settings.immortality,
                                                                                                            settings.legacy,
                                                                                                            settings.merakon,
                                                                                                            free
                                                                                                            ).doAfter(function (deck)
                                                                                                                LeaderSelection.deckZone.removeTag("Leader")

                                                                                                                local start = settings.numberOfPlayers > 2 and 0 or 12
                                                                                                                LeaderSelection._layoutLeaderDeck(deck, start).doAfter(function ()
                                                                                                                    local testSetUp = type(settings.leaderSelection) == "table"

                                                                                                                    -- The commander's leaders are always the same. It is not enforced
                                                                                                                    -- in a test set up, but it won't work with different leaders.
                                                                                                                    if settings.numberOfPlayers == 6 and not testSetUp then
                                                                                                                        local leaders = LeaderSelection._grabLeaders()

                                                                                                                        PlayBoard.setLeader("White", leaders["muadDib"])
                                                                                                                        PlayBoard.setLeader("Purple", leaders["shaddamCorrino"])
                                                                                                                    end

                                                                                                                    -- Give minimal time to the 2 leaders above to exit the zone.
                                                                                                                    Helper.onceFramesPassed(1).doAfter(function ()
                                                                                                                        local players = TurnControl.toCanonicallyOrderedPlayerList(activeOpponents)
                                                                                                                        LeaderSelection._transientSetUp(settings, settings.leaderPoolSize, players, Stage.INITIALIZED)
                                                                                                                    end)

                                                                                                                    postContinuation.run()
                                                                                                                end)
                                                                                                            end)
                                                                                                        end)

                                                                                                        return postContinuation
                                                                                                    end

                                                                                                    ---
                                                                                                    function LeaderSelection._layoutLeaderDeck(deck, start)
                                                                                                        local continuation = Helper.createContinuation("LeaderSelection._layoutLeaderDeck")
                                                                                                        local numberOfLeaders = deck.getQuantity()
                                                                                                        local count = numberOfLeaders

                                                                                                        LeaderSelection._layoutLeaders(start, numberOfLeaders, function (_, position)
                                                                                                            deck.takeObject({
                                                                                                                position = position,
                                                                                                                flip = true,
                                                                                                                callback_function = function (card)
                                                                                                                    if card.hasTag("Unselected") then
                                                                                                                        card.flip()
                                                                                                                    end
                                                                                                                    count = count - 1
                                                                                                                    if count == 0 then
                                                                                                                        Helper.onceTimeElapsed(1).doAfter(continuation.run)
                                                                                                                    end
                                                                                                                end
                                                                                                            })
                                                                                                        end)

                                                                                                        return continuation
                                                                                                    end

                                                                                                    ---
                                                                                                    function LeaderSelection._transientSetUp(settings, leaderSelectionPoolSize, players, stage)
                                                                                                        LeaderSelection.leaderSelectionPoolSize = leaderSelectionPoolSize
                                                                                                        LeaderSelection.players = players
                                                                                                        LeaderSelection.stage = stage

                                                                                                        if LeaderSelection.stage == Stage.DONE then
                                                                                                            return
                                                                                                        end

                                                                                                        -- Do it *before* calling _setUpXxx which could trigger an immediate
                                                                                                        -- TurnControl.start and a subsequent "leaderSelection" phase event.
                                                                                                        Helper.registerEventListener("phaseStart", function (phase, firstPlayer)
                                                                                                            if phase == "leaderSelection" then
                                                                                                                local turnSequence = Helper.shallowCopy(players)
                                                                                                                while turnSequence[1] ~= firstPlayer do
                                                                                                                    Helper.cycle(turnSequence)
                                                                                                                end

                                                                                                                if settings.leaderSelection == "reversePick" then
                                                                                                                    Helper.reverse(turnSequence)
                                                                                                                elseif settings.leaderSelection == "reverseHiddenPick" then
                                                                                                                    Helper.reverse(turnSequence)
                                                                                                                elseif settings.leaderSelection == "altHiddenPick" then
                                                                                                                    Helper.reverse(turnSequence)
                                                                                                                    if #turnSequence == 4 then
                                                                                                                        Helper.swap(turnSequence, 4, 3)
                                                                                                                    else
                                                                                                                        Helper.dump("Skipping 4 <-> 3 for less than 4 players.")
                                                                                                                    end
                                                                                                                end

                                                                                                                TurnControl.overridePhaseTurnSequence(turnSequence)
                                                                                                            end
                                                                                                        end)

                                                                                                        local autoStart = not settings.tweakLeaderSelection
                                                                                                        local testSetUp = type(settings.leaderSelection) == "table"

                                                                                                        if testSetUp then
                                                                                                            LeaderSelection._setUpTest(players, settings.leaderSelection)
                                                                                                        elseif settings.leaderSelection == "random" then
                                                                                                            LeaderSelection._setUpPicking(autoStart, true, false)
                                                                                                        elseif settings.leaderSelection == "reversePick" then
                                                                                                            LeaderSelection._setUpPicking(autoStart, false, false)
                                                                                                        elseif settings.leaderSelection == "reverseHiddenPick" then
                                                                                                            LeaderSelection._setUpPicking(autoStart, false, true)
                                                                                                        elseif settings.leaderSelection == "altHiddenPick" then
                                                                                                            LeaderSelection._setUpPicking(autoStart, false, true)
                                                                                                        else
                                                                                                            error(settings.leaderSelection)
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function LeaderSelection._layoutLeaders(start, count, callback)
                                                                                                        local h = LeaderSelection.deckZone.getScale().z
                                                                                                        local colCount = 6
                                                                                                        local origin = LeaderSelection.deckZone.getPosition() - Vector((colCount / 2 - 0.5) * 5, 0, h / 2 - 10)
                                                                                                        for i = start, start + count - 1 do
                                                                                                            local x = (i % colCount) * 5
                                                                                                            local y = math.floor(i / colCount) * 4
                                                                                                            callback(i + 1, origin + Vector(x, 1, y))
                                                                                                        end
                                                                                                    end

                                                                                                    --- Return all the leaders laid out on the secondary table.
                                                                                                    function LeaderSelection._grabLeaders(rival)
                                                                                                        local leaders = {}
                                                                                                        for _, object in ipairs(LeaderSelection.deckZone.getObjects()) do
                                                                                                            if (not rival and object.hasTag("Leader")) or (rival and object.hasTag("RivalLeader")) then
                                                                                                                leaders[Helper.getID(object)] = object
                                                                                                            end
                                                                                                        end
                                                                                                        return leaders
                                                                                                    end

                                                                                                    ---
                                                                                                    function LeaderSelection._setUpTest(players, leaderNames)
                                                                                                        local leaders = LeaderSelection._grabLeaders(false)
                                                                                                        local rivals = LeaderSelection._grabLeaders(true)

                                                                                                        for _, color in pairs(players) do
                                                                                                            assert(leaderNames[color], "No leader for color " .. color)
                                                                                                            assert(#LeaderSelection.deckZone.getObjects(), "No leader to select")
                                                                                                            local leader
                                                                                                            if PlayBoard.isRival(color) then
                                                                                                                local leaderName = leaderNames[color]
                                                                                                                leader = rivals[leaderName]
                                                                                                                assert(leader, "Unknown rival leader " .. tostring(leaderName))
                                                                                                            else
                                                                                                                local leaderName = leaderNames[color]
                                                                                                                leader = leaders[leaderName]
                                                                                                                assert(leader, "Unknown leader " .. tostring(leaderName))
                                                                                                            end
                                                                                                            PlayBoard.setLeader(color, leader)
                                                                                                        end

                                                                                                        LeaderSelection.stage = Stage.DONE
                                                                                                        TurnControl.start()
                                                                                                    end

                                                                                                    ---
                                                                                                    function LeaderSelection._setUpPicking(autoStart, random, hidden)
                                                                                                        local fontColor = Color(223 / 255, 151 / 255, 48 / 255)

                                                                                                        if LeaderSelection.stage == Stage.INITIALIZED then
                                                                                                            if not random then
                                                                                                                Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 2, {
                                                                                                                    click_function = Helper.registerGlobalCallback(),
                                                                                                                    label = I18N("leaderSelectionAdjust"),
                                                                                                                    position = LeaderSelection.secondaryTable.getPosition() + Vector(0, 1.8, -28),
                                                                                                                    width = 0,
                                                                                                                    height = 0,
                                                                                                                    font_size = 250,
                                                                                                                    font_color = fontColor
                                                                                                                })

                                                                                                                local adjustValue = function (value)
                                                                                                                    local numberOfLeaders = #Helper.getKeys(LeaderSelection._grabLeaders())
                                                                                                                    local minValue = #LeaderSelection.players
                                                                                                                    local maxValue = numberOfLeaders
                                                                                                                    LeaderSelection.leaderSelectionPoolSize = math.max(minValue, math.min(maxValue, value))
                                                                                                                    LeaderSelection.secondaryTable.editButton({index = 2, label = tostring(LeaderSelection.leaderSelectionPoolSize)})
                                                                                                                end

                                                                                                                Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 2, {
                                                                                                                    click_function = Helper.registerGlobalCallback(function ()
                                                                                                                        adjustValue(LeaderSelection.leaderSelectionPoolSize - 1)
                                                                                                                    end),
                                                                                                                    label = "-",
                                                                                                                    position = LeaderSelection.secondaryTable.getPosition() + Vector(-1, 1.8, -29),
                                                                                                                    width = 400,
                                                                                                                    height = 400,
                                                                                                                    font_size = 600,
                                                                                                                    color = fontColor,
                                                                                                                font_color = {0, 0, 0, 1}})

                                                                                                                Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 1, {
                                                                                                                    click_function = Helper.registerGlobalCallback(),
                                                                                                                    label = tostring(LeaderSelection.leaderSelectionPoolSize),
                                                                                                                    position = LeaderSelection.secondaryTable.getPosition() + Vector(0, 1.8, -29),
                                                                                                                    width = 0,
                                                                                                                    height = 0,
                                                                                                                    font_size = 400,
                                                                                                                    font_color = fontColor
                                                                                                                })

                                                                                                                Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 2, {
                                                                                                                    click_function = Helper.registerGlobalCallback(function ()
                                                                                                                        adjustValue(LeaderSelection.leaderSelectionPoolSize + 1)
                                                                                                                    end),
                                                                                                                    label = "+",
                                                                                                                    position = LeaderSelection.secondaryTable.getPosition() + Vector(1, 1.8, -29),
                                                                                                                    width = 400,
                                                                                                                    height = 400,
                                                                                                                    font_size = 600,
                                                                                                                    color = fontColor,
                                                                                                                font_color = {0, 0, 0, 1}})
                                                                                                            end

                                                                                                            Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 2, {
                                                                                                                click_function = Helper.registerGlobalCallback(),
                                                                                                                label = I18N("leaderSelectionExclude"),
                                                                                                                position = LeaderSelection.secondaryTable.getPosition() + Vector(0, 1.8, -30),
                                                                                                                width = 0,
                                                                                                                height = 0,
                                                                                                                font_size = 250,
                                                                                                                font_color = fontColor
                                                                                                            })

                                                                                                            local start = function ()
                                                                                                                local availableLeaderCount = #LeaderSelection._getVisibleLeaders()
                                                                                                                local requiredLeaderCount = #LeaderSelection.players
                                                                                                                -- In 6P mode, 2 players are automatically assigned.
                                                                                                                if availableLeaderCount >= math.min(4, requiredLeaderCount) then
                                                                                                                    local visibleLeaders = LeaderSelection._prepareVisibleLeaders(hidden)
                                                                                                                    LeaderSelection._createDynamicLeaderSelection(visibleLeaders)
                                                                                                                    Helper.clearButtons(LeaderSelection.secondaryTable)
                                                                                                                    LeaderSelection.stage = Stage.STARTED
                                                                                                                    TurnControl.start()
                                                                                                                else
                                                                                                                    broadcastToAll(I18N("notEnoughLeaderLeft"), "Red")
                                                                                                                end
                                                                                                            end

                                                                                                            if autoStart then
                                                                                                                start()
                                                                                                            else
                                                                                                                Helper.createAbsoluteButtonWithRoundness(LeaderSelection.secondaryTable, 2, {
                                                                                                                    click_function = Helper.registerGlobalCallback(start),
                                                                                                                    label = I18N("start"),
                                                                                                                    position = LeaderSelection.secondaryTable.getPosition() + Vector(0, 1.8, -32),
                                                                                                                    width = 2200,
                                                                                                                    height = 600,
                                                                                                                    font_size = 500,
                                                                                                                    color = fontColor,
                                                                                                                font_color = {0, 0, 0, 1}})
                                                                                                            end
                                                                                                        elseif LeaderSelection.stage == Stage.STARTED then
                                                                                                            local visibleLeaders = LeaderSelection._getVisibleLeaders()
                                                                                                            LeaderSelection._createDynamicLeaderSelection(visibleLeaders)
                                                                                                            Helper.clearButtons(LeaderSelection.secondaryTable)

                                                                                                            Helper.onceFramesPassed(1).doAfter(function ()
                                                                                                                for i, color in ipairs(LeaderSelection.players) do
                                                                                                                    local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                                    if leaderCard then
                                                                                                                        LeaderSelection._setOnlyVisibleFrom(leaderCard, color)
                                                                                                                    end
                                                                                                                end
                                                                                                            end)
                                                                                                        else
                                                                                                            error("Unexpected stage: " .. tostring(LeaderSelection.stage))
                                                                                                        end

                                                                                                        if random then
                                                                                                            local selectedLeaders = {}
                                                                                                            Helper.registerEventListener("playerTurn", function (phase, color)
                                                                                                                if phase == 'leaderSelection' then
                                                                                                                    local leader = LeaderSelection._pickAnyLeader(color, PlayBoard.isRival(color), selectedLeaders)
                                                                                                                    selectedLeaders[Helper.getID(leader)] = true
                                                                                                                end
                                                                                                            end)
                                                                                                        end

                                                                                                        if hidden then
                                                                                                            Helper.registerEventListener("playerTurn", function (phase, color)
                                                                                                                if phase == 'leaderSelection' then
                                                                                                                    local remainingLeaders = {}
                                                                                                                    for leader, selected in pairs(LeaderSelection.dynamicLeaderSelection) do
                                                                                                                        if not selected then
                                                                                                                            LeaderSelection._setOnlyVisibleFrom(leader, color)
                                                                                                                            table.insert(remainingLeaders, leader)
                                                                                                                        end
                                                                                                                    end
                                                                                                                    Helper.shuffle(remainingLeaders)
                                                                                                                    LeaderSelection._layoutLeaders(0, #remainingLeaders, function (i, position)
                                                                                                                        remainingLeaders[i].setPosition(position)
                                                                                                                    end)
                                                                                                                end
                                                                                                            end)
                                                                                                        end

                                                                                                        Helper.registerEventListener("phaseEnd", function (phase)
                                                                                                            if phase == 'leaderSelection' then
                                                                                                                for leader, selected in pairs(LeaderSelection.dynamicLeaderSelection) do
                                                                                                                    if selected then
                                                                                                                        leader.setInvisibleTo({})
                                                                                                                    else
                                                                                                                        LeaderSelection._destructLeader(leader)
                                                                                                                    end
                                                                                                                end
                                                                                                                LeaderSelection.stage = Stage.DONE
                                                                                                            end

                                                                                                            if phase == 'gameStart' then
                                                                                                                for _, object in ipairs(LeaderSelection.deckZone.getObjects()) do
                                                                                                                    object.destruct()
                                                                                                                end

                                                                                                                -- bloodlines tuek's sietch destruct
                                                                                                                if PlayBoard.getLeader("Red").name ~= "bl_Esmar" and PlayBoard.getLeader("Green").name ~= "bl_Esmar" and PlayBoard.getLeader("Yellow").name ~= "bl_Esmar" and PlayBoard.getLeader("Blue").name ~= "bl_Esmar" then
                                                                                                                    MainBoard.bl_EsmarBoard.destruct()
                                                                                                                    local position = MainBoard.spiceBonusTokens.tueksSietch.getPosition()
                                                                                                                    MainBoard.spiceBonusTokens.tueksSietch.setPosition(position + Vector(0, -2, 0))
                                                                                                                    LeaderSelection.removeSnapPointsWithTagFromObject(getObjectFromGUID("483a1a"), "spiceTueksSietch")
                                                                                                                end
                                                                                                            end
                                                                                                        end)
                                                                                                    end

                                                                                                    -- bloodlines remove tuek's sietch tag from mainboard
                                                                                                    function LeaderSelection.removeSnapPointsWithTagFromObject(obj, tag)
                                                                                                        local snapPoints = obj.getSnapPoints() or {}
                                                                                                        local newSnapPoints = {}
                                                                                                        for _, snapPoint in ipairs(snapPoints) do
                                                                                                            local allow = true
                                                                                                            for _, snapPointTag in ipairs(snapPoint.tags) do
                                                                                                                if tag == snapPointTag then
                                                                                                                    allow = false
                                                                                                                    break
                                                                                                                end
                                                                                                            end
                                                                                                            if allow then table.insert(newSnapPoints, snapPoint) end
                                                                                                        end
                                                                                                        obj.setSnapPoints(newSnapPoints)
                                                                                                    end

                                                                                                    function LeaderSelection._setOnlyVisibleFrom(object, color)
                                                                                                        local excludedColors = {}
                                                                                                        for _, otherColor in ipairs(TurnControl.getPlayers()) do
                                                                                                            if otherColor ~= color then
                                                                                                                table.insert(excludedColors, otherColor)
                                                                                                            end
                                                                                                        end
                                                                                                        object.setInvisibleTo(excludedColors)
                                                                                                    end

                                                                                                    function LeaderSelection._getVisibleLeaders()
                                                                                                        local leaders = {}
                                                                                                        for _, object in ipairs(LeaderSelection.deckZone.getObjects()) do
                                                                                                            if object.hasTag("Leader") or object.hasTag("RivalLeader") then
                                                                                                                if not object.is_face_down then
                                                                                                                    table.insert(leaders, object)
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                        return leaders
                                                                                                    end

                                                                                                    function LeaderSelection._prepareVisibleLeaders(hidden)
                                                                                                        local leaders = {}
                                                                                                        for _, object in ipairs(LeaderSelection.deckZone.getObjects()) do
                                                                                                            if object.hasTag("Leader") or object.hasTag("RivalLeader") then
                                                                                                                if object.is_face_down then
                                                                                                                    LeaderSelection._destructLeader(object)
                                                                                                                else
                                                                                                                    table.insert(leaders, object)
                                                                                                                    if hidden then
                                                                                                                        object.setInvisibleTo(TurnControl.getPlayers())
                                                                                                                    end
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                        return leaders
                                                                                                    end

                                                                                                    function LeaderSelection._createDynamicLeaderSelection(leaders)
                                                                                                        Helper.shuffle(leaders)

                                                                                                        local notRivalLeaderCount = 0
                                                                                                        for i, leader in ipairs(leaders) do
                                                                                                            local ok = true
                                                                                                            if not leader.hasTag("RivalLeader") then
                                                                                                                notRivalLeaderCount = notRivalLeaderCount + 1
                                                                                                                ok = notRivalLeaderCount <= LeaderSelection.leaderSelectionPoolSize
                                                                                                            end
                                                                                                            if ok then
                                                                                                                LeaderSelection.dynamicLeaderSelection[leader] = false
                                                                                                                local position = leader.getPosition()
                                                                                                                Helper.createAbsoluteButtonWithRoundness(leader, 1, {
                                                                                                                    click_function = Helper.registerGlobalCallback(function (_, color, _)
                                                                                                                        if color == TurnControl.getCurrentPlayer() then
                                                                                                                            LeaderSelection.claimLeader(color, leader)
                                                                                                                        end
                                                                                                                    end),
                                                                                                                    position = Vector(position.x, 1.9, position.z),
                                                                                                                    width = 600,
                                                                                                                    height = 900,
                                                                                                                    color = Helper.AREA_BUTTON_COLOR,
                                                                                                                    hover_color = {0.7, 0.7, 0.7, 0.7},
                                                                                                                    press_color = {0.5, 1, 0.5, 0.4},
                                                                                                                    font_color = {1, 1, 1, 100},
                                                                                                                tooltip = I18N("claimLeader", {leader = I18N(Helper.getID(leader))})})
                                                                                                            else
                                                                                                                LeaderSelection._destructLeader(leader)
                                                                                                            end
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function LeaderSelection.getSelectableLeaders(rivalLeader)
                                                                                                        local selectableLeaders = {}
                                                                                                        for leader, selected in pairs(LeaderSelection.dynamicLeaderSelection) do
                                                                                                            if not selected then
                                                                                                                if (rivalLeader and leader.hasTag("RivalLeader")) or (not rivalLeader and leader.hasTag("Leader")) then
                                                                                                                    table.insert(selectableLeaders, leader)
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                        return selectableLeaders
                                                                                                    end

                                                                                                    ---
                                                                                                    function LeaderSelection._pickAnyLeader(color, rivalLeader, excludedLeaders)
                                                                                                        local allLeaders = LeaderSelection.getSelectableLeaders(rivalLeader)
                                                                                                        local leaders = Helper.filter(allLeaders, function (leader)
                                                                                                            return not excludedLeaders[Helper.getID(leader)]
                                                                                                        end)
                                                                                                        if #leaders == 0 then
                                                                                                            leaders = allLeaders
                                                                                                        end
                                                                                                        assert(#leaders > 0, "No leaders left!")
                                                                                                        local leader = Helper.pickAny(leaders)
                                                                                                        LeaderSelection.claimLeader(color, leader)
                                                                                                        return leader
                                                                                                    end

                                                                                                    ---
                                                                                                    function LeaderSelection.claimLeader(color, leader)
                                                                                                        if PlayBoard.isRival(color) and not leader.hasTag("RivalLeader") then
                                                                                                            Dialog.broadcastToColor(I18N("incompatibleRivalLeader"), color, "Purple")
                                                                                                            return
                                                                                                        end

                                                                                                        if not PlayBoard.isRival(color) and not leader.hasTag("Leader") then
                                                                                                            Dialog.broadcastToColor(I18N("incompatibleLeader"), color, "Purple")
                                                                                                            return
                                                                                                        end

                                                                                                        Helper.clearButtons(leader)
                                                                                                        LeaderSelection.dynamicLeaderSelection[leader] = true
                                                                                                        PlayBoard.setLeader(color, leader).doAfter(TurnControl.endOfTurn)
                                                                                                    end

                                                                                                    ---
                                                                                                    function LeaderSelection._destructLeader(leader)
                                                                                                        leader.destruct()
                                                                                                    end

                                                                                                    return LeaderSelection

                                                                                                end)
                                                                                                __bundle_register("Leader", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                    local Module = require("utils.Module")
                                                                                                    local Helper = require("utils.Helper")
                                                                                                    local I18N = require("utils.I18N")
                                                                                                    local Dialog = require("utils.Dialog")
                                                                                                    local Park = require("utils.Park")

                                                                                                    local Action = Module.lazyRequire("Action")
                                                                                                    local MainBoard = Module.lazyRequire("MainBoard")
                                                                                                    local ImperiumRow = Module.lazyRequire("ImperiumRow")
                                                                                                    local InfluenceTrack = Module.lazyRequire("InfluenceTrack")
                                                                                                    local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                    local Combat = Module.lazyRequire("Combat")
                                                                                                    local ChoamContractMarket = Module.lazyRequire("ChoamContractMarket")
                                                                                                    local Deck = Module.lazyRequire("Deck")
                                                                                                    local TechMarket = Module.lazyRequire("TechMarket")
                                                                                                    local Intrigue = Module.lazyRequire("Intrigue")

                                                                                                    local Leader = Helper.createClass(Action)

                                                                                                    ---
                                                                                                    function Leader.newLeader(name)
                                                                                                        local LeaderClass = Leader[name]
                                                                                                        assert(LeaderClass, "Unknown leader: " .. tostring(name))
                                                                                                        LeaderClass.name = name
                                                                                                        return Helper.createClassInstance(LeaderClass)
                                                                                                    end

                                                                                                    ---

                                                                                                    function Leader._createRightCardButton(anchors, color, name, tooltip, action)
                                                                                                        Leader._createCardButton(anchors, color, name, tooltip, Vector(1.35, 0, -1.3), action)
                                                                                                    end

                                                                                                    function Leader._createLeftCardButton(anchors, color, name, tooltip, action)
                                                                                                        Leader._createCardButton(anchors, color, name, tooltip, Vector(-1, 0, -1.3), action)
                                                                                                    end

                                                                                                    function Leader._createCardButton(anchors, color, name, tooltip, offset, action)
                                                                                                        local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                        local origin = leaderCard.getPosition() + offset
                                                                                                        Helper.createTransientAnchor(name, origin + Vector(0, -0.5, 0)).doAfter(function (anchor)
                                                                                                            if anchors then
                                                                                                                table.insert(anchors, anchor)
                                                                                                            end
                                                                                                            local y = (anchor.getPosition() + offset).y
                                                                                                            Helper.createSizedAreaButton(1000, 380, anchor, origin.y + 0.1, tooltip, function (_, otherColor)
                                                                                                                if otherColor == color then
                                                                                                                    action(color, anchor)
                                                                                                                else
                                                                                                                    Dialog.broadcastToColor(I18N("noTouch"), otherColor, "Purple")
                                                                                                                end
                                                                                                            end)
                                                                                                        end)
                                                                                                    end

                                                                                                    Leader.vladimirHarkonnen = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.vladimirHarkonnen.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Leader._createRightCardButton(nil, color, "SchemeAnchor", I18N("schemeTooltip"), Leader.vladimirHarkonnen.signetRing)
                                                                                                        end,

                                                                                                        --- Masterstroke
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)

                                                                                                            local position = Player[color].getHandTransform().position
                                                                                                            local tokenBag = getObjectFromGUID('f89231')
                                                                                                            local tokenCount = #tokenBag.getObjects()
                                                                                                            for _ = 1, tokenCount do
                                                                                                                tokenBag.takeObject({
                                                                                                                    position = position,
                                                                                                                    smooth = false, -- To avoid hand interception.
                                                                                                                    callback_function = function (token)
                                                                                                                        token.flip()
                                                                                                                    end
                                                                                                                })
                                                                                                            end
                                                                                                            Helper.onceFramesPassed(1).doAfter(function ()
                                                                                                                tokenBag.destruct()
                                                                                                            end)
                                                                                                        end,

                                                                                                        tearDown = function ()
                                                                                                            local tokenBag = getObjectFromGUID('f89231')
                                                                                                            tokenBag.destruct()
                                                                                                        end,

                                                                                                        -- Masterstroke
                                                                                                        instruct = function (phase, isActivePlayer)
                                                                                                            if phase == "gameStart" then
                                                                                                                if isActivePlayer then
                                                                                                                    return I18N("gameStartActiveInstructionForVladimirHarkonnen")
                                                                                                                else
                                                                                                                    return I18N("gameStartInactiveInstructionForVladimirHarkonnen")
                                                                                                                end
                                                                                                            else
                                                                                                                return Leader.instruct(phase, isActivePlayer)
                                                                                                            end
                                                                                                        end,

                                                                                                        --- Scheme
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.resources(color, "solari", -1) and leader.drawIntrigues(color, 1)
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.glossuRabban = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.glossuRabban.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Leader._createRightCardButton(nil, color, "BrutalityAnchor", I18N("brutalityTooltip"), Leader.glossuRabban.signetRing)
                                                                                                        end,

                                                                                                        --- Arrakis fiefdom
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            leader.resources(color, "spice", 1)
                                                                                                            leader.resources(color, "solari", 1)
                                                                                                        end,

                                                                                                        --- Brutality
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.troops(color, "supply", "garrison", InfluenceTrack.hasAnyAlliance(color) and 2 or 1)
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.ilbanRichese = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.ilbanRichese.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Leader._createRightCardButton(nil, color, "ManufacturingAnchor", I18N("manufacturingTooltip"), Leader.ilbanRichese.signetRing)
                                                                                                        end,

                                                                                                        --- Manufacturing
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.resources(color, "solari", 1)
                                                                                                        end,

                                                                                                        --- Ruthless negotiator
                                                                                                        resources = function (color, resourceName, amount)
                                                                                                            local success = Action.resources(color, resourceName, amount)
                                                                                                            if success
                                                                                                                and resourceName == "solari"
                                                                                                                and amount < 0
                                                                                                                and Action.checkContext({phase = "playerTurns", color = color, space = MainBoard.isLandsraadSpace}) then
                                                                                                                local leader = PlayBoard.getLeader(color)
                                                                                                                leader.drawImperiumCards(color, 1)
                                                                                                            end
                                                                                                            return success
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.helenaRichese = Helper.createClass(Leader, {

                                                                                                        --- Eyes everywhere
                                                                                                        sendAgent = function (color, spaceName, recallSpy)
                                                                                                            -- We don't care since it's simpler to let the player apply the rules.
                                                                                                            --local parentSpaceName = MainBoard.findParentSpaceName(spaceName)
                                                                                                            --local force = MainBoard.isLandsraadSpace(parentSpaceName) or MainBoard.isSpiceTradeSpace(parentSpaceName)
                                                                                                            return Action.sendAgent(color, spaceName, recallSpy)
                                                                                                        end,

                                                                                                        --- Manipulate
                                                                                                        acquireImperiumCard = function (color, indexInRow)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            if Action.checkContext({phase = "playerTurns", color = color}) and PlayBoard.couldSendAgentOrReveal(color) then
                                                                                                                return leader.reserveImperiumCard(color, indexInRow)
                                                                                                            else
                                                                                                                return Action.acquireImperiumCard(color, indexInRow)
                                                                                                            end
                                                                                                        end,

                                                                                                        --- Manipulate
                                                                                                        acquireReservedImperiumCard = function (color)
                                                                                                            --- Be nice.
                                                                                                            if false then
                                                                                                                if Action.checkContext({phase = "playerTurns", color = color}) and not PlayBoard.couldSendAgentOrReveal(color) then
                                                                                                                    return ImperiumRow.acquireReservedImperiumCard(color)
                                                                                                                else
                                                                                                                    return Action.acquireReservedImperiumCard(color)
                                                                                                                end
                                                                                                            else
                                                                                                                return ImperiumRow.acquireReservedImperiumCard(color)
                                                                                                            end
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.letoAtreides = Helper.createClass(Leader, {

                                                                                                        --- Landsraad popularity
                                                                                                        bargain = function (color, resourceName, amount)
                                                                                                            local finalAmount = amount
                                                                                                            if resourceName == "solari" and amount > 0 and Action.checkContext({phase = "playerTurns", color = color, space = MainBoard.isLandsraadSpace}) then
                                                                                                                finalAmount = amount - 1
                                                                                                            end
                                                                                                            return finalAmount
                                                                                                        end,

                                                                                                        resources = function (color, resourceName, amount)
                                                                                                            return Action.resources(color, resourceName, -Leader.letoAtreides.bargain(color, resourceName, -amount))
                                                                                                        end,
                                                                                                    })

                                                                                                    Leader.paulAtreides = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.paulAtreides.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        --- Prescience
                                                                                                        transientSetUp = function (color, settings)

                                                                                                            local prescience = function (_)
                                                                                                                local cardOrDeck = PlayBoard.getDrawDeck(color)
                                                                                                                if cardOrDeck == nil then
                                                                                                                    Dialog.broadcastToColor(I18N("prescienceVoid"), color, "Purple")
                                                                                                                elseif cardOrDeck.type == "Card" then
                                                                                                                    --broadcastToAll(I18N("prescienceUsed"), color)
                                                                                                                    Dialog.broadcastToColor(I18N("prescienceManual"), color, "Purple")
                                                                                                                else
                                                                                                                    cardOrDeck.Container.search(color, 1)
                                                                                                                    --broadcastToAll(I18N("prescienceUsed"), color)
                                                                                                                end
                                                                                                            end

                                                                                                            Leader._createLeftCardButton(nil, color, "PrescienceAnchor", I18N("prescienceTooltip"), prescience)
                                                                                                            Leader._createRightCardButton(nil, color, "DisciplineAnchor", I18N("disciplineTooltip"), Leader.paulAtreides.signetRing)
                                                                                                        end,

                                                                                                        --- Discipline
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.drawImperiumCards(color, 1, true)
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.arianaThorvald = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.arianaThorvald.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        --- Prescience
                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Leader._createRightCardButton(nil, color, "HiddenReservoirAnchor", I18N("hiddenReservoirTooltip"), Leader.arianaThorvald.signetRing)
                                                                                                        end,

                                                                                                        --- Hidden reservoir
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.resources(color, "water", 1)
                                                                                                        end,

                                                                                                        --- Spice addict
                                                                                                        sendAgent = function (color, spaceName, recallSpy)
                                                                                                            local oldSpiceStock = PlayBoard.getResource(color, "spice"):get()
                                                                                                            local continuation = Action.sendAgent(color, spaceName, recallSpy)
                                                                                                            continuation.doAfter(function ()
                                                                                                                local newSpiceStock = PlayBoard.getResource(color, "spice"):get()
                                                                                                                if MainBoard.isDesertSpace(MainBoard.findParentSpaceName(spaceName)) and newSpiceStock > oldSpiceStock then
                                                                                                                    local leader = PlayBoard.getLeader(color)
                                                                                                                    leader.resources(color, "spice", -1)
                                                                                                                    leader.drawImperiumCards(color, 1)
                                                                                                                end
                                                                                                            end)
                                                                                                            return continuation
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.memnonThorvald = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.memnonThorvald.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Leader._createRightCardButton(nil, color, "SpiceHoardAnchor", I18N("spiceHoardTooltip"), Leader.memnonThorvald.signetRing)
                                                                                                        end,

                                                                                                        --- Connections
                                                                                                        sendAgent = function (color, spaceName, recallSpy)
                                                                                                            local continuation = Action.sendAgent(color, spaceName, recallSpy)
                                                                                                            continuation.doAfter(function ()
                                                                                                                if spaceName == "highCouncil" then
                                                                                                                    local leader = PlayBoard.getLeader(color)
                                                                                                                    leader.influence(color, nil, 1)
                                                                                                                end
                                                                                                            end)
                                                                                                            return continuation
                                                                                                        end,

                                                                                                        --- Spice hoard
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.resources(color, "spice", 1)
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.armandEcaz = Helper.createClass(Leader, {
                                                                                                    })

                                                                                                    Leader.ilesaEcaz = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            local content = PlayBoard.getPlayBoard(color).content
                                                                                                            local zone = content.leaderZone
                                                                                                            -- Temporary tag to avoid counting the leader card.
                                                                                                            zone.addTag("Imperium")
                                                                                                            Deck.generateSpecialDeck(zone, "legacy", "foldspace").doAfter(function (deck)
                                                                                                                local cardCount = Helper.getCardCount(deck)
                                                                                                                Helper.repeatChainedAction(cardCount, function ()
                                                                                                                    local continuation = Helper.createContinuation("Leader.ilesaEcaz.transientSetUp")
                                                                                                                    Helper.moveCardFromZone(zone, content.trash.getPosition() + Vector(0, 1, 0), nil, false, false).doAfter(function (card)
                                                                                                                        Helper.onceSwallowedUp(card).doAfter(continuation.run)
                                                                                                                    end)
                                                                                                                    return continuation
                                                                                                                end).doAfter(function ()
                                                                                                                    zone.removeTag("Imperium")
                                                                                                                end)
                                                                                                            end)

                                                                                                            Leader.ilesaEcaz.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Leader._createRightCardButton(nil, color, "GuildContactsAnchor", I18N("guildContactsTooltip"), Leader.ilesaEcaz.signetRing)
                                                                                                        end,

                                                                                                        --- Guild contacts
                                                                                                        signetRing = function (color)
                                                                                                            local content = PlayBoard.getPlayBoard(color).content
                                                                                                            local availableFoldspaceCards = Helper.filter(content.trash.getObjects(), function (object)
                                                                                                                return Helper.getID(object) == "foldspace"
                                                                                                            end)

                                                                                                            if #availableFoldspaceCards > 0 then
                                                                                                                local leader = PlayBoard.getLeader(color)
                                                                                                                if leader.resources(color, "solari", -1) then
                                                                                                                    PlayBoard.giveCardFromTrash(color, "foldspace")
                                                                                                                    return true
                                                                                                                end
                                                                                                            else
                                                                                                                Dialog.broadcastToColor(I18N("noAvailableFoldspaceCards"), color, "Purple")
                                                                                                            end
                                                                                                            return false
                                                                                                        end,

                                                                                                        --- One step ahead
                                                                                                        instruct = function (phase, isActivePlayer)
                                                                                                            if phase == "roundStart" then
                                                                                                                if isActivePlayer then
                                                                                                                    return I18N("gameStartActiveInstructionForIlesaEcaz")
                                                                                                                else
                                                                                                                    return I18N("gameStartInactiveInstructionForIlesaEcaz")
                                                                                                                end
                                                                                                            else
                                                                                                                return Leader.instruct(phase, isActivePlayer)
                                                                                                            end
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.rhomburVernius = Helper.createClass(Leader, {

                                                                                                        --- Heavy lasgun cannons
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)
                                                                                                            Combat.setDreadnoughtStrength(color, 4)
                                                                                                        end,

                                                                                                        --- Guild contacts
                                                                                                        sendAgent = function (color, spaceName)
                                                                                                            local continuation = Action.sendAgent(color, spaceName)
                                                                                                            continuation.doAfter(function ()
                                                                                                                if PlayBoard.hasPlayedThisTurn(color, "signetRing") or PlayBoard.hasPlayedThisTurn(color, "boundlessAmbition") then
                                                                                                                    TechMarket.registerAcquireTechOption(color, "rhomburVerniusTechBuyOption", "spice", 0)
                                                                                                                end
                                                                                                            end)
                                                                                                            return continuation
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.tessiaVernius = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.tessiaVernius.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                            local snapPoints = {}
                                                                                                            for i = 1, 4 do
                                                                                                                local p = leaderCard.getPosition() + Vector(i / 4 - 2, 0, 1.4 - i / 2)
                                                                                                                table.insert(snapPoints, {
                                                                                                                    position = leaderCard.positionToLocal(p),
                                                                                                                tags = {"Snooper"}})
                                                                                                            end
                                                                                                            leaderCard.setSnapPoints(snapPoints)
                                                                                                        end,

                                                                                                        --- Careful observation
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)
                                                                                                            InfluenceTrack.setUpSnoopers()
                                                                                                        end,

                                                                                                        tearDown = function ()
                                                                                                            InfluenceTrack.tearDownSnoopers()
                                                                                                        end,

                                                                                                        --- Careful observation
                                                                                                        influence = function (color, faction, amount)
                                                                                                            if faction then
                                                                                                                local noFriendshipBefore = not InfluenceTrack.hasFriendship(color, faction)
                                                                                                                local continuation = Action.influence(color, faction, amount)
                                                                                                                continuation.doAfter(function ()
                                                                                                                    local friendshipAfter = InfluenceTrack.hasFriendship(color, faction)
                                                                                                                    if noFriendshipBefore and friendshipAfter then
                                                                                                                        InfluenceTrack.recallSnooper(faction, color)
                                                                                                                    end
                                                                                                                end)
                                                                                                                return continuation
                                                                                                            else
                                                                                                                return Action.influence(color, faction, amount)
                                                                                                            end
                                                                                                        end,

                                                                                                        --- Duplicity (not used)
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            leader.influence(color, nil, -1)
                                                                                                            leader.influence(color, nil, 1)
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.yunaMoritani = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.yunaMoritani.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Leader._createRightCardButton(nil, color, "FinalDeliveryAnchor", I18N("finalDeliveryTooltip"), Leader.yunaMoritani.signetRing)
                                                                                                        end,

                                                                                                        --- Smuggling operation
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            leader.resources(color, "water", -1)
                                                                                                        end,

                                                                                                        --- Smuggling operation
                                                                                                        resources = function (color, resourceName, amount)
                                                                                                            local finalAmount = amount
                                                                                                            if resourceName == "solari" and amount > 0 and Action.checkContext({phase = "playerTurns", color = color}) then
                                                                                                                finalAmount = amount + 1
                                                                                                            end
                                                                                                            return Action.resources(color, resourceName, finalAmount)
                                                                                                        end,

                                                                                                        --- Final delivery
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.resources(color, "solari", -7)
                                                                                                            and leader.influence(color, nil, 1)
                                                                                                            and leader.troops(color, "supply", "garrison", 1)
                                                                                                            and leader.resources(color, "spice", 1)
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.hundroMoritani = Helper.createClass(Leader, {

                                                                                                        --- Intelligence
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)
                                                                                                            Helper.onceFramesPassed(1).doAfter(function ()
                                                                                                                -- We don't send it to the player hand to avoid any confusion with the epic mode intrigue.
                                                                                                                local emptySlots = Park.findEmptySlots(PlayBoard.getAgentCardPark(color))
                                                                                                                Intrigue.moveIntrigues({emptySlots[1], emptySlots[2]})
                                                                                                            end)
                                                                                                        end,

                                                                                                        --- Intelligence
                                                                                                        instruct = function (phase, isActivePlayer)
                                                                                                            if phase == "gameStart" then
                                                                                                                if isActivePlayer then
                                                                                                                    return I18N("gameStartActiveInstructionForHundroMoritani")
                                                                                                                else
                                                                                                                    return I18N("gameStartInactiveInstructionForHundroMoritani")
                                                                                                                end
                                                                                                            else
                                                                                                                return Leader.instruct(phase, isActivePlayer)
                                                                                                            end
                                                                                                        end,

                                                                                                        --- Couriers (not used)
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.resources(color, "spice", -1) and leader.shipments(color, 1)
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.stabanTuek = Helper.createClass(Leader, {

                                                                                                        -- Smuggle spice
                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.stabanTuek.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Helper.registerEventListener("agentSent", function (otherColor, spaceName)
                                                                                                                local parentSpaceName = MainBoard.findParentSpaceName(spaceName)
                                                                                                                if otherColor ~= color and MainBoard.isDesertSpace(parentSpaceName) and MainBoard.isSpying(parentSpaceName, color) then
                                                                                                                    Action.log(I18N("stabanSpiceSmuggling"), color)
                                                                                                                    local leader = PlayBoard.getLeader(color)
                                                                                                                    leader.resources(color, "spice", 1)
                                                                                                                end
                                                                                                            end)
                                                                                                        end,

                                                                                                        --- Limited allies
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)
                                                                                                            local drawDeck = PlayBoard.getDrawDeck(color)
                                                                                                            if drawDeck then
                                                                                                                for i, card in ipairs(drawDeck.getObjects()) do
                                                                                                                    if Helper.getID(card) == "diplomacy" then
                                                                                                                        drawDeck.takeObject({
                                                                                                                            index = i - 1,
                                                                                                                            flip = true,
                                                                                                                            position = Vector(drawDeck.getPosition() + Vector(0, 1, 0)),
                                                                                                                            callback_function = function (livingCard)
                                                                                                                                PlayBoard.getPlayBoard(color):trash(livingCard)
                                                                                                                            end
                                                                                                                        })
                                                                                                                        break
                                                                                                                    end
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.amberMetulli = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.amberMetulli.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Leader._createRightCardButton(nil, color, "FillCoffersAnchor", I18N("fillCoffersTooltip"), Leader.amberMetulli.signetRing)
                                                                                                        end,

                                                                                                        --- Fill Coffers
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            if InfluenceTrack.hasAnyAlliance(color) then
                                                                                                                leader.resources(color, "spice", 1)
                                                                                                            end
                                                                                                            leader.resources(color, "solari", 1)
                                                                                                            return true
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.gurneyHalleck = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.gurneyHalleck.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        --- Always smiling
                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Helper.registerEventListener("reveal", function (otherColor)
                                                                                                                if color == otherColor then
                                                                                                                    local threshold = settings.numberOfPlayers == 6 and 10 or 6
                                                                                                                    if Combat.calculateCombatForce(color) >= threshold then
                                                                                                                        Action.log(I18N("gurneySmile"), color)
                                                                                                                        local leader = PlayBoard.getLeader(color)
                                                                                                                        leader.resources(color, "persuasion", 1)
                                                                                                                    end
                                                                                                                end
                                                                                                            end)
                                                                                                            Leader._createRightCardButton(nil, color, "WarmasterAnchor", I18N("warmasterTooltip"), Leader.gurneyHalleck.signetRing)
                                                                                                        end,

                                                                                                        --- Warmaster
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.troops(color, "supply", "garrison", 1)
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.margotFenring = Helper.createClass(Leader, {

                                                                                                        --- Loyalty
                                                                                                        influence = function (color, faction, amount)
                                                                                                            if faction == "beneGesserit" then
                                                                                                                local noFriendshipBefore = not InfluenceTrack.hasFriendship(color, faction)
                                                                                                                local continuation = Action.influence(color, faction, amount)
                                                                                                                continuation.doAfter(function (...)
                                                                                                                    local friendshipAfter = InfluenceTrack.hasFriendship(color, faction)
                                                                                                                    if noFriendshipBefore and friendshipAfter then
                                                                                                                        local leader = PlayBoard.getLeader(color)
                                                                                                                        Action.log(I18N("loyalty"), color)
                                                                                                                        leader.resources(color, "spice", 2)
                                                                                                                    end
                                                                                                                end)
                                                                                                                return continuation
                                                                                                            else
                                                                                                                return Action.influence(color, faction, amount)
                                                                                                            end
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.irulanCorrino = Helper.createClass(Leader, {

                                                                                                        --- Imperial Birthright
                                                                                                        influence = function (color, faction, amount)
                                                                                                            if Helper.isElementOf(faction, {"emperor", "greatHouses"}) then
                                                                                                                local noFriendshipBefore = not InfluenceTrack.hasFriendship(color, faction)
                                                                                                                local continuation = Action.influence(color, faction, amount)
                                                                                                                continuation.doAfter(function ()
                                                                                                                    local friendshipAfter = InfluenceTrack.hasFriendship(color, faction)
                                                                                                                    if noFriendshipBefore and friendshipAfter then
                                                                                                                        local leader = PlayBoard.getLeader(color)
                                                                                                                        Action.log(I18N("imperialBirthright"), color)
                                                                                                                        leader.drawIntrigues(color, 1)
                                                                                                                    end
                                                                                                                end)
                                                                                                                return continuation
                                                                                                            else
                                                                                                                return Action.influence(color, faction, amount)
                                                                                                            end
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.jessica = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.jessica.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        --- Other memories
                                                                                                        transientSetUp = function (color, settings)
                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)

                                                                                                            Leader.jessica.otherMemoriesPark = MainBoard.createOtherMemoriesPark(color)

                                                                                                            local otherMemories = function ()
                                                                                                                Leader.jessica.name = "reverendMotherJessica"
                                                                                                                leaderCard.setLock(false)
                                                                                                                leaderCard.setGMNotes(Leader.jessica.name)
                                                                                                                leaderCard.setName(I18N(Leader.jessica.name))
                                                                                                                leaderCard.setRotation(Vector(0, 180, 180))
                                                                                                                Helper.onceMotionless(leaderCard).doAfter(function ()
                                                                                                                    leaderCard.setLock(true)
                                                                                                                end)
                                                                                                                broadcastToAll(I18N("otherMemoriesUsed"), color)
                                                                                                                local count = Park.transfert(12, Leader.jessica.otherMemoriesPark, PlayBoard.getSupplyPark(color))
                                                                                                                Action.drawImperiumCards(color, count, true)
                                                                                                            end

                                                                                                            if leaderCard.getGMNotes() ~= "reverendMotherJessica" then
                                                                                                                local anchors = {}

                                                                                                                Leader._createLeftCardButton(anchors, color, "OtherMemoriesAnchor", I18N("otherMemoriesTooltip"), function ()
                                                                                                                    Dialog.showYesOrNoDialog(color, I18N("confirmOtherMemories"), nil, function (confirmed)
                                                                                                                        if confirmed then
                                                                                                                            otherMemories()
                                                                                                                            for _, anchor in ipairs(anchors) do
                                                                                                                                anchor.destruct()
                                                                                                                            end
                                                                                                                        end
                                                                                                                    end)
                                                                                                                end)

                                                                                                                Leader._createRightCardButton(nil, color, "SpiceAgonyAnchor", I18N("spiceAgonyTooltip"), Leader.jessica.signetRing)
                                                                                                            else
                                                                                                                Leader._createRightCardButton(nil, color, "WaterOfLifeAnchor", I18N("waterOfLifeTooltip"), Leader.jessica.signetRing)
                                                                                                            end
                                                                                                        end,

                                                                                                        --- Spice Agony / Water of Life
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                            if leaderCard.getGMNotes() ~= "reverendMotherJessica" then
                                                                                                                if leader.resources(color, "spice", -1) then
                                                                                                                    leader.drawIntrigues(color, 1)
                                                                                                                    local count = Park.transfert(1, PlayBoard.getSupplyPark(color), Leader.jessica.otherMemoriesPark)
                                                                                                                    Action.log(I18N("transfer", {
                                                                                                                        count = count,
                                                                                                                        what = I18N.agree(count, "troop"),
                                                                                                                        from = I18N("supplyPark"),
                                                                                                                        to = I18N("otherMemoriesPark"),
                                                                                                                    }), color)
                                                                                                                    return true
                                                                                                                else
                                                                                                                    return false
                                                                                                                end
                                                                                                            else
                                                                                                                return leader.resources(color, "spice", -1) and leader.resources(color, "water", 1)
                                                                                                            end
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.reverendMotherJessica = Leader.jessica

                                                                                                    Leader.feydRauthaHarkonnen = Helper.createClass(Leader, {

                                                                                                        positions = {
                                                                                                            Vector(0.1, 0, 0.55),
                                                                                                            Vector(-0.15, 0, 0.4),
                                                                                                            Vector(-0.15, 0, 0.7),
                                                                                                            Vector(-0.4, 0, 0.55),
                                                                                                            Vector(-0.65, 0, 0.4),
                                                                                                            Vector(-0.55, 0, 0.7),
                                                                                                            Vector(-0.75, 0, 0.7),
                                                                                                            Vector(-0.95, 0, 0.55),
                                                                                                        },

                                                                                                        doSetUp = function (color, settings)
                                                                                                            local snapPoints = {}
                                                                                                            for _, position in ipairs(Leader.feydRauthaHarkonnen.positions) do
                                                                                                                table.insert(snapPoints, {
                                                                                                                    position = position,
                                                                                                                    tags = {"FeydRauthaTrainingMarker"},
                                                                                                                })
                                                                                                            end

                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                            leaderCard.setSnapPoints(snapPoints)
                                                                                                        end,

                                                                                                        --- Devious training
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)

                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                            local marker = getObjectFromGUID("505c31")
                                                                                                            marker.setPosition(leaderCard.positionToWorld(Leader.feydRauthaHarkonnen.positions[1]) + Vector(0, 0.5, 0))
                                                                                                            marker.setInvisibleTo({})
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.shaddamCorrino = Helper.createClass(Leader, {

                                                                                                        prepare = function (color, settings, asCommander)
                                                                                                            if not asCommander then
                                                                                                                Action.prepare(color, settings)
                                                                                                            else
                                                                                                                Action.resources(color, "water", 1)
                                                                                                                if settings.epicMode then
                                                                                                                    Action.drawIntrigues(color, 1)
                                                                                                                end
                                                                                                            end

                                                                                                            --- Sardaukar commander
                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                            local position = leaderCard.getPosition()
                                                                                                            ChoamContractMarket.takeAnySardaukarContract(position + Vector(-1.2, 1, 0))
                                                                                                            ChoamContractMarket.takeAnySardaukarContract(position + Vector(1.2, 1, 0))
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.muadDib = Helper.createClass(Leader, {

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.muadDib.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        --- Unpredictable foe
                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Helper.registerEventListener("reveal", function (otherColor)
                                                                                                                -- Should we consider its allies' sandworms too?
                                                                                                                if color == otherColor and PlayBoard.couldSendAgentOrReveal(color) and Combat.hasSandworms(color) then
                                                                                                                    local leader = PlayBoard.getLeader(color)
                                                                                                                    Action.log(I18N("muadDibBeingUnpredictable"), color)
                                                                                                                    leader.drawIntrigues(color, 1)
                                                                                                                end
                                                                                                            end)
                                                                                                            Leader._createRightCardButton(nil, color, "LeadTheWayAnchor", I18N("leadTheWayTooltip"), Leader.muadDib.signetRing)
                                                                                                        end,

                                                                                                        --- Lead the Way
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.drawImperiumCards(color, 1, true)
                                                                                                        end,

                                                                                                        prepare = function (color, settings, asCommander)
                                                                                                            if not asCommander then
                                                                                                                Action.prepare(color, settings)
                                                                                                            else
                                                                                                                Action.resources(color, "water", 1)
                                                                                                                if settings.epicMode then
                                                                                                                    Action.drawIntrigues(color, 1)
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                    })

                                                                                                    -- bloodlines leaders
                                                                                                    Leader.bl_Chani = Helper.createClass(Leader, {
                                                                                                        positions = {
                                                                                                            Vector(0.79, 0, 0.63),
                                                                                                            Vector(0.61, 0, 0.63),
                                                                                                            Vector(0.44, 0, 0.63),
                                                                                                            Vector(0.27, 0, 0.63),
                                                                                                            Vector(0.10, 0, 0.63),
                                                                                                            Vector(-0.07, 0, 0.63),
                                                                                                            Vector(-0.25, 0, 0.63),
                                                                                                            Vector(-0.43, 0, 0.63),
                                                                                                            Vector(-0.60, 0, 0.63),
                                                                                                            Vector(-0.77, 0, 0.63),
                                                                                                            Vector(-0.94, 0, 0.63),
                                                                                                        },

                                                                                                        doSetUp = function (color, settings)
                                                                                                            local snapPoints = {}
                                                                                                            for _, position in ipairs(Leader.bl_Chani.positions) do
                                                                                                                table.insert(snapPoints, {
                                                                                                                    position = position,
                                                                                                                    tags = {"ChaniTrainingMarker"},
                                                                                                                })
                                                                                                            end

                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                            leaderCard.setSnapPoints(snapPoints)
                                                                                                        end,

                                                                                                        -- Passive - Tactician - retreat/lose troops in conflict, advance token. reset token after reaching end of the track.
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)

                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                            local marker = getObjectFromGUID("759054")
                                                                                                            marker.setPosition(leaderCard.positionToWorld(Leader.bl_Chani.positions[3]) + Vector(0, 0.5, 0))
                                                                                                            marker.setInvisibleTo({})
                                                                                                        end
                                                                                                        -- Signet - Fedaykin Manuever - retreat any number of troops OR 1 water 2 card draw
                                                                                                    })

                                                                                                    Leader.bl_Duncan = Helper.createClass(Leader, {
                                                                                                        -- Passive - Ginaz Swordmaster - swordmaster costs 2 less
                                                                                                        -- DONE in function MainBoard._getSwordmasterCost()
                                                                                                        -- Signet - Into the Fray - send agent into conflict for 2 strength, 3 strength if you have SM
                                                                                                        -- DONE in function Combat.calculateCombatForce
                                                                                                    })

                                                                                                    Leader.bl_Esmar = Helper.createClass(Leader, {
                                                                                                        -- Passive - tuek's sietch - get 1 solari if you go to tuek's sietch
                                                                                                        -- DONE in function MainBoard._goTueksSietch
                                                                                                        -- Passive - tuek's sietch - get 1 intrigue if another player goes to tuek's sietch
                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.bl_Esmar.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Helper.registerEventListener("agentSent", function (otherColor, spaceName)
                                                                                                                if otherColor ~= color and spaceName == "tueksSietch" then
                                                                                                                    Action.log(I18N("tueksSietchPayment"), color)
                                                                                                                    local leader = PlayBoard.getLeader(color)
                                                                                                                    leader.drawIntrigues(color, 1)
                                                                                                                end
                                                                                                            end)
                                                                                                        end,
                                                                                                        -- Signet - Smuggle Spice - place 1 bonus spice on Tuek's Sietch OR take 1 bonus spice from Maker spaces
                                                                                                    })

                                                                                                    Leader.bl_Hasimir = Helper.createClass(Leader, {
                                                                                                        -- Passive - Assassin - 1 solari when trashing a card
                                                                                                        -- MANUAL
                                                                                                        -- Signet - Corrino Liaison - trash card in play area or deep cover spy on emperor
                                                                                                        -- MANUAL
                                                                                                    })

                                                                                                    Leader.bl_Kota = Helper.createClass(Leader, {
                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.bl_Kota.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Leader._createRightCardButton(nil, color, "ReverseEngineeringAnchor", I18N("reverseEngineeringTooltip"), Leader.bl_Kota.signetRing)
                                                                                                        end,

                                                                                                        -- Passive - Secret Project - game start - look at bottom tile of each stack, place one tech face down on leader, -1 spice for that tech
                                                                                                        -- MANUAL
                                                                                                        instruct = function (phase, isActivePlayer)
                                                                                                            if phase == "gameStart" then
                                                                                                                if isActivePlayer then
                                                                                                                    return I18N("gameStartActiveInstructionForKotaOdax")
                                                                                                                else
                                                                                                                    return I18N("gameStartActiveInstructionForKotaOdax")
                                                                                                                end
                                                                                                            else
                                                                                                                return Leader.instruct(phase, isActivePlayer)
                                                                                                            end
                                                                                                        end,

                                                                                                        -- Signet - Reverse Engineering - 1 spice OR trash tech tile --> 1 intrigue 1 card draw
                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.resources(color, "spice", 1)
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.bl_Liet = Helper.createClass(Leader, {
                                                                                                        -- Passive - Arrakis Planetologist - sietch access without fremen friendship
                                                                                                        -- DONE in function MainBoard._goSietchTabr
                                                                                                        -- Passive - Arrakis Planetologist - no sandworms, get 1 trash 1 spice and 1 intrigue for each worm
                                                                                                        -- DONE in function MainBoard._goHaggaBasin, function MainBoard._goDeepDesert, function PlayBoard:_createButtons()
                                                                                                        -- Signet - Judge of the Change - if agent went to green AND two emperor influence get 1 water, if blue get 1 solari, if yellow get 1 spice
                                                                                                        -- MANUAL
                                                                                                    })

                                                                                                    Leader.bl_Mohiam = Helper.createClass(Leader, {
                                                                                                        -- Passive - Clandestine - played cards have spy access, must recall spy whenever you can
                                                                                                        -- MANUAL
                                                                                                        -- Signet - Listeners - spy on green OR 1 spice for spy anywhere
                                                                                                        -- MANUAL
                                                                                                    })

                                                                                                    Leader.bl_Piter = Helper.createClass(Leader, {
                                                                                                        -- Passive - Twisted Genius - shuffle and place twisted intrigue deck near you
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)
                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                            local twistedIntrigueDeck = getObjectFromGUID("e13c0b")
                                                                                                            twistedIntrigueDeck.setPosition(leaderCard.positionToWorld(Vector(0, 0.5, -0.7)))
                                                                                                            Helper.shuffleDeck(twistedIntrigueDeck)
                                                                                                            Helper.onceTimeElapsed(1).doAfter(function ()
                                                                                                                Helper.shuffleDeck(twistedIntrigueDeck)
                                                                                                                Helper.shuffleDeck(twistedIntrigueDeck)
                                                                                                            end)
                                                                                                            twistedIntrigueDeck.setInvisibleTo({})
                                                                                                        end,

                                                                                                        doSetUp = function (color, settings)
                                                                                                            Leader.bl_Piter.transientSetUp(color, settings)
                                                                                                        end,

                                                                                                        -- Passive - Twisted Genius - round start - draw 1 twisted intrigue
                                                                                                        -- DONE in function PlayBoard._transientSetUp(settings)
                                                                                                        -- Signet - Harkonnen Advisor - 1 troop, can't deploy this troop into conflict
                                                                                                        transientSetUp = function (color, settings)
                                                                                                            Leader._createRightCardButton(nil, color, "HarkonnenAdvisorAnchor", I18N("harkonnenAdvisorTooltip"), Leader.bl_Piter.signetRing)
                                                                                                        end,

                                                                                                        signetRing = function (color)
                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            return leader.troops(color, "supply", "garrison", 1)
                                                                                                        end
                                                                                                    })

                                                                                                    Leader.bl_Yrkoon = Helper.createClass(Leader, {
                                                                                                        positions = {
                                                                                                            Vector(0.90, 0, -0.80),
                                                                                                            Vector(0.30, 0, -0.80),
                                                                                                            Vector(-0.30, 0, -0.80),
                                                                                                            Vector(-0.90, 0, -0.80),
                                                                                                        },

                                                                                                        doSetUp = function (color, settings)
                                                                                                            local snapPoints = {}
                                                                                                            for _, position in ipairs(Leader.bl_Yrkoon.positions) do
                                                                                                                table.insert(snapPoints, {
                                                                                                                    position = position,
                                                                                                                })
                                                                                                            end

                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                            leaderCard.setSnapPoints(snapPoints)
                                                                                                        end,

                                                                                                        -- Passive - Strange Form - start game with 0 water and without signet
                                                                                                        -- Passive - Plot Course - start game with navigation cards
                                                                                                        instruct = function (phase, isActivePlayer)
                                                                                                            if phase == "gameStart" then
                                                                                                                if isActivePlayer then
                                                                                                                    return I18N("gameStartActiveInstructionForSteersmanYrkoon")
                                                                                                                else
                                                                                                                    return I18N("gameStartActiveInstructionForSteersmanYrkoon")
                                                                                                                end
                                                                                                            else
                                                                                                                return Leader.instruct(phase, isActivePlayer)
                                                                                                            end
                                                                                                        end,

                                                                                                        -- Passive - Plot Course - start game with navigation cards
                                                                                                        prepare = function (color, settings)
                                                                                                            Action.prepare(color, settings)
                                                                                                            local leaderCard = PlayBoard.findLeaderCard(color)
                                                                                                            local navigationCards = getObjectFromGUID("d1fb34")
                                                                                                            navigationCards.setPosition(leaderCard.positionToWorld(Vector(0, 0.5, -0.7)))
                                                                                                            Helper.shuffleDeck(navigationCards)
                                                                                                            Helper.onceTimeElapsed(1).doAfter(function ()
                                                                                                                Helper.shuffleDeck(navigationCards)
                                                                                                                Helper.shuffleDeck(navigationCards)
                                                                                                            end)
                                                                                                            Helper.onceTimeElapsed(2).doAfter(function ()
                                                                                                                navigationCards.deal(5, color)
                                                                                                            end)
                                                                                                            Helper.onceTimeElapsed(3).doAfter(function ()
                                                                                                                navigationCards.destruct()
                                                                                                            end)
                                                                                                            navigationCards.setInvisibleTo({})

                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                            leader.resources(color, "water", -1)

                                                                                                            local drawDeck = PlayBoard.getDrawDeck(color)
                                                                                                            if drawDeck then
                                                                                                                for i, card in ipairs(drawDeck.getObjects()) do
                                                                                                                    if Helper.getID(card) == "signetRing" then
                                                                                                                        drawDeck.takeObject({
                                                                                                                            index = i - 1,
                                                                                                                            flip = true,
                                                                                                                            position = Vector(drawDeck.getPosition() + Vector(0, 1, 0)),
                                                                                                                            callback_function = function (livingCard)
                                                                                                                                PlayBoard.getPlayBoard(color):trash(livingCard)
                                                                                                                            end
                                                                                                                        })
                                                                                                                        break
                                                                                                                    end
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                    })

                                                                                                    return Leader

                                                                                                end)
                                                                                                __bundle_register("Intrigue", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                    local Module = require("utils.Module")
                                                                                                    local Helper = require("utils.Helper")
                                                                                                    local AcquireCard = require("utils.AcquireCard")
                                                                                                    local I18N = require("utils.I18N")

                                                                                                    local Deck = Module.lazyRequire("Deck")
                                                                                                    local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                    local Types = Module.lazyRequire("Types")
                                                                                                    local Action = Module.lazyRequire("Action")

                                                                                                    local Intrigue = {}

                                                                                                    ---
                                                                                                    function Intrigue.onLoad(state)
                                                                                                        Helper.append(Intrigue, Helper.resolveGUIDs(false, {
                                                                                                            deckZone = 'a377d8',
                                                                                                            discardZone = '80642b'
                                                                                                        }))

                                                                                                        if state.settings then
                                                                                                            Intrigue._transientSetUp(state.settings)
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function Intrigue.setUp(settings)
                                                                                                        local continuation = Helper.createContinuation("Intrigue.setUp")
                                                                                                        Deck.generateIntrigueDeck(Intrigue.deckZone, settings.useContracts, settings.riseOfIx, settings.immortality, settings.legacy, settings.merakon).doAfter(function (deck)
                                                                                                            assert(deck, "No intrigue deck!")
                                                                                                            Helper.shuffleDeck(deck)
                                                                                                            Intrigue._transientSetUp(settings)
                                                                                                            continuation.run()
                                                                                                        end)
                                                                                                        return continuation
                                                                                                    end

                                                                                                    ---
                                                                                                    function Intrigue._transientSetUp(settings)
                                                                                                        AcquireCard.new(Intrigue.deckZone, "Intrigue", PlayBoard.withLeader(Intrigue._acquireIntrigueCard), Deck.getAcquireCardDecalUrl("generic"))
                                                                                                        AcquireCard.new(Intrigue.discardZone, "Intrigue", nil, Deck.getAcquireCardDecalUrl("generic"))
                                                                                                    end

                                                                                                    ---
                                                                                                    function Intrigue._acquireIntrigueCard(acquireCard, color)
                                                                                                        local leader = PlayBoard.getLeader(color)
                                                                                                        leader.drawIntrigues(color, 1)
                                                                                                    end

                                                                                                    ---
                                                                                                    function Intrigue.drawIntrigues(color, amount)
                                                                                                        Types.assertIsPositiveInteger(amount)
                                                                                                        local orientedPosition = PlayBoard.getHandOrientedPosition(color)
                                                                                                        Helper.onceTimeElapsed(0.25, amount).doAfter(function ()
                                                                                                            Helper.moveCardFromZone(Intrigue.deckZone, orientedPosition.position, orientedPosition.rotation, false, true)
                                                                                                        end)
                                                                                                    end

                                                                                                    ---
                                                                                                    function Intrigue.stealIntrigues(color, otherColor, amount)
                                                                                                        Types.assertIsPositiveInteger(amount)
                                                                                                        local victimName = PlayBoard.getLeaderName(otherColor)

                                                                                                        local intrigues = PlayBoard.getIntrigues(otherColor)
                                                                                                        local realAmount = math.min(amount, #intrigues)

                                                                                                        Helper.shuffle(intrigues)

                                                                                                        local orientedPosition = PlayBoard.getHandOrientedPosition(color)
                                                                                                        Helper.onceTimeElapsed(0.25, realAmount).doAfter(function () -- Why?
                                                                                                            local card = table.remove(intrigues, 1)
                                                                                                            card.setPosition(orientedPosition.position)
                                                                                                            card.setRotation(orientedPosition.rotation)
                                                                                                            local cardName = I18N(Helper.getID(card))
                                                                                                            Action.secretLog(I18N("stealIntrigues", {victim = victimName, card = cardName}), color)
                                                                                                        end)
                                                                                                    end

                                                                                                    ---
                                                                                                    function Intrigue.moveIntrigues(positions)
                                                                                                        for i = 1, #positions do
                                                                                                            Helper.moveCardFromZone(Intrigue.deckZone, positions[i])
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function Intrigue.discard(card)
                                                                                                        Intrigue.discardQueue = Intrigue.discardQueue or Helper.createSpaceQueue()
                                                                                                        Intrigue.discardQueue.submit(function (height)
                                                                                                            -- Not smooth to avoid being recaptured by the hand zone.
                                                                                                            card.setPosition(Intrigue.discardZone.getPosition() + Vector(0, 1 + height * 0.5, 0))
                                                                                                        end)
                                                                                                    end

                                                                                                    ---
                                                                                                    function Intrigue.getDiscardedIntrigues()
                                                                                                        local deckOrCard = Helper.getDeckOrCard(Intrigue.discardZone)
                                                                                                        return Helper.getCards(deckOrCard)
                                                                                                    end

                                                                                                    return Intrigue

                                                                                                end)
                                                                                                __bundle_register("InfluenceTrack", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                    local Module = require("utils.Module")
                                                                                                    local Helper = require("utils.Helper")
                                                                                                    local I18N = require("utils.I18N")
                                                                                                    local Dialog = require("utils.Dialog")

                                                                                                    local Types = Module.lazyRequire("Types")
                                                                                                    local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                    local MainBoard = Module.lazyRequire("MainBoard")
                                                                                                    local TurnControl = Module.lazyRequire("TurnControl")
                                                                                                    local Commander = Module.lazyRequire("Commander")

                                                                                                    local InfluenceTrack = {
                                                                                                        influenceTokens = {},
                                                                                                        influenceTokenInitialPositions = {},
                                                                                                        allianceTokenInitialPositions = {},
                                                                                                        influenceLevels = {},
                                                                                                        lockedActions = {
                                                                                                            emperor = {},
                                                                                                            spacingGuild = {},
                                                                                                            beneGesserit = {},
                                                                                                            fremen = {},
                                                                                                            greatHouses = {},
                                                                                                            fringeWorlds = {},
                                                                                                        },
                                                                                                    }

                                                                                                    ---
                                                                                                    function InfluenceTrack.onLoad(state)
                                                                                                        Helper.append(InfluenceTrack, Helper.resolveGUIDs(false, {
                                                                                                            snoopers = {
                                                                                                                emperor = "a58ce8",
                                                                                                                spacingGuild = "857f74",
                                                                                                                beneGesserit = "bed196",
                                                                                                                fremen = "b10897",
                                                                                                            },
                                                                                                            friendshipBags = {
                                                                                                                emperor = "7007df",
                                                                                                                spacingGuild = "af9795",
                                                                                                                beneGesserit = "3ebbd7",
                                                                                                                fremen = "f5a7af",
                                                                                                                greatHouses = "07e49b",
                                                                                                                fringeWorlds = "ff38f9",
                                                                                                            },
                                                                                                        allianceTokens = {}}))

                                                                                                        for _, bag in pairs(InfluenceTrack.friendshipBags) do
                                                                                                            --bag.interactable = false
                                                                                                        end

                                                                                                        if state.settings then
                                                                                                            InfluenceTrack._transientSetUp(state.settings, false)
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.setUp(settings)
                                                                                                        InfluenceTrack._transientSetUp(settings, true)

                                                                                                        if settings.numberOfPlayers < 6 then
                                                                                                            InfluenceTrack.allianceTokens.greatHouses.destruct()
                                                                                                            InfluenceTrack.allianceTokens.fringeWorlds.destruct()
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._transientSetUp(settings, firstTime)
                                                                                                        InfluenceTrack._processSnapPoints(settings, firstTime)

                                                                                                        for faction, initialPositions in pairs(InfluenceTrack.influenceTokenInitialPositions) do
                                                                                                            local factionLevels = {}
                                                                                                            local meanStartPosition = Vector(0, 0, 0)
                                                                                                            local meanStep = 0
                                                                                                            local n = 0
                                                                                                            for color, position in pairs(initialPositions) do
                                                                                                                local allianceToken = InfluenceTrack.allianceTokenInitialPositions[faction]
                                                                                                                local step = (allianceToken.z - position.z) / 5 -- The token is centered on the 5th level (but you only need to reach the 4th to get it).
                                                                                                                local zero = position.z - step / 2
                                                                                                                factionLevels[color] = {
                                                                                                                    zero = zero,
                                                                                                                    step = step,
                                                                                                                }
                                                                                                                meanStartPosition = meanStartPosition + position
                                                                                                                meanStep = meanStep + step
                                                                                                                n = n + 1
                                                                                                            end
                                                                                                            meanStartPosition:scale(1 / n)
                                                                                                            meanStep = meanStep / n
                                                                                                            for i = 0, 6 do
                                                                                                                local levelPosition = meanStartPosition + Vector(0, 0, meanStep * i)
                                                                                                                levelPosition:setAt('y', 1.5)
                                                                                                                Helper.createTransientAnchor(faction .. "Rank" .. tostring(i), levelPosition).doAfter(function (anchor)
                                                                                                                    local actionName = I18N("progressOnInfluenceTrack", {withFaction = I18N(Helper.toCamelCase("with", faction))})
                                                                                                                    Helper.createSizedAreaButton(1000, 400, anchor, 1.75, actionName, PlayBoard.withLeader(function (_, color, _)
                                                                                                                        if not InfluenceTrack.lockedActions[faction][color] then
                                                                                                                            if InfluenceTrack.hasAccess(color, faction) then
                                                                                                                                local rank = InfluenceTrack._getInfluenceTracksRank(faction, color)
                                                                                                                                InfluenceTrack.lockedActions[faction][color] = true
                                                                                                                                PlayBoard.getLeader(color).influence(color, faction, i - rank).doAfter(function ()
                                                                                                                                    InfluenceTrack.lockedActions[faction][color] = false
                                                                                                                                end)
                                                                                                                            end
                                                                                                                        end
                                                                                                                    end))
                                                                                                                end)
                                                                                                            end
                                                                                                            InfluenceTrack.influenceLevels[faction] = factionLevels
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._processSnapPoints(settings, firstTime)
                                                                                                        -- TODO Get rid of the *InitialPositions variables

                                                                                                        local allColors = {"Green", "Yellow", "Blue", "Red", "White", "Purple"}
                                                                                                        local allActiveColors = PlayBoard.getActivePlayBoardColors()

                                                                                                        local influenceTokens = {}
                                                                                                        for _, object in ipairs(getObjects()) do
                                                                                                            if object.hasTag("AllianceToken") then
                                                                                                                for faction, _ in pairs(InfluenceTrack.lockedActions) do
                                                                                                                    if object.hasTag(faction) then
                                                                                                                        InfluenceTrack.allianceTokens[faction] = object
                                                                                                                        break
                                                                                                                    end
                                                                                                                end
                                                                                                            elseif object.hasTag("InfluenceTokens") then
                                                                                                                for _, color in ipairs(allColors) do
                                                                                                                    if object.hasTag(color) then
                                                                                                                        if Helper.isElementOf(color, allActiveColors) then
                                                                                                                            table.insert(influenceTokens, object)
                                                                                                                        else
                                                                                                                            object.destruct()
                                                                                                                        end
                                                                                                                        break
                                                                                                                    end
                                                                                                                end
                                                                                                            end
                                                                                                        end

                                                                                                        MainBoard.collectSnapPointsOnAllBoards(settings, {

                                                                                                            faction = function (faction, position)
                                                                                                                InfluenceTrack.influenceTokens[faction] = {}
                                                                                                                InfluenceTrack.influenceTokenInitialPositions[faction] = {}

                                                                                                                for _, influenceToken in ipairs(influenceTokens) do
                                                                                                                    local tokenPosition = influenceToken.getPosition()
                                                                                                                    local dz = tokenPosition.z - position.z
                                                                                                                    if - 2 < dz and dz < 3.5 then
                                                                                                                        for _, color in ipairs(allColors) do
                                                                                                                            if influenceToken.hasTag(color) then
                                                                                                                                InfluenceTrack.influenceTokens[faction][color] = influenceToken
                                                                                                                                local xOffsets = {
                                                                                                                                    Blue = -0.66,
                                                                                                                                    Red = -0.22,
                                                                                                                                    Green = 0.22,
                                                                                                                                    Yellow = 0.66,
                                                                                                                                    White = 0,
                                                                                                                                    Purple = 0,
                                                                                                                                }
                                                                                                                                local influenceTokenInitialPosition = position + Vector(xOffsets[color], 0, -1.6)
                                                                                                                                -- Snap point height is weird, so we just keep the natural token position.
                                                                                                                                influenceTokenInitialPosition.y = influenceToken.getPosition().y
                                                                                                                                InfluenceTrack.influenceTokenInitialPositions[faction][color] = influenceTokenInitialPosition
                                                                                                                                if firstTime then
                                                                                                                                    influenceToken.setPosition(influenceTokenInitialPosition)
                                                                                                                                    Helper.noPhysicsNorPlay(influenceToken)
                                                                                                                                end
                                                                                                                                break
                                                                                                                            end
                                                                                                                        end
                                                                                                                    end
                                                                                                                end

                                                                                                                local allianceTokenInitialPosition = position + Vector(-0.02, 0, 2.32)
                                                                                                                InfluenceTrack.allianceTokenInitialPositions[faction] = allianceTokenInitialPosition
                                                                                                                if firstTime then
                                                                                                                    local token = InfluenceTrack.allianceTokens[faction]
                                                                                                                    token.setInvisibleTo({})
                                                                                                                    token.setPositionSmooth(allianceTokenInitialPosition)
                                                                                                                end
                                                                                                            end
                                                                                                        })
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.setUpSnoopers()
                                                                                                        for faction, snooper in pairs(InfluenceTrack.snoopers) do
                                                                                                            local position = MainBoard.getSnooperTrackPosition(faction)
                                                                                                            snooper.setPositionSmooth(position, false, false)
                                                                                                            snooper.setInvisibleTo({})
                                                                                                            snooper.setRotationSmooth(Vector(0, 90, 0))
                                                                                                            Helper.onceTimeElapsed(3).doAfter(function ()
                                                                                                                snooper.setLock(true)
                                                                                                            end, 3)
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.tearDownSnoopers()
                                                                                                        for _, snooper in pairs(InfluenceTrack.snoopers) do
                                                                                                            snooper.destruct()
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.recallSnooper(faction, color)

                                                                                                        local foundSnooper
                                                                                                        local snooperRank = 4
                                                                                                        for otherFaction, snooper in pairs(InfluenceTrack.snoopers) do
                                                                                                            local position = MainBoard.getSnooperTrackPosition(otherFaction)
                                                                                                            local distance = (snooper.getPosition() - position):magnitude()
                                                                                                            if distance < 1 then
                                                                                                                if otherFaction == faction then
                                                                                                                    foundSnooper = snooper
                                                                                                                else
                                                                                                                    snooperRank = snooperRank - 1
                                                                                                                end
                                                                                                            end
                                                                                                        end

                                                                                                        if foundSnooper then
                                                                                                            local p = PlayBoard.findLeaderCard(color).getPosition() + Vector(snooperRank / 4 - 2, 0.5, 1.4 - snooperRank / 2)
                                                                                                            Helper.noPlay(foundSnooper)
                                                                                                            foundSnooper.setPositionSmooth(p)

                                                                                                            Helper.onceTimeElapsed(1).doAfter(function ()
                                                                                                                local parameters = {withFaction = I18N(Helper.toCamelCase("with", faction))}
                                                                                                                local leader = PlayBoard.getLeader(color)
                                                                                                                if snooperRank == 1 then
                                                                                                                    broadcastToAll(I18N("firstSnooperRecall", parameters), color)
                                                                                                                    Dialog.showInfoDialog(color, I18N("firstSnooperRecallEffectInfo"))
                                                                                                                elseif snooperRank == 2 then
                                                                                                                    broadcastToAll(I18N("secondSnooperRecall", parameters), color)
                                                                                                                    InfluenceTrack._gainAllianceBonus(faction, color)
                                                                                                                elseif snooperRank == 3 then
                                                                                                                    broadcastToAll(I18N("thirdSnooperRecall", parameters), color)
                                                                                                                    leader.influence(color, faction, 1)
                                                                                                                elseif snooperRank == 4 then
                                                                                                                    broadcastToAll(I18N("fourthSnooperRecall", parameters), color)
                                                                                                                    InfluenceTrack._gainAllianceBonus(faction, color)
                                                                                                                    leader.influence(color, faction, 1)
                                                                                                                else
                                                                                                                    assert(false)
                                                                                                                end
                                                                                                            end)
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.hasAccess(color, faction)
                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                        Types.assertIsFaction(faction)
                                                                                                        if TurnControl.getPlayerCount() == 6 then
                                                                                                            if faction == "emperor" then
                                                                                                                return Commander.isShaddam(color)
                                                                                                            elseif faction == "fremen" then
                                                                                                                return Commander.isMuadDib(color)
                                                                                                            else
                                                                                                                return not Commander.isCommander(color)
                                                                                                            end
                                                                                                        else
                                                                                                            return true
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.hasFriendship(color, faction)
                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                        Types.assertIsFaction(faction)
                                                                                                        return InfluenceTrack.getInfluence(faction, color) >= 2
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.getInfluence(faction, color, direct)
                                                                                                        if TurnControl.getPlayerCount() == 6 and not direct then
                                                                                                            if Commander.isCommander(color) then
                                                                                                                local bestInfluence = 0
                                                                                                                for _, otherColor in ipairs(Commander.getAllies(color)) do
                                                                                                                    bestInfluence = math.max(bestInfluence, InfluenceTrack.getInfluence(faction, otherColor))
                                                                                                                end
                                                                                                                if faction == "emperor" and Commander.isShaddam(color) then
                                                                                                                    bestInfluence = math.max(bestInfluence, InfluenceTrack._getInfluenceTracksRank(faction, color))
                                                                                                                end
                                                                                                                if faction == "fremen" and Commander.isMuadDib(color) then
                                                                                                                    bestInfluence = math.max(bestInfluence, InfluenceTrack._getInfluenceTracksRank(faction, color))
                                                                                                                end
                                                                                                                return bestInfluence
                                                                                                            else
                                                                                                                local finalFaction = faction
                                                                                                                if faction == "emperor" then
                                                                                                                    finalFaction = "greatHouses"
                                                                                                                elseif faction == "fremen" then
                                                                                                                    finalFaction = "fringeWorlds"
                                                                                                                end
                                                                                                                return InfluenceTrack._getInfluenceTracksRank(finalFaction, color)
                                                                                                            end
                                                                                                        else
                                                                                                            return InfluenceTrack._getInfluenceTracksRank(faction, color)
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._getInfluenceTracksRank(faction, color)
                                                                                                        local influenceLevels = InfluenceTrack.influenceLevels[faction][color]
                                                                                                        local token = InfluenceTrack.influenceTokens[faction][color]
                                                                                                        if token then
                                                                                                            local position = token.getPosition()
                                                                                                            return math.floor((position.z - influenceLevels.zero) / influenceLevels.step)
                                                                                                        else
                                                                                                            return 0
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._setInfluenceTracksRank(faction, color, change)
                                                                                                        local levels = InfluenceTrack.influenceLevels[faction][color]
                                                                                                        local token = InfluenceTrack.influenceTokens[faction][color]
                                                                                                        local position = token.getPosition()
                                                                                                        position.z = position.z + levels.step * change
                                                                                                        token.setPositionSmooth(position, false, false)
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.change(color, faction, change)
                                                                                                        local finalColor = color
                                                                                                        local finalFaction = faction
                                                                                                        if TurnControl.getPlayerCount() == 6 then
                                                                                                            if Commander.isCommander(color) then
                                                                                                                if not InfluenceTrack.hasAccess(color, faction) then
                                                                                                                    log("Influence bonus low level redirection (should not happen)!")
                                                                                                                    finalColor = Commander.getActivatedAlly(color)
                                                                                                                    if faction == "emperor" then
                                                                                                                        finalFaction = "greatHouses"
                                                                                                                    elseif faction == "fremen" then
                                                                                                                        finalFaction = "fringeWorlds"
                                                                                                                    end
                                                                                                                end
                                                                                                            else
                                                                                                                if faction == "emperor" then
                                                                                                                    finalFaction = "greatHouses"
                                                                                                                elseif faction == "fremen" then
                                                                                                                    finalFaction = "fringeWorlds"
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                        return InfluenceTrack._changeInfluenceTracksRank(finalColor, finalFaction, change)
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._changeInfluenceTracksRank(color, faction, change)
                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                        Types.assertIsFaction(faction)
                                                                                                        Types.assertIsInteger(change)

                                                                                                        local token = InfluenceTrack.influenceTokens[faction][color]

                                                                                                        local oldRank = InfluenceTrack._getInfluenceTracksRank(faction, color)

                                                                                                        local realChange = math.min(math.max(oldRank + change, 0), 6) - oldRank

                                                                                                        local continuation = Helper.createContinuation("InfluenceTrack._changeInfluenceTracksRank")

                                                                                                        Helper.repeatMovingAction(token, math.abs(realChange), function (_)
                                                                                                            InfluenceTrack._setInfluenceTracksRank(faction, color, Helper.signum(change))
                                                                                                        end).doAfter(function (_)
                                                                                                            local newRank = InfluenceTrack._getInfluenceTracksRank(faction, color)
                                                                                                            --[[
            Check alliance before friendship (because friendship tokens come
            from a bag which induces a invisible transit with parks, ending in
            2 stacked tokens in the case a player gain 3+ influences on the
            track in a single move).
        ]]
                                                                                                            if oldRank >= 4 or newRank >= 4 then
                                                                                                                InfluenceTrack._challengeAlliance(faction)
                                                                                                            end
                                                                                                            if oldRank < 4 and newRank >= 4 then
                                                                                                                InfluenceTrack._gainAllianceBonus(faction, color)
                                                                                                            end
                                                                                                            if oldRank < 1 and newRank >= 1 then
                                                                                                                InfluenceTrack._gainCommanderBonus(faction, color, 1)
                                                                                                            end
                                                                                                            if oldRank < 2 and newRank >= 2 then
                                                                                                                InfluenceTrack._gainFriendship(faction, color)
                                                                                                            end
                                                                                                            if oldRank >= 2 and newRank < 2 then
                                                                                                                InfluenceTrack._loseFriendship(faction, color)
                                                                                                            end
                                                                                                            if oldRank < 3 and newRank >= 3 then
                                                                                                                InfluenceTrack._gainCommanderBonus(faction, color, 3)
                                                                                                            end
                                                                                                            continuation.run(realChange)
                                                                                                            Helper.emitEvent("influence", faction, color, newRank)
                                                                                                        end)

                                                                                                        return continuation
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._gainFriendship(faction, color)
                                                                                                        Types.assertIsFaction(faction)
                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                        local friendshipTokenName = faction .. "Friendship"
                                                                                                        PlayBoard.getLeader(color).gainVictoryPoint(color, friendshipTokenName, 1)
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._loseFriendship(faction, color)
                                                                                                        Types.assertIsFaction(faction)
                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                        local friendshipTokenName = faction .. "Friendship"
                                                                                                        for _, scoreToken in ipairs(PlayBoard.getScoreTokens(color)) do
                                                                                                            if Helper.getID(scoreToken) == friendshipTokenName then
                                                                                                                scoreToken.destruct()
                                                                                                            end
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._challengeAlliance(faction)
                                                                                                        local bestRankedPlayers = {}
                                                                                                        local bestRank = 4
                                                                                                        local allianceOwner

                                                                                                        for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                            if InfluenceTrack.hasAlliance(color, faction) then
                                                                                                                allianceOwner = color
                                                                                                            end
                                                                                                            local rank = InfluenceTrack.getInfluence(faction, color, true)
                                                                                                            if rank >= bestRank then
                                                                                                                if rank > bestRank then
                                                                                                                    bestRank = rank
                                                                                                                    bestRankedPlayers = {}
                                                                                                                end
                                                                                                                table.insert(bestRankedPlayers, color)
                                                                                                            end
                                                                                                        end

                                                                                                        if not Helper.tableContains(bestRankedPlayers, allianceOwner) then
                                                                                                            InfluenceTrack._loseAlliance(faction, allianceOwner)

                                                                                                            if #bestRankedPlayers > 0 then
                                                                                                                if #bestRankedPlayers == 1 then
                                                                                                                    allianceOwner = bestRankedPlayers[1]
                                                                                                                    InfluenceTrack._gainAlliance(faction, allianceOwner)
                                                                                                                else
                                                                                                                    broadcastToAll(tostring(allianceOwner) .. " must grant alliance to one of " .. tostring(bestRankedPlayers), "Pink") -- FIXME
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.getAllianceCost(color, faction)
                                                                                                        local rank = InfluenceTrack.getInfluence(faction, color, true)
                                                                                                        for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                            if InfluenceTrack.hasAlliance(otherColor, faction) then
                                                                                                                if otherColor == color then
                                                                                                                    return 0
                                                                                                                else
                                                                                                                    local otherRank = InfluenceTrack.getInfluence(faction, otherColor, true)
                                                                                                                    if otherRank == 6 then
                                                                                                                        return - 1
                                                                                                                    else
                                                                                                                        return otherRank - rank + 1
                                                                                                                    end
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                        return 4 - rank
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.hasAlliance(color, faction)
                                                                                                        local playerVictoryTokens = PlayBoard.getScoreTokens(color)
                                                                                                        for _, victoryToken in ipairs(playerVictoryTokens) do
                                                                                                            if victoryToken == InfluenceTrack.allianceTokens[faction] then
                                                                                                                return true
                                                                                                            end
                                                                                                        end
                                                                                                        return false
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack.hasAnyAlliance(color)
                                                                                                        for faction, _ in pairs(InfluenceTrack.influenceTokenInitialPositions) do
                                                                                                            if InfluenceTrack.hasAlliance(color, faction) then
                                                                                                                return true
                                                                                                            end
                                                                                                        end
                                                                                                        return false
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._gainAlliance(faction, color)
                                                                                                        Types.assertIsFaction(faction)
                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                        local token = InfluenceTrack.allianceTokens[faction]
                                                                                                        assert(token)
                                                                                                        PlayBoard.getLeader(color).gainVictoryPoint(color, Helper.getID(token), 1)
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._gainAllianceBonus(faction, color)
                                                                                                        local leader = PlayBoard.getLeader(color)
                                                                                                        if not PlayBoard.isRival(color) then
                                                                                                            if TurnControl.getPlayerCount() == 6 then
                                                                                                                if faction == "greatHouses" then
                                                                                                                    leader.troops(color, "supply", "garrison", 2)
                                                                                                                elseif faction == "spacingGuild" then
                                                                                                                    leader.resources(color, "solari", 3)
                                                                                                                elseif faction == "beneGesserit" then
                                                                                                                    leader.drawIntrigues(color, 1)
                                                                                                                elseif faction == "fringeWorlds" then
                                                                                                                    -- 1 spy
                                                                                                                end
                                                                                                            else
                                                                                                                if faction == "emperor" then
                                                                                                                    -- 1??spy
                                                                                                                elseif faction == "spacingGuild" then
                                                                                                                    leader.resources(color, "solari", 3)
                                                                                                                elseif faction == "beneGesserit" then
                                                                                                                    leader.drawIntrigues(color, 1)
                                                                                                                elseif faction == "fremen" then
                                                                                                                    leader.resources(color, "water", 1)
                                                                                                                else
                                                                                                                    error("Unknown faction: " .. tostring(faction))
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._gainCommanderBonus(faction, color, level)
                                                                                                        if TurnControl.getPlayerCount() == 6 then
                                                                                                            if faction == "emperor" then
                                                                                                                for _, otherColor in ipairs(Commander.getShaddamTeam()) do
                                                                                                                    if level == 1 then
                                                                                                                        PlayBoard.getLeader(otherColor).resources(otherColor, "solari", 1)
                                                                                                                    end
                                                                                                                end
                                                                                                            elseif faction == "fremen" then
                                                                                                                for _, otherColor in ipairs(Commander.getMuadDibTeam()) do
                                                                                                                    if level == 1 then
                                                                                                                        PlayBoard.getLeader(otherColor).resources(otherColor, "spice", 1)
                                                                                                                    elseif level == 3 then
                                                                                                                        PlayBoard.getLeader(otherColor).resources(otherColor, "water", 1)
                                                                                                                    end
                                                                                                                end
                                                                                                            end
                                                                                                        end
                                                                                                    end

                                                                                                    ---
                                                                                                    function InfluenceTrack._loseAlliance(faction, color)
                                                                                                        local position = InfluenceTrack.allianceTokenInitialPositions[faction]
                                                                                                        InfluenceTrack.allianceTokens[faction].setPositionSmooth(position, false, false)
                                                                                                    end

                                                                                                    function InfluenceTrack.gainVictoryPoint(color, name, count)
                                                                                                        assert(count == 1)
                                                                                                        for _, friendshipTokenBag in pairs(InfluenceTrack.friendshipBags) do
                                                                                                            if Helper.getID(friendshipTokenBag) == name then
                                                                                                                PlayBoard.grantScoreTokenFromBag(color, friendshipTokenBag)
                                                                                                                return true
                                                                                                            end
                                                                                                        end
                                                                                                        for _, allianceToken in pairs(InfluenceTrack.allianceTokens) do
                                                                                                            if Helper.getID(allianceToken) == name then
                                                                                                                PlayBoard.grantScoreToken(color, allianceToken)
                                                                                                                return true
                                                                                                            end
                                                                                                        end
                                                                                                        return false
                                                                                                    end

                                                                                                    return InfluenceTrack

                                                                                                end)
                                                                                                __bundle_register("ImperiumRow", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                    local Module = require("utils.Module")
                                                                                                    local Helper = require("utils.Helper")
                                                                                                    local AcquireCard = require("utils.AcquireCard")
                                                                                                    local I18N = require("utils.I18N")

                                                                                                    local Deck = Module.lazyRequire("Deck")
                                                                                                    local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                    local Music = Module.lazyRequire("Music")
                                                                                                    local MainBoard = Module.lazyRequire("MainBoard")

                                                                                                    local ImperiumRow = {}

                                                                                                    ---
                                                                                                    function ImperiumRow.onLoad(state)
                                                                                                        if state.settings then
                                                                                                            ImperiumRow.enableWormEatsTheCard = state.settings.wormEatsTheCard
                                                                                                        else
                                                                                                            ImperiumRow.enableWormEatsTheCard = true
                                                                                                        end
                                                                                                        Helper.append(
                                                                                                            ImperiumRow,
                                                                                                            Helper.resolveGUIDs(
                                                                                                                false,
                                                                                                                {
                                                                                                                    deckZone = "8bd982",
                                                                                                                    -- FIXME Confusing "reserve" wording.
                                                                                                                    reservationSlotZone = "473cf7",
                                                                                                                    slotZones = {
                                                                                                                        '3de1d0',
                                                                                                                        '356e2c',
                                                                                                                        '7edbb3',
                                                                                                                        '641974',
                                                                                                                        'c6dbed'
                                                                                                                    }
                                                                                                                }
                                                                                                            )
                                                                                                        )

                                                                                                            if state.settings then
                                                                                                                ImperiumRow._transientSetUp()
                                                                                                            end
                                                                                                        end

                                                                                                        ---
                                                                                                        function ImperiumRow.setUp(settings)
                                                                                                            Helper.createButton(
                                                                                                                getObjectFromGUID("aaabbb"),
                                                                                                                {
                                                                                                                    click_function = Helper.registerGlobalCallback(function ()
                                                                                                                        ImperiumRow.replenishAllEmpty()
                                                                                                                    end),
                                                                                                                    label = "Replenish Imperium",
                                                                                                                    position = Vector(0, 0, 0),
                                                                                                                    rotation = Vector(0, 180, 0),
                                                                                                                    width = 200,
                                                                                                                    height = 200,
                                                                                                                    scale = Vector(1, 1, 1),
                                                                                                                    font_size = 50,
                                                                                                                    font_color = {1, 1, 1},
                                                                                                                    color = "Green"
                                                                                                                }
                                                                                                            )

                                                                                                            Helper.createButton(
                                                                                                                getObjectFromGUID("aaabbb"),
                                                                                                                {
                                                                                                                    click_function = Helper.registerGlobalCallback(function ()
                                                                                                                        ImperiumRow.yeet()
                                                                                                                    end),
                                                                                                                    label = "Are you a retard?",
                                                                                                                    position = Vector(1.5, 0, 0),
                                                                                                                    rotation = Vector(0, 180, 0),
                                                                                                                    width = 200,
                                                                                                                    height = 200,
                                                                                                                    scale = Vector(1, 1, 1),
                                                                                                                    font_size = 50,
                                                                                                                    font_color = {1, 1, 1},
                                                                                                                    color = "Red"
                                                                                                                }
                                                                                                            )

                                                                                                            local continuation = Helper.createContinuation("ImperiumRow.setUp")
                                                                                                            Deck.generateImperiumDeck(ImperiumRow.deckZone, settings.useContracts, settings.riseOfIx, settings.immortality, settings.legacy, settings.merakon).doAfter(function (deck)
                                                                                                                assert(deck, "No Imperium deck!")
                                                                                                                Helper.shuffleDeck(deck)
                                                                                                                for _, zone in ipairs(ImperiumRow.slotZones) do
                                                                                                                    Helper.moveCardFromZone(ImperiumRow.deckZone, zone.getPosition(), Vector(0, 180, 0))
                                                                                                                end
                                                                                                                ImperiumRow._transientSetUp()
                                                                                                                continuation.run()
                                                                                                            end)
                                                                                                            return continuation
                                                                                                        end

                                                                                                        ---
                                                                                                        function ImperiumRow._transientSetUp()
                                                                                                            for i, zone in ipairs(ImperiumRow.slotZones) do
                                                                                                                AcquireCard.new(zone, "Imperium", PlayBoard.withLeader(function (_, color)
                                                                                                                    local leader = PlayBoard.getLeader(color)
                                                                                                                    leader.acquireImperiumCard(color, i)
                                                                                                                end), Deck.getAcquireCardDecalUrl("generic"))
                                                                                                            end

                                                                                                            AcquireCard.new(ImperiumRow.reservationSlotZone, "Imperium", PlayBoard.withLeader(function (_, color)
                                                                                                                local leader = PlayBoard.getLeader(color)
                                                                                                                leader.acquireReservedImperiumCard(color)
                                                                                                            end), Deck.getAcquireCardDecalUrl("generic"))

                                                                                                            Helper.registerEventListener("phaseStart", function (phase)
                                                                                                                if phase == "recall" then
                                                                                                                    local cardOrDeck = Helper.getDeckOrCard(ImperiumRow.reservationSlotZone)
                                                                                                                    if cardOrDeck then
                                                                                                                        MainBoard.trash(cardOrDeck)
                                                                                                                    end
                                                                                                                end
                                                                                                            end)
                                                                                                        end

                                                                                                        ---
                                                                                                        function ImperiumRow.acquireReservedImperiumCard(color)
                                                                                                            local cardOrDeck = Helper.getDeckOrCard(ImperiumRow.reservationSlotZone)
                                                                                                            if cardOrDeck then
                                                                                                                PlayBoard.giveCardFromZone(color, ImperiumRow.reservationSlotZone, false)
                                                                                                                return true
                                                                                                            else
                                                                                                                return false
                                                                                                            end
                                                                                                        end

                                                                                                        ---
                                                                                                        function ImperiumRow.reserveImperiumCard(indexInRow)
                                                                                                            local zone = ImperiumRow.slotZones[indexInRow]
                                                                                                            local card = Helper.getCard(zone)
                                                                                                            if card then
                                                                                                                if false then
                                                                                                                    local oldCard = Helper.getCard(ImperiumRow.reservationSlotZone)
                                                                                                                    if oldCard then
                                                                                                                        MainBoard.trash(oldCard)
                                                                                                                    end
                                                                                                                end
                                                                                                                card.setPosition(ImperiumRow.reservationSlotZone.getPosition())
                                                                                                                ImperiumRow._replenish(indexInRow)
                                                                                                                return true
                                                                                                            else
                                                                                                                return false
                                                                                                            end
                                                                                                        end

                                                                                                        ---
                                                                                                        function ImperiumRow.acquireImperiumCard(indexInRow, color)
                                                                                                            local zone = ImperiumRow.slotZones[indexInRow]
                                                                                                            local card = Helper.getCard(zone)
                                                                                                            if card then
                                                                                                                PlayBoard.giveCard(color, card, false)
                                                                                                                ImperiumRow._replenish(indexInRow)
                                                                                                                return true
                                                                                                            else
                                                                                                                return false
                                                                                                            end
                                                                                                        end

                                                                                                        ---
                                                                                                        function ImperiumRow.nuke(color)
                                                                                                            Music.play("atomics")
                                                                                                            Helper.onceTimeElapsed(3).doAfter(function ()
                                                                                                                for i, zone in ipairs(ImperiumRow.slotZones) do
                                                                                                                    local card = Helper.getCard(zone)
                                                                                                                    if card then
                                                                                                                        MainBoard.trash(card)
                                                                                                                        ImperiumRow._replenish(i)
                                                                                                                    end
                                                                                                                end
                                                                                                            end)
                                                                                                        end

                                                                                                        ---
                                                                                                        function ImperiumRow.churn()
                                                                                                            local firstCardIndex = math.random(6)
                                                                                                            local secondCardIndex = math.random(6)
                                                                                                            local count = 0
                                                                                                            for i, zone in ipairs(ImperiumRow.slotZones) do
                                                                                                                if i == firstCardIndex or i == secondCardIndex then
                                                                                                                    local card = Helper.getCard(zone)
                                                                                                                    MainBoard.trash(card)
                                                                                                                    ImperiumRow._replenish(i)
                                                                                                                    count = count + 1
                                                                                                                end
                                                                                                            end
                                                                                                            printToAll(I18N("churnImperiumRow", {count = count, card = I18N.agree(count, "card")}), "Pink")
                                                                                                        end

                                                                                                        function ImperiumRow.yeet()
                                                                                                            log("ARWIN: yeet!")
                                                                                                            local cards = Helper.getCards(Helper.getDeckOrCard(zone))
                                                                                                            for _, card in ipairs(cards) do
                                                                                                                card.addForce(Vector(math.random(-20, 20), math.random(300, 500), 40))
                                                                                                                card.addTorque(Vector(math.random(-500, 500), math.random(-500, 500), math.random(-500, 500)))
                                                                                                            end
                                                                                                        end

                                                                                                        function ImperiumRow.replenishAllEmpty()
                                                                                                            log("ARWIN: replenishAllEmpty!")
                                                                                                            local actions = {}
                                                                                                            for i = 5, 1, -1 do
                                                                                                                local currentZone = ImperiumRow.slotZones[i]  -- Get current zone
                                                                                                                local position = currentZone.getPosition()

                                                                                                                if #currentZone.getObjects() == 0 then
                                                                                                                    log(string.format("ARWIN: Found empty at %d", i))
                                                                                                                    table.insert(
                                                                                                                        actions,
                                                                                                                        function()
                                                                                                                            return Helper.moveCardFromZone(ImperiumRow.deckZone, position, Vector(0, 180, 0))
                                                                                                                        end
                                                                                                                    )
                                                                                                                end
                                                                                                            end
                                                                                                            return Helper.chainActions(actions)
                                                                                                        end

                                                                                                        function ImperiumRow.wormEatsTheCard()
                                                                                                            printToAll("WORM EATS THE CARD", "Pink")
                                                                                                            local card = Helper.getCard(ImperiumRow.slotZones[5])
                                                                                                            if card then
                                                                                                                -- card.addForce(Vector(math.random(-20, 20), math.random(300, 500), 40))
                                                                                                                -- card.addTorque(Vector(math.random(-500, 500), math.random(-500, 500), math.random(-500, 500)))

                                                                                                                MainBoard.trash(card)
                                                                                                            end
                                                                                                            return ImperiumRow._replenish(5)
                                                                                                        end

                                                                                                        ---
                                                                                                        function ImperiumRow._replenish(indexInRow)
                                                                                                            if not ImperiumRow.enableWormEatsTheCard then
                                                                                                                log(string.format("ARWIN: ImperiumRow._replenish %d without WormEatsTheCard", indexInRow))
                                                                                                                local position = ImperiumRow.slotZones[indexInRow].getPosition()
                                                                                                                return Helper.moveCardFromZone(ImperiumRow.deckZone, position, Vector(0, 180, 0))
                                                                                                            end

                                                                                                            log(string.format("ARWIN: ImperiumRow._replenish %d with WormEatsTheCard", indexInRow))

                                                                                                            local actions = {}
                                                                                                            for i = indexInRow, 2, -1 do  -- Start at the gap, go backwards to position 2
                                                                                                                local prevZone = ImperiumRow.slotZones[i-1]  -- Get the zone to the left
                                                                                                                local currentZone = ImperiumRow.slotZones[i]  -- Get current zone

                                                                                                                if #prevZone.getObjects() > 0 then
                                                                                                                    table.insert(
                                                                                                                        actions,
                                                                                                                        function()
                                                                                                                            log(string.format("ARWIN: Move Imperium Zone %d to %d", i-1, i))
                                                                                                                            return Helper.moveCardFromZone(prevZone, currentZone.getPosition(), Vector(0, 180, 0))
                                                                                                                        end
                                                                                                                    )
                                                                                                                end
                                                                                                            end

                                                                                                            -- Then put new card in leftmost position (slot 1)
                                                                                                            local position = ImperiumRow.slotZones[1].getPosition()
                                                                                                            table.insert(
                                                                                                                actions,
                                                                                                                function()
                                                                                                                    log("ARWIN: Imperium Replenish Zone 1")
                                                                                                                    return Helper.moveCardFromZone(ImperiumRow.deckZone, position, Vector(0, 180, 0))
                                                                                                                end
                                                                                                            )

                                                                                                            return Helper.chainActions(actions)
                                                                                                        end

                                                                                                        return ImperiumRow

                                                                                                    end)
                                                                                                    __bundle_register("ImperiumCard", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                        local Module = require("utils.Module")
                                                                                                        local Helper = require("utils.Helper")

                                                                                                        -- Exceptional Immediate require for the sake of aliasing.
                                                                                                        local CardEffect = require("CardEffect")

                                                                                                        local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                        local Types = Module.lazyRequire("Types")

                                                                                                        -- Function aliasing for a more readable code.
                                                                                                        local persuasion = CardEffect.persuasion
                                                                                                        local sword = CardEffect.sword
                                                                                                        local spice = CardEffect.spice
                                                                                                        local water = CardEffect.water
                                                                                                        local solari = CardEffect.solari
                                                                                                        local deploy = CardEffect.deploy
                                                                                                        local troop = CardEffect.troop
                                                                                                        local dreadnought = CardEffect.dreadnought
                                                                                                        local negotiator = CardEffect.negotiator
                                                                                                        local specimen = CardEffect.specimen
                                                                                                        local intrigue = CardEffect.intrigue
                                                                                                        local trash = CardEffect.trash
                                                                                                        local research = CardEffect.research
                                                                                                        local beetle = CardEffect.beetle
                                                                                                        local influence = CardEffect.influence
                                                                                                        local vp = CardEffect.vp
                                                                                                        local draw = CardEffect.draw
                                                                                                        local shipment = CardEffect.shipment
                                                                                                        local control = CardEffect.control
                                                                                                        local spy = CardEffect.spy
                                                                                                        local contract = CardEffect.contract
                                                                                                        local voice = CardEffect.voice
                                                                                                        local perDreadnoughtInConflict = CardEffect.perDreadnoughtInConflict
                                                                                                        local perSwordCard = CardEffect.perSwordCard
                                                                                                        local perFremen = CardEffect.perFremen
                                                                                                        local perEmperor = CardEffect.perEmperor
                                                                                                        local perFulfilledContract = CardEffect.perFulfilledContract
                                                                                                        local choice = CardEffect.choice
                                                                                                        local optional = CardEffect.optional
                                                                                                        local seat = CardEffect.seat
                                                                                                        local fremenBond = CardEffect.fremenBond
                                                                                                        -- bloodlines sardaukar commander in conflict
                                                                                                        local sardaukarCommanderInConflict = CardEffect.sardaukarCommanderInConflict
                                                                                                        -- bloodlines imperial throneship reveal
                                                                                                        local imperialThroneship = CardEffect.imperialThroneship
                                                                                                        local agentInEmperorSpace = CardEffect.agentInEmperorSpace
                                                                                                        local emperorAlliance = CardEffect.emperorAlliance
                                                                                                        local spacingGuildAlliance = CardEffect.spacingGuildAlliance
                                                                                                        local beneGesseritAlliance = CardEffect.beneGesseritAlliance
                                                                                                        local fremenAlliance = CardEffect.fremenAlliance
                                                                                                        local fremenFriendship = CardEffect.fremenFriendship
                                                                                                        local anyAlliance = CardEffect.anyAlliance
                                                                                                        local oneHelix = CardEffect.oneHelix
                                                                                                        local twoHelices = CardEffect.twoHelices
                                                                                                        local winner = CardEffect.winner
                                                                                                        local twoSpies = CardEffect.twoSpies
                                                                                                        local spyMakerSpace = CardEffect.spyMakerSpace
                                                                                                        local swordmaster = CardEffect.swordmaster
                                                                                                        local multiply = CardEffect.multiply

                                                                                                        local ImperiumCard = {
                                                                                                            -- starter: base
                                                                                                            duneTheDesertPlanet = {agentIcons = {'yellow'}, reveal = {persuasion(1)}, starter = true},
                                                                                                            seekAllies = {agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, starter = true},
                                                                                                            signetRing = {agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}, starter = true},
                                                                                                            diplomacy = {agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1)}, starter = true},
                                                                                                            reconnaissance = {agentIcons = {'blue'}, reveal = {persuasion(1)}, starter = true},
                                                                                                            convincingArgument = {reveal = {persuasion(2)}, starter = true},
                                                                                                            dagger = {agentIcons = {'green', 'blue'}, reveal = {sword(1)}, starter = true},
                                                                                                            -- starter: ix
                                                                                                            controlTheSpice = {agentIcons = {'yellow'}, reveal = {persuasion(1), spice(1)}, starter = true},
                                                                                                            -- starter: immortality
                                                                                                            experimentation = {agentIcons = {'yellow'}, reveal = {persuasion(1), specimen(1)}, starter = true},
                                                                                                            -- reserve
                                                                                                            foldspace = {cost = 0, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen', 'green', 'blue', 'yellow'}},
                                                                                                            prepareTheWay = {factions = {'beneGesserit'}, cost = 2, agentIcons = {'green', 'blue'}, reveal = {persuasion(2)}},
                                                                                                            theSpiceMustFlow = {factions = {'spacingGuild'}, cost = 9, acquireBonus = {vp(1)}, reveal = {spice(1)}},
                                                                                                            -- base
                                                                                                            arrakisRecruiter = {cost = 2, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            assassinationMission = {cost = 1, reveal = {sword(1), solari(1)}},
                                                                                                            beneGesseritInitiate = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}},
                                                                                                            beneGesseritSister = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'beneGesserit', 'green'}, reveal = choice(1, {{sword(2)}, {persuasion(2)}})},
                                                                                                            carryall = {cost = 5, agentIcons = {'yellow'}, reveal = {persuasion(1), spice(1)}},
                                                                                                            chani = {factions = {'fremen'}, cost = 5, acquireBonus = {water(1)}, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(2), 'Retreat any # of troops'}},
                                                                                                            choamDirectorship = {cost = 8, acquireBonus = {'4x inf all'}, reveal = {solari(3)}},
                                                                                                            crysknife = {factions = {'fremen'}, cost = 3, agentIcons = {'fremen', 'yellow'}, reveal = {sword(1), influence(fremenBond(1), 'fremen')}},
                                                                                                            drYueh = {cost = 1, agentIcons = {'blue'}, reveal = {persuasion(1)}},
                                                                                                            duncanIdaho = {cost = 4, agentIcons = {'blue'}, reveal = {sword(2), water(1)}},
                                                                                                            fedaykinDeathCommando = {factions = {'fremen'}, cost = 3, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(fremenBond(3))}},
                                                                                                            firmGrip = {factions = {'emperor'}, cost = 4, agentIcons = {'emperor', 'green'}, reveal = {persuasion(emperorAlliance(4))}},
                                                                                                            fremenCamp = {factions = {'fremen'}, cost = 4, agentIcons = {'yellow'}, reveal = {persuasion(2), sword(1)}},
                                                                                                            geneManipulation = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'green', 'blue'}, reveal = {persuasion(2)}},
                                                                                                            guildAdministrator = {factions = {'spacingGuild'}, cost = 2, agentIcons = {'spacingGuild', 'yellow'}, reveal = {persuasion(1)}},
                                                                                                            guildAmbassador = {factions = {'spacingGuild'}, cost = 4, agentIcons = {'green'}, reveal = {spacingGuildAlliance('-3 Sp -> +1 VP')}},
                                                                                                            guildBankers = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'emperor', 'spacingGuild', 'green'}, reveal = {'SMF costs 3 less this turn'}},
                                                                                                            gunThopter = {cost = 4, agentIcons = {'blue', 'yellow'}, reveal = {sword(3), 'may deploy 1x troop from garrison'}},
                                                                                                            gurneyHalleck = {cost = 6, agentIcons = {'blue'}, reveal = {persuasion(2), '-3 Sol -> +2 troops may deploy to conflict'}},
                                                                                                            imperialSpy = {factions = {'emperor'}, cost = 2, agentIcons = {'emperor'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            kwisatzHaderach = {factions = {'beneGesserit'}, cost = 8, agentIcons = {'any'}, infiltrate = true},
                                                                                                            ladyJessica = {factions = {'beneGesserit'}, cost = 7, acquireBonus = {influence(1)}, agentIcons = {'beneGesserit', 'green', 'blue', 'yellow'}, reveal = {persuasion(3), sword(1)}},
                                                                                                            lietKynes = {factions = {'emperor', 'fremen'}, cost = 5, acquireBonus = {influence(1, 'emperor')}, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(perFremen(2))}},
                                                                                                            missionariaProtectiva = {factions = {'beneGesserit'}, cost = 1, agentIcons = {'blue'}, reveal = {persuasion(1)}},
                                                                                                            otherMemory = {factions = {'beneGesserit'}, cost = 4, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(2)}},
                                                                                                            piterDeVries = {cost = 5, agentIcons = {'green', 'blue'}, reveal = {persuasion(3), sword(1)}},
                                                                                                            powerPlay = {cost = 5, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}},
                                                                                                            reverendMotherMohiam = {factions = {'emperor', 'beneGesserit'}, cost = 6, agentIcons = {'emperor', 'beneGesserit'}, reveal = {persuasion(2), spice(2)}},
                                                                                                            sardaukarInfantry = {factions = {'emperor'}, cost = 1, reveal = {persuasion(1), sword(2)}},
                                                                                                            sardaukarLegion = {factions = {'emperor'}, cost = 5, agentIcons = {'emperor', 'green'}, reveal = {persuasion(1), 'deploy up to 3 troops from garrison'}},
                                                                                                            scout = {cost = 1, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(1), 'Retreat up to 2 troops'}},
                                                                                                            shiftingAllegiances = {cost = 3, agentIcons = {'green', 'yellow'}, reveal = {persuasion(2)}},
                                                                                                            sietchReverendMother = {factions = {'beneGesserit', 'fremen'}, cost = 4, agentIcons = {'beneGesserit', 'fremen'}, reveal = {persuasion(fremenBond(3)), spice(1)}},
                                                                                                            smugglersThopter = {factions = {'spacingGuild'}, cost = 4, agentIcons = {'yellow'}, reveal = {persuasion(1), spice(1)}},
                                                                                                            spaceTravel = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'spacingGuild'}, reveal = {persuasion(2)}},
                                                                                                            spiceHunter = {factions = {'fremen'}, cost = 2, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(1), sword(1), spice(fremenBond(1))}},
                                                                                                            spiceSmugglers = {factions = {'spacingGuild'}, cost = 2, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            stilgar = {factions = {'fremen'}, cost = 5, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(2), sword(3)}},
                                                                                                            testOfHumanity = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'beneGesserit', 'green', 'blue'}, reveal = {persuasion(2)}},
                                                                                                            theVoice = {factions = {'beneGesserit'}, cost = 2, acquireBonus = {voice()}, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(2)}},
                                                                                                            thufirHawat = {cost = 5, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen', 'blue', 'yellow'}, reveal = {persuasion(1), intrigue(1)}},
                                                                                                            wormRiders = {factions = {'fremen'}, cost = 6, agentIcons = {'blue', 'yellow'}, reveal = {sword(fremenFriendship(4)), sword(fremenAlliance(2))}},
                                                                                                            opulence = {factions = {'emperor'}, cost = 6, agentIcons = {'emperor'}, reveal = {persuasion(1), optional({solari(-6), vp(1)})}},
                                                                                                            -- ix
                                                                                                            appropriate = {factions = {'emperor'}, cost = 5, acquireBonus = {shipment(1)}, agentIcons = {'green', 'yellow'}, reveal = {persuasion(2)}},
                                                                                                            bountyHunter = {cost = 1, agentIcons = {'blue'}, infiltrate = true, reveal = {persuasion(1), sword(1)}},
                                                                                                            choamDelegate = {cost = 1, agentIcons = {'yellow'}, infiltrate = true, reveal = {solari(3)}},
                                                                                                            courtIntrigue = {factions = {'emperor'}, cost = 2, agentIcons = {'emperor'}, infiltrate = true, reveal = {persuasion(1), sword(1)}},
                                                                                                            desertAmbush = {factions = {'fremen'}, cost = 3, agentIcons = {'yellow'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            embeddedAgent = {factions = {'beneGesserit'}, cost = 5, agentIcons = {'green'}, infiltrate = true, reveal = {persuasion(1), intrigue(1)}},
                                                                                                            esmarTuek = {factions = {'spacingGuild'}, cost = 5, agentIcons = {'blue', 'yellow'}, reveal = {spice(2), solari(2)}},
                                                                                                            freighterFleet = {cost = 2, agentIcons = {'yellow'}, reveal = {shipment(1)}},
                                                                                                            fullScaleAssault = {factions = {'emperor'}, cost = 8, acquireBonus = {dreadnought(1)}, agentIcons = {'emperor', 'blue'}, reveal = {persuasion(2), sword(perDreadnoughtInConflict(3))}},
                                                                                                            guildAccord = {factions = {'spacingGuild'}, cost = 6, agentIcons = {'spacingGuild'}, infiltrate = true, reveal = {water(1), spice(spacingGuildAlliance(3))}},
                                                                                                            guildChiefAdministrator = {factions = {'spacingGuild'}, cost = 4, agentIcons = {'spacingGuild', 'blue', 'yellow'}, reveal = {persuasion(1), shipment(1)}},
                                                                                                            imperialBashar = {factions = {'emperor'}, cost = 4, agentIcons = {'blue'}, reveal = {persuasion(1), sword(2), sword(perSwordCard(1, true))}},
                                                                                                            imperialShockTrooper = {factions = {'emperor'}, cost = 3, reveal = {persuasion(1), sword(2), sword(agentInEmperorSpace(3))}},
                                                                                                            inTheShadows = {factions = {'beneGesserit'}, cost = 2, agentIcons = {'green', 'blue'}, reveal = {influence(1, 'spacingGuild')}},
                                                                                                            ixGuildCompact = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'spacingGuild'}, reveal = {negotiator(2)}},
                                                                                                            ixianEngineer = {cost = 5, agentIcons = {'yellow'}, reveal = {'If 3 Tech: Trash this card -> +1 VP'}},
                                                                                                            jamis = {factions = {'fremen'}, cost = 2, agentIcons = {'fremen'}, infiltrate = true, reveal = {persuasion(1), sword(2)}},
                                                                                                            landingRights = {factions = {'spacingGuild'}, cost = 4, agentIcons = {'blue'}, reveal = {persuasion(2)}},
                                                                                                            localFence = {cost = 3, agentIcons = {'blue'}, reveal = {persuasion(2)}},
                                                                                                            negotiatedWithdrawal = {cost = 4, acquireBonus = {troop(1)}, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(2), 'Retreat 3x troops -> +1 inf ?'}},
                                                                                                            satelliteBan = {factions = {'spacingGuild', 'fremen'}, cost = 5, agentIcons = {'spacingGuild', 'fremen'}, reveal = {persuasion(1), 'Retreat up to 2 troops'}},
                                                                                                            sayyadina = {factions = {'beneGesserit', 'fremen'}, cost = 3, agentIcons = {'beneGesserit', 'fremen'}, reveal = {persuasion(fremenBond(3))}},
                                                                                                            shaiHulud = {factions = {'fremen'}, cost = 7, acquireBonus = {trash(1)}, agentIcons = {'yellow'}, reveal = {sword(fremenBond(5))}},
                                                                                                            spiceTrader = {factions = {'fremen'}, cost = 4, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(2), sword(1)}},
                                                                                                            treachery = {cost = 6, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {deploy(2)}},
                                                                                                            truthsayer = {factions = {'emperor', 'beneGesserit'}, cost = 3, agentIcons = {'emperor', 'beneGesserit', 'green'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            waterPeddler = {cost = 1, acquireBonus = {water(1)}, reveal = {water(1)}},
                                                                                                            webOfPower = {factions = {'beneGesserit'}, cost = 4, agentIcons = {'beneGesserit'}, infiltrate = true, reveal = {persuasion(1), influence(1)}},
                                                                                                            weirdingWay = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(2)}},
                                                                                                            -- immortality
                                                                                                            beneTleilaxLab = {cost = 2, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), spice(oneHelix(1))}},
                                                                                                            beneTleilaxResearcher = {cost = 4, agentIcons = {'green'}, reveal = {persuasion(1), persuasion(oneHelix(1)), persuasion(twoHelices(1))}},
                                                                                                            blankSlate = {cost = 1, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}},
                                                                                                            clandestineMeeting = {factions = {'beneGesserit'}, cost = 4, reveal = {persuasion(2)}},
                                                                                                            corruptSmuggler = {factions = {'spacingGuild', 'fremen'}, cost = 3, agentIcons = {'spacingGuild', 'yellow'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            dissectingKit = {cost = 2, agentIcons = {'green', 'blue'}, reveal = {persuasion(1), beetle(oneHelix(1))}},
                                                                                                            forHumanity = {factions = {'beneGesserit'}, cost = 7, agentIcons = {'beneGesserit', 'green', 'yellow'}, reveal = {persuasion(2), beneGesseritAlliance('-2 Inf --> +1 VP')}},
                                                                                                            highPriorityTravel = {factions = {'spacingGuild'}, cost = 1, agentIcons = {'green', 'yellow'}, reveal = {persuasion(1), solari(1)}},
                                                                                                            imperiumCeremony = {factions = {'emperor', 'spacingGuild'}, cost = 6, agentIcons = {'emperor', 'spacingGuild', 'green'}, reveal = {persuasion(3)}},
                                                                                                            interstellarConspiracy = {cost = 4, agentIcons = {'blue'}, reveal = {persuasion(2)}},
                                                                                                            keysToPower = {factions = {'spacingGuild', 'beneGesserit'}, cost = 5, agentIcons = {'spacingGuild', 'beneGesserit', 'green'}, reveal = {persuasion(2)}},
                                                                                                            lisanAlGaib = {factions = {'beneGesserit', 'fremen'}, cost = 4, acquireBonus = {spice(1)}, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(1), sword(fremenBond(2))}},
                                                                                                            longReach = {factions = {'beneGesserit'}, cost = 6, reveal = {persuasion(1), intrigue(1)}},
                                                                                                            occupation = {factions = {'spacingGuild'}, cost = 8, acquireBonus = {troop(3)}, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen', 'blue', 'yellow'}, reveal = {water(1), spice(1), troop(1)}},
                                                                                                            organMerchants = {cost = 3, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), solari(1)}},
                                                                                                            plannedCoupling = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'beneGesserit'}, reveal = {persuasion(1)}},
                                                                                                            replacementEyes = {cost = 5, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            sardaukarQuartermaster = {factions = {'emperor'}, cost = 2, agentIcons = {'green', 'blue'}, reveal = {persuasion(1), sword(2)}},
                                                                                                            shadoutMapes = {factions = {'fremen'}, cost = 2, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(1), sword(1), 'May deploy or retreat 1 of your Troops'}},
                                                                                                            showOfStrength = {factions = {'emperor', 'fremen'}, cost = 3, reveal = {persuasion(1), sword(2)}},
                                                                                                            spiritualFervor = {cost = 3, acquireBonus = {research(1)}, agentIcons = {'yellow'}, reveal = {persuasion(1), specimen(1)}},
                                                                                                            stillsuitManufacturer = {factions = {'fremen'}, cost = 5, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(1), spice(fremenBond(2))}},
                                                                                                            throneRoomPolitics = {factions = {'emperor', 'beneGesserit'}, cost = 4, agentIcons = {'emperor'}, reveal = {persuasion(1), influence(1, 'beneGesserit')}},
                                                                                                            tleilaxuMaster = {cost = 5, agentIcons = {'green', 'yellow'}, reveal = {persuasion(1), research(2)}},
                                                                                                            tleilaxuSurgeon = {cost = 3, agentIcons = {'emperor', 'blue'}, reveal = {persuasion(2), 'Lose 2 Troops--> +2 Specimen'}},
                                                                                                            -- tleilaxu
                                                                                                            reclaimedForces = {cost = 3, tleilaxu = true, acquireBonus = choice(1, {{troop(2)}, {beetle(1)}})},
                                                                                                            usurp = {cost = 4, tleilaxu = true, reveal = {persuasion(1), sword(1), specimen(1)}},
                                                                                                            twistedMentat = {cost = 4, tleilaxu = true, agentIcons = {'green', 'blue'}, reveal = {persuasion(1), sword(1), specimen(1)}},
                                                                                                            beguilingPheromones = {cost = 3, tleilaxu = true, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            stitchedHorror = {cost = 3, tleilaxu = true, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            unnaturalReflexes = {cost = 3, tleilaxu = true, agentIcons = {'yellow'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            ghola = {cost = 3, tleilaxu = true, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            scientificBreakthrough = {cost = 3, tleilaxu = true, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            sligFarmer = {cost = 2, tleilaxu = true, agentIcons = {'green'}, reveal = {persuasion(1)}},
                                                                                                            fromTheTanks = {cost = 2, tleilaxu = true, agentIcons = {'green'}, reveal = {persuasion(1)}},
                                                                                                            faceDancer = {factions = {'emperor', 'spacingGuild', 'fremen'}, cost = 2, tleilaxu = true, agentIcons = {'emperor', 'spacingGuild', 'fremen'}, reveal = {persuasion(1)}},
                                                                                                            guildImpersonator = {factions = {'spacingGuild'}, cost = 2, tleilaxu = true, agentIcons = {'spacingGuild'}, reveal = {persuasion(1)}},
                                                                                                            chairdog = {cost = 2, tleilaxu = true, agentIcons = {'blue'}, reveal = {persuasion(1)}},
                                                                                                            tleilaxuInfiltrator = {cost = 2, tleilaxu = true, agentIcons = {'blue'}, reveal = {persuasion(1)}},
                                                                                                            subjectX137 = {cost = 2, tleilaxu = true, acquireBonus = {beetle(1)}, agentIcons = {'green', 'yellow'}, reveal = {persuasion(1)}},
                                                                                                            corrinoGenes = {factions = {'emperor'}, cost = 1, tleilaxu = true, acquireBonus = {solari(2)}, agentIcons = {'emperor'}, reveal = {persuasion(1)}},
                                                                                                            contaminator = {factions = {'fremen'}, cost = 1, tleilaxu = true, agentIcons = {'fremen'}, reveal = {persuasion(1)}},
                                                                                                            industrialEspionage = {cost = 1, tleilaxu = true, agentIcons = {'green'}, reveal = {persuasion(1)}},
                                                                                                            faceDancerInitiate = {factions = {'emperor', 'spacingGuild', 'fremen'}, cost = 1, tleilaxu = true, agentIcons = {'emperor', 'spacingGuild', 'fremen'}, reveal = {persuasion(1)}},
                                                                                                            -- promo
                                                                                                            boundlessAmbition = {cost = 5, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {'Acquire a card that costs 5 or less'}},
                                                                                                            duncanLoyalBlade = {cost = 5, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(1), sword(2), 'trash this--> deploy/retreat any # of troops'}},
                                                                                                            jessicaOfArrakis = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'yellow'}, reveal = {persuasion(1), sword(2)}},
                                                                                                            piterGeniusAdvisor = {cost = 3, tleilaxu = true, agentIcons = {'green', 'yellow'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            -- uprising
                                                                                                            unswervingLoyalty = {factions = {'fremen'}, cost = 1, reveal = {persuasion(1), troop(1), 'deploy/reply 1 troop if fremen bond'}},
                                                                                                            spaceTimeFolding = {factions = {"spacingGuild"}, cost = 1, agentIcons = {"spacingGuild"}, reveal = {persuasion(1)}},
                                                                                                            weirdingWoman = {factions = {"beneGesserit"}, cost = 1, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            sardaukarSoldier = {factions = {"emperor"}, cost = 1, agentIcons = {'blue'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            smugglerHarvester = {factions = {"spacingGuild"}, cost = 1, agentIcons = {'yellow'}, reveal = {persuasion(1)}},
                                                                                                            makerKeeper = {factions = {"beneGesserit", "fremen"}, cost = 2, agentIcons = {'blue'}, reveal = {persuasion(2)}},
                                                                                                            reliableInformant = {factions = {"spacingGuild"}, cost = 2, agentIcons = {"spacingGuild"}, reveal = {persuasion(1), solari(1)}},
                                                                                                            hiddenMissive = {factions = {"beneGesserit"}, cost = 2, agentIcons = {'green'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            wheelsWithinWheels = {factions = {"emperor", "spacingGuild"}, cost = 2, spy = true, reveal = {persuasion(1), spy(1)}},
                                                                                                            fedaykinStilltent = {factions = {"fremen"}, cost = 2, agentIcons = {'yellow'}, reveal = {water(1)}},
                                                                                                            imperialSpymaster = {factions = {'emperor'}, cost = 2, agentIcons = {'emperor'}, spy = true, reveal = {persuasion(1), sword(1)}},
                                                                                                            spyNetwork = {factions = {'emperor', 'spacingGuild'}, cost = 2, acquireBonus = {spy(1)}, reveal = {persuasion(2), sword(1), 'spy --> treachery if 2 spies on board'}},
                                                                                                            desertSurvival = {factions = {'fremen'}, cost = 2, agentIcons = {'yellow'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            undercoverAsset = {factions = {'emperor', 'spacingGuild'}, cost = 2, agentIcons = {'green', 'blue', 'yellow'}, reveal = choice(1, {{spy(1)}, {sword(2)}})},
                                                                                                            beneGesseritOperative = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'beneGesserit'}, reveal = {persuasion(1), persuasion(twoSpies(2))}},
                                                                                                            maulaPistol = {factions = {'fremen'}, cost = 3, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            thumper = {factions = {'fremen'}, cost = 3, agentIcons = {'yellow'}, reveal = {persuasion(1), spice(1)}},
                                                                                                            nothernWatermaster = {factions = {'fremen'}, cost = 3, agentIcons = {'blue'}, reveal = {persuasion(1), spice(fremenBond(2))}},
                                                                                                            covertOperation = {cost = 3, spy = true, reveal = {spy(2)}},
                                                                                                            doubleAgent = {factions = {'emperor', 'spacingGuild'}, cost = 3, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            guildEnvoy = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1)}},
                                                                                                            rebelSupplier = {factions = {'fremen'}, cost = 3, agentIcons = {'blue'}, reveal = {spice(1), sword(1)}},
                                                                                                            calculusOfPower = {factions = {'emperor'}, cost = 3, spy = true, agentIcons = {'blue'}, reveal = {persuasion(2), 'trash emperor card in play --> sword(3)'}},
                                                                                                            guildSpy = {factions = {'spacingGuild'}, cost = 3, acquireBonus = {spy(1)}, spy = true, reveal = {persuasion(2), 'TSMF --> +1 infl / faction with agent'}},
                                                                                                            dangerousRhetoric = {cost = 3, spy = true, agentIcons = {'green'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            branchingPath = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'beneGesserit', "blue"}, reveal = {persuasion(2)}},
                                                                                                            ecologicalTestingStation = {factions = {'fremen'}, cost = 3, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(1), water(fremenBond(1))}},
                                                                                                            theBeastSpoils = {factions = {'emperor'}, cost = 3, agentIcons = {'blue'}, reveal = {sword(3)}},
                                                                                                            smugglerHaven = {factions = {'spacingGuild'}, cost = 4, agentIcons = {'spacingGuild', 'yellow'}, reveal = {persuasion(1), spice(spyMakerSpace(2))}},
                                                                                                            shishakli = {factions = {'fremen'}, cost = 4, agentIcons = {'blue', 'yellow'}, reveal = {sword(2), influence(fremenBond(1), 'fremen')}},
                                                                                                            paracompass = {cost = 4, agentIcons = {'blue'}, reveal = {persuasion(seat(2)), persuasion(multiply(seat(1), swordmaster(1)))}},
                                                                                                            sardaukarCoordination = {factions = {'emperor'}, cost = 4, agentIcons = {'emperor', 'green'}, reveal = {persuasion(2), sword(perEmperor(1))}},
                                                                                                            truthtrance = {factions = {'beneGesserit'}, cost = 4, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1)}},
                                                                                                            publicSpectable = {factions = {'emperor'}, cost = 4, spy = true, reveal = {persuasion(1), spy(1)}},
                                                                                                            southernElders = {factions = {'beneGesserit', 'fremen'}, cost = 4, agentIcons = {'beneGesserit', 'fremen'}, reveal = {water(1), persuasion(fremenBond(2))}},
                                                                                                            treadInDarkness = {factions = {'beneGesserit'}, cost = 4, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(2), sword(1)}},
                                                                                                            spacingGuildFavor = {factions = {'spacingGuild'}, cost = 5, agentIcons = {'spacingGuild', 'yellow'}, reveal = {persuasion(2), 'spice(-3) -> influence(1)'}},
                                                                                                            capturedMentat = {cost = 5, agentIcons = {'green', 'yellow'}, reveal = {persuasion(1), 'influence(-1) --> influence(1)'}},
                                                                                                            subversiveAdvisor = {cost = 5, acquireBonus = {spy(1)}, spy = true, reveal = {persuasion(1)}},
                                                                                                            leadership = {factions = {'fremen'}, cost = 5, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(2), sword(1), sword(perSwordCard(1, true))}},
                                                                                                            inHighPlaces = {factions = {'emperor', 'beneGesserit'}, cost = 5, acquireBonus = {spy(1)}, agentIcons = {'emperor', 'beneGesserit'}, reveal = {persuasion(2), optional({spy(-2), persuasion(3)})}},
                                                                                                            strikeFleet = {cost = 5, acquireBonus = {spy(1)}, spy = true, reveal = {persuasion(1), sword(3)}},
                                                                                                            trecherousManeuver = {factions = {'emperor'}, cost = 5, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1), intrigue(1)}},
                                                                                                            chaniCleverTactician = {factions = {'fremen'}, cost = 5, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(fremenBond(2)), 'reply 2 troops --> sword(4)'}},
                                                                                                            junctionHeadquarters = {factions = {'spacingGuild'}, cost = 6, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1), water(1), troop(1)}},
                                                                                                            corrinthCity = {factions = {'emperor'}, cost = 6, agentIcons = {'emperor', 'green'}, reveal = {solari(seat(5)), choice(1, {{solari(5)}, 'solari(-5) --> takeHighCouncilSeat(1)'})}},
                                                                                                            stilgarTheDevoted = {factions = {'fremen'}, cost = 6, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(perFremen(2))}},
                                                                                                            desertPower = {factions = {'fremen'}, cost = 6, agentIcons = {'yellow'}, reveal = {choice(1, {{persuasion(2)}, {'hook: water(1) -> worm(1)'}})}},
                                                                                                            arrakisRevolt = {factions = {'fremen'}, cost = 6, acquireBonus = {troop(1)}, agentIcons = {'blue'}, reveal = {persuasion(1), sword(3)}},
                                                                                                            priceIsNoObject = {factions = {'emperor', 'beneGesserit'}, cost = 6, acquireBonus = {solari(2)}, agentIcons = {'emperor', 'beneGesserit'}, reveal = {persuasion(2), solari(2)}},
                                                                                                            longLiveTheFighters = {factions = {'fremen'}, cost = 7, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(2), sword(3)}},
                                                                                                            overthrow = {cost = 8, acquireBonus = {intrigue(1)}, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(2), sword(2), troop(1)}},
                                                                                                            steersman = {factions = {'spacingGuild'}, cost = 8, acquireBonus = {influence(1, 'spacingGuild')}, agentIcons = {'spacingGuild', 'green', 'blue', 'yellow'}, reveal = {persuasion(2), spice(2)}},
                                                                                                            -- contract
                                                                                                            cargoRunner = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}},
                                                                                                            deliveryAgreement = {factions = {'spacingGuild'}, cost = 5, agentIcons = {'blue'}, reveal = {choice(1, {spice(1), 'contract(4), trash --> vp(1)'})}},
                                                                                                            priorityContracts = {factions = {'spacingGuild'}, cost = 6, agentIcons = {'green', 'yellow'}, reveal = {choice(1, {spice(2), 'contract(4), trash --> vp(1)'})}},
                                                                                                            interstellarTrade = {factions = {'spacingGuild'}, cost = 7, acquireBonus = {contract(1)}, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(perFulfilledContract(1))}},
                                                                                                            -- commander
                                                                                                            emperorConvincingArgument = {reveal = {persuasion(2)}},
                                                                                                            emperorCorrinoMight = {factions = {'emperor'}, agentIcons = {'green'}, reveal = {sword(1), 'spice(3), trash --> troop(2) / ally'}},
                                                                                                            emperorCriticalShipments = {agentIcons = {'yellow'}, reveal = {persuasion(2)}},
                                                                                                            emperorDemandResults = {factions = {'emperor'}, agentIcons = {'green'}, reveal = {sword(1)}},
                                                                                                            emperorDevastatingAssault = {agentIcons = {'yellow'}, reveal = {persuasion(1), 'swordmasterBonus: solari(3) --> sword(5)'}},
                                                                                                            emperorImperialOrnithopter = {factions = {'emperor'}, agentIcons = {'blue'}, reveal = {persuasion(1), solari(1)}},
                                                                                                            emperorSignetRing = {agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}},
                                                                                                            emperorSeekAllies = {agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}},
                                                                                                            emperorImperialTent = {factions = {'emperor'}, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1)}},
                                                                                                            muadDibCommandRespect = {agentIcons = {'blue'}, reveal = {persuasion(1)}},
                                                                                                            muadDibConvincingArgument = {reveal = {persuasion(2)}},
                                                                                                            muadDibDemandAttention = {agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}, reveal = {persuasion(1)}},
                                                                                                            muadDibDesertCall = {agentIcons = {'yellow'}, reveal = {persuasion(1)}},
                                                                                                            muadDibLimitedLandsraadAccess = {agentIcons = {'green'}, reveal = {spice(1), sword(1)}},
                                                                                                            muadDibSeekAllies = {agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'fremen'}},
                                                                                                            muadDibUsul = {factions = {'fremen'}, agentIcons = {'blue'}, reveal = {persuasion(2)}},
                                                                                                            muadDibThreatenSpiceProduction = {agentIcons = {'yellow'}, reveal = {persuasion(1)}},
                                                                                                            muadDibSignetRing = {agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(1)}},
                                                                                                            -- bloodlines imperium
                                                                                                            -- bloodlines command
                                                                                                            bl_Bombast = {factions = {'emperor'}, cost = 1, agentIcons = {'green'}, reveal = {persuasion(1), 'command: solari(3) and trash this card'}},
                                                                                                            bl_Sandwalk = {factions = {'fremen'}, cost = 1, agentIcons = {'yellow'}, reveal = {persuasion(1), sword(1), persuasion(fremenBond(1))}},
                                                                                                            bl_DisruptionTactics = {factions = {'fremen'}, cost = 2, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(1), 'trash this card --> combat icon'}},
                                                                                                            bl_UrgentShigawire = {factions = {'beneGesserit'}, cost = 2, agentIcons = {'beneGesserit', 'blue'}, reveal = {persuasion(1)}},
                                                                                                            bl_EliminateAllies = {factions = {'emperor'}, cost = 2, spy = true, reveal = {persuasion(1), sword(1)}},
                                                                                                            bl_DeliverLogistics = {factions = {'spacingGuild'}, cost = 2, reveal = {choice(1, {persuasion(1), 'contract(1)'})}},
                                                                                                            bl_CommandCenter = {factions = {'emperor'}, cost = 3, agentIcons = {'emperor', 'blue'}, reveal = {persuasion(1), 'retreat 2 troops --> persuasion(2)'}},
                                                                                                            -- bloodlines command
                                                                                                            bl_EngineeredMiracle = {factions = {'beneGesserit'}, cost = 3, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(1), 'command: trash this card --> acquire card on imperium row'}},
                                                                                                            -- bloodlines command
                                                                                                            bl_IBelieve = {factions = {'fremen'}, cost = 3, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(1), 'command: troop(2)'}},
                                                                                                            bl_LitanyAgainstFear = {factions = {'beneGesserit'}, cost = 3, reveal = {persuasion(2)}},
                                                                                                            bl_EliteForces = {factions = {'emperor', 'spacingGuild'}, cost = 3, agentIcons = {'spacingGuild', 'emperor'}, reveal = {persuasion(1), sword(1)}},
                                                                                                            bl_ArrakisObserver = {factions = {'spacingGuild'}, cost = 3, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), 'lift spy --> sword(3)'}},
                                                                                                            -- bloodlines command
                                                                                                            bl_IntelligenceTraining = {factions = {'emperor'}, cost = 3, acquireBonus = {spy(1)}, agentIcons = {'green', 'blue'}, reveal = {persuasion(1), sword(1), 'command: spy(1)'}},
                                                                                                            -- bloodlines command
                                                                                                            bl_RuthlessLeadership = {factions = {'emperor'}, cost = 4, agentIcons = {'blue', 'yellow'}, reveal = {persuasion(1), sword(1), 'command: combat icon'}},
                                                                                                            bl_FremenWarName = {factions = {'fremen'}, cost = 4, agentIcons = {'fremen', 'yellow'}, reveal = {persuasion(2), sword(fremenBond(2))}},
                                                                                                            bl_SardaukarStandard = {factions = {'emperor'}, cost = 4, agentIcons = {'emperor', 'blue'}, reveal = {persuasion(2), troop(1)}},
                                                                                                            -- bloodlines command
                                                                                                            bl_ShroudedCounsel = {factions = {'beneGesserit'}, cost = 4, spy = true, reveal = {persuasion(1), 'command: trash(1)'}},
                                                                                                            bl_CorruptBureaucrat = {factions = {'spacingGuild'}, cost = 4, spy = true, agentIcons = {'spacingGuild', 'green'}, reveal = {persuasion(2)}},
                                                                                                            bl_IxianAmbassador = {cost = 4, spy = true, agentIcons = {'green'}, reveal = {persuasion(1), '2+ tech tiles --> influence(1)'}},
                                                                                                            -- bloodlines sardaukar commander in conflict
                                                                                                            bl_QuashRebellion = {factions = {'emperor'}, cost = 5, agentIcons = {'emperor', 'spacingGuild', 'green'}, reveal = {sword(2), persuasion(sardaukarCommanderInConflict(2))}},
                                                                                                            -- bloodlines command
                                                                                                            bl_SouthernFaith = {factions = {'fremen'}, cost = 5, agentIcons = {'fremen', 'blue'}, reveal = {persuasion(1), sword(2), 'command: spice(2)'}},
                                                                                                            bl_HolyWar = {factions = {'fremen'}, cost = 5, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'green'}, reveal = {persuasion(1), troop(1), 'fremen bond: combat icon'}},
                                                                                                            bl_MercantileAffairs = {factions = {'beneGesserit'}, cost = 5, acquireBonus = {contract(1)}, spy = true, agentIcons = {'beneGesserit', 'blue', 'yellow'}, reveal = {persuasion(2)}},
                                                                                                            -- bloodlines command
                                                                                                            bl_PointingTheWay = {factions = {'fremen'}, cost = 6, agentIcons = {'fremen', 'blue', 'yellow'}, reveal = {persuasion(1), sword(2), 'command: influence(1)'}},
                                                                                                            bl_ChoamDemands = {factions = {'spacingGuild'}, cost = 6, agentIcons = {'green', 'blue', 'yellow'}, reveal = {'contract(4), trash --> influence(1) for all factions'}},
                                                                                                            -- bloodlines 4+ troop in garrison bonus
                                                                                                            bl_ImperialThroneship = {factions = {'emperor'}, cost = 7, acquireBonus = {influence(1, 'emperor')}, agentIcons = {'emperor', 'spacingGuild', 'beneGesserit', 'green', 'blue', 'yellow'}, reveal = {persuasion(2), persuasion(imperialThroneship(1)), solari(imperialThroneship(3))}},
                                                                                                            bl_PossibleFutures = {factions = {'fremen'}, cost = 8, acquireBonus = {water(1)}, agentIcons = {'green', 'blue', 'yellow'}, reveal = {persuasion(2), water(1)}},
                                                                                                        }

                                                                                                        function ImperiumCard._resolveCard(card)
                                                                                                            assert(card)
                                                                                                            local cardName = Helper.getID(card)
                                                                                                            if cardName then
                                                                                                                local cardInfo = ImperiumCard[cardName]
                                                                                                                assert(cardInfo, "Unknown card (empty name usually means that the card is stacked with another): " .. tostring(cardName))
                                                                                                                cardInfo.name = cardName

                                                                                                                -- For identity tests.
                                                                                                                local instantiatedCardInfo = Helper.shallowCopy(cardInfo)
                                                                                                                instantiatedCardInfo.cardObject = card

                                                                                                                return instantiatedCardInfo
                                                                                                            else
                                                                                                                error("No card info!")
                                                                                                            end
                                                                                                        end

                                                                                                        function ImperiumCard.evaluateReveal(color, playedCards, revealedCards, artillery)
                                                                                                            return ImperiumCard.evaluateReveal2(
                                                                                                                color,
                                                                                                                Helper.mapValues(playedCards, ImperiumCard._resolveCard),
                                                                                                                Helper.mapValues(revealedCards, ImperiumCard._resolveCard),
                                                                                                            artillery)
                                                                                                        end

                                                                                                        -- TODO Rework this!
                                                                                                        function ImperiumCard.evaluateReveal2(color, playedCards, revealedCards, artillery)
                                                                                                            local result = {}

                                                                                                            local context = {
                                                                                                                color = color,
                                                                                                                playedCards = playedCards,
                                                                                                                revealedCards = revealedCards,
                                                                                                                -- This mock up is enough since reveal effects only cover persuasion and strength (or other resources).
                                                                                                                player = {
                                                                                                                    resources = function (_, resourceName, amount)
                                                                                                                        result[resourceName] = (result[resourceName] or 0) + amount
                                                                                                                    end,

                                                                                                                    drawIntrigues = function (_, amount)
                                                                                                                        result.intrigues = (result.intrigues or 0) + amount
                                                                                                                    end,

                                                                                                                    troops = function (_, from, to, amount)
                                                                                                                        if from == "supply" then
                                                                                                                            if to == "garrison" then
                                                                                                                                result.troops = (result.troops or 0) + amount
                                                                                                                            elseif to == "combat" then
                                                                                                                                result.fighters = (result.fighters or 0) + amount
                                                                                                                            elseif to == "negotiation" then
                                                                                                                                result.negotiators = (result.negotiators or 0) + amount
                                                                                                                            elseif to == "tanks" then
                                                                                                                                result.specimens = (result.specimens or 0) + amount
                                                                                                                            end
                                                                                                                        end
                                                                                                                    end
                                                                                                                }}

                                                                                                                for cardName, card in ipairs(context.revealedCards) do
                                                                                                                    if card.reveal then
                                                                                                                        context.card = card
                                                                                                                        context.cardName = cardName
                                                                                                                        for _, effect in ipairs(card.reveal) do
                                                                                                                            CardEffect.evaluate(context, effect)
                                                                                                                        end
                                                                                                                    end
                                                                                                                end

                                                                                                                if artillery then
                                                                                                                    context.card = nil
                                                                                                                    sword(perSwordCard(1))(context)
                                                                                                                end

                                                                                                                return result
                                                                                                            end

                                                                                                            function ImperiumCard.applyAcquireEffect(color, card)
                                                                                                                Types.assertIsPlayerColor(color)
                                                                                                                assert(card)

                                                                                                                local bonus = ImperiumCard._resolveCard(card).acquireBonus
                                                                                                                if bonus then
                                                                                                                    local context = {
                                                                                                                        color = color,
                                                                                                                        player = PlayBoard.getLeader(color),
                                                                                                                        cardName = Helper.getID(card),
                                                                                                                        card = card,
                                                                                                                    }

                                                                                                                    for _, bonusItem in ipairs(bonus) do
                                                                                                                        CardEffect.evaluate(context, bonusItem)
                                                                                                                    end
                                                                                                                end
                                                                                                            end

                                                                                                            function ImperiumCard.getTleilaxuCardCost(card)
                                                                                                                local cardInfo = ImperiumCard._resolveCard(card)
                                                                                                                assert(cardInfo.tleilaxu)
                                                                                                                return cardInfo.cost
                                                                                                            end

                                                                                                            function ImperiumCard.isStarterCard(card)
                                                                                                                local cardInfo = ImperiumCard._resolveCard(card)
                                                                                                                return cardInfo.starter or false
                                                                                                            end

                                                                                                            function ImperiumCard.isFactionCard(card, faction)
                                                                                                                if faction then
                                                                                                                    Types.assertIsFaction(faction)
                                                                                                                end
                                                                                                                local cardInfo = ImperiumCard._resolveCard(card)
                                                                                                                return cardInfo.factions and (not faction or Helper.isElementOf(faction, cardInfo.factions))
                                                                                                            end

                                                                                                            return ImperiumCard

                                                                                                        end)
                                                                                                        __bundle_register("HagalCard", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                            local Module = require("utils.Module")
                                                                                                            local Helper = require("utils.Helper")
                                                                                                            local Park = require("utils.Park")

                                                                                                            local MainBoard = Module.lazyRequire("MainBoard")
                                                                                                            local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                            local InfluenceTrack = Module.lazyRequire("InfluenceTrack")
                                                                                                            local TleilaxuRow = Module.lazyRequire("TleilaxuRow")
                                                                                                            local Types = Module.lazyRequire("Types")
                                                                                                            local Combat = Module.lazyRequire("Combat")
                                                                                                            local TurnControl = Module.lazyRequire("TurnControl")
                                                                                                            local Hagal = Module.lazyRequire("Hagal")
                                                                                                            local TechMarket = Module.lazyRequire("TechMarket")
                                                                                                            local Action = Module.lazyRequire("Action")

                                                                                                            local HagalCard = {
                                                                                                                cardStrengths = {
                                                                                                                    placeSpyYellow = 2,
                                                                                                                    placeSpyBlue = 2,
                                                                                                                    placeSpyGreen = 2,
                                                                                                                    sardaukar = 4,
                                                                                                                    dutifulService = 2,
                                                                                                                    heighliner = 5,
                                                                                                                    deliverSuppliesAndHeighliner = 1,
                                                                                                                    espionage = 2,
                                                                                                                    secrets = 1,
                                                                                                                    desertTactics = 3,
                                                                                                                    fremkit = 1,
                                                                                                                    assemblyHall = 0,
                                                                                                                    gatherSupport1 = 0,
                                                                                                                    gatherSupport2 = 2,
                                                                                                                    acceptContractAndShipping1 = 2,
                                                                                                                    acceptContractAndShipping2 = 2,
                                                                                                                    researchStation = 2,
                                                                                                                    spiceRefinery = 1,
                                                                                                                    arrakeen = 1,
                                                                                                                    sietchTabr = 3,
                                                                                                                    haggaBasinAndImperialBasin = 2,
                                                                                                                    deepDesert = 2,
                                                                                                                    interstellarShipping = 3,
                                                                                                                    deliverSuppliesAndInterstellarShipping = 0,
                                                                                                                    smugglingAndInterstellarShipping = 2,
                                                                                                                    techNegotiation = 0,
                                                                                                                    dreadnought1p = 3,
                                                                                                                    dreadnought2p = 3,
                                                                                                                    researchStationImmortality = 0,
                                                                                                                    tleilaxuBonus1 = 0,
                                                                                                                    tleilaxuBonus2 = 0,
                                                                                                                    tleilaxuBonus3 = 0,
                                                                                                                }}

                                                                                                                function HagalCard.setStrength(color, card)
                                                                                                                    Types.assertIsPlayerColor(color)
                                                                                                                    assert(card)
                                                                                                                    local rival = PlayBoard.getLeader(color)
                                                                                                                    local strength = HagalCard.cardStrengths[Helper.getID(card)]
                                                                                                                    if strength then
                                                                                                                        rival.resources(color, "strength", strength)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard.activate(color, card, riseOfIx)
                                                                                                                    Types.assertIsPlayerColor(color)
                                                                                                                    assert(card)
                                                                                                                    local cardName = Helper.getID(card)
                                                                                                                    HagalCard.riseOfIx = riseOfIx
                                                                                                                    local rival = PlayBoard.getLeader(color)
                                                                                                                    local actionName = Helper.toCamelCase("_activate", cardName)
                                                                                                                    assert(HagalCard[actionName], actionName)
                                                                                                                    local final = HagalCard[actionName](color, rival, riseOfIx)
                                                                                                                    return final
                                                                                                                end

                                                                                                                function HagalCard.flushTurnActions(color)
                                                                                                                    HagalCard.acquiredTroopCount = HagalCard.acquiredTroopCount or 0
                                                                                                                    local rival = PlayBoard.getLeader(color)
                                                                                                                    assert(rival, color)

                                                                                                                    if HagalCard.inCombat then
                                                                                                                        local deploymentLimit = Hagal.getExpertDeploymentLimit(color)

                                                                                                                        local garrisonedTroopCount = #Park.getObjects(Combat.getGarrisonPark(color))
                                                                                                                        local inSupplyTroopCount = #Park.getObjects(PlayBoard.getSupplyPark(color))

                                                                                                                        local fromGarrison = math.min(2, garrisonedTroopCount)
                                                                                                                        local fromSupply = HagalCard.acquiredTroopCount

                                                                                                                        if HagalCard.riseOfIx then
                                                                                                                            -- Dreadnoughts are free and implicit.
                                                                                                                            local count = rival.dreadnought(color, "garrison", "combat", 2)
                                                                                                                            fromGarrison = math.max(0, fromGarrison - count)

                                                                                                                            -- Flagship tech.
                                                                                                                            if PlayBoard.hasTech(color, "flagship") and
                                                                                                                                deploymentLimit - fromGarrison - fromSupply > 0 and
                                                                                                                                inSupplyTroopCount - fromSupply >= 3 and
                                                                                                                                rival.resources(color, "solari", -4)
                                                                                                                                then
                                                                                                                                fromSupply = fromSupply + 3
                                                                                                                            end
                                                                                                                        end

                                                                                                                        local realFromSupply = math.min(fromSupply, deploymentLimit)
                                                                                                                        deploymentLimit = deploymentLimit - realFromSupply
                                                                                                                        local continuation = Helper.createContinuation("HagalCard.flushTurnActions")
                                                                                                                        if realFromSupply > 0 then
                                                                                                                            rival.troops(color, "supply", "combat", realFromSupply)
                                                                                                                            Park.onceStabilized(Action.getTroopPark(color, "combat")).doAfter(continuation.run)
                                                                                                                        else
                                                                                                                            continuation.run()
                                                                                                                        end
                                                                                                                        if fromSupply > realFromSupply then
                                                                                                                            continuation.doAfter(function ()
                                                                                                                                rival.troops(color, "supply", "garrison", fromSupply - realFromSupply)
                                                                                                                            end)
                                                                                                                        end

                                                                                                                        local realFromGarrison = math.min(fromGarrison, deploymentLimit)
                                                                                                                        if realFromGarrison > 0 then
                                                                                                                            rival.troops(color, "garrison", "combat", realFromGarrison)
                                                                                                                        end

                                                                                                                        HagalCard.inCombat = false
                                                                                                                    else
                                                                                                                        rival.troops(color, "supply", "garrison", HagalCard.acquiredTroopCount)
                                                                                                                    end
                                                                                                                    HagalCard.acquiredTroopCount = nil
                                                                                                                end

                                                                                                                function HagalCard.acquireTroops(color, n, inCombat)
                                                                                                                    if TurnControl.getCurrentPhase() == "playerTurns" then
                                                                                                                        HagalCard.inCombat = HagalCard.inCombat or inCombat
                                                                                                                        HagalCard.acquiredTroopCount = (HagalCard.acquiredTroopCount or 0) + n
                                                                                                                    else
                                                                                                                        local rival = PlayBoard.getLeader(color)
                                                                                                                        rival.troops(color, "supply", "garrison", n)
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activatePlaceSpyYellow(color, rival, riseOfIx)
                                                                                                                    -- Order matters: CHOAM, then from right to left.
                                                                                                                    local possiblePosts = {
                                                                                                                        riseOfIx and "ixChoam" or "choam",
                                                                                                                        "imperialBasin",
                                                                                                                        "haggaBasin",
                                                                                                                        "deepDesert",
                                                                                                                    }
                                                                                                                    for _, observationPostName in ipairs(possiblePosts) do
                                                                                                                        if not MainBoard.observationPostIsOccupied(observationPostName) then
                                                                                                                            rival.sendSpy(color, observationPostName)
                                                                                                                            break
                                                                                                                        end
                                                                                                                    end
                                                                                                                    return false
                                                                                                                end

                                                                                                                function HagalCard._activatePlaceSpyBlue(color, rival, riseOfIx)
                                                                                                                    -- Order matters: from right to left.
                                                                                                                    local possiblePosts = {
                                                                                                                        "spiceRefineryArrakeen",
                                                                                                                        "researchStationSpiceRefinery",
                                                                                                                        "sietchTabrResearchStation",
                                                                                                                    }
                                                                                                                    for _, observationPostName in ipairs(possiblePosts) do
                                                                                                                        if not MainBoard.observationPostIsOccupied(observationPostName) then
                                                                                                                            rival.sendSpy(color, observationPostName)
                                                                                                                            break
                                                                                                                        end
                                                                                                                    end
                                                                                                                    return false
                                                                                                                end

                                                                                                                function HagalCard._activatePlaceSpyGreen(color, rival, riseOfIx)
                                                                                                                    -- Order matters: from right to left.
                                                                                                                    local possiblePosts = {
                                                                                                                        riseOfIx and "ix" or "landsraadCouncil2",
                                                                                                                        "landsraadCouncil1",
                                                                                                                    }
                                                                                                                    for _, observationPostName in ipairs(possiblePosts) do
                                                                                                                        if not MainBoard.observationPostIsOccupied(observationPostName) then
                                                                                                                            rival.sendSpy(color, observationPostName)
                                                                                                                            break
                                                                                                                        end
                                                                                                                    end
                                                                                                                    return false
                                                                                                                end

                                                                                                                function HagalCard._activateSardaukar(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "sardaukar") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "sardaukar")
                                                                                                                        rival.influence(color, "emperor", 1)
                                                                                                                        HagalCard.acquireTroops(color, 2)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateDutifulService(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "dutifulService") and Hagal.isSmartPolitics(color, "emperor") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "dutifulService")
                                                                                                                        rival.influence(color, "emperor", 1)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateHeighliner(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "heighliner") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "heighliner")
                                                                                                                        rival.influence(color, "spacingGuild", 1)
                                                                                                                        HagalCard.acquireTroops(color, 3, true)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateDeliverSuppliesAndHeighliner(color, rival)
                                                                                                                    if Combat.getCurrentConflictLevel() < 3 then
                                                                                                                        if HagalCard._spaceIsFree(color, "deliverSupplies") and Hagal.isSmartPolitics(color, "spacingGuild") then
                                                                                                                            HagalCard._sendRivalAgent(color, rival, "deliverSupplies")
                                                                                                                            rival.influence(color, "spacingGuild", 1)
                                                                                                                            return true
                                                                                                                        else
                                                                                                                            return false
                                                                                                                        end
                                                                                                                    else
                                                                                                                        return HagalCard._activateHeighliner(color, rival)
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateEspionage(color, rival)
                                                                                                                    local freeFactionObservationPosts = Helper.filter(
                                                                                                                        {"emperor", "spacingGuild", "beneGesserit", "fremen"},
                                                                                                                    Helper.negate(MainBoard.observationPostIsOccupied))
                                                                                                                    if HagalCard._spaceIsFree(color, "espionage") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "espionage")
                                                                                                                        rival.influence(color, "beneGesserit", 1)
                                                                                                                        if not Helper.isEmpty(freeFactionObservationPosts) then
                                                                                                                            rival.sendSpy(color)
                                                                                                                        end
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateSecrets(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "secrets") and Hagal.isSmartPolitics(color, "beneGesserit") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "secrets")
                                                                                                                        rival.influence(color, "beneGesserit", 1)
                                                                                                                        for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                            if otherColor ~= color then
                                                                                                                                if #PlayBoard.getIntrigues(otherColor) > 3 then
                                                                                                                                    rival.stealIntrigues(color, otherColor, 1)
                                                                                                                                end
                                                                                                                            end
                                                                                                                        end
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateDesertTactics(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "desertTactics") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "desertTactics")
                                                                                                                        rival.influence(color, "fremen", 1)
                                                                                                                        HagalCard.acquireTroops(color, 1, true)
                                                                                                                        if PlayBoard.hasMakerHook(color) then
                                                                                                                            MainBoard.blowUpShieldWall(color, true)
                                                                                                                        end
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateFremkit(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "fremkit") and Hagal.isSmartPolitics(color, "fremen") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "fremkit")
                                                                                                                        rival.influence(color, "fremen", 1)
                                                                                                                        HagalCard.acquireTroops(color, 0, true)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateAssemblyHall(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "assemblyHall") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "assemblyHall")
                                                                                                                        rival.drawIntrigues(color, 1)
                                                                                                                        if InfluenceTrack.hasFriendship(color, "emperor") then
                                                                                                                            rival.influence(color, 1, 1)
                                                                                                                        end
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateGatherSupport1(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "gatherSupport") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "gatherSupport")
                                                                                                                        HagalCard.acquireTroops(color, 1)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateGatherSupport2(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "gatherSupport") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "gatherSupport")
                                                                                                                        HagalCard.acquireTroops(color, 1)
                                                                                                                        if InfluenceTrack.hasFriendship(color, "emperor") then
                                                                                                                            rival.influence(color, 2, 1)
                                                                                                                        end
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateAcceptContractAndShipping1(color, rival)
                                                                                                                    if InfluenceTrack.hasFriendship(color, "spacingGuild") then
                                                                                                                        if HagalCard._spaceIsFree(color, "shipping") then
                                                                                                                            HagalCard._sendRivalAgent(color, rival, "shipping")
                                                                                                                            rival.resources(color, "solari", 2)
                                                                                                                            rival.influence(color, 3, 1)
                                                                                                                            return true
                                                                                                                        else
                                                                                                                            return false
                                                                                                                        end
                                                                                                                    else
                                                                                                                        if HagalCard._spaceIsFree(color, "acceptContract") then
                                                                                                                            HagalCard._sendRivalAgent(color, rival, "acceptContract")
                                                                                                                            rival.resources(color, "solari", 2)
                                                                                                                            return true
                                                                                                                        else
                                                                                                                            return false
                                                                                                                        end
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateAcceptContractAndShipping2(color, rival)
                                                                                                                    if InfluenceTrack.hasFriendship(color, "spacingGuild") then
                                                                                                                        if HagalCard._spaceIsFree(color, "shipping") then
                                                                                                                            HagalCard._sendRivalAgent(color, rival, "shipping")
                                                                                                                            rival.resources(color, "solari", 2)
                                                                                                                            rival.influence(color, 1, 1)
                                                                                                                            return true
                                                                                                                        else
                                                                                                                            return false
                                                                                                                        end
                                                                                                                    else
                                                                                                                        if HagalCard._spaceIsFree(color, "acceptContract") then
                                                                                                                            HagalCard._sendRivalAgent(color, rival, "acceptContract")
                                                                                                                            rival.resources(color, "solari", 2)
                                                                                                                            return true
                                                                                                                        else
                                                                                                                            return false
                                                                                                                        end
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateResearchStation(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "researchStation") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "researchStation")
                                                                                                                        HagalCard.acquireTroops(color, 2, true)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateSpiceRefinery(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "spiceRefinery") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "spiceRefinery")
                                                                                                                        HagalCard.acquireTroops(color, 0, true)
                                                                                                                        rival.signetRing(color)
                                                                                                                        MainBoard.applyControlOfAnySpace("spiceRefinery")
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateArrakeen(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "arrakeen") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "arrakeen")
                                                                                                                        rival.signetRing(color)
                                                                                                                        HagalCard.acquireTroops(color, 1, true)
                                                                                                                        MainBoard.applyControlOfAnySpace("arrakeen")
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateSietchTabr(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "sietchTabr") and InfluenceTrack.hasFriendship(color, "fremen") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "sietchTabr")
                                                                                                                        rival.takeMakerHook(color)
                                                                                                                        HagalCard.acquireTroops(color, 1, true)
                                                                                                                        rival.resources(color, "water", 1)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateHaggaBasinAndImperialBasin(color, rival)
                                                                                                                    -- Note: order matters.
                                                                                                                    local desertSpaces = {
                                                                                                                        haggaBasin = 2,
                                                                                                                        imperialBasin = 1,
                                                                                                                    }

                                                                                                                    local bestDesertSpace
                                                                                                                    local bestSpiceBonus = 0.5
                                                                                                                    local bestTotalSpice = 0
                                                                                                                    for desertSpace, baseSpice in pairs(desertSpaces) do
                                                                                                                        if HagalCard._spaceIsFree(desertSpace) then
                                                                                                                            local spiceBonus = MainBoard.getSpiceBonus(desertSpace):get()
                                                                                                                            local totalSpice = baseSpice + spiceBonus
                                                                                                                            if spiceBonus > bestSpiceBonus then
                                                                                                                                bestDesertSpace = desertSpace
                                                                                                                                bestSpiceBonus = spiceBonus
                                                                                                                                bestTotalSpice = totalSpice
                                                                                                                            end
                                                                                                                        end
                                                                                                                    end

                                                                                                                    if bestDesertSpace then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, bestDesertSpace)
                                                                                                                        MainBoard.getSpiceBonus(bestDesertSpace):set(0)
                                                                                                                        if PlayBoard.hasMakerHook(color) then
                                                                                                                            MainBoard.blowUpShieldWall(color, true)
                                                                                                                        end
                                                                                                                        HagalCard.acquireTroops(color, 0, true)
                                                                                                                        if bestDesertSpace == "haggaBasin" and PlayBoard.hasMakerHook(color) then
                                                                                                                            rival.resources(color, "spice", bestSpiceBonus)
                                                                                                                            rival.callSandworm(color, 1)
                                                                                                                        elseif bestDesertSpace == "imperialBasin" then
                                                                                                                            rival.resources(color, "spice", bestTotalSpice)
                                                                                                                            MainBoard.applyControlOfAnySpace(bestDesertSpace)
                                                                                                                        else
                                                                                                                            rival.resources(color, "spice", bestTotalSpice)
                                                                                                                        end
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateDeepDesert(color, rival)
                                                                                                                    local spiceBonus = MainBoard.getSpiceBonus("deepDesert"):get()
                                                                                                                    if HagalCard._spaceIsFree(color, "deepDesert") and spiceBonus > 0 then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "deepDesert")
                                                                                                                        MainBoard.getSpiceBonus("deepDesert"):set(0)
                                                                                                                        HagalCard.acquireTroops(color, 0, true)
                                                                                                                        if not MainBoard.shieldWallIsStanding() and PlayBoard.hasMakerHook(color) then
                                                                                                                            rival.resources(color, "spice", spiceBonus)
                                                                                                                            rival.callSandworm(color, 2)
                                                                                                                        else
                                                                                                                            rival.resources(color, "spice", 4 + spiceBonus)
                                                                                                                        end
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                -- ***

                                                                                                                function HagalCard._activateInterstellarShipping(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "interstellarShipping") and InfluenceTrack.hasFriendship(color, "spacingGuild") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "interstellarShipping")
                                                                                                                        rival.shipments(color, 2)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateDeliverSuppliesAndInterstellarShipping(color, rival)
                                                                                                                    if InfluenceTrack.hasFriendship(color, "spacingGuild") then
                                                                                                                        return HagalCard._activateInterstellarShipping(color, rival)
                                                                                                                    else
                                                                                                                        if HagalCard._spaceIsFree(color, "deliverSupplies") then
                                                                                                                            HagalCard._sendRivalAgent(color, rival, "deliverSupplies")
                                                                                                                            rival.influence(color, "spacingGuild", 1)
                                                                                                                            return true
                                                                                                                        else
                                                                                                                            return false
                                                                                                                        end
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateSmugglingAndInterstellarShipping(color, rival)
                                                                                                                    if InfluenceTrack.hasFriendship(color, "spacingGuild") then
                                                                                                                        return HagalCard._activateInterstellarShipping(color, rival)
                                                                                                                    else
                                                                                                                        if HagalCard._spaceIsFree(color, "smuggling") then
                                                                                                                            HagalCard._sendRivalAgent(color, rival, "smuggling")
                                                                                                                            rival.shipments(color, 1)
                                                                                                                            return true
                                                                                                                        else
                                                                                                                            return false
                                                                                                                        end
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateTechNegotiation(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "techNegotiation") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "techNegotiation")
                                                                                                                        TechMarket.registerAcquireTechOption(color, "techNegotiationTechBuyOption", "spice", 1)
                                                                                                                        if not rival.acquireTech(color, nil, 1) then
                                                                                                                            rival.troops(color, "supply", "negotiation", 1)
                                                                                                                        end
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateDreadnought1p(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "dreadnought") and PlayBoard.getAquiredDreadnoughtCount(color) < 2 then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "dreadnought")
                                                                                                                        rival.dreadnought(color, "supply", "garrison", 1)
                                                                                                                        TechMarket.registerAcquireTechOption(color, "dreadnoughtTechBuyOption", "spice", 0)
                                                                                                                        rival.acquireTech(color, nil, 0)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateDreadnought2p(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "dreadnought") and PlayBoard.getAquiredDreadnoughtCount(color) < 2 then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "dreadnought")
                                                                                                                        rival.dreadnought(color, "supply", "garrison", 1)
                                                                                                                        HagalCard.acquireTroops(color, 2)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                -- ***

                                                                                                                function HagalCard._activateResearchStationImmortality(color, rival)
                                                                                                                    if HagalCard._spaceIsFree(color, "researchStation") then
                                                                                                                        HagalCard._sendRivalAgent(color, rival, "researchStation")
                                                                                                                        HagalCard.acquireTroops(color, 0, true)
                                                                                                                        rival.beetle(color, 2)
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._activateTleilaxuBonus1(color, rival)
                                                                                                                    rival.beetle(color, 1)
                                                                                                                    TleilaxuRow.trash(1)
                                                                                                                    return false
                                                                                                                end

                                                                                                                function HagalCard._activateTleilaxuBonus2(color, rival)
                                                                                                                    rival.beetle(color, 1)
                                                                                                                    return false
                                                                                                                end

                                                                                                                function HagalCard._activateTleilaxuBonus3(color, rival)
                                                                                                                    rival.beetle(color, 1)
                                                                                                                    TleilaxuRow.trash(2)
                                                                                                                    return false
                                                                                                                end

                                                                                                                function HagalCard._sendRivalAgent(color, rival, spaceName)
                                                                                                                    if MainBoard.sendRivalAgent(color, spaceName) then
                                                                                                                        if PlayBoard.useTech(color, "trainingDrones") then
                                                                                                                            HagalCard.acquireTroops(color, 0)
                                                                                                                        end
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                function HagalCard._spaceIsFree(color, spaceName)
                                                                                                                    if not MainBoard.hasVoiceToken(spaceName) and not MainBoard.hasAgentInSpace(spaceName, color) then
                                                                                                                        if MainBoard.hasEnemyAgentInSpace(spaceName, color) then
                                                                                                                            return PlayBoard.useTech(color, "invasionShips")
                                                                                                                        else
                                                                                                                            return true
                                                                                                                        end
                                                                                                                    else
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                return HagalCard

                                                                                                            end)
                                                                                                            __bundle_register("Hagal", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                local Module = require("utils.Module")
                                                                                                                local Helper = require("utils.Helper")
                                                                                                                local Park = require("utils.Park")
                                                                                                                local I18N = require("utils.I18N")

                                                                                                                local Deck = Module.lazyRequire("Deck")
                                                                                                                local TurnControl = Module.lazyRequire("TurnControl")
                                                                                                                local LeaderSelection = Module.lazyRequire("LeaderSelection")
                                                                                                                local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                                local HagalCard = Module.lazyRequire("HagalCard")
                                                                                                                local Combat = Module.lazyRequire("Combat")
                                                                                                                local MainBoard = Module.lazyRequire("MainBoard")
                                                                                                                local ConflictCard = Module.lazyRequire("ConflictCard")
                                                                                                                local Rival = Module.lazyRequire("Rival")
                                                                                                                local InfluenceTrack = Module.lazyRequire("InfluenceTrack")
                                                                                                                local ImperiumRow = Module.lazyRequire("ImperiumRow")
                                                                                                                local Action = Module.lazyRequire("Action")

                                                                                                                local Hagal = {}

                                                                                                                ---
                                                                                                                function Hagal.onLoad(state)
                                                                                                                    if not state.settings or state.settings.numberOfPlayers < 3 then
                                                                                                                        Helper.append(Hagal, Helper.resolveGUIDs(true, {
                                                                                                                            deckZone = "8f49e3",
                                                                                                                        }))
                                                                                                                    end

                                                                                                                    if state.settings and state.settings.numberOfPlayers < 3 then
                                                                                                                        Hagal._transientSetUp(state.settings)
                                                                                                                    end
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal.getDifficulties()
                                                                                                                    return {
                                                                                                                        novice = "novice",
                                                                                                                        veteran = "veteran",
                                                                                                                        expert = "expert",
                                                                                                                        expertPlus = "expertPlus",
                                                                                                                    }
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal.setUp(settings)
                                                                                                                    if settings.numberOfPlayers < 3 then
                                                                                                                        Deck.generateHagalDeck(Hagal.deckZone, settings.riseOfIx, settings.immortality, settings.numberOfPlayers).doAfter(function (deck)
                                                                                                                            assert(deck, "No Hagal deck!")
                                                                                                                            Helper.shuffleDeck(deck)
                                                                                                                        end)
                                                                                                                        Hagal._transientSetUp(settings)
                                                                                                                    else
                                                                                                                        Hagal._tearDown()
                                                                                                                    end
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal._transientSetUp(settings)
                                                                                                                    Hagal.numberOfPlayers = settings.numberOfPlayers
                                                                                                                    Hagal.riseOfIx = settings.riseOfIx
                                                                                                                    Hagal.difficulty = Hagal.numberOfPlayers == 1 and settings.difficulty or nil
                                                                                                                    Hagal.autoTurnInSolo = settings.autoTurnInSolo
                                                                                                                    Hagal.brutalEscalation = settings.brutalEscalation
                                                                                                                    Hagal.expertDeployment = settings.expertDeployment
                                                                                                                    Hagal.smartPolitics = settings.smartPolitics

                                                                                                                    Helper.registerEventListener("phaseStart", function (phase)
                                                                                                                        if phase == "combat" then
                                                                                                                            local actions = {}
                                                                                                                            for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                                if PlayBoard.isRival(color) and Combat.isInCombat(color) then
                                                                                                                                    table.insert(actions, Helper.partialApply(Hagal._setStrengthFromFirstValidCard, color))
                                                                                                                                end
                                                                                                                            end
                                                                                                                            Helper.chainActions(actions)
                                                                                                                        end
                                                                                                                    end)

                                                                                                                    if settings.imperiumRowChurn then
                                                                                                                        Helper.registerEventListener("phaseEnd", function (phase)
                                                                                                                            if phase == "playerTurns" then
                                                                                                                                ImperiumRow.churn()
                                                                                                                            end
                                                                                                                        end)
                                                                                                                    end
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal._tearDown()
                                                                                                                    Hagal.deckZone.destruct()
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal.newRival(name)
                                                                                                                    return Rival.newRival(name)
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal.activate(phase, color)
                                                                                                                    -- A delay before and after the action, to let the human(s) see the progress.
                                                                                                                    Helper.onceTimeElapsed(1).doAfter(function ()
                                                                                                                        Hagal._lateActivate(phase, color).doAfter(function ()
                                                                                                                            -- The leader selection already has an automatic end of turn when a leader is picked.
                                                                                                                            if phase ~= "leaderSelection" then
                                                                                                                                if Hagal.getRivalCount() == 1 or Hagal.autoTurnInSolo then
                                                                                                                                    Helper.onceTimeElapsed(1).doAfter(TurnControl.endOfTurn)
                                                                                                                                else
                                                                                                                                    PlayBoard.createEndOfTurnButton(color)
                                                                                                                                end
                                                                                                                            end
                                                                                                                        end)
                                                                                                                    end)
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal._lateActivate(phase, color)
                                                                                                                    local continuation = Helper.createContinuation("Hagal._lateActivate")

                                                                                                                    if phase == "leaderSelection" then
                                                                                                                        continuation.run()
                                                                                                                    elseif phase == "gameStart" then
                                                                                                                        continuation.run()
                                                                                                                    elseif phase == "roundStart" then
                                                                                                                        continuation.run()
                                                                                                                    elseif phase == "playerTurns" then
                                                                                                                        Hagal._activateFirstValidActionCard(color).doAfter(continuation.run)
                                                                                                                    elseif phase == "combat" then
                                                                                                                        continuation.run()
                                                                                                                    elseif phase == "combatEnd" then
                                                                                                                        Hagal._collectReward(color).doAfter(continuation.run)
                                                                                                                    elseif phase == "endgame" then
                                                                                                                        continuation.run()
                                                                                                                    else
                                                                                                                        continuation.cancel()
                                                                                                                        error("Unknown phase: " .. tostring(phase))
                                                                                                                    end

                                                                                                                    return continuation
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal._activateFirstValidActionCard(color)
                                                                                                                    return Hagal._activateFirstValidCard(color, function (card)
                                                                                                                        return HagalCard.activate(color, card, Hagal.riseOfIx)
                                                                                                                    end)
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal._collectReward(color)
                                                                                                                    local continuation = Helper.createContinuation("Hagal._collectReward")
                                                                                                                    Helper.onceFramesPassed(1).doAfter(function ()
                                                                                                                        local rank = Combat.getRank(color).value
                                                                                                                        local conflictName = Combat.getCurrentConflictName()
                                                                                                                        local hasSandworms = Combat.hasSandworms(color)
                                                                                                                        local postAction = Helper.partialApply(Rival.triggerHagalReaction, color)
                                                                                                                        ConflictCard.collectReward(color, conflictName, rank, hasSandworms, postAction).doAfter(function ()
                                                                                                                            if rank == 1 then
                                                                                                                                local leader = PlayBoard.getLeader(color)
                                                                                                                                if PlayBoard.hasTech(color, "windtraps") then
                                                                                                                                    leader.resources(color, "water", 1)
                                                                                                                                end

                                                                                                                                local dreadnoughts = Combat.getDreadnoughtsInConflict(color)

                                                                                                                                if #dreadnoughts > 0 and PlayBoard.hasTech(color, "detonationDevices") then
                                                                                                                                    Park.putObject(dreadnoughts[1], PlayBoard.getDreadnoughtPark(color))
                                                                                                                                    table.remove(dreadnoughts, 1)
                                                                                                                                    leader.gainVictoryPoint(color, "detonationDevices", 1)
                                                                                                                                end

                                                                                                                                if #dreadnoughts > 0 then
                                                                                                                                    local bestBannerZone = Hagal._findBestBannerZone(color)
                                                                                                                                    dreadnoughts[1].setPositionSmooth(bestBannerZone.getPosition())
                                                                                                                                end
                                                                                                                            end
                                                                                                                            continuation.run()
                                                                                                                        end)
                                                                                                                    end)
                                                                                                                    return continuation
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal._findBestBannerZone(color)
                                                                                                                    local bestValue
                                                                                                                    local bestBannerZone
                                                                                                                    -- Already properly ordered (CCW from Imperial Basin).
                                                                                                                    for i, bannerZone in ipairs(MainBoard.getBannerZones()) do
                                                                                                                        if not MainBoard.getControllingDreadnought(bannerZone) then
                                                                                                                            local owner = MainBoard.getControllingPlayer(bannerZone)
                                                                                                                            local value
                                                                                                                            if not owner then
                                                                                                                                value = 10
                                                                                                                            elseif owner ~= color then
                                                                                                                                value = 20
                                                                                                                            else
                                                                                                                                value = 0
                                                                                                                            end
                                                                                                                            value = value + i
                                                                                                                            if not bestValue or bestValue < value then
                                                                                                                                bestValue = value
                                                                                                                                bestBannerZone = bannerZone
                                                                                                                            end
                                                                                                                        end
                                                                                                                    end
                                                                                                                    assert(bestBannerZone)
                                                                                                                    return bestBannerZone
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal._setStrengthFromFirstValidCard(color)
                                                                                                                    local level3Conflict = Combat.getCurrentConflictLevel() == 3

                                                                                                                    -- Brutal Escalation
                                                                                                                    local n = (level3Conflict and Hagal.brutalEscalation) and 2 or 1

                                                                                                                    return Hagal._activateFirstValidCard(color, function (card)
                                                                                                                        if HagalCard.setStrength(color, card) then
                                                                                                                            n = n - 1
                                                                                                                            if n > 0 then
                                                                                                                                Action.log(I18N("brutalEscalation"), color)
                                                                                                                            end
                                                                                                                            return n == 0
                                                                                                                        else
                                                                                                                            return false
                                                                                                                        end
                                                                                                                    end)
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal.getExpertDeploymentLimit(color)
                                                                                                                    local level3Conflict = Combat.getCurrentConflictLevel() == 3

                                                                                                                    local n
                                                                                                                    if not level3Conflict and Hagal.expertDeployment then
                                                                                                                        local colorUnitCount = 0
                                                                                                                        local otherColorMaxUnitCount = 0
                                                                                                                        for otherColor, unitCount in pairs(Combat.getUnitCounts()) do
                                                                                                                            if otherColor == color then
                                                                                                                                colorUnitCount = unitCount
                                                                                                                            else
                                                                                                                                otherColorMaxUnitCount = math.max(otherColorMaxUnitCount, unitCount)
                                                                                                                            end
                                                                                                                        end
                                                                                                                        n = math.max(0, 3 + otherColorMaxUnitCount - colorUnitCount)
                                                                                                                        Action.log(I18N("expertDeploymentLimit", {limit = n}), color)
                                                                                                                    else
                                                                                                                        n = 12
                                                                                                                    end
                                                                                                                    --Helper.dump("level3Conflict:", level3Conflict, "/ expertDeploymentLimit:", n)
                                                                                                                    return n
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal.isSmartPolitics(color, faction)
                                                                                                                    if Hagal.smartPolitics then
                                                                                                                        local colorRank = 0
                                                                                                                        local otherColorMaxRank = 0
                                                                                                                        for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                            local rank = InfluenceTrack.getInfluence(faction, otherColor, true)
                                                                                                                            if otherColor == color then
                                                                                                                                colorRank = rank
                                                                                                                            else
                                                                                                                                otherColorMaxRank = math.max(otherColorMaxRank, rank)
                                                                                                                            end
                                                                                                                        end
                                                                                                                        local leadMargin = colorRank - otherColorMaxRank

                                                                                                                        local smart
                                                                                                                        if InfluenceTrack.hasAlliance(color, faction) then
                                                                                                                            smart = leadMargin < 1
                                                                                                                        elseif InfluenceTrack.hasFriendship(color, faction) then
                                                                                                                            smart = leadMargin > -2
                                                                                                                        else
                                                                                                                            smart = true
                                                                                                                        end

                                                                                                                        --Helper.dump("alliance:", InfluenceTrack.hasAlliance(color, faction), "/ friendship:", InfluenceTrack.hasFriendship(color, faction), "/ lead margin:", leadMargin)

                                                                                                                        if not smart then
                                                                                                                            Action.log(I18N("smartPolitics"), color)
                                                                                                                        end

                                                                                                                        return smart
                                                                                                                    end

                                                                                                                    return true
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal._activateFirstValidCard(color, action)
                                                                                                                    local continuation = Helper.createContinuation("Hagal._activateFirstValidCard")

                                                                                                                    local emptySlots = Park.findEmptySlots(PlayBoard.getAgentCardPark(color))
                                                                                                                    assert(emptySlots and #emptySlots > 0)

                                                                                                                    Hagal._doActivateFirstValidCard(color, action, 0, continuation)

                                                                                                                    return continuation
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal._doActivateFirstValidCard(color, action, n, continuation)
                                                                                                                    local emptySlots = Park.findEmptySlots(PlayBoard.getRevealCardPark(color))
                                                                                                                    assert(emptySlots and #emptySlots > 0)
                                                                                                                    assert(n < 10, "Something is not right!")

                                                                                                                    Helper.moveCardFromZone(Hagal.deckZone, emptySlots[2] + Vector(0, 1 + 0.4 * n, 0), Vector(0, 180, 0)).doAfter(function (card)
                                                                                                                        if card then
                                                                                                                            Helper.onceTimeElapsed(1).doAfter(function ()
                                                                                                                                if Helper.getID(card) == "reshuffle" then
                                                                                                                                    Hagal._reshuffleDeck(color, action, n, continuation)
                                                                                                                                elseif action(card) then
                                                                                                                                    Rival.triggerHagalReaction(color).doAfter(function ()
                                                                                                                                        HagalCard.flushTurnActions(color)
                                                                                                                                        continuation.run(card)
                                                                                                                                    end)
                                                                                                                                else
                                                                                                                                    Rival.triggerHagalReaction(color).doAfter(function ()
                                                                                                                                        Hagal._doActivateFirstValidCard(color, action, n + 1, continuation)
                                                                                                                                    end)
                                                                                                                                end
                                                                                                                            end)
                                                                                                                        else
                                                                                                                            Hagal._reshuffleDeck(color, action, n, continuation)
                                                                                                                        end
                                                                                                                    end)
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal._reshuffleDeck(color, action, n, continuation)
                                                                                                                    local i = 1
                                                                                                                    for _, object in ipairs(getObjects()) do
                                                                                                                        if object.hasTag("Hagal") and (object.type == "Deck" or object.type == "Card") then
                                                                                                                            for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                                if (PlayBoard.isInside(otherColor, object)) then
                                                                                                                                    if not object.is_face_down then
                                                                                                                                        object.flip()
                                                                                                                                    end
                                                                                                                                    object.setPosition(Hagal.deckZone.getPosition() + Vector(0, i, 0))
                                                                                                                                    i = i + 1
                                                                                                                                    break
                                                                                                                                end
                                                                                                                            end
                                                                                                                        end
                                                                                                                    end
                                                                                                                    Helper.onceTimeElapsed(2).doAfter(function ()
                                                                                                                        local deck = Helper.getDeck(Hagal.deckZone)
                                                                                                                        assert(deck, "No Hagal deck anymore!")
                                                                                                                        Helper.shuffleDeck(deck)
                                                                                                                        Helper.onceShuffled(deck).doAfter(function ()
                                                                                                                            Hagal._doActivateFirstValidCard(color, action, n + 1, continuation)
                                                                                                                        end)
                                                                                                                    end)
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal.getRivalCount()
                                                                                                                    if Hagal.numberOfPlayers then
                                                                                                                        return 3 - Hagal.numberOfPlayers
                                                                                                                    else
                                                                                                                        return 0
                                                                                                                    end
                                                                                                                end

                                                                                                                ---
                                                                                                                function Hagal.isSwordmasterAvailable()
                                                                                                                    return Hagal.difficulty ~= "expertPlus"
                                                                                                                end

                                                                                                                return Hagal

                                                                                                            end)
                                                                                                            __bundle_register("ScoreBoard", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                local Module = require("utils.Module")
                                                                                                                local Helper = require("utils.Helper")
                                                                                                                local I18N = require("utils.I18N")

                                                                                                                local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                                local Combat = Module.lazyRequire("Combat")
                                                                                                                local InfluenceTrack = Module.lazyRequire("InfluenceTrack")
                                                                                                                local TleilaxuResearch = Module.lazyRequire("TleilaxuResearch")

                                                                                                                local ScoreBoard = {
                                                                                                                tokens = {}}

                                                                                                                ---
                                                                                                                function ScoreBoard.onLoad(state)

                                                                                                                    ScoreBoard.hiddenZone = Helper.resolveGUIDs(true, "3848a9")

                                                                                                                    for _, object in ipairs(ScoreBoard.hiddenZone.getObjects()) do
                                                                                                                        object.setInvisibleTo(Player.getColors())
                                                                                                                    end

                                                                                                                    --[[
        4 players tokens -> PlayBoard
        alliance / friendship -> InfluenceTrack
        others -> here
    ]]
                                                                                                                    ScoreBoard.tokens = Helper.resolveGUIDs(false, {
                                                                                                                        friendship = {
                                                                                                                            emperorBag = "7007df",
                                                                                                                            spacingGuildBag = "af9795",
                                                                                                                            beneGesseritBag = "3ebbd7",
                                                                                                                            fremenBag = "f5a7af",
                                                                                                                            greatHousesBag = "07e49b",
                                                                                                                            fringeWorldsBag = "ff38f9",
                                                                                                                        },
                                                                                                                        base = {
                                                                                                                            fourPlayerBag = "c2290f",
                                                                                                                            allyBag = "5140a0",
                                                                                                                            commanderBag = "1a42dd",
                                                                                                                            --
                                                                                                                            theSpiceMustFlowBag = "a7e06b",
                                                                                                                            combatVictoryPointBag = "86dc4e",
                                                                                                                            muadDibVictoryPointBag = "9aad55",
                                                                                                                            ornithopterVictoryPointBag = "600a38",
                                                                                                                            crysknifeVictoryPointBag = "779feb",
                                                                                                                            jokerVictoryPointBag = "ab479e",
                                                                                                                            endgameCardBag = "182475",
                                                                                                                            --
                                                                                                                            smugglerHavenBag = "fe7d43",
                                                                                                                            corrinthCityBag = "4e150b",
                                                                                                                            junctionHeadquartersBag = "2ff2dc",
                                                                                                                            objectiveBag = "fd4468",
                                                                                                                            priorityContracts = "732faa",
                                                                                                                            deliveryAgreement = "93c9bd",
                                                                                                                            strategicStockpiling1 = "008432",
                                                                                                                            strategicStockpiling2 = "c070b2",
                                                                                                                            opportunism = "504094",
                                                                                                                        },
                                                                                                                        legacy = {
                                                                                                                            guildAmbassadorBag = "912d75",
                                                                                                                            opulenceBag = "c22e46",
                                                                                                                            theSleeperMustAwaken = "9bfd65",
                                                                                                                            choamShares = "2da115",
                                                                                                                            stagedIncident = "1f98e2",
                                                                                                                        },
                                                                                                                        hagal = {
                                                                                                                            intrigueBag = "772594",
                                                                                                                            solariBag = "266448",
                                                                                                                            waterBag = "3963f0",
                                                                                                                            spiceBag = "19c977",
                                                                                                                        },
                                                                                                                        ix = {
                                                                                                                            sayyadinaBag = "9193f5",
                                                                                                                            detonationDevicesBag = "4cc3d5",
                                                                                                                            ixianEngineerBag = "4ae3de",
                                                                                                                            flagship = "692480",
                                                                                                                            spySatellites = "c94718",
                                                                                                                            techEndgameBag = "3e2ce6",
                                                                                                                        },
                                                                                                                        immortality = {
                                                                                                                            scientificBreakthrough = "b56adc",
                                                                                                                            tleilaxBag = "37ceab",
                                                                                                                            forHumanityBag = "6e2a13"
                                                                                                                        },
                                                                                                                        -- bloodlines VP tokens
                                                                                                                        uprising = {
                                                                                                                            bl_SardaukarHighCommand = "ccee71",
                                                                                                                            vp_YrkoonFiveSpice = "2e7d22",
                                                                                                                            vp_ThreatenSpiceProduction = "928d6b"
                                                                                                                        },
                                                                                                                    })

                                                                                                                    if state.settings and state.settings.riseOfIx then
                                                                                                                        ScoreBoard._transientSetUp(state.settings)
                                                                                                                    end
                                                                                                                end

                                                                                                                ---
                                                                                                                function ScoreBoard.setUp(settings)
                                                                                                                    local activateCategories = {
                                                                                                                        base = true,
                                                                                                                        legacy = settings.legacy,
                                                                                                                        hagal = settings.numberOfPlayers <= 2,
                                                                                                                        ix = settings.riseOfIx,
                                                                                                                        immortality = settings.immortality,
                                                                                                                    }

                                                                                                                    for _, category in ipairs({"base", "legacy", "hagal", "ix", "immortality"}) do
                                                                                                                        if activateCategories[category] then
                                                                                                                            Helper.forEachRecursively(ScoreBoard.tokens[category], function (name, token)
                                                                                                                                assert(token)
                                                                                                                                local key = Helper.getID(token)
                                                                                                                                if key and key:len() > 0 then
                                                                                                                                    token.setName(I18N(key))
                                                                                                                                end
                                                                                                                                if false then
                                                                                                                                    -- Clumsy workaround to name items in a bag.
                                                                                                                                    -- TODO Recreate the bag?
                                                                                                                                    if token.type == "Bag" then
                                                                                                                                        local count = #token.getObjects()
                                                                                                                                        for i = 1, count do
                                                                                                                                            local innerToken = token.takeObject({position = token.getPosition() + Vector(0, i * 0.5, 0)})
                                                                                                                                            innerToken.setLock(true)
                                                                                                                                            Helper.onceTimeElapsed(0.5).doAfter(function ()
                                                                                                                                                innerToken.setName(I18N(Helper.getID(innerToken)))
                                                                                                                                                innerToken.setLock(false)
                                                                                                                                            end)
                                                                                                                                        end
                                                                                                                                    elseif token.type == "Infinite" then
                                                                                                                                        -- TODO
                                                                                                                                    end
                                                                                                                                end
                                                                                                                            end)
                                                                                                                        else
                                                                                                                            Helper.forEach(ScoreBoard.tokens[category], function (_, token)
                                                                                                                                token.destruct()
                                                                                                                            end)
                                                                                                                            ScoreBoard.tokens[category] = nil
                                                                                                                        end
                                                                                                                    end

                                                                                                                    ScoreBoard._transientSetUp(settings)
                                                                                                                end

                                                                                                                ---
                                                                                                                function ScoreBoard._transientSetUp(settings)
                                                                                                                    -- NOP
                                                                                                                end

                                                                                                                ---
                                                                                                                function ScoreBoard.gainVictoryPoint(color, name, count)
                                                                                                                    -- FIXME Useless indirection.
                                                                                                                    local holder = {
                                                                                                                        success = false
                                                                                                                    }
                                                                                                                    Helper.forEachRecursively(ScoreBoard.tokens, function (victoryPointName, victoryPointSource)
                                                                                                                        if name == victoryPointName then
                                                                                                                            PlayBoard.grantScoreToken(color, victoryPointSource)
                                                                                                                            holder.success = true
                                                                                                                        elseif name .. "Bag" == victoryPointName then
                                                                                                                            PlayBoard.grantScoreTokenFromBag(color, victoryPointSource, count)
                                                                                                                            holder.success = true
                                                                                                                        end
                                                                                                                    end)
                                                                                                                    if holder.success then
                                                                                                                        return true
                                                                                                                    elseif Combat.gainVictoryPoint(color, name, count) then
                                                                                                                        return true
                                                                                                                    elseif InfluenceTrack.gainVictoryPoint(color, name, count) then
                                                                                                                        return true
                                                                                                                    else
                                                                                                                        Helper.dump("No VP named", name)
                                                                                                                        return false
                                                                                                                    end
                                                                                                                end

                                                                                                                --- TODO Find a better place and implementation.
                                                                                                                function ScoreBoard.getFreeVoiceToken()
                                                                                                                    for _, object in ipairs(ScoreBoard.hiddenZone.getObjects()) do
                                                                                                                        if Helper.isElementOf(object.getGUID(), {"516df5", "cc0eda"}) then
                                                                                                                            object.setInvisibleTo({})
                                                                                                                            return object
                                                                                                                        end
                                                                                                                    end
                                                                                                                    return nil
                                                                                                                end

                                                                                                                return ScoreBoard

                                                                                                            end)
                                                                                                            __bundle_register("Deck", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                local Module = require("utils.Module")
                                                                                                                local Helper = require("utils.Helper")
                                                                                                                local I18N = require("utils.I18N")

                                                                                                                local Locale = Module.lazyRequire("Locale")

                                                                                                                -- Merakon's House Blend -> https://boardgamegeek.com/thread/3213458/merakons-house-blend
                                                                                                                local Deck = {
                                                                                                                    decals = {
                                                                                                                        corrinoAcquireCard = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141304246/9E9986D0F348F5D23A16745A271FFD28958651FB/",
                                                                                                                        genericAcquireCard = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141305713/5F7C572489E5E03F3230B012DA0E01A84EDAABF8/",
                                                                                                                    },
                                                                                                                    customDeckBaseId = 100,
                                                                                                                    backs = {
                                                                                                                        imperiumCardBack = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141326342/C3DC7A02CF378129569B414967C9BE25097C6E77/",
                                                                                                                        intrigueCardBack = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141342007/D63B92C616541C84A7984026D757DB03E79532DD/",
                                                                                                                        techCardBack = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141363045/1EA614EC832B16BC94811A7FE793344057850409/",
                                                                                                                        conflictCardBack = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141365665/0423ECA84C0D71CCB38EBD60DEAE641EE72D7933/", -- a workaround
                                                                                                                        conflict1CardBack = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141365665/0423ECA84C0D71CCB38EBD60DEAE641EE72D7933/",
                                                                                                                        conflict2CardBack = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141365164/3B3F54DF65F76F0850D0EC683602524806A11E49/",
                                                                                                                        conflict3CardBack = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141365939/9E194557E37B5C4CA74C7A77CBFB6B8A36043916/",
                                                                                                                        objectiveCardBack = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141298841/02A61DC439DF213EA61A8CCEC1F545F4D369F2E8/",
                                                                                                                        hagalCardBack = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141333724/26E28590801800D852F4BCA53E959AAFAAFC8FF3/",
                                                                                                                        leaderCardBack = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141277039/005244DAC0A29EE68CFF741FC06564969563E8CF/",
                                                                                                                        rivalLeaderCardBack = "https://steamusercontent-a.akamaihd.net/ugc/2291837013341174770/EB5ECE9F5373F0B132E93CD5825B89E7F023E9A2/",
                                                                                                                    },
                                                                                                                    sources = {},
                                                                                                                    starter = {
                                                                                                                        -- per player arity
                                                                                                                        base = {
                                                                                                                            duneTheDesertPlanet = 2,
                                                                                                                            seekAllies = 1,
                                                                                                                            signetRing = 1,
                                                                                                                            diplomacy = 1,
                                                                                                                            reconnaissance = 1,
                                                                                                                            convincingArgument = 2,
                                                                                                                            dagger = 2,
                                                                                                                        },
                                                                                                                        epic = {
                                                                                                                            controlTheSpice = 1,
                                                                                                                        },
                                                                                                                        immortality = {
                                                                                                                            duneTheDesertPlanet = Helper.ERASE,
                                                                                                                            experimentation = 2,
                                                                                                                        },
                                                                                                                        emperor = {
                                                                                                                            emperorConvincingArgument = 1,
                                                                                                                            emperorCorrinoMight = 1,
                                                                                                                            emperorCriticalShipments = 1,
                                                                                                                            emperorDemandResults = 1,
                                                                                                                            emperorDevastatingAssault = 1,
                                                                                                                            emperorImperialOrnithopter = 2,
                                                                                                                            emperorSignetRing = 1,
                                                                                                                            emperorSeekAllies = 1,
                                                                                                                            emperorImperialTent = 1,
                                                                                                                        },
                                                                                                                        muadDib = {
                                                                                                                            muadDibCommandRespect = 1,
                                                                                                                            muadDibConvincingArgument = 1,
                                                                                                                            muadDibDemandAttention = 1,
                                                                                                                            muadDibDesertCall = 1,
                                                                                                                            muadDibLimitedLandsraadAccess = 2,
                                                                                                                            muadDibSeekAllies = 1,
                                                                                                                            muadDibUsul = 1,
                                                                                                                            muadDibThreatenSpiceProduction = 1,
                                                                                                                            muadDibSignetRing = 1,
                                                                                                                        },
                                                                                                                    },
                                                                                                                    imperium = {
                                                                                                                        legacy = {
                                                                                                                            jessicaOfArrakis = 1, -- release promo
                                                                                                                            sardaukarLegion = 2,
                                                                                                                            drYueh = 1,
                                                                                                                            assassinationMission = 2,
                                                                                                                            sardaukarInfantry = 2,
                                                                                                                            beneGesseritInitiate = 2,
                                                                                                                            guildAdministrator = 2,
                                                                                                                            theVoice = 2,
                                                                                                                            scout = 2,
                                                                                                                            imperialSpy = 2,
                                                                                                                            beneGesseritSister = 3,
                                                                                                                            missionariaProtectiva = 2, -- First release fixed in Rise of Ix
                                                                                                                            spiceHunter = 2,
                                                                                                                            spiceSmugglers = 2,
                                                                                                                            fedaykinDeathCommando = 2,
                                                                                                                            geneManipulation = 2,
                                                                                                                            guildBankers = 1,
                                                                                                                            choamDirectorship = 1,
                                                                                                                            crysknife = 1,
                                                                                                                            chani = 1,
                                                                                                                            spaceTravel = 2,
                                                                                                                            duncanIdaho = 1,
                                                                                                                            shiftingAllegiances = 2,
                                                                                                                            kwisatzHaderach = 1,
                                                                                                                            sietchReverendMother = 1,
                                                                                                                            arrakisRecruiter = 2,
                                                                                                                            firmGrip = 1,
                                                                                                                            smugglersThopter = 2,
                                                                                                                            carryall = 1,
                                                                                                                            gunThopter = 2,
                                                                                                                            guildAmbassador = 1,
                                                                                                                            testOfHumanity = 1,
                                                                                                                            fremenCamp = 2,
                                                                                                                            opulence = 1,
                                                                                                                            ladyJessica = 1,
                                                                                                                            stilgar = 1,
                                                                                                                            piterDeVries = 1,
                                                                                                                            gurneyHalleck = 1,
                                                                                                                            thufirHawat = 1,
                                                                                                                            otherMemory = 1,
                                                                                                                            lietKynes = 1,
                                                                                                                            wormRiders = 2,
                                                                                                                            reverendMotherMohiam = 1,
                                                                                                                            powerPlay = 3,
                                                                                                                            duncanLoyalBlade = 1, -- Deluxe upgrade pack release promo
                                                                                                                        },
                                                                                                                        ix = {
                                                                                                                            boundlessAmbition = 1, -- Rise of Ix release promo
                                                                                                                            guildChiefAdministrator = 1,
                                                                                                                            guildAccord = 1,
                                                                                                                            localFence = 1,
                                                                                                                            shaiHulud = 1,
                                                                                                                            ixGuildCompact = 1,
                                                                                                                            choamDelegate = 1,
                                                                                                                            bountyHunter = 1,
                                                                                                                            embeddedAgent = 1,
                                                                                                                            esmarTuek = 1,
                                                                                                                            courtIntrigue = 1,
                                                                                                                            sayyadina = 1,
                                                                                                                            imperialShockTrooper = 1,
                                                                                                                            appropriate = 1,
                                                                                                                            desertAmbush = 1,
                                                                                                                            inTheShadows = 2,
                                                                                                                            satelliteBan = 1,
                                                                                                                            freighterFleet = 2,
                                                                                                                            imperialBashar = 1,
                                                                                                                            jamis = 1,
                                                                                                                            landingRights = 1,
                                                                                                                            waterPeddler = 1,
                                                                                                                            treachery = 2,
                                                                                                                            truthsayer = 2,
                                                                                                                            spiceTrader = 1,
                                                                                                                            ixianEngineer = 2,
                                                                                                                            webOfPower = 1,
                                                                                                                            weirdingWay = 1,
                                                                                                                            negotiatedWithdrawal = 2,
                                                                                                                            fullScaleAssault = 1,
                                                                                                                        },
                                                                                                                        immortality = {
                                                                                                                            beneTleilaxLab = 1,
                                                                                                                            beneTleilaxResearcher = 1,
                                                                                                                            blankSlate = 1,
                                                                                                                            clandestineMeeting = 1,
                                                                                                                            corruptSmuggler = 1,
                                                                                                                            dissectingKit = 2,
                                                                                                                            forHumanity = 1,
                                                                                                                            highPriorityTravel = 2,
                                                                                                                            imperiumCeremony = 1,
                                                                                                                            interstellarConspiracy = 1,
                                                                                                                            keysToPower = 1,
                                                                                                                            lisanAlGaib = 1,
                                                                                                                            longReach = 1,
                                                                                                                            occupation = 1,
                                                                                                                            organMerchants = 1,
                                                                                                                            plannedCoupling = 2,
                                                                                                                            replacementEyes = 1,
                                                                                                                            sardaukarQuartermaster = 1,
                                                                                                                            shadoutMapes = 1,
                                                                                                                            showOfStrength = 1,
                                                                                                                            spiritualFervor = 2,
                                                                                                                            stillsuitManufacturer = 1,
                                                                                                                            throneRoomPolitics = 1,
                                                                                                                            tleilaxuMaster = 2,
                                                                                                                            tleilaxuSurgeon = 1,
                                                                                                                        },
                                                                                                                        uprising = {
                                                                                                                            unswervingLoyalty = 2,
                                                                                                                            spaceTimeFolding = 1,
                                                                                                                            weirdingWoman = 2,
                                                                                                                            sardaukarSoldier = 1,
                                                                                                                            smugglerHarvester = 2,
                                                                                                                            makerKeeper = 2,
                                                                                                                            reliableInformant = 1,
                                                                                                                            hiddenMissive = 1,
                                                                                                                            wheelsWithinWheels = 1,
                                                                                                                            fedaykinStilltent = 1,
                                                                                                                            imperialSpymaster = 1,
                                                                                                                            spyNetwork = 1,
                                                                                                                            desertSurvival = 2,
                                                                                                                            undercoverAsset = 1,
                                                                                                                            beneGesseritOperative = 2,
                                                                                                                            maulaPistol = 2,
                                                                                                                            thumper = 1,
                                                                                                                            nothernWatermaster = 1,
                                                                                                                            covertOperation = 1,
                                                                                                                            doubleAgent = 2,
                                                                                                                            guildEnvoy = 1,
                                                                                                                            rebelSupplier = 2,
                                                                                                                            calculusOfPower = 2,
                                                                                                                            guildSpy = 1,
                                                                                                                            dangerousRhetoric = 1,
                                                                                                                            branchingPath = 1,
                                                                                                                            ecologicalTestingStation = 1,
                                                                                                                            theBeastSpoils = 1,
                                                                                                                            smugglerHaven = 1,
                                                                                                                            shishakli = 1,
                                                                                                                            paracompass = 1,
                                                                                                                            sardaukarCoordination = 2,
                                                                                                                            truthtrance = 2,
                                                                                                                            publicSpectable = 2,
                                                                                                                            southernElders = 1,
                                                                                                                            treadInDarkness = 2,
                                                                                                                            spacingGuildFavor = 2,
                                                                                                                            capturedMentat = 1,
                                                                                                                            subversiveAdvisor = 1,
                                                                                                                            leadership = 1,
                                                                                                                            inHighPlaces = 1,
                                                                                                                            strikeFleet = 1,
                                                                                                                            trecherousManeuver = 1,
                                                                                                                            chaniCleverTactician = 1,
                                                                                                                            junctionHeadquarters = 1,
                                                                                                                            corrinthCity = 1,
                                                                                                                            stilgarTheDevoted = 1,
                                                                                                                            desertPower = 1,
                                                                                                                            arrakisRevolt = 1,
                                                                                                                            priceIsNoObject = 1,
                                                                                                                            longLiveTheFighters = 1,
                                                                                                                            overthrow = 1,
                                                                                                                            steersman = 1,
                                                                                                                            -- bloodlines imperium
                                                                                                                            bl_Bombast = 1,
                                                                                                                            bl_Sandwalk = 2,
                                                                                                                            bl_DisruptionTactics = 1,
                                                                                                                            bl_UrgentShigawire = 2,
                                                                                                                            bl_EliminateAllies = 1,
                                                                                                                            bl_DeliverLogistics = 2,
                                                                                                                            bl_CommandCenter = 1,
                                                                                                                            bl_EngineeredMiracle = 1,
                                                                                                                            bl_IBelieve = 1,
                                                                                                                            bl_LitanyAgainstFear = 1,
                                                                                                                            bl_EliteForces = 1,
                                                                                                                            bl_ArrakisObserver = 1,
                                                                                                                            bl_IntelligenceTraining = 2,
                                                                                                                            bl_RuthlessLeadership = 1,
                                                                                                                            bl_FremenWarName = 1,
                                                                                                                            bl_SardaukarStandard = 1,
                                                                                                                            bl_ShroudedCounsel = 1,
                                                                                                                            bl_CorruptBureaucrat = 1,
                                                                                                                            bl_IxianAmbassador = 2,
                                                                                                                            bl_QuashRebellion = 2,
                                                                                                                            bl_SouthernFaith = 1,
                                                                                                                            bl_HolyWar = 1,
                                                                                                                            bl_MercantileAffairs = 1,
                                                                                                                            bl_PointingTheWay = 1,
                                                                                                                            bl_ChoamDemands = 1,
                                                                                                                            bl_ImperialThroneship = 1,
                                                                                                                            bl_PossibleFutures = 1,
                                                                                                                        },
                                                                                                                        uprisingContract = {
                                                                                                                            cargoRunner = 1,
                                                                                                                            deliveryAgreement = 1,
                                                                                                                            priorityContracts = 1,
                                                                                                                            interstellarTrade = 1,
                                                                                                                        },
                                                                                                                        merakon = {
                                                                                                                            -- Remove one copy of the following cards from the Uprising Imperium deck
                                                                                                                            -- (Uprising comes with 2 each of these cards, so there's still 1 copy left after the removals):
                                                                                                                            weirdingWoman = -1,
                                                                                                                            desertSurvival = -1,
                                                                                                                            makerKeeper = -1,
                                                                                                                            beneGesseritOperative = -1,
                                                                                                                            maulaPistol = -1,
                                                                                                                            treadInDarkness = -1,
                                                                                                                            -- Add the following cards:
                                                                                                                            -- Legacy
                                                                                                                            assassinationMission = 1,
                                                                                                                            sardaukarInfantry = 1,
                                                                                                                            missionariaProtectiva = 1,
                                                                                                                            guildAdministrator = 1,
                                                                                                                            imperialSpy = 1,
                                                                                                                            spiceHunter = 1,
                                                                                                                            spiceSmugglers = 1,
                                                                                                                            theVoice = 1,
                                                                                                                            beneGesseritSister = 1,
                                                                                                                            crysknife = 1,
                                                                                                                            fedaykinDeathCommando = 1,
                                                                                                                            guildBankers = 1,
                                                                                                                            spaceTravel = 1,
                                                                                                                            otherMemory = 1,
                                                                                                                            sietchReverendMother = 1,
                                                                                                                            gunThopter = 1,
                                                                                                                            powerPlay = 1,
                                                                                                                            thufirHawat = 1,
                                                                                                                            reverendMotherMohiam = 1,
                                                                                                                            -- Ix
                                                                                                                            waterPeddler = 1,
                                                                                                                            truthsayer = 1,
                                                                                                                            weirdingWay = 1,
                                                                                                                            fremenCamp = 1,
                                                                                                                            imperialBashar = 1,
                                                                                                                            negotiatedWithdrawal = 1,
                                                                                                                            spiceTrader = 1,
                                                                                                                            esmarTuek = 1,
                                                                                                                            satelliteBan = 1,
                                                                                                                            treachery = 1,
                                                                                                                            shaiHulud = 1,
                                                                                                                            -- 93 Imperium cards total (69-6+30) (Not counting promo cards I guess?)
                                                                                                                        },
                                                                                                                    },
                                                                                                                    special = {
                                                                                                                        legacy = {
                                                                                                                            foldspace = 6,
                                                                                                                        },
                                                                                                                        immortality = {
                                                                                                                            reclaimedForces = 1,
                                                                                                                        },
                                                                                                                        uprising = {
                                                                                                                            prepareTheWay = 8,
                                                                                                                            theSpiceMustFlow = 10,
                                                                                                                        },
                                                                                                                    },
                                                                                                                    tleilaxu = {
                                                                                                                        piterGeniusAdvisor = 1, -- Immortality release promo
                                                                                                                        beguilingPheromones = 1,
                                                                                                                        chairdog = 1,
                                                                                                                        contaminator = 1,
                                                                                                                        corrinoGenes = 1,
                                                                                                                        faceDancer = 1,
                                                                                                                        faceDancerInitiate = 1,
                                                                                                                        fromTheTanks = 1,
                                                                                                                        ghola = 1,
                                                                                                                        guildImpersonator = 1,
                                                                                                                        industrialEspionage = 1,
                                                                                                                        scientificBreakthrough = 1,
                                                                                                                        sligFarmer = 1,
                                                                                                                        stitchedHorror = 1,
                                                                                                                        subjectX137 = 1,
                                                                                                                        tleilaxuInfiltrator = 1,
                                                                                                                        twistedMentat = 1,
                                                                                                                        unnaturalReflexes = 1,
                                                                                                                        usurp = 1
                                                                                                                    },
                                                                                                                    intrigue = {
                                                                                                                        legacy = {
                                                                                                                            bribery = 1,
                                                                                                                            refocus = 1,
                                                                                                                            ambush = 2,
                                                                                                                            alliedArmada = 1,
                                                                                                                            favoredSubject = 1,
                                                                                                                            demandRespect = 1,
                                                                                                                            poisonSnooper = 2,
                                                                                                                            guildAuthorization = 1,
                                                                                                                            dispatchAnEnvoy = 2,
                                                                                                                            infiltrate = 1,
                                                                                                                            knowTheirWays = 1,
                                                                                                                            masterTactician = 3,
                                                                                                                            plansWithinPlans = 1,
                                                                                                                            privateArmy = 2,
                                                                                                                            doubleCross = 1,
                                                                                                                            councilorsDispensation = 1,
                                                                                                                            cornerTheMarket = 1,
                                                                                                                            charisma = 1,
                                                                                                                            --calculatedHire = 1,
                                                                                                                            choamShares = 1,
                                                                                                                            bypassProtocol = 1,
                                                                                                                            recruitmentMission = 1,
                                                                                                                            reinforcements = 1,
                                                                                                                            binduSuspension = 1,
                                                                                                                            secretOfTheSisterhood = 1,
                                                                                                                            rapidMobilization = 1,
                                                                                                                            stagedIncident = 1,
                                                                                                                            theSleeperMustAwaken = 1,
                                                                                                                            tiebreaker = 1,
                                                                                                                            toTheVictor = 1,
                                                                                                                            waterPeddlersUnion = 1,
                                                                                                                            windfall = 1,
                                                                                                                            waterOfLife = 1,
                                                                                                                            urgentMission = 1,
                                                                                                                        },
                                                                                                                        ix = {
                                                                                                                            diversion = 1,
                                                                                                                            warChest = 1,
                                                                                                                            advancedWeaponry = 1,
                                                                                                                            secretForces = 1,
                                                                                                                            grandConspiracy = 1,
                                                                                                                            cull = 1,
                                                                                                                            strategicPush = 1,
                                                                                                                            blackmail = 1,
                                                                                                                            machineCulture = 1,
                                                                                                                            cannonTurrets = 1,
                                                                                                                            expedite = 1,
                                                                                                                            ixianProbe = 1,
                                                                                                                            secondWave = 1,
                                                                                                                            glimpseThePath = 1,
                                                                                                                            finesse = 1,
                                                                                                                            strongarm = 1,
                                                                                                                            quidProQuo = 1,
                                                                                                                        },
                                                                                                                        immortality = {
                                                                                                                            breakthrough = 1,
                                                                                                                            counterattack = 1,
                                                                                                                            disguisedBureaucrat = 1,
                                                                                                                            economicPositioning = 1,
                                                                                                                            gruesomeSacrifice = 2,
                                                                                                                            harvestCells = 2,
                                                                                                                            illicitDealings = 2,
                                                                                                                            shadowyBargain = 1,
                                                                                                                            studyMelange = 1,
                                                                                                                            tleilaxuPuppet = 1,
                                                                                                                            viciousTalents = 2,
                                                                                                                        },
                                                                                                                        uprising = {
                                                                                                                            sietchRitual = 1,
                                                                                                                            mercenaries = 1,
                                                                                                                            councilorAmbition = 1,
                                                                                                                            strategicStockpiling = 1,
                                                                                                                            detonation = 2,
                                                                                                                            departForArrakis = 1,
                                                                                                                            cunning = 1,
                                                                                                                            opportunism = 1,
                                                                                                                            changeAllegiances = 1,
                                                                                                                            specialMission = 2,
                                                                                                                            unexpectedAllies = 1,
                                                                                                                            callToArms = 1,
                                                                                                                            buyAccess = 1,
                                                                                                                            imperiumPolitics = 1,
                                                                                                                            shaddamFavor = 1,
                                                                                                                            intelligenceReport = 1,
                                                                                                                            manipulate = 1,
                                                                                                                            distraction = 2,
                                                                                                                            marketOpportunity = 1,
                                                                                                                            goToGround = 1,
                                                                                                                            contingencyPlan = 3,
                                                                                                                            inspireAwe = 1,
                                                                                                                            findWeakness = 1,
                                                                                                                            spiceIsPower = 1,
                                                                                                                            devour = 1,
                                                                                                                            impress = 1,
                                                                                                                            springTheTrap = 1,
                                                                                                                            weirdingCombat = 1,
                                                                                                                            tacticalOption = 1,
                                                                                                                            questionableMethods = 1,
                                                                                                                            desertMouse = 1,
                                                                                                                            ornithopter = 1,
                                                                                                                            crysknife = 1,
                                                                                                                            shadowAlliance = 1,
                                                                                                                            secureSpiceTrade = 1,
                                                                                                                            -- bloodlines intrigues
                                                                                                                            bl_AdaptiveTactics = 1,
                                                                                                                            bl_DesertSupport = 1,
                                                                                                                            bl_EmperorsInvitation = 1,
                                                                                                                            bl_HonorGuard = 1,
                                                                                                                            bl_ReturnTheFavor = 1,
                                                                                                                            bl_SacredPools = 1,
                                                                                                                            bl_SeizeProduction = 1,
                                                                                                                            bl_TheStrongSurvive = 1,
                                                                                                                            bl_TenuousBond = 1,
                                                                                                                            bl_WithdrawalAgreement = 1,
                                                                                                                            bl_FalseOrders = 1,
                                                                                                                            bl_GraspArrakis = 1,
                                                                                                                            bl_InsiderInformation = 1,
                                                                                                                            bl_RipplesInTheSand = 1,
                                                                                                                            bl_SleeperUnit = 1,
                                                                                                                            bl_CoerciveNegotiation = 1,
                                                                                                                            bl_BattlefieldResearch = 1,
                                                                                                                            bl_RapidEngineering = 1,
                                                                                                                            -- bl_Piter_Withdrawn = 1,
                                                                                                                            -- bl_Piter_Unnatural = 1,
                                                                                                                            -- bl_Piter_Ambitious = 1,
                                                                                                                            -- bl_Piter_Resourceful = 1,
                                                                                                                            -- bl_Piter_Shrewd = 1,
                                                                                                                            -- bl_Piter_Sinister = 1,
                                                                                                                            -- bl_Piter_Sadistic = 1,
                                                                                                                            -- bl_Piter_Discerning = 1,
                                                                                                                            -- bl_Piter_Devious = 1,
                                                                                                                            -- bl_Piter_Controlled = 1,
                                                                                                                            -- bl_Piter_Calculating = 1,
                                                                                                                            -- bl_Piter_Insidious = 1,
                                                                                                                        },
                                                                                                                        uprisingContract = {
                                                                                                                            leverage = 1,
                                                                                                                            backedByChoam = 1,
                                                                                                                            reachAgreement = 1,
                                                                                                                            choamProfits = 1,
                                                                                                                        },
                                                                                                                        merakon = {
                                                                                                                            -- No cuts from Uprising.
                                                                                                                            -- Add the following cards (all from DI):
                                                                                                                            alliedArmada = 1,
                                                                                                                            binduSuspension = 1,
                                                                                                                            bypassProtocol = 1,
                                                                                                                            councilorsDispensation = 1,
                                                                                                                            demandRespect = 1,
                                                                                                                            dispatchAnEnvoy = 1,
                                                                                                                            masterTactician = 1,
                                                                                                                            plansWithinPlans = 1,
                                                                                                                            poisonSnooper = 1,
                                                                                                                            reinforcements = 1,
                                                                                                                            stagedIncident = 1,
                                                                                                                            tiebreaker = 1,
                                                                                                                            -- 56 Intrigue cards total (44+12)
                                                                                                                        },
                                                                                                                    },
                                                                                                                    conflict = {
                                                                                                                        level1 = {
                                                                                                                            uprising = {
                                                                                                                                skirmishA = 1,
                                                                                                                                skirmishB = 1,
                                                                                                                                skirmishC = 1,
                                                                                                                                -- bloodlines conflict
                                                                                                                                bl_Skirmish = 1,
                                                                                                                            },
                                                                                                                        },
                                                                                                                        level2 = {
                                                                                                                            uprising = {
                                                                                                                                choamSecurity = 1,
                                                                                                                                spiceFreighters = 1,
                                                                                                                                siegeOfArrakeen = 1,
                                                                                                                                seizeSpiceRefinery = 1,
                                                                                                                                testOfLoyalty = 1,
                                                                                                                                shadowContest = 1,
                                                                                                                                secureImperialBasin = 1,
                                                                                                                                protectTheSietches = 1,
                                                                                                                                tradeDispute = 1,
                                                                                                                                -- bloodlines conflict
                                                                                                                                bl_StormsInTheSouth = 1,
                                                                                                                            },
                                                                                                                        },
                                                                                                                        level3 = {
                                                                                                                            ix = {
                                                                                                                                economicSupremacy = 1,
                                                                                                                            },
                                                                                                                            uprising = {
                                                                                                                                propaganda = 1,
                                                                                                                                battleForImperialBasin = 1,
                                                                                                                                battleForArrakeen = 1,
                                                                                                                                battleForSpiceRefinery = 1,
                                                                                                                            }},
                                                                                                                        },
                                                                                                                        hagal = {
                                                                                                                            base = {
                                                                                                                                common = {
                                                                                                                                    --churn = 2,
                                                                                                                                    placeSpyYellow = 1,
                                                                                                                                    placeSpyBlue = 1,
                                                                                                                                    placeSpyGreen = 1,
                                                                                                                                    sardaukar = 2,
                                                                                                                                    dutifulService = 1,
                                                                                                                                    heighliner = 1,
                                                                                                                                    deliverSuppliesAndHeighliner = 2,
                                                                                                                                    espionage = 2,
                                                                                                                                    secrets = 1,
                                                                                                                                    desertTactics = 2,
                                                                                                                                    fremkit = 2,
                                                                                                                                    assemblyHall = 1,
                                                                                                                                    gatherSupport1 = 1, -- 1 troop
                                                                                                                                    gatherSupport2 = 1, -- 2 infl
                                                                                                                                    acceptContractAndShipping1 = 1,
                                                                                                                                    acceptContractAndShipping2 = 1, -- 3 infl
                                                                                                                                    researchStation = 2,
                                                                                                                                    spiceRefinery = 3,
                                                                                                                                    arrakeen = 2,
                                                                                                                                    sietchTabr = 3,
                                                                                                                                    haggaBasinAndImperialBasin = 4,
                                                                                                                                    deepDesert = 2,
                                                                                                                                },
                                                                                                                                solo = {},
                                                                                                                                twoPlayers = {
                                                                                                                                    reshuffle = 1,
                                                                                                                                }},
                                                                                                                                ix = {
                                                                                                                                    common = {
                                                                                                                                        assemblyHall = Helper.ERASE,
                                                                                                                                        gatherSupport1 = Helper.ERASE,
                                                                                                                                        gatherSupport2 = Helper.ERASE,
                                                                                                                                        acceptContractAndShipping1 = Helper.ERASE,
                                                                                                                                        acceptContractAndShipping2 = Helper.ERASE,
                                                                                                                                        interstellarShipping = 1,
                                                                                                                                        deliverSuppliesAndInterstellarShipping = 1, -- ex foldspaceAndInterstellarShipping
                                                                                                                                        smugglingAndInterstellarShipping = 1,
                                                                                                                                    },
                                                                                                                                    solo = {
                                                                                                                                        techNegotiation = 2,
                                                                                                                                        dreadnought1p = 2,
                                                                                                                                    },
                                                                                                                                    twoPlayers = {
                                                                                                                                        dreadnought2p = 2,
                                                                                                                                    }},
                                                                                                                                    immortality = {
                                                                                                                                        common = {},
                                                                                                                                        solo = {
                                                                                                                                            researchStation = 1,
                                                                                                                                            researchStationImmortality = 1,
                                                                                                                                            carthag = Helper.ERASE,
                                                                                                                                            tleilaxuBonus1 = 1, -- ex Carthag
                                                                                                                                            tleilaxuBonus2 = 1, -- ex Carthag
                                                                                                                                            tleilaxuBonus3 = 1, -- ex Carthag
                                                                                                                                        },
                                                                                                                                    twoPlayers = {}}},
                                                                                                                                    tech = {
                                                                                                                                        ix = {
                                                                                                                                            spaceport = 1,
                                                                                                                                            restrictedOrdnance = 1,
                                                                                                                                            artillery = 1,
                                                                                                                                            disposalFacility = 1,
                                                                                                                                            holoprojectors = 1,
                                                                                                                                            minimicFilm = 1,
                                                                                                                                            windtraps = 1,
                                                                                                                                            detonationDevices = 1,
                                                                                                                                            memocorders = 1,
                                                                                                                                            flagship = 1,
                                                                                                                                            shuttleFleet = 1,
                                                                                                                                            spySatellites = 1,
                                                                                                                                            chaumurky = 1,
                                                                                                                                            sonicSnoopers = 1,
                                                                                                                                            trainingDrones = 1,
                                                                                                                                            troopTransports = 1,
                                                                                                                                            holtzmanEngine = 1,
                                                                                                                                            invasionShips = 1,
                                                                                                                                        },
                                                                                                                                        -- bloodlines techs
                                                                                                                                        uprising = {
                                                                                                                                            bl_TrainingDepot = 1,
                                                                                                                                            bl_GeneLockedVault = 1,
                                                                                                                                            bl_Glowglobes = 1,
                                                                                                                                            bl_PlanetaryArray = 1,
                                                                                                                                            bl_ServoReceivers = 1,
                                                                                                                                            bl_DeliveryBay = 1,
                                                                                                                                            bl_PlasteelBlades = 1,
                                                                                                                                            bl_SuspensorSuits = 1,
                                                                                                                                            bl_RapidDropships = 1,
                                                                                                                                            bl_SelfDestroyingMessages = 1,
                                                                                                                                            bl_NavigationChamber = 1,
                                                                                                                                            bl_SardaukarHighCommand = 1,
                                                                                                                                            bl_ForbiddenWeapons = 1,
                                                                                                                                            bl_AdvancedDataAnalysis = 1,
                                                                                                                                            bl_OrnithopterFleet = 1,
                                                                                                                                            bl_Panopticon = 1,
                                                                                                                                            bl_SpyDrones = 1,
                                                                                                                                            bl_ChoamTransports = 1,
                                                                                                                                        }},
                                                                                                                                        leaders = {
                                                                                                                                            legacy = {
                                                                                                                                                vladimirHarkonnen = 1,
                                                                                                                                                glossuRabban = 1,
                                                                                                                                                ilbanRichese = 1,
                                                                                                                                                helenaRichese = 1,
                                                                                                                                                letoAtreides = 1,
                                                                                                                                                paulAtreides = 1,
                                                                                                                                                arianaThorvald = 1,
                                                                                                                                                memnonThorvald = 1,
                                                                                                                                            },
                                                                                                                                            ix = {
                                                                                                                                                armandEcaz = 1,
                                                                                                                                                ilesaEcaz = 1,
                                                                                                                                                rhomburVernius = 1,
                                                                                                                                                tessiaVernius = 1,
                                                                                                                                                yunaMoritani = 1,
                                                                                                                                                hundroMoritani = 1,
                                                                                                                                            },
                                                                                                                                            uprising = {
                                                                                                                                                stabanTuek = 1,
                                                                                                                                                amberMetulli = 1,
                                                                                                                                                gurneyHalleck = 1,
                                                                                                                                                margotFenring = 1,
                                                                                                                                                irulanCorrino = 1,
                                                                                                                                                jessica = 1,
                                                                                                                                                feydRauthaHarkonnen = 1,
                                                                                                                                                shaddamCorrino = 1,
                                                                                                                                                muadDib = 1,
                                                                                                                                                -- bloodlines leaders
                                                                                                                                                bl_Chani = 1,
                                                                                                                                                bl_Duncan = 1,
                                                                                                                                                bl_Esmar = 1,
                                                                                                                                                bl_Hasimir = 1,
                                                                                                                                                bl_Kota = 1,
                                                                                                                                                bl_Liet = 1,
                                                                                                                                                bl_Mohiam = 1,
                                                                                                                                                bl_Piter = 1,
                                                                                                                                                bl_Yrkoon = 1,
                                                                                                                                            },
                                                                                                                                            merakon = {
                                                                                                                                                -- Legacy
                                                                                                                                                vladimirHarkonnen = 1,
                                                                                                                                                glossuRabban = 1,
                                                                                                                                                ilbanRichese = 1,
                                                                                                                                                arianaThorvald = 1,
                                                                                                                                                memnonThorvald = 1,
                                                                                                                                                armandEcaz = 1,
                                                                                                                                                ilesaEcaz = 1,
                                                                                                                                                -- Ix
                                                                                                                                                tessiaVernius = 1,
                                                                                                                                                yunaMoritani = 1,
                                                                                                                                            },
                                                                                                                                            free = {
                                                                                                                                                -- Legacy
                                                                                                                                                vladimirHarkonnen = 0.5,
                                                                                                                                                glossuRabban = 0.5,
                                                                                                                                                ilbanRichese = 0.5,
                                                                                                                                                helenaRichese = 0.5,
                                                                                                                                                letoAtreides = 0.5,
                                                                                                                                                paulAtreides = 0.5,
                                                                                                                                                arianaThorvald = 0.5,
                                                                                                                                                memnonThorvald = 0.5,
                                                                                                                                                -- Ix
                                                                                                                                                armandEcaz = 0.5,
                                                                                                                                                ilesaEcaz = 0.5,
                                                                                                                                                tessiaVernius = 0.5,
                                                                                                                                                yunaMoritani = 0.5,
                                                                                                                                                -- Uprising
                                                                                                                                                stabanTuek = 0.5,
                                                                                                                                                amberMetulli = 0.5,
                                                                                                                                                gurneyHalleck = 0.5,
                                                                                                                                                margotFenring = 0.5,
                                                                                                                                                irulanCorrino = 0.5,
                                                                                                                                                jessica = 0.5,
                                                                                                                                                feydRauthaHarkonnen = 0.5,
                                                                                                                                                shaddamCorrino = 0.5,
                                                                                                                                                muadDib = 0.5,
                                                                                                                                            }},
                                                                                                                                            rivalLeaders = {
                                                                                                                                                uprising = {
                                                                                                                                                    vladimirHarkonnen = 1,
                                                                                                                                                    glossuRabban = 1,
                                                                                                                                                    stabanTuek = 1,
                                                                                                                                                    amberMetulli = 1,
                                                                                                                                                    gurneyHalleck = 1,
                                                                                                                                                    margotFenring = 1,
                                                                                                                                                    irulanCorrino = 1,
                                                                                                                                                    jessica = 1,
                                                                                                                                                    feydRauthaHarkonnen = 1,
                                                                                                                                                    muadDib = 1,
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        }

                                                                                                                                        ---
                                                                                                                                        function Deck.rebuildPreloadAreas()
                                                                                                                                            Locale.onLoad()
                                                                                                                                            local allSupports = {
                                                                                                                                                en = require("en.Deck"),
                                                                                                                                                fr = require("fr.Deck"),
                                                                                                                                            }

                                                                                                                                            Deck.prebuildZones = Helper.resolveGUIDs(true, {
                                                                                                                                                en = "a5a2e6",
                                                                                                                                                fr = "db4507",
                                                                                                                                            })

                                                                                                                                            for _, prebuildZone in pairs(Deck.prebuildZones) do
                                                                                                                                                for _, object in ipairs(prebuildZone.getObjects()) do
                                                                                                                                                    if object.type == "Deck" then
                                                                                                                                                        object.destruct()
                                                                                                                                                    end
                                                                                                                                                end
                                                                                                                                            end

                                                                                                                                            Helper.onceFramesPassed(1).doAfter(function ()
                                                                                                                                                for language, _ in pairs(allSupports) do
                                                                                                                                                    I18N.setLocale(language)

                                                                                                                                                    local support = allSupports[language]
                                                                                                                                                    Deck.sources = support.loadCustomDecks(Deck)

                                                                                                                                                    local areas = getObjectsWithTag("deckPreloadArea" .. language)
                                                                                                                                                    assert(#areas == 1)
                                                                                                                                                    local origin = areas[1].getPosition()

                                                                                                                                                    local i = 0
                                                                                                                                                    local getNextPosition = function ()
                                                                                                                                                        local p = origin + Vector(math.floor(i / 9) * 4 - 2, 2, 4 * (i % 9) - 16)
                                                                                                                                                        i = i + 1
                                                                                                                                                        return p
                                                                                                                                                    end

                                                                                                                                                    Deck._prebuildStarterDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildEmperorStarterDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildMuadDibStarterDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildImperiumDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildSpecialDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildTleilaxuDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildIntrigueDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildObjectiveDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildTechDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildConflictDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildHagalDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildLeaderDeck(getNextPosition())
                                                                                                                                                    Deck._prebuildRivalLeaderDeck(getNextPosition())
                                                                                                                                                end
                                                                                                                                            end)
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.onLoad()
                                                                                                                                            Deck.prebuildZones = Helper.resolveGUIDs(true, {
                                                                                                                                                en = "a5a2e6",
                                                                                                                                                fr = "db4507",
                                                                                                                                            })

                                                                                                                                            for _, prebuildZone in pairs(Deck.prebuildZones) do
                                                                                                                                                for _, object in ipairs(prebuildZone.getObjects()) do
                                                                                                                                                    object.setInvisibleTo(Player.getColors())
                                                                                                                                                end
                                                                                                                                            end
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.setUp(settings)
                                                                                                                                            -- Not needed anymore since we are relying on prebuild decks now.
                                                                                                                                            -- (But deck sources are still needed in "rebuildPreloadAreas".)
                                                                                                                                            if false then
                                                                                                                                                local support

                                                                                                                                                if settings.language == "en" then
                                                                                                                                                    support = require("en.Deck")
                                                                                                                                                elseif settings.language == "fr" then
                                                                                                                                                    support = require("fr.Deck")
                                                                                                                                                else
                                                                                                                                                    error("Unsupported language: " .. settings.language)
                                                                                                                                                end

                                                                                                                                                Deck.sources = support.loadCustomDecks(Deck)
                                                                                                                                            end
                                                                                                                                        end

                                                                                                                                        function Deck.getAcquireCardDecalUrl(name)
                                                                                                                                            local decalUrl = Deck.decals[name .. "AcquireCard"]
                                                                                                                                            assert(decalUrl, name)
                                                                                                                                            return decalUrl
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateObjectiveDeck(deckZone, cardNames)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateObjectiveDeck")
                                                                                                                                            Deck._generateDeck("Objective", deckZone, cardNames, Deck.sources.objective, 0.5).doAfter(continuation.run)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateStarterDeck(deckZone, immortality, epic)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateStarterDeck")
                                                                                                                                            local contributionSets = {Deck.starter.base}
                                                                                                                                            if immortality then
                                                                                                                                                table.insert(contributionSets, Deck.starter.immortality)
                                                                                                                                            end
                                                                                                                                            local contributions = Deck._mergeContributionSets(contributionSets)
                                                                                                                                            if not immortality and epic then
                                                                                                                                                contributions["duneTheDesertPlanet"] = 1
                                                                                                                                                contributions["controlTheSpice"] = 1
                                                                                                                                            end
                                                                                                                                            Deck._generateDeck("Imperium", deckZone, contributions, Deck.sources.imperium).doAfter(continuation.run)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateEmperorStarterDeck(deckZone)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateEmperorStarterDeck")
                                                                                                                                            local contributionSets = {Deck.starter.emperor}
                                                                                                                                            local contributions = Deck._mergeContributionSets(contributionSets)
                                                                                                                                            Deck._generateDeck("Imperium", deckZone, contributions, Deck.sources.imperium).doAfter(continuation.run)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateMuadDibStarterDeck(deckZone)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateMuadDibStarterDeck")
                                                                                                                                            local contributionSets = {Deck.starter.muadDib}
                                                                                                                                            local contributions = Deck._mergeContributionSets(contributionSets)
                                                                                                                                            Deck._generateDeck("Imperium", deckZone, contributions, Deck.sources.imperium).doAfter(continuation.run)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateStarterDiscard(deckZone, immortality, epic)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateStarterDiscard")
                                                                                                                                            if immortality and epic then
                                                                                                                                                Deck._generateDeck("Imperium", deckZone, Deck.starter.epic, Deck.sources.imperium).doAfter(function (deck)
                                                                                                                                                    deck.flip()
                                                                                                                                                    continuation.run(deck)
                                                                                                                                                end)
                                                                                                                                            else
                                                                                                                                                continuation.cancel()
                                                                                                                                            end
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateImperiumDeck(deckZone, contracts, ix, immortality, legacy, merakon)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateImperiumDeck")
                                                                                                                                            local contributions = Deck._mergeStandardContributionSets(Deck.imperium, ix, immortality, legacy, merakon)
                                                                                                                                            if contracts then
                                                                                                                                                contributions = Deck._mergeContributionSets({contributions, Deck.imperium.uprisingContract})
                                                                                                                                            end
                                                                                                                                            Deck._generateDeck("Imperium", deckZone, contributions, Deck.sources.imperium).doAfter(continuation.run)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateSpecialDeck(deckZone, parent, name)
                                                                                                                                            assert(deckZone, name)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateSpecialDeck")
                                                                                                                                            assert(name)
                                                                                                                                            assert(Deck.special[parent][name], name)
                                                                                                                                            local contributions = {[name] = Deck.special[parent][name]}
                                                                                                                                            Deck._generateDeck("Imperium", deckZone, contributions, Deck.sources.special).doAfter(function (deck)
                                                                                                                                                deck.flip()
                                                                                                                                                Helper.onceMotionless(deck).doAfter(continuation.run)
                                                                                                                                            end)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateTleilaxuDeck(deckZone)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateTleilaxuDeck")
                                                                                                                                            Deck._generateDeck("Imperium", deckZone, Deck.tleilaxu, Deck.sources.tleilaxu).doAfter(continuation.run)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateIntrigueDeck(deckZone, contracts, ix, immortality, legacy, merakon)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateIntrigueDeck")
                                                                                                                                            local contributions = Deck._mergeStandardContributionSets(Deck.intrigue, ix, immortality, legacy, merakon)
                                                                                                                                            if contracts then
                                                                                                                                                contributions = Deck._mergeContributionSets({contributions, Deck.intrigue.uprisingContract})
                                                                                                                                            end
                                                                                                                                            Deck._generateDeck("Intrigue", deckZone, contributions, Deck.sources.intrigue).doAfter(continuation.run)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateTechDeck(deckZones)
                                                                                                                                            assert(deckZones)
                                                                                                                                            assert(#deckZones == 3)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateTechDeck")
                                                                                                                                            -- bloodlines disabled ix techs, used code for bloodlines techs
                                                                                                                                            -- local keys = Helper.getKeys(Deck.tech.ix)
                                                                                                                                            local keys = Helper.getKeys(Deck.tech.uprising)
                                                                                                                                            Helper.shuffle(keys)

                                                                                                                                            local decks = {}

                                                                                                                                            local remaining = 0
                                                                                                                                            for i = 1, 3 do
                                                                                                                                                remaining = remaining + 1
                                                                                                                                                local part = {}
                                                                                                                                                for j = (i - 1) * 6 + 1, i * 6 do
                                                                                                                                                    -- bloodlines disabled ix techs, used code for bloodlines techs
                                                                                                                                                    -- part[keys[j]] = Deck.tech.ix[keys[j]]
                                                                                                                                                    part[keys[j]] = Deck.tech.uprising[keys[j]]
                                                                                                                                                end
                                                                                                                                                local zone = deckZones[i]
                                                                                                                                                Deck._generateDeck("Tech", zone, part, Deck.sources.tech).doAfter(function (deck)
                                                                                                                                                    local above = zone.getPosition() + Vector(0, 1, 0)
                                                                                                                                                    Helper.moveCardFromZone(zone, above, nil, true, true)
                                                                                                                                                    table.insert(decks, deck)
                                                                                                                                                    remaining = remaining - 1
                                                                                                                                                    if remaining == 0 then
                                                                                                                                                        continuation.run(decks)
                                                                                                                                                    end
                                                                                                                                                end)
                                                                                                                                            end

                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        --
                                                                                                                                        function Deck.generateConflictDeck(deckZone, ix, epic, playerCount)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateConflictDeck")

                                                                                                                                            local cardCounts
                                                                                                                                            if playerCount == 6 then
                                                                                                                                                cardCounts = {0, 5, 4}
                                                                                                                                            elseif epic then
                                                                                                                                                cardCounts = {0, 5, 5}
                                                                                                                                            else
                                                                                                                                                cardCounts = {1, 5, 4}
                                                                                                                                            end

                                                                                                                                            local contributions = {}
                                                                                                                                            for level = 3, 1, -1 do
                                                                                                                                                local cardCount = cardCounts[level]
                                                                                                                                                if cardCount > 0 then
                                                                                                                                                    local levelContributions = Deck._mergeStandardContributionSets(Deck.conflict["level" .. tostring(level)], ix and epic and level == 3, false)
                                                                                                                                                    local cardNames = Helper.getKeys(levelContributions)
                                                                                                                                                    assert(#cardNames >= cardCount, "Not enough level " .. tostring(level) .. " conflict cards!")
                                                                                                                                                    Helper.shuffle(cardNames)
                                                                                                                                                    for i = 1, cardCount do
                                                                                                                                                        contributions[cardNames[i]] = 1
                                                                                                                                                    end
                                                                                                                                                end
                                                                                                                                            end

                                                                                                                                            Deck._generateDeck("Conflict", deckZone, contributions, Deck.sources.conflict, 0.5).doAfter(continuation.run)

                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateHagalDeck(deckZone, ix, immortality, playerCount)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            assert(not playerCount or playerCount == 1 or playerCount == 2)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateHagalDeck")

                                                                                                                                            local contributionSetNames = {"base"}
                                                                                                                                            if ix then
                                                                                                                                                table.insert(contributionSetNames, "ix")
                                                                                                                                            end
                                                                                                                                            if immortality then
                                                                                                                                                table.insert(contributionSetNames, "immortality")
                                                                                                                                            end

                                                                                                                                            local contributionSets = {}
                                                                                                                                            for _, contributionSetName in ipairs(contributionSetNames) do
                                                                                                                                                local root = Deck.hagal[contributionSetName]
                                                                                                                                                table.insert(contributionSets, root.common)
                                                                                                                                                if not playerCount or playerCount == 1 then
                                                                                                                                                    table.insert(contributionSets, root.solo)
                                                                                                                                                elseif not playerCount or playerCount == 2 then
                                                                                                                                                    table.insert(contributionSets, root.twoPlayers)
                                                                                                                                                end
                                                                                                                                            end

                                                                                                                                            local contributions = Deck._mergeContributionSets(contributionSets)
                                                                                                                                            Deck._generateDeck("Hagal", deckZone, contributions, Deck.sources.hagal).doAfter(continuation.run)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateLeaderDeck(deckZone, contracts, ix, immortality, legacy, merakon, free)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateLeaderDeck")
                                                                                                                                            local contributions = Deck._mergeStandardContributionSets(Deck.leaders, ix, immortality, legacy, merakon, free)
                                                                                                                                            contributions = Helper.mapValues(contributions, function (cardinality)
                                                                                                                                                return math.min(cardinality, 1)
                                                                                                                                            end)
                                                                                                                                            if not contracts then
                                                                                                                                                contributions.shaddamCorrino = nil
                                                                                                                                            end
                                                                                                                                            Deck._generateDeck("Leader", deckZone, contributions, Deck.sources.leaders).doAfter(continuation.run)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck.generateRivalLeaderDeck(deckZone, streamlined, ix, immortality, legacy)
                                                                                                                                            assert(deckZone)
                                                                                                                                            assert(deckZone.getPosition)
                                                                                                                                            local continuation = Helper.createContinuation("Deck.generateRivalLeaderDeck")
                                                                                                                                            local contributions = Deck._mergeStandardContributionSets(Deck.rivalLeaders, ix, immortality, legacy)
                                                                                                                                            for rival, _ in pairs(contributions) do
                                                                                                                                                local streamlinedRival = Helper.isElementOf(rival, {"amberMetulli", "glossuRabban"})
                                                                                                                                                if (streamlined == true) ~= streamlinedRival then
                                                                                                                                                    contributions[rival] = nil
                                                                                                                                                end
                                                                                                                                            end
                                                                                                                                            Deck._generateDeck("RivalLeader", deckZone, contributions, Deck.sources.rivalLeaders).doAfter(continuation.run)
                                                                                                                                            return continuation
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck._mergeStandardContributionSets(root, ix, immortality, legacy, merakon, free)
                                                                                                                                            local contributionSets = {root.uprising}
                                                                                                                                            if merakon then
                                                                                                                                                table.insert(contributionSets, root.merakon)
                                                                                                                                            else
                                                                                                                                                if ix then
                                                                                                                                                    table.insert(contributionSets, root.ix)
                                                                                                                                                end
                                                                                                                                                if immortality then
                                                                                                                                                    table.insert(contributionSets, root.immortality)
                                                                                                                                                end
                                                                                                                                                if legacy then
                                                                                                                                                    table.insert(contributionSets, root.legacy)
                                                                                                                                                end
                                                                                                                                                if free then
                                                                                                                                                    table.insert(contributionSets, root.free)
                                                                                                                                                end
                                                                                                                                            end
                                                                                                                                            return Deck._mergeContributionSets(contributionSets)
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck._mergeContributionSets(contributionSets, ignoreErasure)
                                                                                                                                            local contributions = {}
                                                                                                                                            for _, contributionSet in ipairs(contributionSets) do
                                                                                                                                                for name, arity in pairs(contributionSet) do
                                                                                                                                                    local currentArity
                                                                                                                                                    if arity == Helper.ERASE then
                                                                                                                                                        if ignoreErasure then
                                                                                                                                                            currentArity = contributions[name]
                                                                                                                                                        else
                                                                                                                                                            currentArity = nil
                                                                                                                                                        end
                                                                                                                                                    else
                                                                                                                                                        currentArity = contributions[name]
                                                                                                                                                        if currentArity then
                                                                                                                                                            currentArity = currentArity + arity
                                                                                                                                                        else
                                                                                                                                                            currentArity = arity
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                    contributions[name] = currentArity
                                                                                                                                                end
                                                                                                                                            end
                                                                                                                                            return contributions
                                                                                                                                        end

                                                                                                                                        --- Load part of a "custom deck" (an image made of tiled cards) into a named card
                                                                                                                                        --- collection. Only the cards listed in cardNames are added.
                                                                                                                                        --- The startLuaIndex could be greater than 1 to skip the first cards, whereas
                                                                                                                                        --- empty names ("") allows to skip intermediate cards.
                                                                                                                                        ---@param cards any The set where to add the namec cards.
                                                                                                                                        ---@param customDeck any A custom deck (API struct) as returned by Deck.createImperiumCustomDeck.
                                                                                                                                        ---@param startLuaIndex any The Lua start index for the card names.
                                                                                                                                        ---@param cardNames any An list of card names matching those in the custon deck.
                                                                                                                                        function Deck.loadCustomDeck(cards, customDeck, startLuaIndex, cardNames)
                                                                                                                                            assert(cards)
                                                                                                                                            assert(customDeck)
                                                                                                                                            assert(startLuaIndex and startLuaIndex > 0)
                                                                                                                                            assert(cardNames)
                                                                                                                                            for i, name in ipairs(cardNames) do
                                                                                                                                                if name ~= "" then
                                                                                                                                                    cards[name] = {customDeck = customDeck, luaIndex = startLuaIndex + i - 1}
                                                                                                                                                end
                                                                                                                                            end
                                                                                                                                        end

                                                                                                                                        ---
                                                                                                                                        function Deck._generateCardData(customDeck, customDeckId, cardId)
                                                                                                                                            assert(customDeck, "customDeck")
                                                                                                                                            assert(customDeckId, "customDeckId")
                                                                                                                                            assert(cardId, "cardId")

                                                                                                                                            assert(customDeck.__scale)

                                                                                                                                            Deck.nextGuid = (Deck.nextGuid or 665) + 1
                                                                                                                                            local guid = string.format("%06x", Deck.nextGuid)

                                                                                                                                            local data = {
                                                                                                                                                GUID = guid,
                                                                                                                                                Name = "Card",
                                                                                                                                                Transform = {
                                                                                                                                                    posX = 0,
                                                                                                                                                    posY = 0,
                                                                                                                                                    posZ = 0,
                                                                                                                                                    rotX = 0,
                                                                                                                                                    rotY = 0,
                                                                                                                                                    rotZ = 0,
                                                                                                                                                    scaleX = customDeck.__scale.x,
                                                                                                                                                    scaleY = customDeck.__scale.y,
                                                                                                                                                    scaleZ = customDeck.__scale.z
                                                                                                                                                },
                                                                                                                                                Nickname = "",
                                                                                                                                                Description = "",
                                                                                                                                                GMNotes = "",
                                                                                                                                                AltLookAngle = {
                                                                                                                                                    x = 0.0,
                                                                                                                                                    y = 0.0,
                                                                                                                                                    z = 0.0
                                                                                                                                                },
                                                                                                                                                ColorDiffuse = {
                                                                                                                                                    r = 0.713235259,
                                                                                                                                                    g = 0.713235259,
                                                                                                                                                    b = 0.713235259
                                                                                                                                                },
                                                                                                                                                Tags = {},
                                                                                                                                                LayoutGroupSortIndex = 0,
                                                                                                                                                Value = 0,
                                                                                                                                                Locked = false,
                                                                                                                                                Grid = true,
                                                                                                                                                Snap = true,
                                                                                                                                                IgnoreFoW = false,
                                                                                                                                                MeasureMovement = false,
                                                                                                                                                DragSelectable = true,
                                                                                                                                                Autoraise = true,
                                                                                                                                                Sticky = true,
                                                                                                                                                Tooltip = false,
                                                                                                                                                GridProjection = false,
                                                                                                                                                HideWhenFaceDown = true,
                                                                                                                                                Hands = true,
                                                                                                                                                CardID = cardId,
                                                                                                                                                SidewaysCard = false,
                                                                                                                                                CustomDeck = {
                                                                                                                                                    [tostring(customDeckId)] = customDeck
                                                                                                                                                }}

                                                                                                                                                return data
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._generateDeck(deckType, deckZone, contributions, sources, spacing)
                                                                                                                                                assert(deckZone.getPosition)
                                                                                                                                                return Deck._generateFromPrebuildDeck(deckType, deckZone, contributions, sources, spacing)
                                                                                                                                            end

                                                                                                                                            --- Add 2 back cards such as to always have a deck to take cards from.
                                                                                                                                            function Deck._generateDynamicDeckWithTwoBackCards(deckType, position, contributions, sources)
                                                                                                                                                local contributions2 = Helper.shallowCopy(contributions)
                                                                                                                                                contributions2.back = 2
                                                                                                                                                local sources2 = Helper.shallowCopy(sources)
                                                                                                                                                local backUrl = Deck.backs[Helper.toCamelCase(deckType, "CardBack")]
                                                                                                                                                assert(backUrl, deckType)
                                                                                                                                                local creator = Deck[Helper.toCamelCase("create", deckType, "CustomDeck")]
                                                                                                                                                assert(creator, deckType)
                                                                                                                                                sources2.back = {
                                                                                                                                                    customDeck = creator(backUrl, 1, 1),
                                                                                                                                                    luaIndex = 1
                                                                                                                                                }
                                                                                                                                                return Deck._generateDynamicDeck(deckType, position, contributions2, sources2)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._generateDynamicDeck(deckType, position, contributions, sources)
                                                                                                                                                assert(deckType)
                                                                                                                                                assert(position)
                                                                                                                                                assert(contributions)
                                                                                                                                                assert(sources)

                                                                                                                                                local data = {
                                                                                                                                                    Name = "Deck",
                                                                                                                                                    Transform = {
                                                                                                                                                        posX = 0,
                                                                                                                                                        posY = 0,
                                                                                                                                                        posZ = 0,
                                                                                                                                                        rotX = 0,
                                                                                                                                                        rotY = 0,
                                                                                                                                                        rotZ = 0,
                                                                                                                                                        scaleX = 1,
                                                                                                                                                        scaleY = 1,
                                                                                                                                                        scaleZ = 1
                                                                                                                                                    },
                                                                                                                                                    Nickname = "",
                                                                                                                                                    Description = "",
                                                                                                                                                    GMNotes = "",
                                                                                                                                                    AltLookAngle = {
                                                                                                                                                        x = 0.0,
                                                                                                                                                        y = 0.0,
                                                                                                                                                        z = 0.0
                                                                                                                                                    },
                                                                                                                                                    ColorDiffuse = {
                                                                                                                                                        r = 0.713235259,
                                                                                                                                                        g = 0.713235259,
                                                                                                                                                        b = 0.713235259
                                                                                                                                                    },
                                                                                                                                                    Tags = {deckType},
                                                                                                                                                    LayoutGroupSortIndex = 0,
                                                                                                                                                    Value = 0,
                                                                                                                                                    Locked = false,
                                                                                                                                                    Grid = true,
                                                                                                                                                    Snap = true,
                                                                                                                                                    IgnoreFoW = false,
                                                                                                                                                    MeasureMovement = false,
                                                                                                                                                    DragSelectable = true,
                                                                                                                                                    Autoraise = true,
                                                                                                                                                    Sticky = true,
                                                                                                                                                    Tooltip = true,
                                                                                                                                                    GridProjection = false,
                                                                                                                                                    HideWhenFaceDown = true,
                                                                                                                                                    Hands = false,
                                                                                                                                                    SidewaysCard = false,
                                                                                                                                                    DeckIDs = {},
                                                                                                                                                    CustomDeck = {},
                                                                                                                                                    LuaScript = "",
                                                                                                                                                    LuaScriptState = "",
                                                                                                                                                    XmlUI = "",
                                                                                                                                                ContainedObjects = {}}

                                                                                                                                                local knownCustomDecks = {}

                                                                                                                                                for name, cardinality in pairs(contributions) do
                                                                                                                                                    local source = sources[name]
                                                                                                                                                    if source then
                                                                                                                                                        assert(source.customDeck, name)
                                                                                                                                                        local customDeckId = knownCustomDecks[source.customDeck]
                                                                                                                                                        if not customDeckId then
                                                                                                                                                            customDeckId = Deck._nextCustomDeckId()
                                                                                                                                                            data.CustomDeck[tostring(customDeckId)] = source.customDeck
                                                                                                                                                            data.Transform.scaleX = source.customDeck.__scale.x
                                                                                                                                                            data.Transform.scaleY = source.customDeck.__scale.y
                                                                                                                                                            data.Transform.scaleZ = source.customDeck.__scale.z
                                                                                                                                                            knownCustomDecks[source.customDeck] = customDeckId
                                                                                                                                                        end

                                                                                                                                                        for _ = 1, cardinality do
                                                                                                                                                            local index = source.luaIndex - 1
                                                                                                                                                            local cardId = tostring(customDeckId * 100 + index)
                                                                                                                                                            table.insert(data.DeckIDs, tostring(cardId))
                                                                                                                                                            local cardData = Deck._generateCardData(source.customDeck, customDeckId, cardId)
                                                                                                                                                            cardData.Tags = {deckType}
                                                                                                                                                            cardData.Nickname = I18N(name)
                                                                                                                                                            cardData.GMNotes = name
                                                                                                                                                            table.insert(data.ContainedObjects, cardData)
                                                                                                                                                        end
                                                                                                                                                    else
                                                                                                                                                        error("No source for card '" .. name .. "'")
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                local continuation = Helper.createContinuation("Deck._generateDeck")

                                                                                                                                                local spawnParameters = {
                                                                                                                                                    data = #data.ContainedObjects == 1 and data.ContainedObjects[1] or data,
                                                                                                                                                    position = position,
                                                                                                                                                    rotation = Vector(0, 180, 180),
                                                                                                                                                    callback_function = continuation.run
                                                                                                                                                }

                                                                                                                                                spawnObjectData(spawnParameters)

                                                                                                                                                return continuation
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._nextCustomDeckId()
                                                                                                                                                Deck.customDeckBaseId = Deck.customDeckBaseId + 1
                                                                                                                                                return Deck.customDeckBaseId
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildObjectiveDeck(deckPosition)
                                                                                                                                                local contributions = {
                                                                                                                                                    muadDibFirstPlayer = 1,
                                                                                                                                                    muadDib4to6p = 1,
                                                                                                                                                    crysknife4to6p = 1,
                                                                                                                                                    crysknife = 1,
                                                                                                                                                    ornithopter1to3p = 1,
                                                                                                                                                }
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Objective", deckPosition, contributions, Deck.sources.objective)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildStarterDeck(deckPosition)
                                                                                                                                                local contributionSets = {
                                                                                                                                                    Deck.starter.base,
                                                                                                                                                    Deck.starter.epic,
                                                                                                                                                    Deck.starter.immortality,
                                                                                                                                                }
                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)
                                                                                                                                                contributions = Helper.map(contributions, function (_, cardinality)
                                                                                                                                                    return cardinality * 4
                                                                                                                                                end)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Imperium", deckPosition, contributions, Deck.sources.imperium)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildEmperorStarterDeck(deckPosition)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Imperium", deckPosition, Deck.starter.emperor, Deck.sources.imperium)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildMuadDibStarterDeck(deckPosition)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Imperium", deckPosition, Deck.starter.muadDib, Deck.sources.imperium)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildImperiumDeck(deckPosition)
                                                                                                                                                local contributionSets = {
                                                                                                                                                    Deck.imperium.legacy,
                                                                                                                                                    Deck.imperium.ix,
                                                                                                                                                    Deck.imperium.immortality,
                                                                                                                                                    Deck.imperium.uprising,
                                                                                                                                                    Deck.imperium.uprisingContract,
                                                                                                                                                }
                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Imperium", deckPosition, contributions, Deck.sources.imperium)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildSpecialDeck(deckPosition)
                                                                                                                                                local contributionSets = {
                                                                                                                                                    Deck.special.legacy,
                                                                                                                                                    Deck.special.immortality,
                                                                                                                                                    Deck.special.uprising,
                                                                                                                                                }
                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Imperium", deckPosition, contributions, Deck.sources.special)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildTleilaxuDeck(deckPosition)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Imperium", deckPosition, Deck.tleilaxu, Deck.sources.tleilaxu)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildIntrigueDeck(deckPosition)
                                                                                                                                                local contributionSets = {
                                                                                                                                                    Deck.intrigue.legacy,
                                                                                                                                                    Deck.intrigue.ix,
                                                                                                                                                    Deck.intrigue.immortality,
                                                                                                                                                    Deck.intrigue.uprising,
                                                                                                                                                    Deck.intrigue.uprisingContract,
                                                                                                                                                }
                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Intrigue", deckPosition, contributions, Deck.sources.intrigue)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildTechDeck(deckPosition)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Tech", deckPosition, Deck.tech.ix, Deck.sources.tech)
                                                                                                                                            end

                                                                                                                                            --
                                                                                                                                            function Deck._prebuildConflictDeck(deckPosition)
                                                                                                                                                local contributionSets = {}
                                                                                                                                                for i = 1, 3 do
                                                                                                                                                    for _, extension in ipairs({"uprising", "ix", "immortality"}) do
                                                                                                                                                        local level = "level" .. tostring(i)
                                                                                                                                                        local contributionSet = Deck.conflict[level][extension]
                                                                                                                                                        if contributionSet then
                                                                                                                                                            table.insert(contributionSets, contributionSet)
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                end
                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Conflict", deckPosition, contributions, Deck.sources.conflict)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildHagalDeck(deckPosition)
                                                                                                                                                local contributionSets = {}
                                                                                                                                                for _, extension in ipairs({"base", "ix", "immortality"}) do
                                                                                                                                                    for _, players in ipairs({"common", "solo", "twoPlayers"}) do
                                                                                                                                                        table.insert(contributionSets, Deck.hagal[extension][players])
                                                                                                                                                    end
                                                                                                                                                end
                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Hagal", deckPosition, contributions, Deck.sources.hagal)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildLeaderDeck(deckPosition)
                                                                                                                                                local contributionSets = {
                                                                                                                                                    Deck.leaders.legacy,
                                                                                                                                                    Deck.leaders.ix,
                                                                                                                                                    Deck.leaders.uprising,
                                                                                                                                                }
                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("Leader", deckPosition, contributions, Deck.sources.leaders)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._prebuildRivalLeaderDeck(deckPosition)
                                                                                                                                                local contributionSets = {
                                                                                                                                                    Deck.rivalLeaders.uprising,
                                                                                                                                                }
                                                                                                                                                local contributions = Deck._mergeContributionSets(contributionSets, true)
                                                                                                                                                Deck._generateDynamicDeckWithTwoBackCards("RivalLeader", deckPosition, contributions, Deck.sources.rivalLeaders)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck._generateFromPrebuildDeck(deckType, deckZone, contributions, _, spacing)
                                                                                                                                                assert(deckType)
                                                                                                                                                assert(deckZone)
                                                                                                                                                assert(#deckZone.getTags() == 0 or deckZone.hasTag(deckType),
                                                                                                                                                    -- Curiously, the problem doesn't exist for dynamic decks.
                                                                                                                                                "Trying to generate a static deck in an incompatibly tagged zone will trigger the dreaded 'Unknown Error'.")
                                                                                                                                                assert(contributions)

                                                                                                                                                local continuation = Helper.createContinuation("Deck._prebuildDeck")

                                                                                                                                                local sources = {}

                                                                                                                                                local prebuildZone = Deck.prebuildZones[I18N.getLocale()]
                                                                                                                                                for _, object in ipairs(prebuildZone.getObjects()) do
                                                                                                                                                    if object.hasTag(deckType) then
                                                                                                                                                        assert(object.type == "Deck")
                                                                                                                                                        for _, card in ipairs(object.getObjects()) do
                                                                                                                                                            local id = Helper.getID(card)
                                                                                                                                                            if sources[id] then
                                                                                                                                                                table.insert(sources[id].instances, card.guid)
                                                                                                                                                            else
                                                                                                                                                                sources[id] = {
                                                                                                                                                                    deck = object,
                                                                                                                                                                instances = {card.guid}}
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                local cardCount = 0
                                                                                                                                                for name, cardinality in pairs(contributions) do
                                                                                                                                                    local source = sources[name]
                                                                                                                                                    assert(source, "No source for card '" .. deckType .. "." .. name .. "'")
                                                                                                                                                    for i = 1, math.ceil(cardinality) do
                                                                                                                                                        local firstGuid = source.instances[1]
                                                                                                                                                        assert(firstGuid, "Not enough instances of the card '" .. name .. "'")
                                                                                                                                                        table.remove(source.instances, 1)
                                                                                                                                                        assert(source.deck, "Should not happen! Source deck is not properly generated.")
                                                                                                                                                        source.deck.takeObject({
                                                                                                                                                            guid = firstGuid,
                                                                                                                                                            -- Stacking is needed to preserve input order.
                                                                                                                                                            position = deckZone.getPosition() + Vector(0, 1 + cardCount * (spacing or 0.1), 0),
                                                                                                                                                            smooth = false,
                                                                                                                                                            callback_function = function (card)
                                                                                                                                                                if cardinality - i < 0 then
                                                                                                                                                                    card.setTags(Helper.concatTables(card.getTags(), {"Unselected"}))
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        })
                                                                                                                                                        cardCount = cardCount + 1
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                Wait.condition(function ()
                                                                                                                                                    local deckOrCard = Helper.getDeckOrCard(deckZone)
                                                                                                                                                    continuation.run(deckOrCard)
                                                                                                                                                end, function ()
                                                                                                                                                    local deckOrCard = Helper.getDeckOrCard(deckZone)
                                                                                                                                                    return deckOrCard ~= nil
                                                                                                                                                    and not deckOrCard.spawning
                                                                                                                                                    and Helper.getCardCount(deckOrCard) >= cardCount
                                                                                                                                                end)

                                                                                                                                                return continuation
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createObjectiveCustomDeck(faceUrl, width, height)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.objectiveCardBack, faceUrl, width, height, Vector(1, 1, 1))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createImperiumCustomDeck(faceUrl, width, height)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.imperiumCardBack, faceUrl, width, height, Vector(1.05, 1, 1.05))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createIntrigueCustomDeck(faceUrl, width, height)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.intrigueCardBack, faceUrl, width, height, Vector(1, 1, 1))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createTechCustomDeck(faceUrl, width, height)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.techCardBack, faceUrl, width, height, Vector(0.55, 1, 0.55))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createConflictCustomDeck(faceUrl, width, height)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.conflictCardBack, faceUrl, width, height, Vector(1, 1, 1))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createConflict1CustomDeck(faceUrl, width, height)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.conflict1CardBack, faceUrl, width, height, Vector(1, 1, 1))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createConflict2CustomDeck(faceUrl, width, height)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.conflict2CardBack, faceUrl, width, height, Vector(1, 1, 1))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createConflict3CustomDeck(faceUrl, width, height)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.conflict3CardBack, faceUrl, width, height, Vector(1, 1, 1))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createHagalCustomDeck(faceUrl, width, height, scale)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.hagalCardBack, faceUrl, width, height, scale or Vector(0.83, 1, 0.83))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createLeaderCustomDeck(faceUrl, width, height)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.leaderCardBack, faceUrl, width, height, Vector(1.12, 1, 1.12))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createRivalLeaderCustomDeck(faceUrl, width, height)
                                                                                                                                                return Deck.createCustomDeck(Deck.backs.rivalLeaderCardBack, faceUrl, width, height, Vector(1.05, 1, 1.05))
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.createCustomDeck(backUrl, faceUrl, width, height, scale)
                                                                                                                                                assert(backUrl)
                                                                                                                                                assert(faceUrl)
                                                                                                                                                assert(width)
                                                                                                                                                assert(height)
                                                                                                                                                assert(scale)
                                                                                                                                                return {
                                                                                                                                                    FaceURL = faceUrl,
                                                                                                                                                    BackURL = backUrl,
                                                                                                                                                    NumWidth = width,
                                                                                                                                                    NumHeight = height,
                                                                                                                                                    BackIsHidden = true,
                                                                                                                                                    UniqueBack = false,
                                                                                                                                                    Type = 0,
                                                                                                                                                    __scale = scale
                                                                                                                                                }
                                                                                                                                            end

                                                                                                                                            return Deck

                                                                                                                                        end)
                                                                                                                                        __bundle_register("fr.Deck", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                            local Helper = require("utils.Helper")

                                                                                                                                            local Deck = {
                                                                                                                                                objective = {
                                                                                                                                                    uprisingObjective = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133399065/31449D20F329E25D1674B822346A5A8EEE052D71/", 3, 2},
                                                                                                                                                },
                                                                                                                                                imperium = {
                                                                                                                                                    -- starter without dune planet
                                                                                                                                                    starter = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141323392/D25AA65312D89EB7CEED36D451618E731A674BED/", 4, 2},
                                                                                                                                                    starterImperium_emperor = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141287197/6C2EBDBB0DA2CBC4EBE3C91970F4A6C66C4225FD/", 5, 2},
                                                                                                                                                    starterImperium_muadDib = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141287800/56225166A2ED9BD37EF06E0F83EEC329A35DB1CD/", 5, 2},
                                                                                                                                                    -- dune planet
                                                                                                                                                    starterDunePlanet = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141327771/98F5861E28F3167495D3F2890879072BF3A84E60/", 2, 2},
                                                                                                                                                    -- base without foldspace, nor liasion, nor the spice must flow, but with Jessica of Arrakis and Duncan Loyal Blade
                                                                                                                                                    imperium = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141321326/CC2D301CA075930201B3883D82F4C6E1A0837273/", 10, 7},
                                                                                                                                                    imperiumFoldedSpace = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141324507/AE481C2ED19B085E2669F22420FD282982FD11A9/", 3, 2},
                                                                                                                                                    -- ix without control the spice, but with Boundless Ambition
                                                                                                                                                    ixImperium = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141329061/C54BCAB79869547E728509123AC47EDB32E79BF5/", 6, 6},
                                                                                                                                                    ixImperiumControlTheSpice = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141323266/DD5ED3E5FD12F0A1C4F42750E766E83564248E07/", 1, 1},
                                                                                                                                                    -- tleilax without experimentation
                                                                                                                                                    immortalityImperium = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141325387/142F50245296C2EE1F5ABAD8CE93982AC0592110/", 6, 5},
                                                                                                                                                    immortalityImperiumExperimentation = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141324061/BF6DF4E8EF5B8C8F5BB6952166C559694A61BA04/", 2, 2},
                                                                                                                                                    -- tleilax without reclaimed forces
                                                                                                                                                    tleilaxResearch = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141328012/2399494577B270989873BC3A2002B8D99E33E001/", 4, 5},
                                                                                                                                                    -- reclaimed forces
                                                                                                                                                    tleilaxResearchReclaimedForces = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141323085/60812AEA733FF5558BA9190E47CBD474EBF38C94/", 1, 1},
                                                                                                                                                    uprisingImperium = {"https://steamusercontent-a.akamaihd.net/ugc/2499024154440743964/4AFB30174B6A6A4A46E5CE946B8731403F267041/", 10, 7},
                                                                                                                                                    uprisingImperium_contract = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141289668/F29889245831593A62B3E914EAD5DBC4904BCEE7/", 2, 2},
                                                                                                                                                    uprisingImperium_prepareTheWay = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141286826/72A71863DE41003FCC454F212FE183937C72C50F/", 1, 1},
                                                                                                                                                    uprisingImperium_theSpiceMustFlow = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141288717/35C76D798308EEA5D9BF50DB3F8B2E3159B14AF9/", 5, 2},
                                                                                                                                                },
                                                                                                                                                intrigue = {
                                                                                                                                                    intrigue = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141342723/13659DD01D152A8B8055B894B247CB1D254D3752/", 8, 5},
                                                                                                                                                    ixIntrigue = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141342152/3D33B3E59811CEDC64A53F104D31190E76676C64/", 5, 4},
                                                                                                                                                    immortalityIntrigue = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141343779/83BA634F05FC7A14933153A18B7AEF83E07E3C14/", 6, 3},
                                                                                                                                                    uprisingIntrigue = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133407442/099FFE5EDD43C0E39212970D0A4FDBA12CC729BF/", 10, 4},
                                                                                                                                                    uprisingIntrigue_contract = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141307385/BFDA5F7ABDF2A97F17019C1715DE0F41BF2BF649/", 2, 2},
                                                                                                                                                },
                                                                                                                                                conflict1 = {
                                                                                                                                                    uprisingConflict = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141315604/288CBFF505CD4CE7E283BF2158A816517DD365C1/", 2, 2},
                                                                                                                                                },
                                                                                                                                                conflict2 = {
                                                                                                                                                    uprisingConflict = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141315846/D5CD3A18CBB9DCE0C305AE999213B504F5F3890D/", 5, 2},
                                                                                                                                                },
                                                                                                                                                conflict3 = {
                                                                                                                                                    conflict = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141365294/F1BEAE6266E75B7A2F5DE511DB4FEB25A2CD486B/", 3, 2},
                                                                                                                                                    uprisingConflict = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141315039/AB1D6A865796D30CD1035C9DEB28002091881B14/", 2, 2},
                                                                                                                                                },
                                                                                                                                                hagal = {
                                                                                                                                                    base = {"https://steamusercontent-a.akamaihd.net/ugc/2291837013341414524/BB90DF7F9C97680FE16C4D91A1AF0871B2462CB9/", 5, 5},
                                                                                                                                                    reshuffle = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141333398/66020C11E4FEA2D22744020D27465DCC2BB02BBE/", 7, 2},
                                                                                                                                                    ix = {"https://steamusercontent-a.akamaihd.net/ugc/2291837013341435538/E181DED96F81A27405E57F0CF398575C20D73D12/", 2, 3},
                                                                                                                                                    immortality = {"https://steamusercontent-a.akamaihd.net/ugc/2291837013341433170/56E0015597F27AB50451E026A8BD95512FA1CE27/", 2, 2},
                                                                                                                                                },
                                                                                                                                                tech = {
                                                                                                                                                    windtraps = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361305/4AD548281EE3633601185ECDE6461BD5E6E67D12/", 1, 1},
                                                                                                                                                    flagship = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361634/0A8A2BF9A00EE031BB25411F4DED2DD448E68CF2/", 1, 1},
                                                                                                                                                    sonicSnoopers = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363918/41B99AA2EE39B0218D1A7F101E2F7651B69C81B6/", 1, 1},
                                                                                                                                                    artillery = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362932/444069DB894789E582661E502BB46024C0220882/", 1, 1},
                                                                                                                                                    troopTransports = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363383/47909FA9F172C5C52DC364CF7DB461FF74578CD0/", 1, 1},
                                                                                                                                                    spySatellites = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361398/9E219D6303009CCF196AB048CE9C0E259178D23B/", 1, 1},
                                                                                                                                                    invasionShips = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360120/B3D102F7337E8D490A6F3F215D9D07ADB0F596A3/", 1, 1},
                                                                                                                                                    chaumurky = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141364445/4C4AB77E05C060BFF8AFC4BD83F196584D26786F/", 1, 1},
                                                                                                                                                    detonationDevices = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362536/425FF99976AF8F554B0BE54C32BCAFFAF61FB673/", 1, 1},
                                                                                                                                                    spaceport = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360547/40F797128394D598A460BD9C0CDA5ED2060635B5/", 1, 1},
                                                                                                                                                    minimicFilm = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362245/EB6795F95B5EB16A3771985483452A16C03E4F85/", 1, 1},
                                                                                                                                                    holoprojectors = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363278/BAE44C5A75C26C3D4021FCB1893B88C56A0C1799/", 1, 1},
                                                                                                                                                    memocorders = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133863964/D2E97A26B1DDC4A451FD11678415ECD7DE990450/", 1, 1},
                                                                                                                                                    disposalFacility = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362000/6B8306BA918834279302EC16185756C49F852964/", 1, 1},
                                                                                                                                                    holtzmanEngine = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360423/9069E14122F06892E95192C8E91C4792AA04FB33/", 1, 1},
                                                                                                                                                    trainingDrones = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141364887/CC314BFCA03F938FD40AA091A22BB0AD050CECCF/", 1, 1},
                                                                                                                                                    shuttleFleet = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361030/270E363DDF544F9A8B14AC269C193741258FCE41/", 1, 1},
                                                                                                                                                    restrictedOrdnance = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363646/80CE99F45AED6EF9A249C9BF13E03458D633E8E4/", 1, 1},
                                                                                                                                                },
                                                                                                                                                contract = {
                                                                                                                                                    spiceRefineryWater = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301711/094E866AD56F70903A03DA8673CD337038C79406/", 1, 1},
                                                                                                                                                    spiceRefineryCard = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133402000/48DCDFDFFBECF417A7562F821120BD76364C1416/", 1, 1},
                                                                                                                                                    researchStationSpy = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133405740/11C7E095B6267C4BE875B47AA7D214FC058F62FF/", 1, 1},
                                                                                                                                                    researchStationSolari = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299807/456BEE0AA5AC91508396967BDF090D6380611B57/", 1, 1},
                                                                                                                                                    arrakeenSpy = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133404029/4CB29CF8FC8D0BF9A5B575B3E05B31774E59F3CD/", 1, 1},
                                                                                                                                                    arrakeenWater = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302127/926CFC63532C4D7BC6AA6B9151AFF0221A553B44/", 1, 1},
                                                                                                                                                    espionage = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302966/48A8C33B4ABEB9C61E8C5EF82218E15368DAC56B/", 1, 1},
                                                                                                                                                    sardaukarRecall = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301335/E5463C7FFA3426E57F5B07A0DE91602798170C69/", 1, 1},
                                                                                                                                                    sardaukarCard = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133404238/1711DFB19987B48883EF6B53E1CD62739D70E1A2/", 1, 1},
                                                                                                                                                    highCouncilSolari = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299253/1C0C3DEEFFF62306A3988CE9128E2A283BDE03DF/", 1, 1},
                                                                                                                                                    highCouncilInfluence = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141300682/59973420C9AAB73BA6EBA1984C259A600832B340/", 1, 1},
                                                                                                                                                    immediate = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299433/42A2FE5E39D5EF977BFDF5B9783ED57000DB3F8D/", 1, 1},
                                                                                                                                                    heighlinerTroop = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299064/FCCBB86CF2E3C36A3C09B5A1635B7557A803BCFB/", 1, 1},
                                                                                                                                                    heighlinerWater = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299969/C608732CF394D877A424416273FDD34CB1F0387D/", 1, 1},
                                                                                                                                                    deliverSupplies = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133405549/AE2085FF98F6A4384DA2213AD1F555D9E341B203/", 1, 1},
                                                                                                                                                    acquire = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302298/6D085EC459F3C659F3B43376C96B1CB607448136/", 1, 1},
                                                                                                                                                    harvest = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141303217/BADC52B8C0982FFA0DFF095040D3973436AA3149/", 1, 1},
                                                                                                                                                    harvestMore = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133406086/1E5DF874101D6B6A70DE17B2E1A1DB4119290AAA/", 1, 1},
                                                                                                                                                },
                                                                                                                                                leader = {
                                                                                                                                                    glossuRabban = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318082/68A9DE7E06DA5857EE51ECB978E13E3921A15B1A/", 1, 1},
                                                                                                                                                    vladimirHarkonnen = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141320749/6F682C5E5C1ADE0B9B1B8FAC80B9525A6748C351/", 1, 1},
                                                                                                                                                    memnonThorvald = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318361/36DB26EE194B780C9C879C74FC634C15433CE06A/", 1, 1},
                                                                                                                                                    arianaThorvald = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318498/3C1CA2B3506FB7AD8B1B40DB1414F7461F6974C8/", 1, 1},
                                                                                                                                                    paulAtreides = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141319736/008429F21B2898E4C2982EC7FB1AF422FDD85E24/", 1, 1},
                                                                                                                                                    letoAtreides = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317105/152B626A2D773B224CFFF878E35CEFDBB6F67505/", 1, 1},
                                                                                                                                                    ilbanRichese = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317254/F0F052CCAB7005F4D30879BF639AFACEDFF70A80/", 1, 1},
                                                                                                                                                    helenaRichese = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141319602/A069B3ECF1B4E9C42D2453E28EA13257F397B3F3/", 1, 1},
                                                                                                                                                    -- Ix
                                                                                                                                                    yunaMoritani = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141320605/CDAED205706CD8E32700B8A56C9BD387C5D72696/", 1, 1},
                                                                                                                                                    hundroMoritani = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317391/A64F2D77C6F482F31B12EC97C2DEEBBDF45AF3F9/", 1, 1},
                                                                                                                                                    ilesaEcaz = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141320907/7A0FCC4CA1D0CAF19C8066776DC23A9631000997/", 1, 1},
                                                                                                                                                    armandEcaz = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141319231/98401D1D00D15DB3512E48BBD63B9922EE17EF71/", 1, 1},
                                                                                                                                                    tessiaVernius = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317697/6C34345ADF23EBD567DE0EE662B4920906F721F0/", 1, 1},
                                                                                                                                                    rhomburVernius = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141316740/58A6CF3EB6EBDEAC4B5826C0D21408A3CC02E678/", 1, 1},
                                                                                                                                                    -- uprising
                                                                                                                                                    stabanTuek = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141281600/C1C83545F676ACDC3C63577BED070BD80ABADEED/", 1, 1},
                                                                                                                                                    amberMetulli = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141281768/CD03E06EFC734492D344B04C385FEF43DC2DF173/", 1, 1},
                                                                                                                                                    gurneyHalleck = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141284803/09C5E2F178B9F48ED577C7E74FC58C53D7698D7D/", 1, 1},
                                                                                                                                                    margotFenring = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283726/A3381C2EF2869950BD00E6AE7ADB5B662F883764/", 1, 1},
                                                                                                                                                    irulanCorrino = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141284991/5D95D6143B4407029C8665AF8E10B20634FEE3A3/", 1, 1},
                                                                                                                                                    jessica = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141282389/4CB1D17A9AA19831A1C2925FB431DCFDA1EE10B8/", 1, 1, Vector(1.12, 1, 1.12),
                                                                                                                                                    "https://steamusercontent-a.akamaihd.net/ugc/2502404390141283297/171F9173728A3E031830C1AF989B9B0BAFAA5DAF/"},
                                                                                                                                                    feydRauthaHarkonnen = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141284619/996AAC7E5AC098A6804153865E8116754B19DDDB/", 1, 1},
                                                                                                                                                    shaddamCorrino = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141282162/D307B7C2139EC0E0B999900940DC6F5827EB68A8/", 1, 1},
                                                                                                                                                    muadDib = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141281959/BA1804DF868BF77175777B0FB5B1D109B46E13A9/", 1, 1},
                                                                                                                                                },
                                                                                                                                                rivalLeader = {
                                                                                                                                                    uprising = {"https://steamusercontent-a.akamaihd.net/ugc/2291837013341168508/811BF7142774932C8C2FAD7C10BA104F8DAD4299/", 4, 3},
                                                                                                                                                },
                                                                                                                                            }

                                                                                                                                            ---
                                                                                                                                            function Deck.load(loader, cards, category, customDeckName, startLuaIndex, cardNames)
                                                                                                                                                assert(Deck[category], "Unknown category: " .. category)
                                                                                                                                                local desc = Deck[category][customDeckName]
                                                                                                                                                assert(desc, "No descriptor for: " .. category .. "." .. customDeckName)
                                                                                                                                                local customDeck
                                                                                                                                                if desc[5] then
                                                                                                                                                    customDeck = loader.createCustomDeck(desc[5], desc[1], desc[2], desc[3], desc[4])
                                                                                                                                                else
                                                                                                                                                    local functionName = Helper.toCamelCase("create", category, "CustomDeck")
                                                                                                                                                    assert(loader[functionName], "No loader for: " .. functionName)
                                                                                                                                                    customDeck = loader[functionName](desc[1], desc[2], desc[3], desc[4])
                                                                                                                                                end
                                                                                                                                                return loader.loadCustomDeck(cards, customDeck, startLuaIndex, cardNames)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.loadWithSubCategory(loader, cards, category, subCategory, customDeckName, startLuaIndex, cardNames)
                                                                                                                                                assert(Deck[category], "No category: " .. category)
                                                                                                                                                assert(Deck[category][subCategory], "No sub category: " .. category .. "." .. subCategory)
                                                                                                                                                local desc = Deck[category][subCategory][customDeckName]
                                                                                                                                                assert(desc, "No descriptor for: " .. category .. "." .. customDeckName)
                                                                                                                                                local functionName = Helper.toCamelCase("create", category, "CustomDeck")
                                                                                                                                                assert(loader[functionName], "No loader for: " .. functionName)
                                                                                                                                                local customDeck = loader[functionName](desc[1], desc[2], desc[3], desc[4])
                                                                                                                                                return loader.loadCustomDeck(cards, customDeck, startLuaIndex, cardNames)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.loadCustomDecks(loader)
                                                                                                                                                local cards = {
                                                                                                                                                    objective = {},
                                                                                                                                                    imperium = {},
                                                                                                                                                    special = {},
                                                                                                                                                    tleilaxu = {},
                                                                                                                                                    intrigue = {},
                                                                                                                                                    conflict = {},
                                                                                                                                                    hagal = {},
                                                                                                                                                    tech = {},
                                                                                                                                                    leaders = {},
                                                                                                                                                    rivalLeaders = {},
                                                                                                                                                }

                                                                                                                                                Deck.load(loader, cards.objective, "objective", "uprisingObjective", 1, {
                                                                                                                                                    "ornithopter1to3p",
                                                                                                                                                    "muadDibFirstPlayer",
                                                                                                                                                    "crysknife",
                                                                                                                                                    "muadDib4to6p",
                                                                                                                                                    "crysknife4to6p",
                                                                                                                                                })

                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "starter", 1, {
                                                                                                                                                    "seekAllies",
                                                                                                                                                    "signetRing",
                                                                                                                                                    "diplomacy",
                                                                                                                                                    "reconnaissance",
                                                                                                                                                    "convincingArgument", "",
                                                                                                                                                    "dagger", "",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "starterDunePlanet", 1, {
                                                                                                                                                    "duneTheDesertPlanet",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "starterImperium_emperor", 1, {
                                                                                                                                                    "emperorConvincingArgument",
                                                                                                                                                    "emperorCorrinoMight",
                                                                                                                                                    "emperorCriticalShipments",
                                                                                                                                                    "emperorDemandResults",
                                                                                                                                                    "emperorDevastatingAssault",
                                                                                                                                                    "emperorImperialOrnithopter", "",
                                                                                                                                                    "emperorSignetRing",
                                                                                                                                                    "emperorSeekAllies",
                                                                                                                                                    "emperorImperialTent",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "starterImperium_muadDib", 1, {
                                                                                                                                                    "muadDibCommandRespect",
                                                                                                                                                    "muadDibConvincingArgument",
                                                                                                                                                    "muadDibDemandAttention",
                                                                                                                                                    "muadDibDesertCall",
                                                                                                                                                    "muadDibLimitedLandsraadAccess", "",
                                                                                                                                                    "muadDibSeekAllies",
                                                                                                                                                    "muadDibUsul",
                                                                                                                                                    "muadDibThreatenSpiceProduction",
                                                                                                                                                    "muadDibSignetRing",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "imperium", 1, {
                                                                                                                                                    "opulence",
                                                                                                                                                    "firmGrip",
                                                                                                                                                    "guildAmbassador",
                                                                                                                                                    "guildBankers",
                                                                                                                                                    "otherMemory",
                                                                                                                                                    "ladyJessica",
                                                                                                                                                    "jessicaOfArrakis",
                                                                                                                                                    "kwisatzHaderach",
                                                                                                                                                    "reverendMotherMohiam",
                                                                                                                                                    "sietchReverendMother",
                                                                                                                                                    "testOfHumanity",
                                                                                                                                                    "lietKynes",
                                                                                                                                                    "chani",
                                                                                                                                                    "crysknife",
                                                                                                                                                    "stilgar",
                                                                                                                                                    "choamDirectorship",
                                                                                                                                                    "duncanIdaho",
                                                                                                                                                    "drYueh",
                                                                                                                                                    "gurneyHalleck",
                                                                                                                                                    "piterDeVries",
                                                                                                                                                    "carryall",
                                                                                                                                                    "thufirHawat",
                                                                                                                                                    "beneGesseritSister", "", "",
                                                                                                                                                    "powerPlay", "", "",
                                                                                                                                                    "imperialSpy", "",
                                                                                                                                                    "sardaukarInfantry", "",
                                                                                                                                                    "sardaukarLegion", "",
                                                                                                                                                    "guildAdministrator", "",
                                                                                                                                                    "spiceSmugglers", "",
                                                                                                                                                    "smugglersThopter", "",
                                                                                                                                                    "spaceTravel", "",
                                                                                                                                                    "beneGesseritInitiate", "",
                                                                                                                                                    "theVoice", "",
                                                                                                                                                    "geneManipulation", "",
                                                                                                                                                    "missionariaProtectiva", "",
                                                                                                                                                    "fremenCamp", "",
                                                                                                                                                    "spiceHunter", "",
                                                                                                                                                    "wormRiders", "",
                                                                                                                                                    "fedaykinDeathCommando", "",
                                                                                                                                                    "shiftingAllegiances", "",
                                                                                                                                                    "scout", "",
                                                                                                                                                    "assassinationMission", "",
                                                                                                                                                    "gunThopter", "",
                                                                                                                                                    "arrakisRecruiter", "",
                                                                                                                                                    "duncanLoyalBlade",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "ixImperium", 1, {
                                                                                                                                                    "appropriate",
                                                                                                                                                    "imperialBashar",
                                                                                                                                                    "courtIntrigue",
                                                                                                                                                    "fullScaleAssault",
                                                                                                                                                    "imperialShockTrooper",
                                                                                                                                                    "guildAccord",
                                                                                                                                                    "guildChiefAdministrator",
                                                                                                                                                    "ixGuildCompact",
                                                                                                                                                    "landingRights",
                                                                                                                                                    "esmarTuek",
                                                                                                                                                    "embeddedAgent",
                                                                                                                                                    "weirdingWay",
                                                                                                                                                    "webOfPower",
                                                                                                                                                    "spiceTrader",
                                                                                                                                                    "desertAmbush",
                                                                                                                                                    "satelliteBan",
                                                                                                                                                    "jamis",
                                                                                                                                                    "sayyadina",
                                                                                                                                                    "shaiHulud",
                                                                                                                                                    "boundlessAmbition",
                                                                                                                                                    "bountyHunter",
                                                                                                                                                    "choamDelegate",
                                                                                                                                                    "waterPeddler",
                                                                                                                                                    "localFence",
                                                                                                                                                    "truthsayer", "",
                                                                                                                                                    "inTheShadows", "",
                                                                                                                                                    "freighterFleet", "",
                                                                                                                                                    "ixianEngineer", "",
                                                                                                                                                    "negotiatedWithdrawal", "",
                                                                                                                                                    "treachery", "",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "ixImperiumControlTheSpice", 1, {
                                                                                                                                                    "controlTheSpice",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "immortalityImperium", 1, {
                                                                                                                                                    "beneTleilaxLab",
                                                                                                                                                    "beneTleilaxResearcher",
                                                                                                                                                    "blankSlate",
                                                                                                                                                    "clandestineMeeting",
                                                                                                                                                    "corruptSmuggler",
                                                                                                                                                    "dissectingKit", "",
                                                                                                                                                    "forHumanity",
                                                                                                                                                    "highPriorityTravel",
                                                                                                                                                    "imperiumCeremony",
                                                                                                                                                    "interstellarConspiracy",
                                                                                                                                                    "keysToPower",
                                                                                                                                                    "lisanAlGaib",
                                                                                                                                                    "longReach",
                                                                                                                                                    "occupation",
                                                                                                                                                    "organMerchants",
                                                                                                                                                    "plannedCoupling",
                                                                                                                                                    "replacementEyes",
                                                                                                                                                    "sardaukarQuartermaster",
                                                                                                                                                    "shadoutMapes",
                                                                                                                                                    "showOfStrength",
                                                                                                                                                    "spiritualFervor",
                                                                                                                                                    "stillsuitManufacturer",
                                                                                                                                                    "throneRoomPolitics",
                                                                                                                                                    "tleilaxuMaster",
                                                                                                                                                    "tleilaxuSurgeon",
                                                                                                                                                    -- +4
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "immortalityImperiumExperimentation", 1, {
                                                                                                                                                    "experimentation",
                                                                                                                                                })

                                                                                                                                                Deck.load(loader, cards.tleilaxu, "imperium", "tleilaxResearch", 1, {
                                                                                                                                                    "beguilingPheromones",
                                                                                                                                                    "chairdog",
                                                                                                                                                    "contaminator",
                                                                                                                                                    "corrinoGenes",
                                                                                                                                                    "faceDancer",
                                                                                                                                                    "faceDancerInitiate",
                                                                                                                                                    "fromTheTanks",
                                                                                                                                                    "ghola",
                                                                                                                                                    "guildImpersonator",
                                                                                                                                                    "industrialEspionage",
                                                                                                                                                    "piterGeniusAdvisor",
                                                                                                                                                    "scientificBreakthrough",
                                                                                                                                                    "sligFarmer",
                                                                                                                                                    "stitchedHorror",
                                                                                                                                                    "subjectX137",
                                                                                                                                                    "tleilaxuInfiltrator",
                                                                                                                                                    "twistedMentat",
                                                                                                                                                    "unnaturalReflexes",
                                                                                                                                                    "usurp",
                                                                                                                                                })

                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "uprisingImperium", 1, {
                                                                                                                                                    "unswervingLoyalty", "",
                                                                                                                                                    "spaceTimeFolding",
                                                                                                                                                    "weirdingWoman", "",
                                                                                                                                                    "sardaukarSoldier",
                                                                                                                                                    "smugglerHarvester", "",
                                                                                                                                                    "makerKeeper", "",
                                                                                                                                                    "reliableInformant",
                                                                                                                                                    "hiddenMissive",
                                                                                                                                                    "wheelsWithinWheels",
                                                                                                                                                    "fedaykinStilltent",
                                                                                                                                                    "imperialSpymaster",
                                                                                                                                                    "spyNetwork",
                                                                                                                                                    "desertSurvival", "",
                                                                                                                                                    "undercoverAsset",
                                                                                                                                                    "beneGesseritOperative", "",
                                                                                                                                                    "maulaPistol", "",
                                                                                                                                                    "thumper",
                                                                                                                                                    "nothernWatermaster",
                                                                                                                                                    "covertOperation",
                                                                                                                                                    "doubleAgent", "",
                                                                                                                                                    "guildEnvoy",
                                                                                                                                                    "rebelSupplier", "",
                                                                                                                                                    "calculusOfPower", "",
                                                                                                                                                    "guildSpy",
                                                                                                                                                    "dangerousRhetoric",
                                                                                                                                                    "branchingPath",
                                                                                                                                                    "ecologicalTestingStation",
                                                                                                                                                    "theBeastSpoils",
                                                                                                                                                    "smugglerHaven",
                                                                                                                                                    "shishakli",
                                                                                                                                                    "paracompass",
                                                                                                                                                    "sardaukarCoordination", "",
                                                                                                                                                    "truthtrance", "",
                                                                                                                                                    "publicSpectable", "",
                                                                                                                                                    "southernElders",
                                                                                                                                                    "treadInDarkness", "",
                                                                                                                                                    "spacingGuildFavor", "",
                                                                                                                                                    "capturedMentat",
                                                                                                                                                    "subversiveAdvisor",
                                                                                                                                                    "leadership",
                                                                                                                                                    "inHighPlaces",
                                                                                                                                                    "strikeFleet",
                                                                                                                                                    "trecherousManeuver",
                                                                                                                                                    "chaniCleverTactician",
                                                                                                                                                    "junctionHeadquarters",
                                                                                                                                                    "corrinthCity",
                                                                                                                                                    "stilgarTheDevoted",
                                                                                                                                                    "desertPower",
                                                                                                                                                    "arrakisRevolt",
                                                                                                                                                    "priceIsNoObject",
                                                                                                                                                    "longLiveTheFighters",
                                                                                                                                                    "overthrow",
                                                                                                                                                    "steersman",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "uprisingImperium_contract", 1, {
                                                                                                                                                    "cargoRunner",
                                                                                                                                                    "deliveryAgreement",
                                                                                                                                                    "priorityContracts",
                                                                                                                                                    "interstellarTrade",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.special, "imperium", "imperiumFoldedSpace", 1, {
                                                                                                                                                    "foldspace",
                                                                                                                                                    -- +5
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.special, "imperium", "uprisingImperium_prepareTheWay", 8, {
                                                                                                                                                    "prepareTheWay",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.special, "imperium", "uprisingImperium_theSpiceMustFlow", 10, {
                                                                                                                                                    "theSpiceMustFlow",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.special, "imperium", "tleilaxResearchReclaimedForces", 11, {
                                                                                                                                                    "reclaimedForces",
                                                                                                                                                })

                                                                                                                                                Deck.load(loader, cards.intrigue, "intrigue", "intrigue", 1, {
                                                                                                                                                    "masterTactician", "", "",
                                                                                                                                                    "privateArmy", "",
                                                                                                                                                    "ambush", "",
                                                                                                                                                    "dispatchAnEnvoy", "",
                                                                                                                                                    "poisonSnooper", "",
                                                                                                                                                    "favoredSubject",
                                                                                                                                                    "knowTheirWays",
                                                                                                                                                    "secretOfTheSisterhood",
                                                                                                                                                    "guildAuthorization",
                                                                                                                                                    "stagedIncident",
                                                                                                                                                    "theSleeperMustAwaken",
                                                                                                                                                    "choamShares",
                                                                                                                                                    "cornerTheMarket",
                                                                                                                                                    "plansWithinPlans",
                                                                                                                                                    "windfall",
                                                                                                                                                    "waterPeddlersUnion",
                                                                                                                                                    "councilorsDispensation",
                                                                                                                                                    "doubleCross",
                                                                                                                                                    "rapidMobilization",
                                                                                                                                                    "reinforcements",
                                                                                                                                                    "recruitmentMission",
                                                                                                                                                    "charisma",
                                                                                                                                                    "bypassProtocol",
                                                                                                                                                    "infiltrate",
                                                                                                                                                    "urgentMission",
                                                                                                                                                    "calculatedHire",
                                                                                                                                                    "binduSuspension",
                                                                                                                                                    "waterOfLife",
                                                                                                                                                    "refocus",
                                                                                                                                                    "bribery",
                                                                                                                                                    "toTheVictor",
                                                                                                                                                    "demandRespect",
                                                                                                                                                    "alliedArmada",
                                                                                                                                                    "tiebreaker",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.intrigue, "intrigue", "ixIntrigue", 1, {
                                                                                                                                                    "diversion",
                                                                                                                                                    "warChest",
                                                                                                                                                    "advancedWeaponry",
                                                                                                                                                    "secretForces",
                                                                                                                                                    "grandConspiracy",
                                                                                                                                                    "cull",
                                                                                                                                                    "strategicPush",
                                                                                                                                                    "blackmail",
                                                                                                                                                    "machineCulture",
                                                                                                                                                    "cannonTurrets",
                                                                                                                                                    "expedite",
                                                                                                                                                    "ixianProbe",
                                                                                                                                                    "secondWave",
                                                                                                                                                    "glimpseThePath",
                                                                                                                                                    "finesse",
                                                                                                                                                    "strongarm",
                                                                                                                                                    "quidProQuo",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.intrigue, "intrigue", "immortalityIntrigue", 1, {
                                                                                                                                                    "breakthrough",
                                                                                                                                                    "counterattack",
                                                                                                                                                    "disguisedBureaucrat",
                                                                                                                                                    "economicPositioning",
                                                                                                                                                    "gruesomeSacrifice",
                                                                                                                                                    "harvestCells",
                                                                                                                                                    "illicitDealings",
                                                                                                                                                    "shadowyBargain",
                                                                                                                                                    "studyMelange",
                                                                                                                                                    "tleilaxuPuppet",
                                                                                                                                                    "viciousTalents",
                                                                                                                                                    -- +4
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.intrigue, "intrigue", "uprisingIntrigue", 1, {
                                                                                                                                                    "sietchRitual",
                                                                                                                                                    "mercenaries",
                                                                                                                                                    "councilorAmbition",
                                                                                                                                                    "strategicStockpiling",
                                                                                                                                                    "detonation", "",
                                                                                                                                                    "departForArrakis",
                                                                                                                                                    "cunning",
                                                                                                                                                    "opportunism",
                                                                                                                                                    "changeAllegiances",
                                                                                                                                                    "specialMission", "",
                                                                                                                                                    "unexpectedAllies",
                                                                                                                                                    "callToArms",
                                                                                                                                                    "buyAccess",
                                                                                                                                                    "imperiumPolitics",
                                                                                                                                                    "shaddamFavor",
                                                                                                                                                    "intelligenceReport",
                                                                                                                                                    "manipulate",
                                                                                                                                                    "distraction", "",
                                                                                                                                                    "marketOpportunity",
                                                                                                                                                    "goToGround",
                                                                                                                                                    "contingencyPlan", "", "",
                                                                                                                                                    "inspireAwe",
                                                                                                                                                    "findWeakness",
                                                                                                                                                    "spiceIsPower",
                                                                                                                                                    "devour",
                                                                                                                                                    "impress",
                                                                                                                                                    "springTheTrap",
                                                                                                                                                    "weirdingCombat",
                                                                                                                                                    "tacticalOption",
                                                                                                                                                    "questionableMethods",
                                                                                                                                                    "desertMouse",
                                                                                                                                                    "ornithopter",
                                                                                                                                                    "crysknife",
                                                                                                                                                    "shadowAlliance",
                                                                                                                                                    "secureSpiceTrade",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.intrigue, "intrigue", "uprisingIntrigue_contract", 1, {
                                                                                                                                                    "leverage",
                                                                                                                                                    "backedByChoam",
                                                                                                                                                    "reachAgreement",
                                                                                                                                                    "choamProfits",
                                                                                                                                                })

                                                                                                                                                Deck.load(loader, cards.conflict, "conflict1", "uprisingConflict", 1, {
                                                                                                                                                    "skirmishA",
                                                                                                                                                    "skirmishB",
                                                                                                                                                    "skirmishC",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.conflict, "conflict2", "uprisingConflict", 1, {
                                                                                                                                                    "choamSecurity",
                                                                                                                                                    "spiceFreighters",
                                                                                                                                                    "siegeOfArrakeen",
                                                                                                                                                    "seizeSpiceRefinery",
                                                                                                                                                    "testOfLoyalty",
                                                                                                                                                    "shadowContest",
                                                                                                                                                    "secureImperialBasin",
                                                                                                                                                    "protectTheSietches",
                                                                                                                                                    "tradeDispute",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.conflict, "conflict3", "conflict", 5, {
                                                                                                                                                    "economicSupremacy"
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.conflict, "conflict3", "uprisingConflict", 1, {
                                                                                                                                                    "propaganda",
                                                                                                                                                    "battleForImperialBasin",
                                                                                                                                                    "battleForArrakeen",
                                                                                                                                                    "battleForSpiceRefinery",
                                                                                                                                                })

                                                                                                                                                Deck.load(loader, cards.hagal, "hagal", "base", 1, {
                                                                                                                                                    "churn",
                                                                                                                                                    "placeSpyYellow",
                                                                                                                                                    "placeSpyBlue",
                                                                                                                                                    "placeSpyGreen",
                                                                                                                                                    "sardaukar",
                                                                                                                                                    "dutifulService",
                                                                                                                                                    "heighliner",
                                                                                                                                                    "deliverSuppliesAndHeighliner",
                                                                                                                                                    "espionage",
                                                                                                                                                    "secrets",
                                                                                                                                                    "desertTactics",
                                                                                                                                                    "fremkit",
                                                                                                                                                    "assemblyHall",
                                                                                                                                                    "gatherSupport1",
                                                                                                                                                    "gatherSupport2",
                                                                                                                                                    "acceptContractAndShipping1",
                                                                                                                                                    "acceptContractAndShipping2",
                                                                                                                                                    "researchStation",
                                                                                                                                                    "spiceRefinery",
                                                                                                                                                    "arrakeen",
                                                                                                                                                    "sietchTabr",
                                                                                                                                                    "haggaBasinAndImperialBasin",
                                                                                                                                                    "deepDesert",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.hagal, "hagal", "reshuffle", 10, {
                                                                                                                                                    "reshuffle"
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.hagal, "hagal", "ix", 1, {
                                                                                                                                                    "interstellarShipping",
                                                                                                                                                    "deliverSuppliesAndInterstellarShipping",
                                                                                                                                                    "smugglingAndInterstellarShipping",
                                                                                                                                                    "techNegotiation",
                                                                                                                                                    "dreadnought1p",
                                                                                                                                                    "dreadnought2p",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.hagal, "hagal", "immortality", 1, {
                                                                                                                                                    "researchStationImmortality",
                                                                                                                                                    "tleilaxuBonus1",
                                                                                                                                                    "tleilaxuBonus2",
                                                                                                                                                    "tleilaxuBonus3",
                                                                                                                                                })

                                                                                                                                                -- One tech per custom deck.
                                                                                                                                                for techName, _ in pairs(Deck.tech) do
                                                                                                                                                    Deck.load(loader, cards.tech, "tech", techName, 1, {techName})
                                                                                                                                                end

                                                                                                                                                -- One leader per custom deck.
                                                                                                                                                for leaderName, _ in pairs(Deck.leader) do
                                                                                                                                                    Deck.load(loader, cards.leaders, "leader", leaderName, 1, {leaderName})
                                                                                                                                                end

                                                                                                                                                Deck.load(loader, cards.rivalLeaders, "rivalLeader", "uprising", 1, {
                                                                                                                                                    "vladimirHarkonnen",
                                                                                                                                                    "muadDib",
                                                                                                                                                    "jessica",
                                                                                                                                                    "feydRauthaHarkonnen",
                                                                                                                                                    "margotFenring",
                                                                                                                                                    "stabanTuek",
                                                                                                                                                    "amberMetulli",
                                                                                                                                                    "irulanCorrino",
                                                                                                                                                    "gurneyHalleck",
                                                                                                                                                    "glossuRabban",
                                                                                                                                                })

                                                                                                                                                return cards
                                                                                                                                            end

                                                                                                                                            return Deck

                                                                                                                                        end)
                                                                                                                                        __bundle_register("en.Deck", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                            local Helper = require("utils.Helper")

                                                                                                                                            local Deck = {
                                                                                                                                                objective = {
                                                                                                                                                    uprisingObjective = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133399226/F23014D780D16DDF23D8AF674BDEE3A9CB912F78/", 3, 2},
                                                                                                                                                },
                                                                                                                                                imperium = {
                                                                                                                                                    -- starter with dune the desert planet
                                                                                                                                                    starter = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141325193/BF3BA9C253ED953533B90D94DD56D0BAD4021B3C/", 4, 2},
                                                                                                                                                    starterImperium_emperor = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141285880/767F540B36884449C0A833D2CF0A25E36651F9AE/", 5, 2},
                                                                                                                                                    starterImperium_muadDib = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141285600/E73DE11761FD6A911456F07E348ED58BC7B21638/", 5, 2},
                                                                                                                                                    -- base with foldspace, liasion, and the spice must flow
                                                                                                                                                    imperium = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141326803/6F98BCE051343A3D07D58D6BC62A8FCA2C9AAE1A/", 8, 6},
                                                                                                                                                    -- ix with control the spice
                                                                                                                                                    ixImperium = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141328204/9DFCC56F20D09D60CF2B9D9050CB9640176F71B6/", 7, 5},
                                                                                                                                                    -- tleilax with experimentation
                                                                                                                                                    immortalityImperium = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141324694/E758512421B5CB27BBA228EF5F1880A7F3DC564D/", 6, 5},
                                                                                                                                                    -- tleilax with reclaimed forces
                                                                                                                                                    tleilaxResearch = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141325643/D9BD273651404E7DE7F0E22B36F2D426D82B07A8/", 4, 5},
                                                                                                                                                    uprisingImperium = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133381992/B5E28000A80DBE32D234C01F31C208A435018954/", 10, 7},
                                                                                                                                                    uprisingImperium_contract = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141289270/C9C56A8015292829E5F4C65EFB0B3F78A19DCDB4/", 2, 2},
                                                                                                                                                    uprisingImperium_prepareTheWay = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141288931/3EFF528A17FA160E8C836BCE628875066C791E88/", 4, 2},
                                                                                                                                                    uprisingImperium_theSpiceMustFlow = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141288456/7EFF5F3E150A3F7E9F8B0DE21E42F42E2F8967D4/", 5, 2},
                                                                                                                                                },
                                                                                                                                                intrigue = {
                                                                                                                                                    intrigue = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141343483/A63AE0E1069DA1279FDA3A5DE6A0E073F45FC8EF/", 7, 5},
                                                                                                                                                    ixIntrigue = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141342567/CE27F1B6D4D455A2D00D6E13FABEB72E6B9F05F1/", 5, 4},
                                                                                                                                                    immortalityIntrigue = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141342411/9FED90CD510F26618717CEB63FDA744CE916C6BA/", 6, 2},
                                                                                                                                                    uprisingIntrigue = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133408513/800A1EDE8EE94FFC4E38A4D428A73701D6DB020F/", 10, 4},
                                                                                                                                                    uprisingIntrigue_contract = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141307183/4633F67F86EB0AFAE82F5C075A16FE2FF6E2AD96/", 2, 2},
                                                                                                                                                },
                                                                                                                                                conflict1 = {
                                                                                                                                                    uprisingConflict = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141315234/658FE46691E92A3A5A67D11CB09BE85492BAFE87/", 2, 2},
                                                                                                                                                },
                                                                                                                                                conflict2 = {
                                                                                                                                                    uprisingConflict = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141314758/60D88BD461A98569E77321BAC643C6938DBB292E/", 5, 2},
                                                                                                                                                },
                                                                                                                                                conflict3 = {
                                                                                                                                                    conflict = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141365294/F1BEAE6266E75B7A2F5DE511DB4FEB25A2CD486B/", 3, 2},
                                                                                                                                                    uprisingConflict = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141315402/71EFAC5FF1CC15BC3BF35E613D956BE814964C41/", 2, 2},
                                                                                                                                                },
                                                                                                                                                hagal = {
                                                                                                                                                    base = {"https://steamusercontent-a.akamaihd.net/ugc/2291837013341414524/BB90DF7F9C97680FE16C4D91A1AF0871B2462CB9/", 5, 5},
                                                                                                                                                    reshuffle = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141333398/66020C11E4FEA2D22744020D27465DCC2BB02BBE/", 7, 2},
                                                                                                                                                    ix = {"https://steamusercontent-a.akamaihd.net/ugc/2291837013341435538/E181DED96F81A27405E57F0CF398575C20D73D12/", 2, 3},
                                                                                                                                                    immortality = {"https://steamusercontent-a.akamaihd.net/ugc/2291837013341433170/56E0015597F27AB50451E026A8BD95512FA1CE27/", 2, 2},
                                                                                                                                                },
                                                                                                                                                tech = {
                                                                                                                                                    windtraps = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361499/1357A12AE8B805DDA4B35054C7A042EB60ED8D93/", 1, 1},
                                                                                                                                                    flagship = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141364750/3D450BD068CF618EB58032CA790EC8CFB512C6ED/", 1, 1},
                                                                                                                                                    sonicSnoopers = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363495/735DAD89216E331EE1461EEBC94E579B3F65D898/", 1, 1},
                                                                                                                                                    artillery = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362120/1DD4BAFBF228984A2AE7D7A04C6BD98E5817CB75/", 1, 1},
                                                                                                                                                    troopTransports = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363152/5F8994647E6BE9B8DFE12775816BA8634DBEF803/", 1, 1},
                                                                                                                                                    spySatellites = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141363781/A4A7827D2C9E2D084FEF39864C901F858DBAC7A0/", 1, 1},
                                                                                                                                                    invasionShips = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362661/CA3C07205ECEFC22C759E350C47B58052D1CB3EC/", 1, 1},
                                                                                                                                                    chaumurky = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141359974/CC1342B27E230372F8A10A0BD35ADF796F0FF6A5/", 1, 1},
                                                                                                                                                    detonationDevices = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362350/985702313B721E7343ED01C603AF5C8EFF43C2F4/", 1, 1},
                                                                                                                                                    spaceport = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141362796/A906AB650BF19DEA2E39F86F873940143C2CF814/", 1, 1},
                                                                                                                                                    minimicFilm = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360892/74A896440084439B2C557D8651EB8125A64E85B1/", 1, 1},
                                                                                                                                                    holoprojectors = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360731/89575580CD49633CE5473B76CDDFA1A0A2503030/", 1, 1},
                                                                                                                                                    memocorders = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133863837/2644950194120A67CDC6BF7019D951FCF605DBFF/", 1, 1},
                                                                                                                                                    disposalFacility = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361878/57A51864E207970E7DCB9ACCAE68AFAE48F2CD61/", 1, 1},
                                                                                                                                                    holtzmanEngine = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361742/B202AC36308C95EF1CA325DAE9318DCB6C5229EE/", 1, 1},
                                                                                                                                                    trainingDrones = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141361140/B877582FA7ECB542E046FB96EB8488D511DEDF1C/", 1, 1},
                                                                                                                                                    shuttleFleet = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141364620/9E39289A6CED8A977E8206E1B5FD1A14F4BA55F8/", 1, 1},
                                                                                                                                                    restrictedOrdnance = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141360269/1F4181A709E103B8807D6D6FBF3C6BA62A4C20F9/", 1, 1},
                                                                                                                                                },
                                                                                                                                                contract = {
                                                                                                                                                    spiceRefineryWater = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141300304/7EA3323DDA7E60E1A8AB1119431D2D25187417F7/", 1, 1},
                                                                                                                                                    spiceRefineryCard = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141300927/78FB61B6A6BE119DEC9E93CC343BE1C199191E89/", 1, 1},
                                                                                                                                                    researchStationSpy = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141304020/9408609A985B7FFC43C43E0E791694870CB379C7/", 1, 1},
                                                                                                                                                    researchStationSolari = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141299628/C2F0768CD60F9944C16F128F307BA6F8107C0E93/", 1, 1},
                                                                                                                                                    arrakeenSpy = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133404029/4CB29CF8FC8D0BF9A5B575B3E05B31774E59F3CD/", 1, 1},
                                                                                                                                                    arrakeenWater = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302127/926CFC63532C4D7BC6AA6B9151AFF0221A553B44/", 1, 1},
                                                                                                                                                    espionage = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133403318/35C1BFE9773F01181B1280C061914D7CE07BFE71/", 1, 1},
                                                                                                                                                    sardaukarRecall = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301335/E5463C7FFA3426E57F5B07A0DE91602798170C69/", 1, 1},
                                                                                                                                                    sardaukarCard = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133404238/1711DFB19987B48883EF6B53E1CD62739D70E1A2/", 1, 1},
                                                                                                                                                    highCouncilSolari = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301141/33A0566759303798910FF7F7C4414E09BDBBE037/", 1, 1},
                                                                                                                                                    highCouncilInfluence = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301954/16A847D5CB4EB5E926D4404BB5F30BAF574558F5/", 1, 1},
                                                                                                                                                    immediate = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133402189/3D848E8CC39986DD283094AC31757997C097F4D7/", 1, 1},
                                                                                                                                                    heighlinerTroop = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302477/348DAD4630FD7CD067043AFBC5ADCB91733D9D23/", 1, 1},
                                                                                                                                                    heighlinerWater = {"https://steamusercontent-a.akamaihd.net/ugc/2488878371133401717/5B022A86311D086273A90DBA7D53DC22DCA9C917/", 1, 1},
                                                                                                                                                    deliverSupplies = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141300498/B42F88CDC1519A7893668030B695338E7EA18391/", 1, 1},
                                                                                                                                                    acquire = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141302699/94ED4105E316EDD45B0202837A711FF3A99E7CFA/", 1, 1},
                                                                                                                                                    harvest = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141300124/832069DB1C4F8B9B328876E798D071FFD35F0173/", 1, 1},
                                                                                                                                                    harvestMore = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141301496/B564DA078EA0BE9D2A7AAA8FA4DF105D4AD82A17/", 1, 1},
                                                                                                                                                },
                                                                                                                                                leader = {
                                                                                                                                                    vladimirHarkonnen = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141316546/B5899377296C2BFAC0CF48E18AA3773AA8E998DE/", 1, 1},
                                                                                                                                                    glossuRabban = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317845/DCF40F0D8C34B14180DC33B369DCC8AA4FD3FB55/", 1, 1},
                                                                                                                                                    ilbanRichese = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141316307/15624E52D08F594943A4A6332CBD68B2A1645441/", 1, 1},
                                                                                                                                                    helenaRichese = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318952/63750F22F1DFBA9D9544587C0B2B8D65E157EC00/", 1, 1},
                                                                                                                                                    letoAtreides = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318661/8CBD932BE474529D6C14A3AA8C01BD8503EBEBC6/", 1, 1},
                                                                                                                                                    paulAtreides = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141317535/F597DBF1EB750EA14EA03F231D0EBCF07212A5AC/", 1, 1},
                                                                                                                                                    arianaThorvald = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141320077/2A9043877494A7174A32770C39147FAE941A39A2/", 1, 1},
                                                                                                                                                    memnonThorvald = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141321067/8431F61C545067A4EADC017E6295CB249A2BD813/", 1, 1},
                                                                                                                                                    -- ix
                                                                                                                                                    armandEcaz = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141320355/310C6B6E85920F9FC1A94896A335D34C3CFA6C15/", 1, 1},
                                                                                                                                                    ilesaEcaz = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141318208/94B1575474BEEF1F1E0FE0860051932398F47CA5/", 1, 1},
                                                                                                                                                    rhomburVernius = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141316909/0C06A30D74BD774D9B4F968C00AEC8C0817D4C77/", 1, 1},
                                                                                                                                                    tessiaVernius = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141319434/29817122A32B50C285EE07E0DAC32FDE9A237CEC/", 1, 1},
                                                                                                                                                    yunaMoritani = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141319867/FA54B129B168169E3D58BA61536FCC0BB5AB7D34/", 1, 1},
                                                                                                                                                    hundroMoritani = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141316031/6A89778D9C4BB8AC07FE503D48A4483D13DF6E5B/", 1, 1},
                                                                                                                                                    -- uprising
                                                                                                                                                    stabanTuek = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283441/E675A8B105716B01D7C1C086102CEBCE0756B4C7/", 1, 1},
                                                                                                                                                    amberMetulli = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141280903/E525FD044AB8D577752189B9094E795D1F4BC9D5/", 1, 1},
                                                                                                                                                    gurneyHalleck = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283901/6F7B49241ECB5CB66B0C8F68F05B91DAA2D6E11E/", 1, 1},
                                                                                                                                                    margotFenring = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141282956/1A4453CC4C74E1F8B58C504243AD495B649DBB07/", 1, 1},
                                                                                                                                                    irulanCorrino = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141282774/EC550B921EFB707D338F5A45AB39609A9DFDE7BA/", 1, 1},
                                                                                                                                                    jessica = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283120/1969BB59A8DD3C683E82A2D07D1C41BB2F175313/", 1, 1, Vector(1.12, 1, 1.12),
                                                                                                                                                    "https://steamusercontent-a.akamaihd.net/ugc/2502404390141285197/3FA11CDE733EB59839FB85D0328588F28BE43D57/"},
                                                                                                                                                    feydRauthaHarkonnen = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141282610/C6CC977066E02C55DFA870BF59D42A8DC21F6811/", 1, 1},
                                                                                                                                                    shaddamCorrino = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141285378/056063BC4E61922C15A7A45DD5093EA6EC04C354/", 1, 1},
                                                                                                                                                    muadDib = {"https://steamusercontent-a.akamaihd.net/ugc/2502404390141283595/202B5C036B90D32A408FE938AF0747BAF2DE7DFB/", 1, 1},
                                                                                                                                                },
                                                                                                                                                rivalLeader = {
                                                                                                                                                    uprising = {"https://steamusercontent-a.akamaihd.net/ugc/2291837013341168508/811BF7142774932C8C2FAD7C10BA104F8DAD4299/", 4, 3},
                                                                                                                                                },
                                                                                                                                            }

                                                                                                                                            ---
                                                                                                                                            function Deck.load(loader, cards, category, customDeckName, startLuaIndex, cardNames)
                                                                                                                                                assert(Deck[category], "Unknown category: " .. tostring(category))
                                                                                                                                                local desc = Deck[category][customDeckName]
                                                                                                                                                assert(desc, "No descriptor for: " .. category .. "." .. customDeckName)
                                                                                                                                                local customDeck
                                                                                                                                                if desc[5] then
                                                                                                                                                    customDeck = loader.createCustomDeck(desc[5], desc[1], desc[2], desc[3], desc[4])
                                                                                                                                                else
                                                                                                                                                    local functionName = Helper.toCamelCase("create", category, "CustomDeck")
                                                                                                                                                    assert(loader[functionName], "No loader for: " .. functionName)
                                                                                                                                                    customDeck = loader[functionName](desc[1], desc[2], desc[3], desc[4])
                                                                                                                                                end
                                                                                                                                                return loader.loadCustomDeck(cards, customDeck, startLuaIndex, cardNames)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.loadWithSubCategory(loader, cards, category, subCategory, customDeckName, startLuaIndex, cardNames)
                                                                                                                                                assert(Deck[category], "No category: " .. category)
                                                                                                                                                assert(Deck[category][subCategory], "No sub category: " .. category .. "." .. subCategory)
                                                                                                                                                local desc = Deck[category][subCategory][customDeckName]
                                                                                                                                                assert(desc, "No descriptor for: " .. category .. "." .. customDeckName)
                                                                                                                                                local functionName = Helper.toCamelCase("create", category, "CustomDeck")
                                                                                                                                                assert(loader[functionName], "No loader for: " .. functionName)
                                                                                                                                                local customDeck = loader[functionName](desc[1], desc[2], desc[3], desc[4])
                                                                                                                                                return loader.loadCustomDeck(cards, customDeck, startLuaIndex, cardNames)
                                                                                                                                            end

                                                                                                                                            ---
                                                                                                                                            function Deck.loadCustomDecks(loader)
                                                                                                                                                local cards = {
                                                                                                                                                    objective = {},
                                                                                                                                                    imperium = {},
                                                                                                                                                    special = {},
                                                                                                                                                    tleilaxu = {},
                                                                                                                                                    intrigue = {},
                                                                                                                                                    conflict = {},
                                                                                                                                                    hagal = {},
                                                                                                                                                    tech = {},
                                                                                                                                                    leaders = {},
                                                                                                                                                    rivalLeaders = {},
                                                                                                                                                }

                                                                                                                                                Deck.load(loader, cards.objective, "objective", "uprisingObjective", 1, {
                                                                                                                                                    "ornithopter1to3p",
                                                                                                                                                    "muadDibFirstPlayer",
                                                                                                                                                    "crysknife",
                                                                                                                                                    "muadDib4to6p",
                                                                                                                                                    "crysknife4to6p",
                                                                                                                                                })

                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "starter", 1, {
                                                                                                                                                    "duneTheDesertPlanet",
                                                                                                                                                    "dagger",
                                                                                                                                                    "reconnaissance",
                                                                                                                                                    "convincingArgument",
                                                                                                                                                    "seekAllies",
                                                                                                                                                    "signetRing",
                                                                                                                                                    "diplomacy",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "starterImperium_emperor", 1, {
                                                                                                                                                    "emperorConvincingArgument",
                                                                                                                                                    "emperorCorrinoMight",
                                                                                                                                                    "emperorCriticalShipments",
                                                                                                                                                    "emperorDemandResults",
                                                                                                                                                    "emperorDevastatingAssault",
                                                                                                                                                    "emperorImperialOrnithopter", "",
                                                                                                                                                    "emperorSignetRing",
                                                                                                                                                    "emperorSeekAllies",
                                                                                                                                                    "emperorImperialTent",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "starterImperium_muadDib", 1, {
                                                                                                                                                    "muadDibCommandRespect",
                                                                                                                                                    "muadDibConvincingArgument",
                                                                                                                                                    "muadDibDemandAttention",
                                                                                                                                                    "muadDibDesertCall",
                                                                                                                                                    "muadDibLimitedLandsraadAccess", "",
                                                                                                                                                    "muadDibSeekAllies",
                                                                                                                                                    "muadDibUsul",
                                                                                                                                                    "muadDibThreatenSpiceProduction",
                                                                                                                                                    "muadDibSignetRing",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "imperium", 1, {
                                                                                                                                                    "sardaukarLegion",
                                                                                                                                                    "drYueh",
                                                                                                                                                    "assassinationMission",
                                                                                                                                                    "sardaukarInfantry",
                                                                                                                                                    "", -- foldspace
                                                                                                                                                    "", -- arrakisLiaison
                                                                                                                                                    "", -- theSpiceMustFlow
                                                                                                                                                    "beneGesseritInitiate",
                                                                                                                                                    "guildAdministrator",
                                                                                                                                                    "theVoice",
                                                                                                                                                    "scout",
                                                                                                                                                    "imperialSpy",
                                                                                                                                                    "beneGesseritSister",
                                                                                                                                                    "missionariaProtectiva",
                                                                                                                                                    "spiceHunter",
                                                                                                                                                    "spiceSmugglers",
                                                                                                                                                    "fedaykinDeathCommando",
                                                                                                                                                    "geneManipulation",
                                                                                                                                                    "guildBankers",
                                                                                                                                                    "choamDirectorship",
                                                                                                                                                    "crysknife",
                                                                                                                                                    "chani",
                                                                                                                                                    "spaceTravel",
                                                                                                                                                    "duncanIdaho",
                                                                                                                                                    "shiftingAllegiances",
                                                                                                                                                    "kwisatzHaderach",
                                                                                                                                                    "sietchReverendMother",
                                                                                                                                                    "arrakisRecruiter",
                                                                                                                                                    "firmGrip",
                                                                                                                                                    "smugglersThopter",
                                                                                                                                                    "carryall",
                                                                                                                                                    "gunThopter",
                                                                                                                                                    "guildAmbassador",
                                                                                                                                                    "testOfHumanity",
                                                                                                                                                    "fremenCamp",
                                                                                                                                                    "opulence",
                                                                                                                                                    "ladyJessica",
                                                                                                                                                    "stilgar",
                                                                                                                                                    "piterDeVries",
                                                                                                                                                    "gurneyHalleck",
                                                                                                                                                    "thufirHawat",
                                                                                                                                                    "otherMemory",
                                                                                                                                                    "lietKynes",
                                                                                                                                                    "wormRiders",
                                                                                                                                                    "reverendMotherMohiam",
                                                                                                                                                    "powerPlay",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "ixImperium", 1, {
                                                                                                                                                    "boundlessAmbition",
                                                                                                                                                    "guildChiefAdministrator",
                                                                                                                                                    "guildAccord",
                                                                                                                                                    "localFence",
                                                                                                                                                    "shaiHulud",
                                                                                                                                                    "ixGuildCompact",
                                                                                                                                                    "choamDelegate",
                                                                                                                                                    "bountyHunter",
                                                                                                                                                    "embeddedAgent",
                                                                                                                                                    "esmarTuek",
                                                                                                                                                    "courtIntrigue",
                                                                                                                                                    "sayyadina",
                                                                                                                                                    "imperialShockTrooper",
                                                                                                                                                    "appropriate",
                                                                                                                                                    "desertAmbush",
                                                                                                                                                    "inTheShadows",
                                                                                                                                                    "satelliteBan",
                                                                                                                                                    "freighterFleet",
                                                                                                                                                    "imperialBashar",
                                                                                                                                                    "jamis",
                                                                                                                                                    "landingRights",
                                                                                                                                                    "waterPeddler",
                                                                                                                                                    "treachery",
                                                                                                                                                    "truthsayer",
                                                                                                                                                    "spiceTrader",
                                                                                                                                                    "ixianEngineer",
                                                                                                                                                    "webOfPower",
                                                                                                                                                    "weirdingWay",
                                                                                                                                                    "negotiatedWithdrawal",
                                                                                                                                                    "fullScaleAssault",
                                                                                                                                                    "jessicaOfArrakis",
                                                                                                                                                    "missionariaProtectiva",
                                                                                                                                                    "controlTheSpice",
                                                                                                                                                    "duncanLoyalBlade"
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "immortalityImperium", 1, {
                                                                                                                                                    "beneTleilaxLab",
                                                                                                                                                    "beneTleilaxResearcher",
                                                                                                                                                    "blankSlate",
                                                                                                                                                    "clandestineMeeting",
                                                                                                                                                    "corruptSmuggler",
                                                                                                                                                    "dissectingKit",
                                                                                                                                                    "experimentation",
                                                                                                                                                    "forHumanity",
                                                                                                                                                    "highPriorityTravel",
                                                                                                                                                    "imperiumCeremony",
                                                                                                                                                    "interstellarConspiracy",
                                                                                                                                                    "keysToPower",
                                                                                                                                                    "lisanAlGaib",
                                                                                                                                                    "longReach",
                                                                                                                                                    "occupation",
                                                                                                                                                    "organMerchants",
                                                                                                                                                    "plannedCoupling",
                                                                                                                                                    "replacementEyes",
                                                                                                                                                    "sardaukarQuartermaster",
                                                                                                                                                    "shadoutMapes",
                                                                                                                                                    "showOfStrength",
                                                                                                                                                    "spiritualFervor",
                                                                                                                                                    "stillsuitManufacturer",
                                                                                                                                                    "throneRoomPolitics",
                                                                                                                                                    "tleilaxuMaster",
                                                                                                                                                    "tleilaxuSurgeon"
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "uprisingImperium", 1, {
                                                                                                                                                    "unswervingLoyalty", "",
                                                                                                                                                    "spaceTimeFolding",
                                                                                                                                                    "weirdingWoman", "",
                                                                                                                                                    "sardaukarSoldier",
                                                                                                                                                    "smugglerHarvester", "",
                                                                                                                                                    "makerKeeper", "",
                                                                                                                                                    "reliableInformant",
                                                                                                                                                    "hiddenMissive",
                                                                                                                                                    "wheelsWithinWheels",
                                                                                                                                                    "fedaykinStilltent",
                                                                                                                                                    "imperialSpymaster",
                                                                                                                                                    "spyNetwork",
                                                                                                                                                    "desertSurvival", "",
                                                                                                                                                    "undercoverAsset",
                                                                                                                                                    "beneGesseritOperative", "",
                                                                                                                                                    "maulaPistol", "",
                                                                                                                                                    "thumper",
                                                                                                                                                    "nothernWatermaster",
                                                                                                                                                    "covertOperation",
                                                                                                                                                    "doubleAgent", "",
                                                                                                                                                    "guildEnvoy",
                                                                                                                                                    "rebelSupplier", "",
                                                                                                                                                    "calculusOfPower", "",
                                                                                                                                                    "guildSpy",
                                                                                                                                                    "dangerousRhetoric",
                                                                                                                                                    "branchingPath",
                                                                                                                                                    "ecologicalTestingStation",
                                                                                                                                                    "theBeastSpoils",
                                                                                                                                                    "smugglerHaven",
                                                                                                                                                    "shishakli",
                                                                                                                                                    "paracompass",
                                                                                                                                                    "sardaukarCoordination", "",
                                                                                                                                                    "truthtrance", "",
                                                                                                                                                    "publicSpectable", "",
                                                                                                                                                    "southernElders",
                                                                                                                                                    "treadInDarkness", "",
                                                                                                                                                    "spacingGuildFavor", "",
                                                                                                                                                    "capturedMentat",
                                                                                                                                                    "subversiveAdvisor",
                                                                                                                                                    "leadership",
                                                                                                                                                    "inHighPlaces",
                                                                                                                                                    "strikeFleet",
                                                                                                                                                    "trecherousManeuver",
                                                                                                                                                    "chaniCleverTactician",
                                                                                                                                                    "junctionHeadquarters",
                                                                                                                                                    "corrinthCity",
                                                                                                                                                    "stilgarTheDevoted",
                                                                                                                                                    "desertPower",
                                                                                                                                                    "arrakisRevolt",
                                                                                                                                                    "priceIsNoObject",
                                                                                                                                                    "longLiveTheFighters",
                                                                                                                                                    "overthrow",
                                                                                                                                                    "steersman",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.imperium, "imperium", "uprisingImperium_contract", 1, {
                                                                                                                                                    "cargoRunner",
                                                                                                                                                    "deliveryAgreement",
                                                                                                                                                    "priorityContracts",
                                                                                                                                                    "interstellarTrade",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.special, "imperium", "imperium", 5, {
                                                                                                                                                    "foldspace",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.special, "imperium", "tleilaxResearch", 11, {
                                                                                                                                                    "reclaimedForces",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.special, "imperium", "uprisingImperium_prepareTheWay", 8, {
                                                                                                                                                    "prepareTheWay",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.special, "imperium", "uprisingImperium_theSpiceMustFlow", 10, {
                                                                                                                                                    "theSpiceMustFlow",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.tleilaxu, "imperium", "tleilaxResearch", 1, {
                                                                                                                                                    "beguilingPheromones",
                                                                                                                                                    "chairdog",
                                                                                                                                                    "contaminator",
                                                                                                                                                    "corrinoGenes",
                                                                                                                                                    "faceDancer",
                                                                                                                                                    "faceDancerInitiate",
                                                                                                                                                    "fromTheTanks",
                                                                                                                                                    "ghola",
                                                                                                                                                    "guildImpersonator",
                                                                                                                                                    "industrialEspionage",
                                                                                                                                                    "", -- Reclaimed Forces
                                                                                                                                                    "scientificBreakthrough",
                                                                                                                                                    "sligFarmer",
                                                                                                                                                    "stitchedHorror",
                                                                                                                                                    "subjectX137",
                                                                                                                                                    "tleilaxuInfiltrator",
                                                                                                                                                    "twistedMentat",
                                                                                                                                                    "unnaturalReflexes",
                                                                                                                                                    "usurp",
                                                                                                                                                    "piterGeniusAdvisor"
                                                                                                                                                })

                                                                                                                                                Deck.load(loader, cards.intrigue, "intrigue", "intrigue", 1, {
                                                                                                                                                    "bribery",
                                                                                                                                                    "refocus",
                                                                                                                                                    "ambush",
                                                                                                                                                    "alliedArmada",
                                                                                                                                                    "favoredSubject",
                                                                                                                                                    "demandRespect",
                                                                                                                                                    "poisonSnooper",
                                                                                                                                                    "guildAuthorization",
                                                                                                                                                    "dispatchAnEnvoy",
                                                                                                                                                    "infiltrate",
                                                                                                                                                    "knowTheirWays",
                                                                                                                                                    "masterTactician",
                                                                                                                                                    "plansWithinPlans",
                                                                                                                                                    "privateArmy",
                                                                                                                                                    "doubleCross",
                                                                                                                                                    "councilorsDispensation",
                                                                                                                                                    "cornerTheMarket",
                                                                                                                                                    "charisma",
                                                                                                                                                    "calculatedHire",
                                                                                                                                                    "choamShares",
                                                                                                                                                    "bypassProtocol",
                                                                                                                                                    "recruitmentMission",
                                                                                                                                                    "reinforcements",
                                                                                                                                                    "binduSuspension",
                                                                                                                                                    "secretOfTheSisterhood",
                                                                                                                                                    "rapidMobilization",
                                                                                                                                                    "stagedIncident",
                                                                                                                                                    "theSleeperMustAwaken",
                                                                                                                                                    "tiebreaker",
                                                                                                                                                    "toTheVictor",
                                                                                                                                                    "waterPeddlersUnion",
                                                                                                                                                    "windfall",
                                                                                                                                                    "waterOfLife",
                                                                                                                                                    "urgentMission"
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.intrigue, "intrigue", "ixIntrigue", 1, {
                                                                                                                                                    "diversion",
                                                                                                                                                    "warChest",
                                                                                                                                                    "advancedWeaponry",
                                                                                                                                                    "secretForces",
                                                                                                                                                    "grandConspiracy",
                                                                                                                                                    "cull",
                                                                                                                                                    "strategicPush",
                                                                                                                                                    "blackmail",
                                                                                                                                                    "machineCulture",
                                                                                                                                                    "cannonTurrets",
                                                                                                                                                    "expedite",
                                                                                                                                                    "ixianProbe",
                                                                                                                                                    "secondWave",
                                                                                                                                                    "glimpseThePath",
                                                                                                                                                    "finesse",
                                                                                                                                                    "strongarm",
                                                                                                                                                    "quidProQuo"
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.intrigue, "intrigue", "immortalityIntrigue", 1, {
                                                                                                                                                    "breakthrough",
                                                                                                                                                    "counterattack",
                                                                                                                                                    "disguisedBureaucrat",
                                                                                                                                                    "economicPositioning",
                                                                                                                                                    "gruesomeSacrifice",
                                                                                                                                                    "harvestCells",
                                                                                                                                                    "illicitDealings",
                                                                                                                                                    "shadowyBargain",
                                                                                                                                                    "studyMelange",
                                                                                                                                                    "tleilaxuPuppet",
                                                                                                                                                    "viciousTalents"
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.intrigue, "intrigue", "uprisingIntrigue", 1, {
                                                                                                                                                    "sietchRitual",
                                                                                                                                                    "mercenaries",
                                                                                                                                                    "councilorAmbition",
                                                                                                                                                    "strategicStockpiling",
                                                                                                                                                    "detonation", "",
                                                                                                                                                    "departForArrakis",
                                                                                                                                                    "cunning",
                                                                                                                                                    "opportunism",
                                                                                                                                                    "changeAllegiances",
                                                                                                                                                    "specialMission", "",
                                                                                                                                                    "unexpectedAllies",
                                                                                                                                                    "callToArms",
                                                                                                                                                    "buyAccess",
                                                                                                                                                    "imperiumPolitics",
                                                                                                                                                    "shaddamFavor",
                                                                                                                                                    "intelligenceReport",
                                                                                                                                                    "manipulate",
                                                                                                                                                    "distraction", "",
                                                                                                                                                    "marketOpportunity",
                                                                                                                                                    "goToGround",
                                                                                                                                                    "contingencyPlan", "", "",
                                                                                                                                                    "inspireAwe",
                                                                                                                                                    "findWeakness",
                                                                                                                                                    "spiceIsPower",
                                                                                                                                                    "devour",
                                                                                                                                                    "impress",
                                                                                                                                                    "springTheTrap",
                                                                                                                                                    "weirdingCombat",
                                                                                                                                                    "tacticalOption",
                                                                                                                                                    "questionableMethods",
                                                                                                                                                    "desertMouse",
                                                                                                                                                    "ornithopter",
                                                                                                                                                    "crysknife",
                                                                                                                                                    "shadowAlliance",
                                                                                                                                                    "secureSpiceTrade",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.intrigue, "intrigue", "uprisingIntrigue_contract", 1, {
                                                                                                                                                    "leverage",
                                                                                                                                                    "backedByChoam",
                                                                                                                                                    "reachAgreement",
                                                                                                                                                    "choamProfits",
                                                                                                                                                })

                                                                                                                                                Deck.load(loader, cards.conflict, "conflict1", "uprisingConflict", 1, {
                                                                                                                                                    "skirmishA",
                                                                                                                                                    "skirmishB",
                                                                                                                                                    "skirmishC",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.conflict, "conflict2", "uprisingConflict", 1, {
                                                                                                                                                    "choamSecurity",
                                                                                                                                                    "spiceFreighters",
                                                                                                                                                    "siegeOfArrakeen",
                                                                                                                                                    "seizeSpiceRefinery",
                                                                                                                                                    "testOfLoyalty",
                                                                                                                                                    "shadowContest",
                                                                                                                                                    "secureImperialBasin",
                                                                                                                                                    "protectTheSietches",
                                                                                                                                                    "tradeDispute",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.conflict, "conflict3", "conflict", 5, {
                                                                                                                                                    "economicSupremacy",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.conflict, "conflict3", "uprisingConflict", 1, {
                                                                                                                                                    "propaganda",
                                                                                                                                                    "battleForImperialBasin",
                                                                                                                                                    "battleForArrakeen",
                                                                                                                                                    "battleForSpiceRefinery",
                                                                                                                                                })

                                                                                                                                                Deck.load(loader, cards.hagal, "hagal", "base", 1, {
                                                                                                                                                    "churn",
                                                                                                                                                    "placeSpyYellow",
                                                                                                                                                    "placeSpyBlue",
                                                                                                                                                    "placeSpyGreen",
                                                                                                                                                    "sardaukar",
                                                                                                                                                    "dutifulService",
                                                                                                                                                    "heighliner",
                                                                                                                                                    "deliverSuppliesAndHeighliner",
                                                                                                                                                    "espionage",
                                                                                                                                                    "secrets",
                                                                                                                                                    "desertTactics",
                                                                                                                                                    "fremkit",
                                                                                                                                                    "assemblyHall",
                                                                                                                                                    "gatherSupport1",
                                                                                                                                                    "gatherSupport2",
                                                                                                                                                    "acceptContractAndShipping1",
                                                                                                                                                    "acceptContractAndShipping2",
                                                                                                                                                    "researchStation",
                                                                                                                                                    "spiceRefinery",
                                                                                                                                                    "arrakeen",
                                                                                                                                                    "sietchTabr",
                                                                                                                                                    "haggaBasinAndImperialBasin",
                                                                                                                                                    "deepDesert",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.hagal, "hagal", "reshuffle", 10, {
                                                                                                                                                    "reshuffle"
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.hagal, "hagal", "ix", 1, {
                                                                                                                                                    "interstellarShipping",
                                                                                                                                                    "deliverSuppliesAndInterstellarShipping",
                                                                                                                                                    "smugglingAndInterstellarShipping",
                                                                                                                                                    "techNegotiation",
                                                                                                                                                    "dreadnought1p",
                                                                                                                                                    "dreadnought2p",
                                                                                                                                                })
                                                                                                                                                Deck.load(loader, cards.hagal, "hagal", "immortality", 1, {
                                                                                                                                                    "researchStationImmortality",
                                                                                                                                                    "tleilaxuBonus1",
                                                                                                                                                    "tleilaxuBonus2",
                                                                                                                                                    "tleilaxuBonus3",
                                                                                                                                                })

                                                                                                                                                -- One tech per custom deck.
                                                                                                                                                for techName, _ in pairs(Deck.tech) do
                                                                                                                                                    Deck.load(loader, cards.tech, "tech", techName, 1, {techName})
                                                                                                                                                end

                                                                                                                                                -- One leader per custom deck.
                                                                                                                                                for leaderName, _ in pairs(Deck.leader) do
                                                                                                                                                    Deck.load(loader, cards.leaders, "leader", leaderName, 1, {leaderName})
                                                                                                                                                end

                                                                                                                                                Deck.load(loader, cards.rivalLeaders, "rivalLeader", "uprising", 1, {
                                                                                                                                                    "vladimirHarkonnen",
                                                                                                                                                    "muadDib",
                                                                                                                                                    "jessica",
                                                                                                                                                    "feydRauthaHarkonnen",
                                                                                                                                                    "margotFenring",
                                                                                                                                                    "stabanTuek",
                                                                                                                                                    "amberMetulli",
                                                                                                                                                    "irulanCorrino",
                                                                                                                                                    "gurneyHalleck",
                                                                                                                                                    "glossuRabban",
                                                                                                                                                })

                                                                                                                                                return cards
                                                                                                                                            end

                                                                                                                                            return Deck

                                                                                                                                        end)
                                                                                                                                        __bundle_register("ShippingTrack", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                            local Module = require("utils.Module")
                                                                                                                                            local Helper = require("utils.Helper")
                                                                                                                                            local I18N = require("utils.I18N")

                                                                                                                                            local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                                                            local TechMarket = Module.lazyRequire("TechMarket")

                                                                                                                                            local ShippingTrack = {
                                                                                                                                                initialFreighterPositions = {
                                                                                                                                                    Yellow = Helper.getHardcodedPositionFromGUID('8fa76f', 9.04999352, 1.7, 2.88),
                                                                                                                                                    Green = Helper.getHardcodedPositionFromGUID('34281d', 8.5, 1.70039737, 2.88000035),
                                                                                                                                                    Blue = Helper.getHardcodedPositionFromGUID('68e424', 7.40390825, 1.70035648, 2.88000059),
                                                                                                                                                Red = Helper.getHardcodedPositionFromGUID('e9096d', 7.957117, 1.70040143, 2.88050866)}}

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack.onLoad(state)
                                                                                                                                                    Helper.append(ShippingTrack, Helper.resolveGUIDs(false, {
                                                                                                                                                        board = "0b9dfe",
                                                                                                                                                    }))

                                                                                                                                                    if state.settings and state.settings.riseOfIx then
                                                                                                                                                        ShippingTrack._transientSetUp(state.settings)
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack.setUp(settings)
                                                                                                                                                    if settings.riseOfIx then
                                                                                                                                                        ShippingTrack._transientSetUp(settings)
                                                                                                                                                    else
                                                                                                                                                        ShippingTrack._tearDown()
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack._transientSetUp(settings)

                                                                                                                                                    local createZone = function (position, scale)
                                                                                                                                                        return Helper.markAsTransient(spawnObject({
                                                                                                                                                            type = 'ScriptingTrigger',
                                                                                                                                                            position = position,
                                                                                                                                                            scale = scale,
                                                                                                                                                        }))
                                                                                                                                                    end

                                                                                                                                                    Helper.collectSnapPoints(ShippingTrack.board, {

                                                                                                                                                        freighterSpace = function (name, position)
                                                                                                                                                            local index = tonumber(name)
                                                                                                                                                            assert(index, "Not a number: " .. name)
                                                                                                                                                            local levelSlot = createZone(position, Vector(index > 0 and 2.3 or 3.6, 2, 1))
                                                                                                                                                            ShippingTrack._createLevelButton(index, levelSlot)
                                                                                                                                                        end,

                                                                                                                                                        freighterBonus = function (name, position)
                                                                                                                                                            local bounds
                                                                                                                                                            if name == "troopsAndInfluence" then
                                                                                                                                                                bounds = Vector(1.3, 1, 1)
                                                                                                                                                            elseif name == "solaris" then
                                                                                                                                                                bounds = Vector(0.7, 1, 0.7)
                                                                                                                                                            elseif name == "spice" then
                                                                                                                                                                bounds = Vector(0.7, 1, 0.7)
                                                                                                                                                            else
                                                                                                                                                                error(name)
                                                                                                                                                            end
                                                                                                                                                            local bonusSlot = createZone(position, bounds)
                                                                                                                                                            ShippingTrack._createBonusButton(name, bonusSlot)
                                                                                                                                                        end,
                                                                                                                                                    })
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack._tearDown()
                                                                                                                                                    ShippingTrack.board.destruct()
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack.getBoard()
                                                                                                                                                    return ShippingTrack.board
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack._createLevelButton(level, levelSlot)
                                                                                                                                                    local tooltip = level == 0
                                                                                                                                                    and I18N("recallYourFreighter")
                                                                                                                                                    or I18N("progressOnShipmentTrack")
                                                                                                                                                    local ground = levelSlot.getPosition().y - 0.1
                                                                                                                                                    Helper.createAnchoredAreaButton(levelSlot, ground, 0.2, tooltip, PlayBoard.withLeader(function (_, color, _)
                                                                                                                                                        local leader = PlayBoard.getLeader(color)
                                                                                                                                                        local freighterLevel = ShippingTrack.getFreighterLevel(color)
                                                                                                                                                        if freighterLevel < level then
                                                                                                                                                            leader.advanceFreighter(color, level - freighterLevel)
                                                                                                                                                        elseif level == 0 then
                                                                                                                                                            leader.recallFreighter(color)
                                                                                                                                                        end
                                                                                                                                                    end))
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack._createBonusButton(bonusName, bonusSlot)
                                                                                                                                                    local tooltip = I18N("pickBonus", {bonus = I18N(bonusName)})
                                                                                                                                                    local ground = bonusSlot.getPosition().y - 0.1
                                                                                                                                                    local callbackName = Helper.toCamelCase("_pick", bonusName, "bonus")
                                                                                                                                                    local callback = ShippingTrack[callbackName]
                                                                                                                                                    assert(callback, "No callback named " .. callbackName)
                                                                                                                                                    Helper.createAnchoredAreaButton(bonusSlot, ground, 0.2, tooltip, PlayBoard.withLeader(function (_, color, _)
                                                                                                                                                        callback(color)
                                                                                                                                                    end))
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack.getFreighterLevel(color)
                                                                                                                                                    local p = PlayBoard.getContent(color).freighter.getPosition()
                                                                                                                                                    return math.floor((p.z - ShippingTrack.initialFreighterPositions[color].z) / 1.1 + 0.5)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack._setFreighterPositionSmooth(color, level)
                                                                                                                                                    local p = ShippingTrack.initialFreighterPositions[color]:copy()
                                                                                                                                                    p:setAt('z', p.z + 1.1 * level)
                                                                                                                                                    PlayBoard.getContent(color).freighter.setPositionSmooth(p, false, true)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack._freighterGoUp(color, count)
                                                                                                                                                    Helper.repeatMovingAction(PlayBoard.getContent(color).freighter, count, function ()
                                                                                                                                                        ShippingTrack.freighterUp(color)
                                                                                                                                                    end)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack.freighterUp(color, baseCount)
                                                                                                                                                    local level = ShippingTrack.getFreighterLevel(color)
                                                                                                                                                    local count = math.min(baseCount or 1, 3 - level)
                                                                                                                                                    if count > 0 then
                                                                                                                                                        ShippingTrack._setFreighterPositionSmooth(color, level + count)
                                                                                                                                                        return true
                                                                                                                                                    else
                                                                                                                                                        return false
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack.freighterReset(color)
                                                                                                                                                    local level = ShippingTrack.getFreighterLevel(color)
                                                                                                                                                    if level > 0 then
                                                                                                                                                        ShippingTrack._setFreighterPositionSmooth(color, 0)
                                                                                                                                                        if level >= 3 then
                                                                                                                                                            TechMarket.registerAcquireTechOption(color, "freighterTechBuyOption", "spice", 2)
                                                                                                                                                        end
                                                                                                                                                        return true
                                                                                                                                                    else
                                                                                                                                                        return false
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack._pickSolarisBonus(color)
                                                                                                                                                    local leader = PlayBoard.getLeader(color)
                                                                                                                                                    leader.resources(color, "solari", 5)
                                                                                                                                                    for _, otherColor in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                                                        if otherColor ~= color then
                                                                                                                                                            local otherLeader = PlayBoard.getLeader(otherColor)
                                                                                                                                                            otherLeader.resources(otherColor, "solari", 1)
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack._pickSpiceBonus(color)
                                                                                                                                                    local leader = PlayBoard.getLeader(color)
                                                                                                                                                    leader.resources(color, "spice", 2)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function ShippingTrack._pickTroopsAndInfluenceBonus(color)
                                                                                                                                                    local leader = PlayBoard.getLeader(color)
                                                                                                                                                    local troopAmount = 2
                                                                                                                                                    if PlayBoard.hasTech(color, "troopTransports") then
                                                                                                                                                        troopAmount = 3
                                                                                                                                                    end
                                                                                                                                                    leader.setContext("troopTransports")
                                                                                                                                                    leader.troops(color, "supply", "garrison", troopAmount)
                                                                                                                                                    leader.unsetContext("troopTransports")
                                                                                                                                                end

                                                                                                                                                return ShippingTrack

                                                                                                                                            end)
                                                                                                                                            __bundle_register("ConflictCard", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                                local Module = require("utils.Module")
                                                                                                                                                local Helper = require("utils.Helper")

                                                                                                                                                -- Exceptional Immediate require for the sake of aliasing.
                                                                                                                                                local CardEffect = require("CardEffect")

                                                                                                                                                local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                                                                local Types = Module.lazyRequire("Types")
                                                                                                                                                local Action = Module.lazyRequire("Action")

                                                                                                                                                -- Function aliasing for a more readable code.
                                                                                                                                                local persuasion = CardEffect.persuasion
                                                                                                                                                local sword = CardEffect.sword
                                                                                                                                                local spice = CardEffect.spice
                                                                                                                                                local water = CardEffect.water
                                                                                                                                                local solari = CardEffect.solari
                                                                                                                                                local deploy = CardEffect.deploy
                                                                                                                                                local troop = CardEffect.troop
                                                                                                                                                local dreadnought = CardEffect.dreadnought
                                                                                                                                                local negotiator = CardEffect.negotiator
                                                                                                                                                local specimen = CardEffect.specimen
                                                                                                                                                local intrigue = CardEffect.intrigue
                                                                                                                                                local trash = CardEffect.trash
                                                                                                                                                local research = CardEffect.research
                                                                                                                                                local beetle = CardEffect.beetle
                                                                                                                                                local influence = CardEffect.influence
                                                                                                                                                local vp = CardEffect.vp
                                                                                                                                                local draw = CardEffect.draw
                                                                                                                                                local shipment = CardEffect.shipment
                                                                                                                                                local control = CardEffect.control
                                                                                                                                                local spy = CardEffect.spy
                                                                                                                                                local contract = CardEffect.contract
                                                                                                                                                local voice = CardEffect.voice
                                                                                                                                                local perDreadnoughtInConflict = CardEffect.perDreadnoughtInConflict
                                                                                                                                                local perSwordCard = CardEffect.perSwordCard
                                                                                                                                                local perFremen = CardEffect.perFremen
                                                                                                                                                local perEmperor = CardEffect.perEmperor
                                                                                                                                                local perFulfilledContract = CardEffect.perFulfilledContract
                                                                                                                                                local choice = CardEffect.choice
                                                                                                                                                local optional = CardEffect.optional
                                                                                                                                                local seat = CardEffect.seat
                                                                                                                                                local fremenBond = CardEffect.fremenBond
                                                                                                                                                -- bloodlines sardaukar commander in conflict
                                                                                                                                                local sardaukarCommanderInConflict = CardEffect.sardaukarCommanderInConflict
                                                                                                                                                -- bloodlines imperial throneship reveal
                                                                                                                                                local imperialThroneship = CardEffect.imperialThroneship
                                                                                                                                                local agentInEmperorSpace = CardEffect.agentInEmperorSpace
                                                                                                                                                local emperorAlliance = CardEffect.emperorAlliance
                                                                                                                                                local spacingGuildAlliance = CardEffect.spacingGuildAlliance
                                                                                                                                                local beneGesseritAlliance = CardEffect.beneGesseritAlliance
                                                                                                                                                local fremenAlliance = CardEffect.fremenAlliance
                                                                                                                                                local fremenFriendship = CardEffect.fremenFriendship
                                                                                                                                                local anyAlliance = CardEffect.anyAlliance
                                                                                                                                                local oneHelix = CardEffect.oneHelix
                                                                                                                                                local twoHelices = CardEffect.twoHelices
                                                                                                                                                local winner = CardEffect.winner
                                                                                                                                                local twoSpies = CardEffect.twoSpies
                                                                                                                                                local spyMakerSpace = CardEffect.spyMakerSpace
                                                                                                                                                local swordmaster = CardEffect.swordmaster
                                                                                                                                                local multiply = CardEffect.multiply

                                                                                                                                                local ConflictCard = {
                                                                                                                                                    skirmishA = {level = 1, uprising = true, objective = "crysknife", rewards = {{influence(1)}, {intrigue(1), spice(1)}, {spice(1)}}},
                                                                                                                                                    skirmishB = {level = 1, uprising = true, objective = "ornithopter", rewards = {{intrigue(1), solari(1)}, {intrigue(1), solari(2)}, {intrigue(1)}}},
                                                                                                                                                    skirmishC = {level = 1, uprising = true, objective = "muadDib", rewards = {{solari(2)}, {solari(3)}, {solari(2)}}},
                                                                                                                                                    -- bloodlines conflict rewards
                                                                                                                                                    bl_Skirmish = {level = 1, uprising = true, objective = "joker", rewards = {{trash(1)}, {water(1), solari(1)}, {solari(2)}}},
                                                                                                                                                    bl_StormsInTheSouth = {level = 2, uprising = true, objective = "joker", rewards = {{spy(1), spice(2)}, {intrigue(2), solari(2)}, {intrigue(1), solari(2)}}},
                                                                                                                                                    --[[
    desertPower = {level = 2, legacy = true, rewards = {{vp(1), water(1)}, {water(1), spice(1)}, {spice(1)}}},
    raidStockpiles = {level = 2, legacy = true, rewards = {{intrigue(1), spice(3)}, {spice(2)}, {spice(1)}}},
    cloakAndDagger = {level = 2, legacy = true, rewards = {{influence(1), intrigue(2)}, {intrigue(1), spice(1)}, {choice(1, {intrigue(1), spice(1)})}}},
    machinations = {level = 2, legacy = true, rewards = {{choice(2, {influence(1, "emperor"), influence(1, "spacingGuild"), influence(1, "beneGesserit"), influence(1, "fremen")})}, {water(1), solari(2)}, {water(1)}}},
    sortThroughTheChaos = {level = 2, legacy = true, rewards = {{mentat(), intrigue(1), solari(2)}, {intrigue(1), solari(2)}, {solari(2)}}},
    terriblePurpose = {level = 2, legacy = true, rewards = {{vp(1), trash(1)}, {water(1), spice(1)}, {spice(1)}}},
    guildBankRaid = {level = 2, legacy = true, rewards = {{solari(6)}, {solari(4)}, {solari(2)}}},
    siegeOfArrakeen = {level = 2, legacy = true, rewards = {{vp(1), control("arrakeen")}, {solari(4)}, {solari(2)}}},
    siegeOfCarthag = {level = 2, legacy = true, rewards = {{vp(1), control("carthag")}, {intrigue(1), spice(1)}, {spice(1)}}},
    secureImperialBasin = {level = 2, legacy = true, rewards = {{vp(1), control("imperialBasin")}, {water(2)}, {water(1)}}},
    tradeMonopoly = {level = 2, ix = true, rewards = {{shipment(2), troop(1)}, {intrigue(1), water(1)}, {choice(1, {intrigue(1), water(1)})}}},
    ]]
                                                                                                                                                    choamSecurity = {level = 2, uprising = true, objective = "crysknife", rewards = {{influence(1, "spacingGuild"), contract(), troop(1)}, {water(1), solari(2), troop(2)}, {intrigue(1), troop(1)}}},
                                                                                                                                                    spiceFreighters = {level = 2, uprising = true, objective = "crysknife", rewards = {{influence(1), optional({spice(-3), vp(1)})}, {water(1), spice(1), troop(1)}, {spice(1), troop(1)}}},
                                                                                                                                                    siegeOfArrakeen = {level = 2, uprising = true, objective = "ornithopter", rewards = {{control("arrakeen"), solari(2), troop(2)}, {solari(4), troop(1)}, {solari(3)}}},
                                                                                                                                                    seizeSpiceRefinery = {level = 2, uprising = true, objective = "crysknife", rewards = {{control("spiceRefinery"), spy(1), spice(2)}, {intrigue(1), spice(1), troop(1)}, {spice(2)}}},
                                                                                                                                                    testOfLoyalty = {level = 2, uprising = true, objective = "ornithopter", rewards = {{influence(1, "emperor"), spy(1), solari(2)}, {solari(4), troop(1)}, {solari(3)}}},
                                                                                                                                                    shadowContest = {level = 2, uprising = true, objective = "ornithopter", rewards = {{influence(1, "beneGesserit"), intrigue(1)}, {intrigue(1), spice(1), troop(1)}, {spice(1), troop(1)}}},
                                                                                                                                                    secureImperialBasin = {level = 2, uprising = true, objective = "muadDib", rewards = {{control("imperialBasin"), spice(2), troop(1)}, {water(2), troop(1)}, {water(1), troop(1)}}},
                                                                                                                                                    protectTheSietches = {level = 2, uprising = true, objective = "muadDib", rewards = {{influence(1, "fremen"), water(1), troop(1)}, {spice(3), troop(1)}, {spice(2)}}},
                                                                                                                                                    tradeDispute = {level = 2, uprising = true, objective = "muadDib", rewards = {{contract(), water(1), trash(1)}, {water(1), spice(1), trash(1)}, {water(1), troop(1)}}},
                                                                                                                                                    --[[
    battleForImperialBasin = {level = 3, legacy = true, rewards = {{vp(2), control("imperialBasin")}, {spice(5)}, {spice(3)}}},
    grandVision = {level = 3, legacy = true, rewards = {{influence(2), intrigue(1)}, {intrigue(1), spice(3)}, {spice(3)}}},
    battleForCarthag = {level = 3, legacy = true, rewards = {{vp(2), control("carthag")}, {intrigue(1), spice(3)}, {spice(3)}}},
    battleForArrakeen = {level = 3, legacy = true, rewards = {{vp(2), control("arrakeen")}, {choice(2, {intrigue(1), spice(2), solari(3)})}, {intrigue(1), solari(2)}}},
    ]]
                                                                                                                                                    economicSupremacy = {level = 3, ix = true, rewards = {{vp(1), optional({solari(-6), vp(1)}), optional({spice(-4), vp(1)})}, {vp(1)}, {spice(2), solari(2)}}},
                                                                                                                                                    propaganda = {level = 3, uprising = true, objective = "joker", rewards = {{choice(2, {influence(1, "emperor"), influence(1, "spacingGuild"), influence(1, "beneGesserit"), influence(1, "fremen")})}, {intrigue(1), spice(3)}, {spice(3)}}},
                                                                                                                                                    battleForImperialBasin = {level = 3, uprising = true, objective = "ornithopter", rewards = {{vp(1), control("imperialBasin"), optional({spice(-4), vp(1)})}, {spice(5)}, {spice(3)}}},
                                                                                                                                                    battleForArrakeen = {level = 3, uprising = true, objective = "crysknife", rewards = {{vp(1), control("arrakeen"), optional({spy(-2), vp(1)})}, {intrigue(1), spice(1), solari(3)}, {spice(2), solari(2)}}},
                                                                                                                                                    battleForSpiceRefinery = {level = 3, uprising = true, objective = "muadDib", rewards = {{vp(1), control("spiceRefinery"), optional({solari(-6), vp(1)})}, {intrigue(1), spice(3)}, {spice(3)}}},
                                                                                                                                                }

                                                                                                                                                function ConflictCard.getObjective(conflictName)
                                                                                                                                                    local conflict = ConflictCard[conflictName]
                                                                                                                                                    assert(conflict, "Unknown conflict: " .. tostring(conflictName))
                                                                                                                                                    return conflict.objective
                                                                                                                                                end

                                                                                                                                                function ConflictCard.collectReward(color, conflictName, rank, doubleRewards, postAction)
                                                                                                                                                    Types.assertIsInRange(1, 3, rank)
                                                                                                                                                    local conflict = ConflictCard[conflictName]
                                                                                                                                                    assert(conflict, "Unknown conflict: " .. tostring(conflictName))
                                                                                                                                                    local rewards = conflict.rewards[rank]

                                                                                                                                                    local context = {
                                                                                                                                                        color = color,
                                                                                                                                                        player = PlayBoard.getLeader(color),
                                                                                                                                                        cardName = conflictName,
                                                                                                                                                    }

                                                                                                                                                    Action.setContext("combatEnded")

                                                                                                                                                    if rank == 1 and conflict.objective then
                                                                                                                                                        context.player.gainObjective(context.color, conflict.objective)
                                                                                                                                                    end

                                                                                                                                                    local continuation = Helper.createContinuation("ConflictCard.collectReward")

                                                                                                                                                    local functionHolder = {}
                                                                                                                                                    functionHolder.i = 1
                                                                                                                                                    functionHolder.f = function ()
                                                                                                                                                        for _, reward in ipairs(rewards) do
                                                                                                                                                            CardEffect.evaluate(context, reward)
                                                                                                                                                        end

                                                                                                                                                        local innerContinuation = postAction and postAction() or Helper.fakeContinuation()
                                                                                                                                                        innerContinuation.doAfter(function ()
                                                                                                                                                            Action.flushTroopTransfer()
                                                                                                                                                            if doubleRewards and functionHolder.i == 1 then
                                                                                                                                                                Helper.onceTimeElapsed(2).doAfter(function ()
                                                                                                                                                                    functionHolder.i = functionHolder.i + 1
                                                                                                                                                                    functionHolder.f()
                                                                                                                                                                end)
                                                                                                                                                            else
                                                                                                                                                                continuation.run()
                                                                                                                                                            end
                                                                                                                                                        end)
                                                                                                                                                    end

                                                                                                                                                    functionHolder.f()

                                                                                                                                                    return continuation
                                                                                                                                                end

                                                                                                                                                function ConflictCard.getLevel(conflictName)
                                                                                                                                                    local conflict = ConflictCard[conflictName]
                                                                                                                                                    assert(conflict, conflictName)
                                                                                                                                                    return conflict.level
                                                                                                                                                end

                                                                                                                                                function ConflictCard.isBehindTheWall(conflictName)
                                                                                                                                                    local behindTheWallConflictCards = {
                                                                                                                                                        siegeOfArrakeen = "arrakeen",
                                                                                                                                                        seizeSpiceRefinery = "spiceRefinery",
                                                                                                                                                        secureImperialBasin = "imperialBasin",
                                                                                                                                                        battleForImperialBasin = "imperialBasin",
                                                                                                                                                        battleForArrakeen = "arrakeen",
                                                                                                                                                        battleForSpiceRefinery = "spiceRefinery",
                                                                                                                                                    }
                                                                                                                                                    return Helper.isElementOf(conflictName, Helper.getKeys(behindTheWallConflictCards))
                                                                                                                                                end

                                                                                                                                                return ConflictCard

                                                                                                                                            end)
                                                                                                                                            __bundle_register("Commander", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                                local Module = require("utils.Module")
                                                                                                                                                local Helper = require("utils.Helper")

                                                                                                                                                local Action = Module.lazyRequire("Action")
                                                                                                                                                local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                                                                local InfluenceTrack = Module.lazyRequire("InfluenceTrack")

                                                                                                                                                local Commander = Helper.createClass(Action, {
                                                                                                                                                    leaders = {},
                                                                                                                                                    activatedAllies = {},
                                                                                                                                                })

                                                                                                                                                ---
                                                                                                                                                function Commander.onLoad()
                                                                                                                                                    -- Need to be called to be marked as such in Module, but we don't want
                                                                                                                                                    -- Action.onLoad to be called instead. Hence this empty overload.
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.setUp(settings)
                                                                                                                                                    -- NOP
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.isCommander(color)
                                                                                                                                                    return color == "Purple" or color == "White"
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.isAlly(color)
                                                                                                                                                    return not Commander.isCommander(color)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.getAllies(color)
                                                                                                                                                    if color == "Purple" then
                                                                                                                                                        return {"Blue", "Red"}
                                                                                                                                                    elseif color == "White" then
                                                                                                                                                        return {"Yellow", "Green"}
                                                                                                                                                    else
                                                                                                                                                        return nil
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.getLeftSeatedAlly(color)
                                                                                                                                                    if color == "Purple" then
                                                                                                                                                        return "Blue"
                                                                                                                                                    elseif color == "White" then
                                                                                                                                                        return "Green"
                                                                                                                                                    else
                                                                                                                                                        return nil
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.getRightSeatedAlly(color)
                                                                                                                                                    if color == "Purple" then
                                                                                                                                                        return "Red"
                                                                                                                                                    elseif color == "White" then
                                                                                                                                                        return "Yellow"
                                                                                                                                                    else
                                                                                                                                                        return nil
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.getOtherAlly(color)
                                                                                                                                                    if color == "Blue" then
                                                                                                                                                        return "Red"
                                                                                                                                                    elseif color == "Red" then
                                                                                                                                                        return "Blue"
                                                                                                                                                    elseif color == "Yellow" then
                                                                                                                                                        return "Green"
                                                                                                                                                    elseif color == "Green" then
                                                                                                                                                        return "Yellow"
                                                                                                                                                    else
                                                                                                                                                        return nil
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.getCommander(color)
                                                                                                                                                    if Helper.isElementOf(color, {"Blue", "Red"}) then
                                                                                                                                                        return "Purple"
                                                                                                                                                    elseif Helper.isElementOf(color, {"Yellow", "Green"}) then
                                                                                                                                                        return "White"
                                                                                                                                                    else
                                                                                                                                                        return nil
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.isShaddam(color)
                                                                                                                                                    return color == "Purple"
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.isTeamShaddam(color)
                                                                                                                                                    return color == "Red" or color == "Blue" or color == "Purple"
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.getShaddamTeam()
                                                                                                                                                    return {"Purple", "Red", "Blue"}
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.isMuadDib(color)
                                                                                                                                                    return color == "White"
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.isTeamMuadDib(color)
                                                                                                                                                    return color == "Green" or color == "Yellow" or color == "White"
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.getMuadDibTeam()
                                                                                                                                                    return {"White", "Green", "Yellow"}
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.inSameTeam(...)
                                                                                                                                                    assert(#{...} > 1)
                                                                                                                                                    local shaddamTeamMemberCount = #Helper.filter({...}, Commander.isTeamShaddam)
                                                                                                                                                    local muadDibTeamMemberCount = #Helper.filter({...}, Commander.isTeamMuadDib)
                                                                                                                                                    return shaddamTeamMemberCount == 0 or muadDibTeamMemberCount == 0
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.newCommander(color, leader)
                                                                                                                                                    assert(Commander.isCommander(color))
                                                                                                                                                    local commander = Helper.createClassInstance(Commander, {})
                                                                                                                                                    Commander.leaders[color] = leader
                                                                                                                                                    commander.name = leader.name
                                                                                                                                                    return commander
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.setActivatedAlly(color, allyColor)
                                                                                                                                                    assert(Commander.isCommander(color))
                                                                                                                                                    assert(not allyColor or Commander.isAlly(allyColor))
                                                                                                                                                    Commander.activatedAllies[color] = allyColor
                                                                                                                                                    Helper.emitEvent("selectAlly", color, allyColor)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.getActivatedAlly(color)
                                                                                                                                                    return Commander.activatedAllies[color]
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.doSetUp(color, settings)
                                                                                                                                                    Helper.dumpFunction("Commander.doSetUp", color)
                                                                                                                                                    local leader = Commander.leaders[color]
                                                                                                                                                    assert(leader)
                                                                                                                                                    leader.doSetUp(color, settings, true)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.prepare(color, settings)
                                                                                                                                                    local leader = Commander.leaders[color]
                                                                                                                                                    assert(leader)
                                                                                                                                                    leader.prepare(color, settings, true)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.callSandworm(color, count)
                                                                                                                                                    return Commander._forwardToActivatedAlly(color, "callSandworm", count)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.influence(color, faction, amount)
                                                                                                                                                    if InfluenceTrack.hasAccess(color, faction) then
                                                                                                                                                        return Action.influence(color, faction, amount)
                                                                                                                                                    else
                                                                                                                                                        return Commander._forwardToActivatedAlly(color, "influence", faction, amount)
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.troops(color, from, to, amount)
                                                                                                                                                    return Commander._forwardToActivatedAlly(color, "troops", from, to, amount)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.advanceFreighter(color, positiveAmount)
                                                                                                                                                    return Commander._forwardToActivatedAlly(color, "advanceFreighter", positiveAmount)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.recallFreighter(color)
                                                                                                                                                    return Commander._forwardToActivatedAlly(color, "recallFreighter")
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.shipments(color, amount)
                                                                                                                                                    return Commander._forwardToActivatedAlly(color, "shipments", amount)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.dreadnought(color, from, to, amount)
                                                                                                                                                    return Commander._forwardToActivatedAlly(color, "dreadnought", from, to, amount)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.research(color, jump)
                                                                                                                                                    return Commander._forwardToActivatedAlly(color, "dreadnought", jump)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander.beetle(color, jump)
                                                                                                                                                    return Commander._forwardToActivatedAlly(color, "beetle", jump)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Commander._forwardToActivatedAlly(color, functionName, ...)
                                                                                                                                                    local ally = Commander.getActivatedAlly(color)
                                                                                                                                                    local leader = PlayBoard.getLeader(ally)
                                                                                                                                                    return leader[functionName](ally, ...)
                                                                                                                                                end

                                                                                                                                                return Commander

                                                                                                                                            end)
                                                                                                                                            __bundle_register("Combat", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                                local Module = require("utils.Module")
                                                                                                                                                local Helper = require("utils.Helper")
                                                                                                                                                local Park = require("utils.Park")
                                                                                                                                                local I18N = require("utils.I18N")

                                                                                                                                                local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                                                                local Commander = Module.lazyRequire("Commander")
                                                                                                                                                local Action = Module.lazyRequire("Action")
                                                                                                                                                local Deck = Module.lazyRequire("Deck")
                                                                                                                                                local Types = Module.lazyRequire("Types")
                                                                                                                                                local TurnControl = Module.lazyRequire("TurnControl")
                                                                                                                                                local MainBoard = Module.lazyRequire("MainBoard")
                                                                                                                                                local Music = Module.lazyRequire("Music")
                                                                                                                                                local ConflictCard = Module.lazyRequire("ConflictCard")
                                                                                                                                                -- bloodlines sardaukar commander skill - loyal
                                                                                                                                                local InfluenceTrack = Module.lazyRequire("InfluenceTrack")

                                                                                                                                                local Combat = {
                                                                                                                                                    -- Temporary structure (set to nil *after* loading).
                                                                                                                                                    unresolvedContent = {
                                                                                                                                                        victoryPointTokenBag = "86dc4e",
                                                                                                                                                        protoSandworm = "14b25e",
                                                                                                                                                        -- bloodlines sardaukar commander
                                                                                                                                                        protoSardaukarCommander = "556b39",
                                                                                                                                                        objectiveTokenBags = {
                                                                                                                                                            muadDib = "a17bcb",
                                                                                                                                                            ornithopter = "bd4b71",
                                                                                                                                                            crysknife = "85f9b6",
                                                                                                                                                            joker = "99ecfe",
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                    origins = {
                                                                                                                                                        Green = Vector(8.15, 0.85, -7.65),
                                                                                                                                                        Yellow = Vector(8.15, 0.85, -10.35),
                                                                                                                                                        Blue = Vector(1.55, 0.85, -10.35),
                                                                                                                                                        Red = Vector(1.55, 0.85, -7.65),
                                                                                                                                                    },
                                                                                                                                                    victoryPointTokenPositions = {},
                                                                                                                                                    dreadnoughtStrengths = {},
                                                                                                                                                ranking = {}}

                                                                                                                                                function Combat.onLoad(state)
                                                                                                                                                    Helper.append(Combat, Helper.resolveGUIDs(false, Combat.unresolvedContent))

                                                                                                                                                    Helper.noPhysicsNorPlay(Combat.protoSandworm)
                                                                                                                                                    -- bloodlines sardaukar commander
                                                                                                                                                    Helper.noPhysicsNorPlay(Combat.protoSardaukarCommander)
                                                                                                                                                    for _, objectiveTokenBag in pairs(Combat.objectiveTokenBags) do
                                                                                                                                                        Helper.noPhysics(objectiveTokenBag)
                                                                                                                                                    end

                                                                                                                                                    if state.settings then
                                                                                                                                                        Combat._transientSetUp(state.settings)
                                                                                                                                                        Combat.dreadnoughtStrengths = state.Combat.dreadnoughtStrengths
                                                                                                                                                        Combat.ranking = state.Combat.ranking
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.onSave(state)
                                                                                                                                                    state.Combat = {
                                                                                                                                                        dreadnoughtStrengths = Combat.dreadnoughtStrengths,
                                                                                                                                                        ranking = Combat.ranking,
                                                                                                                                                    }
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.setUp(settings)
                                                                                                                                                    Combat._transientSetUp(settings)
                                                                                                                                                    assert(Combat.conflictDeckZone)
                                                                                                                                                    return Deck.generateConflictDeck(Combat.conflictDeckZone, settings.riseOfIx, settings.epicMode, settings.numberOfPlayers)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._transientSetUp(settings)
                                                                                                                                                    Combat.formalCombatPhase = settings.formalCombatPhase

                                                                                                                                                    Combat._processSnapPoints(settings)

                                                                                                                                                    Helper.registerEventListener("strengthValueChanged", function ()
                                                                                                                                                        Combat._updateCombatForces(Combat._calculateCombatForces())
                                                                                                                                                    end)

                                                                                                                                                    Helper.registerEventListener("selectAlly", function ()
                                                                                                                                                        Combat._updateCombatForces(Combat._calculateCombatForces())
                                                                                                                                                    end)

                                                                                                                                                    Helper.registerEventListener("phaseStart", function (phase)
                                                                                                                                                        if phase == "roundStart" then
                                                                                                                                                            Combat._setUpConflict()
                                                                                                                                                        elseif phase == "combat" then
                                                                                                                                                            Action.setContext("combat", Combat.getCurrentConflictName())
                                                                                                                                                            -- A small delay to avoid being erased by the player turn sound.
                                                                                                                                                            Helper.onceTimeElapsed(1).doAfter(function ()
                                                                                                                                                                Music.play("battle")
                                                                                                                                                            end, 1)
                                                                                                                                                        elseif phase == "combatEnd" then
                                                                                                                                                            local forces = Combat._calculateCombatForces()
                                                                                                                                                            Combat.ranking = Combat._calculateRanking(forces)
                                                                                                                                                            local turnSequence = Combat._calculateOutcomeTurnSequence(Combat.ranking)
                                                                                                                                                            TurnControl.overridePhaseTurnSequence(turnSequence)
                                                                                                                                                            Combat.showRanking(turnSequence, Combat.ranking)
                                                                                                                                                        elseif phase == "recall" then
                                                                                                                                                            for _, object in ipairs(Combat.rewardTokenZone.getObjects()) do
                                                                                                                                                                if Types.isVictoryPointToken(object) or Types.isObjectiveToken(object) then
                                                                                                                                                                    MainBoard.trash(object)
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                            -- Recalling units (troops, dreadnoughts and sandworms) in the combat (not in a controlable space).
                                                                                                                                                            for _, object in ipairs(Combat.combatCenterZone.getObjects()) do
                                                                                                                                                                for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                                                                    if Types.isTroop(object, color) then
                                                                                                                                                                        Park.putObject(object, PlayBoard.getSupplyPark(color))
                                                                                                                                                                    elseif Types.isDreadnought(object, color) then
                                                                                                                                                                        Park.putObject(object, Combat.dreadnoughtParks[color])
                                                                                                                                                                    elseif Types.isSandworm(object, color) then
                                                                                                                                                                        object.destruct()
                                                                                                                                                                        -- bloodlines duncan agent recall
                                                                                                                                                                    elseif Types.isAgent(object, color) then
                                                                                                                                                                        Park.putObject(object, PlayBoard.getAgentPark(color))
                                                                                                                                                                        -- bloodlines sardaukar commanders
                                                                                                                                                                    elseif Types.isSardaukarCommander(object, color) then
                                                                                                                                                                        Park.putObject(object, PlayBoard.getDreadnoughtPark(color))
                                                                                                                                                                    end
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end)

                                                                                                                                                    Helper.registerEventListener("phaseEnd", function (phase)
                                                                                                                                                        if phase == "combat" then
                                                                                                                                                            if Combat.isFormalCombatPhaseEnabled() then
                                                                                                                                                                Music.play("turn")
                                                                                                                                                            end
                                                                                                                                                        elseif phase == "combatEnd" then
                                                                                                                                                            for _, bannerZone in ipairs(MainBoard.getBannerZones()) do
                                                                                                                                                                local dreadnought = MainBoard.getControllingDreadnought(bannerZone)
                                                                                                                                                                -- Only recall locked controlling dreadnoughts.
                                                                                                                                                                if dreadnought and dreadnought.getLock() then
                                                                                                                                                                    dreadnought.setLock(false)
                                                                                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                                                                        if dreadnought.hasTag(color) then
                                                                                                                                                                            Park.putObject(dreadnought, Combat.dreadnoughtParks[color])
                                                                                                                                                                        end
                                                                                                                                                                    end
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                            Action.unsetContext("combat")
                                                                                                                                                        end
                                                                                                                                                    end)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._processSnapPoints(settings)
                                                                                                                                                    Combat.garrisonParks = {}
                                                                                                                                                    Combat.dreadnoughtParks = {}
                                                                                                                                                    Combat.makerHookPositions = {}
                                                                                                                                                    Combat.battlefieldZones = {}

                                                                                                                                                    local createZone = function (position, scale)
                                                                                                                                                        return Helper.markAsTransient(spawnObject({
                                                                                                                                                            type = 'ScriptingTrigger',
                                                                                                                                                            position = position,
                                                                                                                                                            scale = scale,
                                                                                                                                                        }))
                                                                                                                                                    end

                                                                                                                                                    MainBoard.collectSnapPointsOnAllBoards(settings, {

                                                                                                                                                        conflictDeck = function (_, position)
                                                                                                                                                            Combat.conflictDeckZone = createZone(position, Vector(2, 1, 3))
                                                                                                                                                        end,

                                                                                                                                                        conflictDiscard = function (_, position)
                                                                                                                                                            Combat.conflictDiscardZone = createZone(position, Vector(2, 1, 3))
                                                                                                                                                        end,

                                                                                                                                                        garrison = function (name, position)
                                                                                                                                                            local color = name:gsub("^%l", string.upper)
                                                                                                                                                            Combat.garrisonParks[color] = Combat._createGarrisonPark(color, position)
                                                                                                                                                            -- bloodlines disable rise of ix but enable dreadnought park
                                                                                                                                                            -- if settings.riseOfIx then
                                                                                                                                                            --     Combat.dreadnoughtParks[color] = Combat._createDreadnoughtPark(color, position)
                                                                                                                                                            -- end
                                                                                                                                                            Combat.dreadnoughtParks[color] = Combat._createDreadnoughtPark(color, position)
                                                                                                                                                        end,

                                                                                                                                                        makerHook = function (name, position)
                                                                                                                                                            local color = name:gsub("^%l", string.upper)
                                                                                                                                                            Combat.makerHookPositions[color] = position
                                                                                                                                                            Helper.createTransientAnchor(color .. "MakerHook", position - Vector(0, 0.5, 0)).doAfter(function (anchor)
                                                                                                                                                                local tags = {"MakerHook"}
                                                                                                                                                                local snapPoints = {Helper.createRelativeSnapPoint(anchor, position, false, tags)}
                                                                                                                                                                anchor.setSnapPoints(snapPoints)
                                                                                                                                                            end)
                                                                                                                                                        end,

                                                                                                                                                        battlefield = function (name, position)
                                                                                                                                                            if name == "" then
                                                                                                                                                                Combat.battlegroundPark = Combat._createBattlegroundPark(position)
                                                                                                                                                            else
                                                                                                                                                                local color = name:gsub("^%l", string.upper)
                                                                                                                                                                Combat.battlefieldZones[color] = createZone(position, Vector(2.3, 2, 2.3))
                                                                                                                                                            end
                                                                                                                                                        end,

                                                                                                                                                        swormasterBonusToken = function (name, position)
                                                                                                                                                            local color = name:gsub("^%l", string.upper)
                                                                                                                                                            -- TODO
                                                                                                                                                        end,

                                                                                                                                                        victoryTokenRoom = function (name, position)
                                                                                                                                                            Combat.rewardTokenZone = createZone(position, Vector(7, 2, 1))
                                                                                                                                                        end,

                                                                                                                                                        combatMarkerRoom = function (name, position)
                                                                                                                                                            Combat.noCombatForcePositions = Vector(position.x, 1.66, position.z)
                                                                                                                                                            Combat.combatForcePositions = {}
                                                                                                                                                            for i = 0, 19 do
                                                                                                                                                                Combat.combatForcePositions[i + 1] = Vector(
                                                                                                                                                                    position.x + 1.6 + (i % 10) * 0.98,
                                                                                                                                                                    1.66,
                                                                                                                                                                    position.z + 0.64 - math.floor(i / 10) * 1.03
                                                                                                                                                                )
                                                                                                                                                            end
                                                                                                                                                        end,
                                                                                                                                                    })
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.isFormalCombatPhaseEnabled()
                                                                                                                                                    return Combat.formalCombatPhase
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._setUpConflict()
                                                                                                                                                    if Helper.getCardCount(Helper.getDeckOrCard(Combat.conflictDeckZone)) == 0 then
                                                                                                                                                        return
                                                                                                                                                    end

                                                                                                                                                    Helper.moveCardFromZone(Combat.conflictDeckZone, Combat.conflictDiscardZone.getPosition() + Vector(0, 1, 0), nil, true, true).doAfter(function (card)
                                                                                                                                                        assert(card)
                                                                                                                                                        local cardName = Helper.getID(card)

                                                                                                                                                        local i = 0
                                                                                                                                                        local tokens = Combat.victoryPointTokenBag.getObjects()
                                                                                                                                                        for _, token in pairs(tokens) do
                                                                                                                                                            assert(token)
                                                                                                                                                            if cardName == Helper.getID(token) then
                                                                                                                                                                local origin = Combat.rewardTokenZone.getPosition()
                                                                                                                                                                local position = origin + Vector(0.5 - (i % 2), 0.5 + math.floor(i / 2), 0)
                                                                                                                                                                i = i + 1
                                                                                                                                                                Combat.victoryPointTokenBag.takeObject({
                                                                                                                                                                    position = position,
                                                                                                                                                                    rotation = Vector(0, 180, 0),
                                                                                                                                                                    smooth = true,
                                                                                                                                                                    guid = token.guid,
                                                                                                                                                                })
                                                                                                                                                            end
                                                                                                                                                        end

                                                                                                                                                        local objective = ConflictCard.getObjective(cardName)
                                                                                                                                                        if objective then
                                                                                                                                                            local bag = Combat.objectiveTokenBags[objective]
                                                                                                                                                            assert(bag, objective)
                                                                                                                                                            local origin = Combat.rewardTokenZone.getPosition()
                                                                                                                                                            local position = origin + Vector(0.5 - 3, 0.5, 0)
                                                                                                                                                            bag.takeObject({
                                                                                                                                                                position = position,
                                                                                                                                                                rotation = Vector(0, 180, 0),
                                                                                                                                                                smooth = true,
                                                                                                                                                                callback_function = function (token)
                                                                                                                                                                    token.setGMNotes(cardName)
                                                                                                                                                                    token.setName(I18N(cardName))
                                                                                                                                                                end
                                                                                                                                                            })
                                                                                                                                                        end

                                                                                                                                                        local controlableSpace = Combat.findControlableSpace(cardName)
                                                                                                                                                        if controlableSpace then
                                                                                                                                                            local color = MainBoard.getControllingPlayer(controlableSpace)
                                                                                                                                                            if color then
                                                                                                                                                                Park.transfert(1, PlayBoard.getSupplyPark(color), Combat.getBattlegroundPark())
                                                                                                                                                            end
                                                                                                                                                        end

                                                                                                                                                        broadcastToAll(I18N("announceCombat", {combat = I18N(Helper.getID(card))}), "Orange")
                                                                                                                                                    end)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.findControlableSpace(conflictName)
                                                                                                                                                    for _, controlableSpaceName in ipairs({"imperialBasin", "arrakeen", "spiceRefinery"}) do
                                                                                                                                                        if conflictName:find(controlableSpaceName:gsub("^%l", string.upper)) then
                                                                                                                                                            local controlableSpace = MainBoard.findControlableSpace(controlableSpaceName)
                                                                                                                                                            assert(controlableSpace)
                                                                                                                                                            return controlableSpace
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                    return nil
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.onObjectEnterZone(zone, object)
                                                                                                                                                    if zone == Combat.combatCenterZone and Types.isUnit(object) then
                                                                                                                                                        Combat._updateCombatForces(Combat._calculateCombatForces())
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.onObjectLeaveZone(zone, object)
                                                                                                                                                    if zone == Combat.combatCenterZone and Types.isUnit(object) then
                                                                                                                                                        Combat._updateCombatForces(Combat._calculateCombatForces())
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._createGarrisonPark(color, position)
                                                                                                                                                    local slots = {}
                                                                                                                                                    for i = 1, 4 do
                                                                                                                                                        for j = 3, 1, -1 do
                                                                                                                                                            local x = (PlayBoard.isLeft(color) and (2.5 - i) or (i - 2.5)) * 0.45
                                                                                                                                                            local z = (j - 2) * 0.45
                                                                                                                                                            local slot = position + Vector(x, 0.18, z)
                                                                                                                                                            table.insert(slots, slot)
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    local zone = Helper.markAsTransient(spawnObject({
                                                                                                                                                        type = 'ScriptingTrigger',
                                                                                                                                                        position = position,
                                                                                                                                                        scale = Vector(2.3, 1, 2.3),
                                                                                                                                                    }))

                                                                                                                                                    local park = Park.createPark(
                                                                                                                                                        color .. "Garrison",
                                                                                                                                                        slots,
                                                                                                                                                        Vector(0, 0, 0),
                                                                                                                                                        {zone},
                                                                                                                                                        {"Troop", color},
                                                                                                                                                        nil,
                                                                                                                                                        false,
                                                                                                                                                    true)

                                                                                                                                                    -- FIXME Hardcoded height, use an existing parent anchor.
                                                                                                                                                    Helper.createTransientAnchor("Garrison anchor", Vector(position.x, 0.6, position.z)).doAfter(function (anchor)
                                                                                                                                                        park.anchor = anchor
                                                                                                                                                        Combat._createButton(color, park)
                                                                                                                                                    end)

                                                                                                                                                    return park
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._createDreadnoughtPark(color, position)
                                                                                                                                                    local dir = PlayBoard.isLeft(color) and - 1 or 1
                                                                                                                                                    local updown = PlayBoard.isBottom(color) and - 1 or 1
                                                                                                                                                    local slots = {
                                                                                                                                                        -- original
                                                                                                                                                        -- position + Vector(0.3 * dir, 0.2, -1.0),
                                                                                                                                                        -- position + Vector(0.9 * dir, 0.2, -1.0),
                                                                                                                                                        -- bloodlines slots
                                                                                                                                                        -- position + Vector(-0.9 * dir, 0.2, -1.0 * updown),
                                                                                                                                                        position + Vector(-0.4 * dir, 0.2, -0.9 * updown),
                                                                                                                                                        position + Vector(0.1 * dir, 0.2, -0.9 * updown),
                                                                                                                                                        position + Vector(0.6 * dir, 0.2, -0.9 * updown),
                                                                                                                                                        position + Vector(1.1 * dir, 0.2, -0.9 * updown),
                                                                                                                                                    }

                                                                                                                                                    local zone = Park.createTransientBoundingZone(0, Vector(0.5, 2, 0.5), slots)

                                                                                                                                                    local park = Park.createPark(
                                                                                                                                                        color .. "DreadnoughtGarrison",
                                                                                                                                                        slots,
                                                                                                                                                        Vector(0, 0, 0),
                                                                                                                                                        {zone},
                                                                                                                                                        -- bloodlines added sardaukar commander tag
                                                                                                                                                        {"Dreadnought", "SardaukarCommander", color},
                                                                                                                                                        nil,
                                                                                                                                                        false,
                                                                                                                                                    true)
                                                                                                                                                    -- bloodlines added tag union for sardaukar commander
                                                                                                                                                    park.tagUnion = true

                                                                                                                                                    return park
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._createBattlegroundPark(position)
                                                                                                                                                    local slots = {}
                                                                                                                                                    for j = 1, 8 do
                                                                                                                                                        for i = 1, 8 do
                                                                                                                                                            local x = (i - 4.5) * 0.5
                                                                                                                                                            local z = (j - 4.5) * 0.5
                                                                                                                                                            local slot = position + Vector(x, 0.18, z)
                                                                                                                                                            table.insert(slots, slot)
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                    Helper.shuffle(slots)

                                                                                                                                                    Combat.combatCenterZone = Helper.markAsTransient(spawnObject({
                                                                                                                                                        type = 'ScriptingTrigger',
                                                                                                                                                        position = position,
                                                                                                                                                        scale = Vector(6.6, 1, 5),
                                                                                                                                                    }))

                                                                                                                                                    local park = Park.createPark(
                                                                                                                                                        "Battleground",
                                                                                                                                                        slots,
                                                                                                                                                        nil,
                                                                                                                                                        {Combat.combatCenterZone},
                                                                                                                                                        -- bloodlines added sardaukar commander and agent tags
                                                                                                                                                        {"Troop", "Dreadnought", "Sandworm", "SardaukarCommander", "Agent"},
                                                                                                                                                        nil,
                                                                                                                                                        false,
                                                                                                                                                    true)
                                                                                                                                                    park.tagUnion = true

                                                                                                                                                    return park
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._createButton(color, park)
                                                                                                                                                    local position = park.anchor.getPosition()
                                                                                                                                                    local areaColor = Color.fromString(color)
                                                                                                                                                    areaColor:setAt('a', 0.3)
                                                                                                                                                    Helper.createAbsoluteButtonWithRoundness(park.anchor, 7, {
                                                                                                                                                        click_function = Helper.registerGlobalCallback(function (_, playerColor, altClick)
                                                                                                                                                            if playerColor == color then
                                                                                                                                                                if altClick then
                                                                                                                                                                    Action.troops(color, "garrison", "supply", 1)
                                                                                                                                                                else
                                                                                                                                                                    Action.troops(color, "supply", "garrison", 1)
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end),
                                                                                                                                                        position = Vector(position.x, 1.75, position.z),
                                                                                                                                                        width = 1200,
                                                                                                                                                        height = 1200,
                                                                                                                                                        color = areaColor,
                                                                                                                                                    tooltip = I18N("troopEdit")})
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getGarrisonPark(color)
                                                                                                                                                    return Combat.garrisonParks[color]
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getDreadnoughtPark(color)
                                                                                                                                                    return Combat.dreadnoughtParks[color]
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getBattlegroundPark()
                                                                                                                                                    return Combat.battlegroundPark
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.setDreadnoughtStrength(color, strength)
                                                                                                                                                    Combat.dreadnoughtStrengths[color] = strength
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.isInCombat(color)
                                                                                                                                                    for _, object in ipairs(Combat.combatCenterZone.getObjects()) do
                                                                                                                                                        if Types.isUnit(object, color) then
                                                                                                                                                            return true
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                    return false
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._calculateOutcomeTurnSequence(ranking)
                                                                                                                                                    local distinctRanking = {}
                                                                                                                                                    for i, color in ipairs(TurnControl.getPhaseTurnSequence()) do
                                                                                                                                                        local rank = ranking[color]
                                                                                                                                                        if rank then
                                                                                                                                                            distinctRanking[color] = rank.value + i * 0.1
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    local combatEndTurnSequence = Helper.getKeys(ranking)
                                                                                                                                                    table.sort(combatEndTurnSequence, function (c1, c2)
                                                                                                                                                        return distinctRanking[c1] < distinctRanking[c2]
                                                                                                                                                    end)

                                                                                                                                                    return combatEndTurnSequence
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getRank(color)
                                                                                                                                                    return Combat.ranking[color]
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._calculateRanking(forces)
                                                                                                                                                    return Combat.__calculateRanking(forces, PlayBoard.getActivePlayBoardColors())
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.__calculateRanking(forces, activeColors)
                                                                                                                                                    local ranking = {}

                                                                                                                                                    local remainingForces = Helper.shallowCopy(forces)
                                                                                                                                                    local potentialWinnerCount = #Helper.getKeys(activeColors) - 1

                                                                                                                                                    local rank = 1
                                                                                                                                                    while potentialWinnerCount > 0 do
                                                                                                                                                        local rankWinners = {}
                                                                                                                                                        local maxForce = 1
                                                                                                                                                        for _, color in ipairs(activeColors) do
                                                                                                                                                            if remainingForces[color] then
                                                                                                                                                                if remainingForces[color] > maxForce then
                                                                                                                                                                    rankWinners = {color}
                                                                                                                                                                    maxForce = remainingForces[color]
                                                                                                                                                                elseif remainingForces[color] == maxForce then
                                                                                                                                                                    table.insert(rankWinners, color)
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end

                                                                                                                                                        if #rankWinners == 0 then
                                                                                                                                                            break;
                                                                                                                                                        elseif #rankWinners > 1 then
                                                                                                                                                            rank = rank + 1
                                                                                                                                                        end

                                                                                                                                                        if rank < 4 then
                                                                                                                                                            for _, color in ipairs(rankWinners) do
                                                                                                                                                                ranking[color] = {value = rank, exAequo = #rankWinners}
                                                                                                                                                                potentialWinnerCount = potentialWinnerCount - 1
                                                                                                                                                                remainingForces[color] = nil
                                                                                                                                                            end
                                                                                                                                                            rank = rank + 1
                                                                                                                                                        else
                                                                                                                                                            break
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    return ranking
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                -- bloodlines imperial throneship reveal
                                                                                                                                                function Combat.getGarrisonCount(color)
                                                                                                                                                    local garrisonPark = Combat.garrisonParks[color]
                                                                                                                                                    local dreadnoughtPark = Combat.dreadnoughtParks[color]

                                                                                                                                                    local garrisonObjects = Park.getObjects(garrisonPark)
                                                                                                                                                    local dreadnoughtObjects = Park.getObjects(dreadnoughtPark)

                                                                                                                                                    local garrisonCount = 0
                                                                                                                                                    for _, object in ipairs(Helper.concatTables(garrisonObjects, dreadnoughtObjects)) do
                                                                                                                                                        if Types.isUnit(object, color) then
                                                                                                                                                            garrisonCount = garrisonCount + 1
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                    return garrisonCount
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getUnitCounts()
                                                                                                                                                    local unitCounts = {}
                                                                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                                                        unitCounts[color] = 0
                                                                                                                                                        for _, object in ipairs(Combat.combatCenterZone.getObjects()) do
                                                                                                                                                            if Types.isUnit(object, color) then
                                                                                                                                                                unitCounts[color] = unitCounts[color] + 1
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                    return unitCounts
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._calculateCombatForces()
                                                                                                                                                    local forces = {}
                                                                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                                                        forces[color] = Combat.calculateCombatForce(color)
                                                                                                                                                    end
                                                                                                                                                    return forces
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.calculateCombatForce(color)
                                                                                                                                                    local force = 0
                                                                                                                                                    for _, object in ipairs(Combat.combatCenterZone.getObjects()) do
                                                                                                                                                        if Types.isUnit(object, color) then
                                                                                                                                                            if Types.isTroop(object, color) then
                                                                                                                                                                force = force + 2
                                                                                                                                                            elseif Types.isDreadnought(object, color) then
                                                                                                                                                                force = force + (Combat.dreadnoughtStrengths[color] or 3)
                                                                                                                                                            elseif Types.isSandworm(object, color) then
                                                                                                                                                                force = force + 3
                                                                                                                                                                -- bloodlines duncan agent strength
                                                                                                                                                            elseif Types.isAgent(object, color) then
                                                                                                                                                                if PlayBoard.getLeader(color).name == "bl_Duncan" then
                                                                                                                                                                    if PlayBoard.hasSwordmaster(color) then
                                                                                                                                                                        force = force + 3
                                                                                                                                                                    else
                                                                                                                                                                        force = force + 2
                                                                                                                                                                    end
                                                                                                                                                                else
                                                                                                                                                                    force = force
                                                                                                                                                                end
                                                                                                                                                                -- bloodlines sardaukar commanders
                                                                                                                                                            elseif Types.isSardaukarCommander(object, color) then
                                                                                                                                                                force = force + 2
                                                                                                                                                            else
                                                                                                                                                                error("Unknown unit type: " .. object.getGUID())
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    if force > 0 then
                                                                                                                                                        force = force + PlayBoard.getResource(color, "strength"):get()
                                                                                                                                                        if TurnControl.getPlayerCount() == 6 and Commander.isAlly(color) then
                                                                                                                                                            local commander = Commander.getCommander(color)
                                                                                                                                                            if color == Commander.getActivatedAlly(commander) then
                                                                                                                                                                force = force + PlayBoard.getResource(commander, "strength"):get()
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    -- bloodlines sardaukar commander skill - canny
                                                                                                                                                    local sc_Canny = PlayBoard.hasSkill(color, "sc_Canny")
                                                                                                                                                    if sc_Canny and Combat.hasSardaukarCommander(color) then
                                                                                                                                                        if Combat.agentInLandsraadSpace(color) then
                                                                                                                                                            force = force + 2
                                                                                                                                                        else
                                                                                                                                                            force = force
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    -- bloodlines sardaukar commander skill - fierce
                                                                                                                                                    local sc_Fierce = PlayBoard.hasSkill(color, "sc_Fierce")
                                                                                                                                                    if sc_Fierce and Combat.hasSardaukarCommander(color) then
                                                                                                                                                        local sandwormColors = Combat.getSandwormColor()

                                                                                                                                                        local hasMatchingColor = false
                                                                                                                                                        local hasDifferentColor = false

                                                                                                                                                        if #sandwormColors > 0 then
                                                                                                                                                            for _, sandwormColor in ipairs(sandwormColors) do
                                                                                                                                                                if sandwormColor == color then
                                                                                                                                                                    hasMatchingColor = true
                                                                                                                                                                else
                                                                                                                                                                    hasDifferentColor = true
                                                                                                                                                                end
                                                                                                                                                            end

                                                                                                                                                            if hasDifferentColor and hasMatchingColor then
                                                                                                                                                                force = force + 2
                                                                                                                                                            elseif hasDifferentColor then
                                                                                                                                                                force = force + 2
                                                                                                                                                            elseif hasMatchingColor then
                                                                                                                                                                force = force + 1
                                                                                                                                                            end
                                                                                                                                                        else
                                                                                                                                                            force = force + 1
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    -- bloodlines sardaukar commander skill - loyal
                                                                                                                                                    local sc_Loyal = PlayBoard.hasSkill(color, "sc_Loyal")
                                                                                                                                                    if sc_Loyal and Combat.hasSardaukarCommander(color) then
                                                                                                                                                        if InfluenceTrack.getInfluence("emperor", color) >= 3 then
                                                                                                                                                            force = force + 2
                                                                                                                                                        else
                                                                                                                                                            force = force
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    return force
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat._updateCombatForces(forces)
                                                                                                                                                    local occupations = {}

                                                                                                                                                    -- TODO Better having a zone with filtering tags.
                                                                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors()) do
                                                                                                                                                        if not Commander.isCommander(color) then
                                                                                                                                                            local force = forces[color]

                                                                                                                                                            local minorForce = force > 0 and (force - 1) % 20 + 1 or 0
                                                                                                                                                            local majorForce = force > 0 and math.floor((force - 1) / 20) or 0

                                                                                                                                                            occupations[minorForce] = (occupations[minorForce] or 0) + 1
                                                                                                                                                            local heightOffset = Vector(
                                                                                                                                                                0,
                                                                                                                                                                (occupations[minorForce] - 1) * 0.35
                                                                                                                                                                + math.min(1, majorForce) * 0.30, -- Last part is here because the rotation center for the tokens is not the barycenter.
                                                                                                                                                            0)

                                                                                                                                                            local forceMarker = PlayBoard.getContent(color).forceMarker
                                                                                                                                                            if force > 0 then
                                                                                                                                                                forceMarker.setPositionSmooth(Combat.combatForcePositions[minorForce] + heightOffset, false, false)
                                                                                                                                                                forceMarker.setRotationSmooth(Vector(0, 180 + 90 * math.floor(majorForce / 2), 180 * math.min(1, majorForce)))

                                                                                                                                                                forces[color] = force
                                                                                                                                                            else
                                                                                                                                                                forceMarker.setPositionSmooth(Combat.noCombatForcePositions + heightOffset, false, false)
                                                                                                                                                                forceMarker.setRotationSmooth(Vector(0, 180, 0))
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    Helper.emitEvent("combatUpdate", forces)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getNumberOfDreadnoughtsInConflict(color)
                                                                                                                                                    return #Combat.getDreadnoughtsInConflict(color)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getDreadnoughtsInConflict(color)
                                                                                                                                                    local dreadnoughts = {}
                                                                                                                                                    for _, object in ipairs(Combat.combatCenterZone.getObjects()) do
                                                                                                                                                        if Types.isDreadnought(object, color) then
                                                                                                                                                            table.insert(dreadnoughts, object)
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                    return dreadnoughts
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getCurrentConflictName()
                                                                                                                                                    local deckOrCard = Helper.getDeckOrCard(Combat.conflictDiscardZone)
                                                                                                                                                    assert(deckOrCard)
                                                                                                                                                    if deckOrCard.type == "Deck" then
                                                                                                                                                        local objects = deckOrCard.getObjects()
                                                                                                                                                        return Helper.getID(objects[#objects])
                                                                                                                                                    else
                                                                                                                                                        return Helper.getID(deckOrCard)
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.isCurrentConflictBehindTheWall()
                                                                                                                                                    local conflictName = Combat.getCurrentConflictName()
                                                                                                                                                    return ConflictCard.isBehindTheWall(conflictName)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getCurrentConflictLevel()
                                                                                                                                                    return ConflictCard.getLevel(Combat.getCurrentConflictName())
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.gainVictoryPoint(color, name, count)

                                                                                                                                                    -- We memoize the tokens granted in fast succession to avoid returning the same twice or more.
                                                                                                                                                    if not Combat.grantedTokens then
                                                                                                                                                        Combat.grantedTokens = {}
                                                                                                                                                        Helper.onceTimeElapsed(0.25).doAfter(function ()
                                                                                                                                                            Combat.grantedTokens = nil
                                                                                                                                                        end)
                                                                                                                                                    end

                                                                                                                                                    local remaining = count or 1
                                                                                                                                                    for _, object in ipairs(Combat.rewardTokenZone.getObjects()) do
                                                                                                                                                        if Types.isVictoryPointToken(object) and Helper.getID(object) == name and not Combat.grantedTokens[object] then
                                                                                                                                                            Combat.grantedTokens[object] = true
                                                                                                                                                            PlayBoard.grantScoreToken(color, object)
                                                                                                                                                            remaining = remaining - 1
                                                                                                                                                            if remaining == 0 then
                                                                                                                                                                return true
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    return false
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.gainObjective(color, objective)
                                                                                                                                                    local continuation = Helper.createContinuation("Combat.gainObjective")
                                                                                                                                                    local position = PlayBoard.getObjectiveStackPosition(color, objective)
                                                                                                                                                    local tag = Helper.toPascalCase(objective, "ObjectiveToken")

                                                                                                                                                    for _, object in ipairs(Combat.rewardTokenZone.getObjects()) do
                                                                                                                                                        if object.hasTag(tag) then
                                                                                                                                                            object.setPositionSmooth(position + Vector(0, 1, 0))
                                                                                                                                                            Helper.onceMotionless(object).doAfter(continuation.run)
                                                                                                                                                            return continuation
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    local bag = Combat.objectiveTokenBags[objective]
                                                                                                                                                    assert(bag, objective)
                                                                                                                                                    bag.takeObject({
                                                                                                                                                        position = position + Vector(0, 1, 0),
                                                                                                                                                        rotation = Vector(0, 180, 0),
                                                                                                                                                        smooth = true,
                                                                                                                                                        callback_function = function (token)
                                                                                                                                                            Helper.onceMotionless(token).doAfter(continuation.run)
                                                                                                                                                        end
                                                                                                                                                    })

                                                                                                                                                    return continuation
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.showRanking(turnSequence, ranking)
                                                                                                                                                    local rankNames = {"first", "second", "third", "fourth"}
                                                                                                                                                    for _, color in ipairs(turnSequence) do
                                                                                                                                                        local rank = ranking[color]
                                                                                                                                                        local key = rankNames[rank.value] .. (rank.exAequo > 1 and "ExAequo" or "") .. "InCombat"
                                                                                                                                                        printToAll(I18N(key, {leader = PlayBoard.getLeaderName(color)}), color)
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getMakerHookPosition(color)
                                                                                                                                                    return Combat.makerHookPositions[color]
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.callSandworm(color, count)
                                                                                                                                                    local battlegroundPark = Combat.getBattlegroundPark()
                                                                                                                                                    if count < 0 then
                                                                                                                                                        local remaining = -count
                                                                                                                                                        for _, object in ipairs(Park.getObjects(battlegroundPark)) do
                                                                                                                                                            if Types.isSandworm(object, color) then
                                                                                                                                                                object.destruct()
                                                                                                                                                                remaining = remaining - 1
                                                                                                                                                                if remaining == 0 then
                                                                                                                                                                    break
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    else
                                                                                                                                                        for _ = 1, count do
                                                                                                                                                            local sandworm = Combat.protoSandworm.clone({
                                                                                                                                                            position = Park.getPosition(battlegroundPark) - Vector(0, 20, 0)})
                                                                                                                                                            sandworm.addTag("Sandworm")
                                                                                                                                                            sandworm.addTag(color)
                                                                                                                                                            sandworm.setRotation(Vector(0, math.random(360), 0))
                                                                                                                                                            sandworm.setScale(sandworm.getScale():copy():scale(1 / 1.5))
                                                                                                                                                            sandworm.setColorTint(color)
                                                                                                                                                            Park.putObject(sandworm, battlegroundPark)
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.hasSandworms(color)
                                                                                                                                                    local battlegroundPark = Combat.getBattlegroundPark()
                                                                                                                                                    for _, object in ipairs(Park.getObjects(battlegroundPark)) do
                                                                                                                                                        if Types.isSandworm(object, color) then
                                                                                                                                                            return true
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                    return false
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                -- bloodlines sardaukar commander skill - fierce
                                                                                                                                                function Combat.getSandwormColor(color)
                                                                                                                                                    local battlegroundPark = Combat.getBattlegroundPark()
                                                                                                                                                    local sandwormColors = {}

                                                                                                                                                    for _, object in ipairs(Park.getObjects(battlegroundPark)) do
                                                                                                                                                        if Types.isSandworm(object, color) then
                                                                                                                                                            local sandwormTags = object.getTags()

                                                                                                                                                            for _, tag in ipairs(sandwormTags) do
                                                                                                                                                                if tag == "Red" or tag == "Green" or tag == "Yellow" or tag == "Blue" then
                                                                                                                                                                    table.insert(sandwormColors, tag)
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    return sandwormColors
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                -- bloodlines sardaukar commanders
                                                                                                                                                function Combat.recruitSardaukarCommander(color, count)
                                                                                                                                                    local garrisonPark = Combat.dreadnoughtParks[color]
                                                                                                                                                    local sardaukarCommander = Combat.protoSardaukarCommander.clone({
                                                                                                                                                    position = Park.getPosition(garrisonPark)})
                                                                                                                                                    sardaukarCommander.setRotation(Vector(0, 180, 0))
                                                                                                                                                    sardaukarCommander.addTag("SardaukarCommander")
                                                                                                                                                    sardaukarCommander.addTag(color)
                                                                                                                                                    sardaukarCommander.setColorTint(color)
                                                                                                                                                    Park.putObject(sardaukarCommander, garrisonPark)
                                                                                                                                                end

                                                                                                                                                -- bloodlines sardaukar commanders
                                                                                                                                                function Combat.hasSardaukarCommander(color)
                                                                                                                                                    local battlegroundPark = Combat.getBattlegroundPark()
                                                                                                                                                    for _, object in ipairs(Park.getObjects(battlegroundPark)) do
                                                                                                                                                        if Types.isSardaukarCommander(object, color) then
                                                                                                                                                            return true
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                    return false
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                -- bloodlines sardaukar commander skill - canny
                                                                                                                                                function Combat.agentInLandsraadSpace(color)
                                                                                                                                                    for _, space in ipairs(MainBoard.getLandsraadSpaces()) do
                                                                                                                                                        if MainBoard.hasAgentInSpace(space, color) then
                                                                                                                                                            return true
                                                                                                                                                        end
                                                                                                                                                    end
                                                                                                                                                    return false
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function Combat.getCombatCenterZone()
                                                                                                                                                    return Combat.combatCenterZone
                                                                                                                                                end

                                                                                                                                                return Combat

                                                                                                                                            end)
                                                                                                                                            __bundle_register("SardaukarSkillMarket", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                                local Module = require("utils.Module")
                                                                                                                                                local Helper = require("utils.Helper")
                                                                                                                                                local AcquireCard = require("utils.AcquireCard")
                                                                                                                                                local Park = require("utils.Park")
                                                                                                                                                local I18N = require("utils.I18N")

                                                                                                                                                local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                                                                local MainBoard = Module.lazyRequire("MainBoard")
                                                                                                                                                local Commander = Module.lazyRequire("Commander")

                                                                                                                                                local SardaukarSkillMarket = {
                                                                                                                                                    acquireCards = {},
                                                                                                                                                }

                                                                                                                                                ---
                                                                                                                                                function SardaukarSkillMarket.onLoad(state)
                                                                                                                                                    Helper.append(SardaukarSkillMarket, Helper.resolveGUIDs(false, {
                                                                                                                                                        deck = 'fca82e',
                                                                                                                                                        deckZone = 'ae4b3a',
                                                                                                                                                        skillSlots = {
                                                                                                                                                            '57f7e0',
                                                                                                                                                            '48ab99',
                                                                                                                                                            '73db1d',
                                                                                                                                                            '7e3e07',
                                                                                                                                                        },
                                                                                                                                                    }))

                                                                                                                                                    if state.settings then
                                                                                                                                                        SardaukarSkillMarket._transientSetUp(state.settings)
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function SardaukarSkillMarket.setUp(settings)
                                                                                                                                                    SardaukarSkillMarket._transientSetUp(settings)
                                                                                                                                                    Helper.shuffleDeck(SardaukarSkillMarket.deck)
                                                                                                                                                    Helper.onceShuffled(SardaukarSkillMarket.deck).doAfter(function ()
                                                                                                                                                        for i, _ in ipairs(SardaukarSkillMarket.skillSlots) do
                                                                                                                                                            SardaukarSkillMarket._replenish(i)
                                                                                                                                                        end
                                                                                                                                                    end)
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function SardaukarSkillMarket._transientSetUp(settings)
                                                                                                                                                    SardaukarSkillMarket.acquireCards = {}

                                                                                                                                                    for i, zone in ipairs(SardaukarSkillMarket.skillSlots) do
                                                                                                                                                        local acquireCard = AcquireCard.new(zone, "SardaukarSkill", PlayBoard.withLeader(function (_, color)
                                                                                                                                                            local leader = PlayBoard.getLeader(color)
                                                                                                                                                            leader.pickSkill(color, i)
                                                                                                                                                        end))

                                                                                                                                                        acquireCard.groundHeight = acquireCard.groundHeight + 0.2
                                                                                                                                                        table.insert(SardaukarSkillMarket.acquireCards, acquireCard)
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function SardaukarSkillMarket.acquireSkill(indexInRow, color)
                                                                                                                                                    local acquireCard = SardaukarSkillMarket.acquireCards[indexInRow]
                                                                                                                                                    local objects = acquireCard.zone.getObjects()

                                                                                                                                                    if #objects > 0 then
                                                                                                                                                        local skill = objects[1]
                                                                                                                                                        printToAll(I18N("acquireSkill", {name = I18N(Helper.getID(skill))}), color)
                                                                                                                                                        PlayBoard.grantSkillTile(color, skill, false)
                                                                                                                                                        SardaukarSkillMarket._replenish(indexInRow)
                                                                                                                                                        return true
                                                                                                                                                    else
                                                                                                                                                        return false
                                                                                                                                                    end
                                                                                                                                                end

                                                                                                                                                ---
                                                                                                                                                function SardaukarSkillMarket._replenish(indexInRow)
                                                                                                                                                    local acquireCard = SardaukarSkillMarket.acquireCards[indexInRow]
                                                                                                                                                    local position = acquireCard.zone.getPosition()

                                                                                                                                                    Helper.moveCardFromZone(SardaukarSkillMarket.deckZone, position, Vector(0, 180, 0), true)
                                                                                                                                                end

                                                                                                                                                return SardaukarSkillMarket

                                                                                                                                            end)
                                                                                                                                            __bundle_register("ChoamContractMarket", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                                local Module = require("utils.Module")
                                                                                                                                                local Helper = require("utils.Helper")
                                                                                                                                                local AcquireCard = require("utils.AcquireCard")
                                                                                                                                                local Park = require("utils.Park")
                                                                                                                                                local I18N = require("utils.I18N")

                                                                                                                                                local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                                                                local MainBoard = Module.lazyRequire("MainBoard")
                                                                                                                                                local Commander = Module.lazyRequire("Commander")

                                                                                                                                                local ChoamContractMarket = {
                                                                                                                                                    contracts = {},
                                                                                                                                                    ixContracts = {},
                                                                                                                                                    acquireCards = {},
                                                                                                                                                    contractSlots = {},
                                                                                                                                                }

                                                                                                                                                ---
                                                                                                                                                function ChoamContractMarket.onLoad(state)
                                                                                                                                                    Helper.append(ChoamContractMarket, Helper.resolveGUIDs(false, {
                                                                                                                                                        contractBags = {
                                                                                                                                                            en = "099d8b",
                                                                                                                                                            fr = "fb05ac",
                                                                                                                                                        }}))

                                                                                                                                                        ChoamContractMarket.contracts = {
                                                                                                                                                            harvest3orMore = Helper.never(), -- MainBoard.isDesertSpace, -- x2
                                                                                                                                                            harvest4orMore = Helper.never(), -- MainBoard.isDesertSpace,
                                                                                                                                                            deliverSupplies = Helper.equal("deliverSupplies"),
                                                                                                                                                            highCouncilWithSolaris = Helper.equal("highCouncil"),
                                                                                                                                                            highCouncilWithInfluence = Helper.equal("highCouncil"),
                                                                                                                                                            acquireTheSpiceMustFlow = Helper.never(),
                                                                                                                                                            immediate = Helper.never(),
                                                                                                                                                            researchStation = Helper.equal("researchStation"), -- with just solaris
                                                                                                                                                            researchStationWithSpy = Helper.equal("researchStation"),
                                                                                                                                                            espionage = Helper.equal("espionage"), -- x2
                                                                                                                                                            heighlinerWithWater = Helper.equal("heighliner"),
                                                                                                                                                            heighlinerWithTroops = Helper.equal("heighliner"),
                                                                                                                                                            sardaukarWithCards = Helper.equal("sardaukar"),
                                                                                                                                                            sardaukarWithRecall = Helper.equal("sardaukar"),
                                                                                                                                                            spiceRefineryWithCards = Helper.equal("spiceRefinery"),
                                                                                                                                                            spiceRefineryWithWater = Helper.equal("spiceRefinery"),
                                                                                                                                                            arrakeenWithWater = Helper.equal("arrakeen"),
                                                                                                                                                            arrakeenWithSpy = Helper.equal("arrakeen"),
                                                                                                                                                        }

                                                                                                                                                        ChoamContractMarket.ixContracts = {
                                                                                                                                                            dreadnought = Helper.equal("dreadnought"),
                                                                                                                                                            techNegotiation = Helper.equal("techNegotiation"),
                                                                                                                                                            highCouncilWithTech = Helper.equal("highCouncil"),
                                                                                                                                                            interstellarShipping = Helper.equal("interstellarShipping"),
                                                                                                                                                            harvest3orMoreWithTech = Helper.never(), -- MainBoard.isDesertSpace,
                                                                                                                                                            harvest4orMoreWithTech = Helper.never(), -- MainBoard.isDesertSpace,
                                                                                                                                                            smuggling = Helper.equal("smuggling"),
                                                                                                                                                            heighlinerWithTech = Helper.equal("heighliner"),
                                                                                                                                                            espionageWithTech = Helper.equal("espionage"),
                                                                                                                                                            secretsWithTech = Helper.equal("secrets"),
                                                                                                                                                        }

                                                                                                                                                        ChoamContractMarket.enabled = false
                                                                                                                                                        if state.settings and state.settings.useContracts then
                                                                                                                                                            ChoamContractMarket._transientSetUp(state.settings)
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function ChoamContractMarket.setUp(settings)
                                                                                                                                                        if settings.useContracts then
                                                                                                                                                            ChoamContractMarket._transientSetUp(settings)

                                                                                                                                                            assert(ChoamContractMarket.contractBag, "No contract bag!")
                                                                                                                                                            Helper.shuffleDeck(ChoamContractMarket.contractBag)
                                                                                                                                                            Helper.onceShuffled(ChoamContractMarket.contractBag).doAfter(function ()

                                                                                                                                                                local ixContratCountForEachPlayer = {}
                                                                                                                                                                if settings.riseOfIx then
                                                                                                                                                                    for _, color in ipairs(PlayBoard.getActivePlayBoardColors(true)) do
                                                                                                                                                                        if not Commander.isCommander(color) then
                                                                                                                                                                            ixContratCountForEachPlayer[color] = 2
                                                                                                                                                                        end
                                                                                                                                                                    end
                                                                                                                                                                end

                                                                                                                                                                local trashHeight = 1
                                                                                                                                                                for _, object in ipairs(ChoamContractMarket.contractBag.getObjects()) do
                                                                                                                                                                    if Helper.isElementOf("IxContract", object.tags) then
                                                                                                                                                                        local taken = false
                                                                                                                                                                        for color, count in pairs(ixContratCountForEachPlayer) do
                                                                                                                                                                            if count > 0 then
                                                                                                                                                                                ixContratCountForEachPlayer[color] = count - 1
                                                                                                                                                                                local emptySlots = Park.findEmptySlots(PlayBoard.getRevealCardPark(color))
                                                                                                                                                                                ChoamContractMarket.contractBag.takeObject({
                                                                                                                                                                                    position = emptySlots[count],
                                                                                                                                                                                    rotation = Vector(0, 180, 0),
                                                                                                                                                                                    guid = object.guid,
                                                                                                                                                                                })
                                                                                                                                                                                taken = true
                                                                                                                                                                                break
                                                                                                                                                                            end
                                                                                                                                                                        end
                                                                                                                                                                        if not taken then
                                                                                                                                                                            ChoamContractMarket.contractBag.takeObject({
                                                                                                                                                                                position = getObjectFromGUID('ef8614').getPosition() + Vector(0, trashHeight * 0.5, 0),
                                                                                                                                                                                rotation = Vector(0, 180, 0),
                                                                                                                                                                                guid = object.guid,
                                                                                                                                                                            })
                                                                                                                                                                            trashHeight = trashHeight + 1
                                                                                                                                                                        end
                                                                                                                                                                    end
                                                                                                                                                                end

                                                                                                                                                                for i, _ in ipairs(ChoamContractMarket.contractSlots) do
                                                                                                                                                                    ChoamContractMarket._replenish(i)
                                                                                                                                                                end
                                                                                                                                                            end)
                                                                                                                                                        else
                                                                                                                                                            ChoamContractMarket._tearDown()
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function ChoamContractMarket._transientSetUp(settings)
                                                                                                                                                        ChoamContractMarket.enabled = true

                                                                                                                                                        local barycenter = Vector(0, 0, 0)
                                                                                                                                                        for language, bag in pairs(ChoamContractMarket.contractBags) do
                                                                                                                                                            barycenter = barycenter + bag.getPosition()
                                                                                                                                                            if language == settings.language then
                                                                                                                                                                ChoamContractMarket.contractBag = bag
                                                                                                                                                            else
                                                                                                                                                                bag.destruct()
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                        barycenter = barycenter * (1.0 / #Helper.getKeys(ChoamContractMarket.contractBags))
                                                                                                                                                        ChoamContractMarket.contractBag.setPosition(barycenter)
                                                                                                                                                        ChoamContractMarket.contractBags = nil

                                                                                                                                                        ChoamContractMarket._processSnapPoints(settings)

                                                                                                                                                        for i, zone in ipairs(ChoamContractMarket.contractSlots) do
                                                                                                                                                            local acquireCard = AcquireCard.new(zone, "Contract", PlayBoard.withLeader(function (_, color)
                                                                                                                                                                local leader = PlayBoard.getLeader(color)
                                                                                                                                                                leader.pickContract(color, i)
                                                                                                                                                            end))
                                                                                                                                                            acquireCard.groundHeight = acquireCard.groundHeight + 0.1
                                                                                                                                                            acquireCard.cardHeight = 0.2
                                                                                                                                                            table.insert(ChoamContractMarket.acquireCards, acquireCard)
                                                                                                                                                        end

                                                                                                                                                        Helper.registerEventListener("agentSent", function (color, spaceName)
                                                                                                                                                            local parentSpaceName = MainBoard.findParentSpaceName(spaceName)
                                                                                                                                                            local contracts = PlayBoard.getOpenContracts(color)
                                                                                                                                                            for i, contract in ipairs(contracts) do
                                                                                                                                                                local contractName = Helper.getID(contract)
                                                                                                                                                                local contractLocator = ChoamContractMarket.contracts[contractName] or ChoamContractMarket.ixContracts[contractName]
                                                                                                                                                                if contractLocator and contractLocator(parentSpaceName) then
                                                                                                                                                                    broadcastToAll(I18N("fulfilledContract", {contract = I18N(contractName)}), color)
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function ChoamContractMarket._tearDown()
                                                                                                                                                        for _, bag in pairs(ChoamContractMarket.contractBags) do
                                                                                                                                                            bag.destruct()
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function ChoamContractMarket.isEnabled()
                                                                                                                                                        return ChoamContractMarket.enabled
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function ChoamContractMarket._processSnapPoints(settings)
                                                                                                                                                        ChoamContractMarket.contractSlots = {}

                                                                                                                                                        MainBoard.collectSnapPointsOnAllBoards(settings, {

                                                                                                                                                            contract = function (name, position)
                                                                                                                                                                local zone = spawnObject({
                                                                                                                                                                    type = 'ScriptingTrigger',
                                                                                                                                                                    position = position,
                                                                                                                                                                    scale = {2.2, 1, 1.4},
                                                                                                                                                                })
                                                                                                                                                                Helper.markAsTransient(zone)
                                                                                                                                                                local indexInRow = tonumber(name:sub(5))
                                                                                                                                                                if indexInRow then
                                                                                                                                                                    ChoamContractMarket.contractSlots[indexInRow] = zone
                                                                                                                                                                end
                                                                                                                                                            end,
                                                                                                                                                        })
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function ChoamContractMarket.acquireContract(indexInRow, color)
                                                                                                                                                        local acquireCard = ChoamContractMarket.acquireCards[indexInRow]
                                                                                                                                                        local objects = acquireCard.zone.getObjects()
                                                                                                                                                        if #objects > 0 then
                                                                                                                                                            local contract = objects[1]
                                                                                                                                                            printToAll(I18N("acquireContract", {name = I18N(Helper.getID(contract))}), color)
                                                                                                                                                            PlayBoard.grantContractTile(color, contract, false)
                                                                                                                                                            ChoamContractMarket._replenish(indexInRow)
                                                                                                                                                            return true
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function ChoamContractMarket._replenish(indexInRow)
                                                                                                                                                        local acquireCard = ChoamContractMarket.acquireCards[indexInRow]
                                                                                                                                                        local position = acquireCard.zone.getPosition()
                                                                                                                                                        if ChoamContractMarket.contractBag.getQuantity() > 0 then
                                                                                                                                                            ChoamContractMarket.contractBag.takeObject({
                                                                                                                                                                position = position,
                                                                                                                                                                rotation = Vector(0, 180, 0),
                                                                                                                                                                smooth = true,
                                                                                                                                                            })
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function ChoamContractMarket.takeAnySardaukarContract(position)

                                                                                                                                                        for _, object in ipairs(ChoamContractMarket.contractBag.getObjects()) do
                                                                                                                                                            assert(object.guid)
                                                                                                                                                            if Helper.isElementOf("SardaukarContract", object.tags) then
                                                                                                                                                                ChoamContractMarket.contractBag.takeObject({
                                                                                                                                                                    position = position,
                                                                                                                                                                    rotation = Vector(0, 180, 0),
                                                                                                                                                                    guid = object.guid,
                                                                                                                                                                })
                                                                                                                                                                return
                                                                                                                                                            end
                                                                                                                                                        end

                                                                                                                                                        for indexInRow, acquireCard in ipairs(ChoamContractMarket.acquireCards) do
                                                                                                                                                            for _, object in ipairs(acquireCard.zone.getObjects()) do
                                                                                                                                                                if object.hasTag("Contract") and object.hasTag("SardaukarContract") then
                                                                                                                                                                    object.setPosition(position)
                                                                                                                                                                    ChoamContractMarket._replenish(indexInRow)
                                                                                                                                                                    return
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    return ChoamContractMarket

                                                                                                                                                end)
                                                                                                                                                __bundle_register("Board", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                                    local Module = require("utils.Module")
                                                                                                                                                    local Helper = require("utils.Helper")
                                                                                                                                                    local I18N = require("utils.I18N")

                                                                                                                                                    local Locale = Module.lazyRequire("Locale")

                                                                                                                                                    local Board = {
                                                                                                                                                        allInitialBoards = {
                                                                                                                                                            mainBoard = {
                                                                                                                                                                mainBoard4P = "483a1a",
                                                                                                                                                                mainBoard6P = "21cc52",
                                                                                                                                                            },
                                                                                                                                                            emperorBoard = "4cb9ba",
                                                                                                                                                            fremenBoard = "01c575",
                                                                                                                                                            shippingBoard = "0b9dfe",
                                                                                                                                                            -- bloodlines disable
                                                                                                                                                            -- ixBoard = "d75455",
                                                                                                                                                            -- bloodlines add bl_TechBoard
                                                                                                                                                            bl_TechBoard = "c6985a",
                                                                                                                                                            tleilaxBoard = "d5c2db",
                                                                                                                                                        },
                                                                                                                                                        --[[
        boardLocations[<baseBoardName.locale>] = {
            rootBaseBoardName = <mainBoard for mainBoard4P/6P, otherwise same as baseBoardName>,
            baseBoardName = <idem>,
            object = <the actual object if it exists>,
            active = <is the object alive on the primary table?>,
        }
    ]]
                                                                                                                                                    boardLocations = {}}

                                                                                                                                                    ---
                                                                                                                                                    function Board.rebuildPreloadAreas()
                                                                                                                                                        Locale.onLoad()

                                                                                                                                                        local prebuildZone = getObjectFromGUID("23f2b5")
                                                                                                                                                        local secondaryTable = getObjectFromGUID("662ced")

                                                                                                                                                        for _, object in ipairs(prebuildZone.getObjects()) do
                                                                                                                                                            -- Preserve the secondary table.
                                                                                                                                                            if object ~= secondaryTable then
                                                                                                                                                                object.destruct()
                                                                                                                                                            end
                                                                                                                                                        end

                                                                                                                                                        for boardName, content in pairs(Board.allInitialBoards) do
                                                                                                                                                            if type(content) == "table" then
                                                                                                                                                                local board = nil
                                                                                                                                                                for _, guid in pairs(content) do
                                                                                                                                                                    board = board or getObjectFromGUID(guid)
                                                                                                                                                                end
                                                                                                                                                                assert(board, boardName)
                                                                                                                                                                local height = 0
                                                                                                                                                                for stateBoardName, _ in pairs(content) do
                                                                                                                                                                    height = height + Board._cloneBoard(stateBoardName, board, height)
                                                                                                                                                                end
                                                                                                                                                            else
                                                                                                                                                                local board = getObjectFromGUID(content)
                                                                                                                                                                assert(board, boardName)
                                                                                                                                                                Board._cloneBoard(boardName, board, 0)
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Board._cloneBoard(baseBoardName, board, height)
                                                                                                                                                        local boardName = Helper.getID(board)
                                                                                                                                                        assert(boardName and boardName:len() > 0, "Unidentified board: " .. board.getGUID())

                                                                                                                                                        local baseName = Board._getBaseName(boardName)
                                                                                                                                                        assert(baseName, "Malformed id: " .. tostring(boardName))
                                                                                                                                                        local namedIds = {
                                                                                                                                                        [baseName] = board.getStateId()}
                                                                                                                                                        local states = board.getStates()
                                                                                                                                                        if states then
                                                                                                                                                            for _, state in ipairs(states) do
                                                                                                                                                                namedIds[Board._getBaseName(Helper.getID(state))] = state.id
                                                                                                                                                            end
                                                                                                                                                        end

                                                                                                                                                        local allSupports = {
                                                                                                                                                            fr = require("fr.Board"),
                                                                                                                                                            en = require("en.Board"),
                                                                                                                                                        }

                                                                                                                                                        local count = 0
                                                                                                                                                        for locale, boardSet in pairs(allSupports) do
                                                                                                                                                            local expectedBoardName = Board._toBoardName(baseBoardName, locale)
                                                                                                                                                            if boardName ~= expectedBoardName then
                                                                                                                                                                local boardImage = boardSet[baseBoardName]
                                                                                                                                                                if boardImage then
                                                                                                                                                                    local clonedBoard = board.clone()
                                                                                                                                                                    local finalHeight = (height + count) * 3
                                                                                                                                                                    Helper.onceTimeElapsed(0.5).doAfter(function ()
                                                                                                                                                                        local continuation = Helper.createContinuation("setState")

                                                                                                                                                                        local expectedStateId = namedIds[baseBoardName]
                                                                                                                                                                        if board.getStateId() ~= expectedStateId then
                                                                                                                                                                            clonedBoard = clonedBoard.setState(expectedStateId)
                                                                                                                                                                            Helper.onceTimeElapsed(0.5).doAfter(function ()
                                                                                                                                                                                continuation.run(clonedBoard)
                                                                                                                                                                            end)
                                                                                                                                                                        else
                                                                                                                                                                            continuation.run(clonedBoard)
                                                                                                                                                                        end

                                                                                                                                                                        continuation.doAfter(function (finalClonedBoard)
                                                                                                                                                                            local parameters = finalClonedBoard.getCustomObject()
                                                                                                                                                                            parameters.image = boardSet[baseBoardName]
                                                                                                                                                                            finalClonedBoard.setCustomObject(parameters)
                                                                                                                                                                            finalClonedBoard = finalClonedBoard.reload()
                                                                                                                                                                            Helper.onceTimeElapsed(0.5).doAfter(function ()
                                                                                                                                                                                finalClonedBoard.setLock(true)
                                                                                                                                                                                finalClonedBoard.setPosition(board.getPosition() + Vector(0, finalHeight, 68))
                                                                                                                                                                                finalClonedBoard.setGMNotes(expectedBoardName)
                                                                                                                                                                            end)
                                                                                                                                                                        end)
                                                                                                                                                                    end)
                                                                                                                                                                    count = count + 1
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                        return count
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Board._getBaseName(id)
                                                                                                                                                        if id then
                                                                                                                                                            local tokens = Helper.splitString(id, '.')
                                                                                                                                                            if #tokens == 2 then
                                                                                                                                                                return tokens[1]
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                        return nil
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Board.onLoad()
                                                                                                                                                        local prebuildZone = getObjectFromGUID("23f2b5")

                                                                                                                                                        for _, locale in ipairs(Locale.getAllLocales()) do
                                                                                                                                                            for baseBoardName, content in pairs(Board.allInitialBoards) do
                                                                                                                                                                if type(content) == "table" then
                                                                                                                                                                    for subBaseBoardName, _ in pairs(content) do
                                                                                                                                                                        Board.boardLocations[Board._toBoardName(subBaseBoardName, locale)] = {
                                                                                                                                                                            rootBaseBoardName = baseBoardName,
                                                                                                                                                                            baseBoardName = subBaseBoardName,
                                                                                                                                                                        }
                                                                                                                                                                    end
                                                                                                                                                                else
                                                                                                                                                                    Board.boardLocations[Board._toBoardName(baseBoardName, locale)] = {
                                                                                                                                                                        rootBaseBoardName = baseBoardName,
                                                                                                                                                                        baseBoardName = baseBoardName,
                                                                                                                                                                    }
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end

                                                                                                                                                        for _, object in ipairs(getAllObjects()) do
                                                                                                                                                            local id = Helper.getID(object)
                                                                                                                                                            local location = Board.boardLocations[id]
                                                                                                                                                            if location then
                                                                                                                                                                location.object = object
                                                                                                                                                                location.active = true
                                                                                                                                                            end
                                                                                                                                                        end

                                                                                                                                                        for _, object in ipairs(prebuildZone.getObjects()) do
                                                                                                                                                            local id = Helper.getID(object)
                                                                                                                                                            local location = Board.boardLocations[id]
                                                                                                                                                            if location then
                                                                                                                                                                location.active = false
                                                                                                                                                                location.object.setInvisibleTo(Player.getColors())
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Board.setUp(setting)
                                                                                                                                                        -- NOP
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Board.selectBoard(baseBoardName, language)
                                                                                                                                                        local boardName = Board._toBoardName(baseBoardName, language)
                                                                                                                                                        local location = Board.boardLocations[boardName]
                                                                                                                                                        assert(location, "No location for board " .. boardName)
                                                                                                                                                        assert(location.object, "No instantiated location for board " .. boardName)

                                                                                                                                                        if not location.active then
                                                                                                                                                            for _, otherLocation in pairs(Board.boardLocations) do
                                                                                                                                                                if otherLocation.rootBaseBoardName == location.rootBaseBoardName and otherLocation.active then
                                                                                                                                                                    local otherPosition = otherLocation.object.getPosition()

                                                                                                                                                                    -- TODO A simple move (swap) would be enough.
                                                                                                                                                                    otherLocation.object.destruct()
                                                                                                                                                                    otherLocation.object = nil
                                                                                                                                                                    otherLocation.active = false

                                                                                                                                                                    location.object.setPosition(otherPosition)
                                                                                                                                                                    location.object.setInvisibleTo({})
                                                                                                                                                                    location.active = true
                                                                                                                                                                    Helper.onceMotionless(location.object).doAfter(function ()
                                                                                                                                                                        Helper.noPhysics(location.object)
                                                                                                                                                                    end)

                                                                                                                                                                    return location.object
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                            error("No active location for " .. baseBoardName)
                                                                                                                                                        else
                                                                                                                                                            return location.object
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Board.destructBoard(baseBoardName)
                                                                                                                                                        for _, location in pairs(Board.boardLocations) do
                                                                                                                                                            if location.baseBoardName == baseBoardName and location.object then
                                                                                                                                                                location.object.destruct()
                                                                                                                                                                location.object = nil
                                                                                                                                                                location.active = false
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Board.destructInactiveBoards()
                                                                                                                                                        for _, location in pairs(Board.boardLocations) do
                                                                                                                                                            if not location.active and location.object then
                                                                                                                                                                location.object.destruct()
                                                                                                                                                                location.object = nil
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Board.getBoard(baseBoardName, locale)
                                                                                                                                                        local boardName = Board._toBoardName(baseBoardName, locale or I18N.getLocale())
                                                                                                                                                        local location = Board.boardLocations[boardName]
                                                                                                                                                        if location then
                                                                                                                                                            return location.object
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Board._toBoardName(baseBoardName, language)
                                                                                                                                                        return baseBoardName .. '.' .. language
                                                                                                                                                    end

                                                                                                                                                    return Board

                                                                                                                                                end)
                                                                                                                                                __bundle_register("en.Board", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                                    return {
                                                                                                                                                        mainBoard4P = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141295501/636AF2828366DFC16AF32AD3247E7855667D200F/",
                                                                                                                                                        mainBoard6P = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141290585/1B85EC01159116A041CFC75D69649FE573EFDE31/",
                                                                                                                                                        emperorBoard = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141297531/EB47225DD98FFB7E20E455BE5B3975FEB257B4A6/",
                                                                                                                                                        fremenBoard = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141298420/397889F6C61BA75AF0B7D8B260EDF2B03D44C383/",
                                                                                                                                                    }

                                                                                                                                                end)
                                                                                                                                                __bundle_register("fr.Board", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                                    return {
                                                                                                                                                        mainBoard4P = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141293117/8DBDCE4796B52A64AE78D5F95A1CD0B87A87F66D/",
                                                                                                                                                        mainBoard6P = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141295144/5674BB27C821E484B2B85671604BBB1263D024A3/",
                                                                                                                                                        emperorBoard = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141292629/0332B70F885B0B2E1A0508231A69418372732AF1/",
                                                                                                                                                        fremenBoard = "https://steamusercontent-a.akamaihd.net/ugc/2502404390141290078/7C4B6E1CAA172C7C83DEB42CA5AE9FE5817F2A80/",
                                                                                                                                                    }

                                                                                                                                                end)
                                                                                                                                                __bundle_register("Action", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                                    local Module = require("utils.Module")
                                                                                                                                                    local Helper = require("utils.Helper")
                                                                                                                                                    local Park = require("utils.Park")
                                                                                                                                                    local I18N = require("utils.I18N")

                                                                                                                                                    local Types = Module.lazyRequire("Types")
                                                                                                                                                    local PlayBoard = Module.lazyRequire("PlayBoard")
                                                                                                                                                    local InfluenceTrack = Module.lazyRequire("InfluenceTrack")
                                                                                                                                                    local Combat = Module.lazyRequire("Combat")
                                                                                                                                                    local TleilaxuResearch = Module.lazyRequire("TleilaxuResearch")
                                                                                                                                                    local Intrigue = Module.lazyRequire("Intrigue")
                                                                                                                                                    local Reserve = Module.lazyRequire("Reserve")
                                                                                                                                                    local MainBoard = Module.lazyRequire("MainBoard")
                                                                                                                                                    local TechMarket = Module.lazyRequire("TechMarket")
                                                                                                                                                    local ImperiumRow = Module.lazyRequire("ImperiumRow")
                                                                                                                                                    local ShippingTrack = Module.lazyRequire("ShippingTrack")
                                                                                                                                                    local TleilaxuRow = Module.lazyRequire("TleilaxuRow")
                                                                                                                                                    local ScoreBoard = Module.lazyRequire("ScoreBoard")
                                                                                                                                                    local ThroneRow = Module.lazyRequire("ThroneRow")
                                                                                                                                                    local ChoamContractMarket = Module.lazyRequire("ChoamContractMarket")
                                                                                                                                                    local SardaukarSkillMarket = Module.lazyRequire("SardaukarSkillMarket")
                                                                                                                                                    local TurnControl = Module.lazyRequire("TurnControl")

                                                                                                                                                    local Action = Helper.createClass(nil, {
                                                                                                                                                    context = {}})

                                                                                                                                                    ---
                                                                                                                                                    function Action.onLoad(state)

                                                                                                                                                        Helper.registerEventListener("phaseStart", function (phase, _)
                                                                                                                                                            Action.context = {
                                                                                                                                                                phase = phase
                                                                                                                                                            }
                                                                                                                                                        end)

                                                                                                                                                        Helper.registerEventListener("playerTurn", function (phase, color)
                                                                                                                                                            Action.context = {
                                                                                                                                                                phase = phase,
                                                                                                                                                                color = color
                                                                                                                                                            }
                                                                                                                                                            Action.log(I18N("playerTurn", {leader = PlayBoard.getLeaderName(color)}), color)
                                                                                                                                                        end)

                                                                                                                                                        if state.settings then
                                                                                                                                                            assert(state.Action)
                                                                                                                                                            Action.context = state.Action.context
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.setUp()
                                                                                                                                                        -- NOP
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.onSave(state)
                                                                                                                                                        state.Action = {
                                                                                                                                                            context = Action.context
                                                                                                                                                        }
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.checkContext(attributes)
                                                                                                                                                        for name, expectedValue in pairs(attributes) do
                                                                                                                                                            local value = Action.context and Action.context[name] or nil
                                                                                                                                                            local valid
                                                                                                                                                            if type(expectedValue) == "function" then
                                                                                                                                                                valid = expectedValue(value)
                                                                                                                                                            else
                                                                                                                                                                valid = value == expectedValue
                                                                                                                                                            end
                                                                                                                                                            if not valid then
                                                                                                                                                                return false
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                        return true
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.doSetUp(color, settings)
                                                                                                                                                        -- NOP
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.instruct(phase, isActivePlayer)
                                                                                                                                                        local availablePhaseInstructions = {
                                                                                                                                                            leaderSelection = true,
                                                                                                                                                            playerTurns = true,
                                                                                                                                                            combat = true,
                                                                                                                                                            combatEnd = true,
                                                                                                                                                            endgame = true,
                                                                                                                                                        }

                                                                                                                                                        if availablePhaseInstructions[phase] then
                                                                                                                                                            if isActivePlayer then
                                                                                                                                                                return I18N(phase .. "ActiveInstruction")
                                                                                                                                                            else
                                                                                                                                                                return I18N(phase .. "InactiveInstruction")
                                                                                                                                                            end
                                                                                                                                                        else
                                                                                                                                                            return nil
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    function Action.prepare(color, settings)
                                                                                                                                                        Action.resources(color, "water", 1)
                                                                                                                                                        if settings.epicMode then
                                                                                                                                                            Action.drawIntrigues(color, 1)
                                                                                                                                                        end
                                                                                                                                                        Action.troops(color, "supply", "garrison", settings.epicMode and 5 or 3)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.tearDown()
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.setContext(key, value)
                                                                                                                                                        if key == "agentSent" and Action.troopTransferCoalescentQueue then
                                                                                                                                                            Action.flushTroopTransfer()
                                                                                                                                                        end
                                                                                                                                                        Action.context[key] = value
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.flushTroopTransfer()
                                                                                                                                                        if Action.troopTransferCoalescentQueue then
                                                                                                                                                            Action.troopTransferCoalescentQueue.flush()
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.log(message, color, isSecret)
                                                                                                                                                        -- Order matters here.
                                                                                                                                                        local logContextPrinters = {
                                                                                                                                                            {name = "schemeTriggered", print = function (_)
                                                                                                                                                                return I18N("triggeringScheme")
                                                                                                                                                            end},
                                                                                                                                                            {name = "agentSent", print = function (value)
                                                                                                                                                                local cards = ""
                                                                                                                                                                for i, card in pairs(value.cards or {}) do
                                                                                                                                                                    if i > 1 then
                                                                                                                                                                        cards = cards .. ", "
                                                                                                                                                                    end
                                                                                                                                                                    cards = cards .. I18N(card)
                                                                                                                                                                end
                                                                                                                                                                return I18N("sendingAgent", {space = I18N(value.space), cards = cards})
                                                                                                                                                            end},
                                                                                                                                                        }
                                                                                                                                                        local prefix = ""
                                                                                                                                                        for _, namedPrinter in ipairs(logContextPrinters) do
                                                                                                                                                            local value = Action.context[namedPrinter.name]
                                                                                                                                                            if value then
                                                                                                                                                                local turnColor = TurnControl.getCurrentPlayer() or "White"
                                                                                                                                                                if Action.lastContext ~= turnColor .. namedPrinter.name then
                                                                                                                                                                    Action.lastContext = turnColor .. namedPrinter.name
                                                                                                                                                                    printToAll(namedPrinter.print(value), turnColor)
                                                                                                                                                                end
                                                                                                                                                                prefix = " ?????? "
                                                                                                                                                                break
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                        if message then
                                                                                                                                                            if isSecret then
                                                                                                                                                                local player = Helper.findPlayerByColor(color)
                                                                                                                                                                if player and player.seated then
                                                                                                                                                                    printToColor(prefix .. message, color, "Grey")
                                                                                                                                                                end
                                                                                                                                                            else
                                                                                                                                                                printToAll(prefix .. message, color)
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.secretLog(message, color)
                                                                                                                                                        Action.log(message, color, true)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.unsetContext(key)
                                                                                                                                                        Action.context[key] = nil
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.sendAgent(color, spaceName, recallSpy)
                                                                                                                                                        Action.context.space = spaceName
                                                                                                                                                        return MainBoard.sendAgent(color, spaceName, recallSpy)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.sendSpy(color, observationPostName)
                                                                                                                                                        if observationPostName then
                                                                                                                                                            Action.context.observationPost = observationPostName
                                                                                                                                                            return MainBoard.sendSpy(color, observationPostName)
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.recruitSwordmaster(color)
                                                                                                                                                        if PlayBoard.recruitSwordmaster(color) then
                                                                                                                                                            Action.log(I18N("recruitSwordmaster"), color)
                                                                                                                                                            return true
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.takeHighCouncilSeat(color)
                                                                                                                                                        if PlayBoard.takeHighCouncilSeat(color) then
                                                                                                                                                            Action.log(I18N("takeHighCouncilSeat"), color)
                                                                                                                                                            return true
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.takeMakerHook(color)
                                                                                                                                                        if PlayBoard.takeMakerHook(color) then
                                                                                                                                                            Action.log(I18N("takeMakerHook"), color)
                                                                                                                                                            return true
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.callSandworm(color, count)
                                                                                                                                                        if Combat.callSandworm(color, count) then
                                                                                                                                                            return true
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---@param color PlayerColor
                                                                                                                                                    ---@param resourceName ResourceName
                                                                                                                                                    ---@param amount integer
                                                                                                                                                    ---@return boolean
                                                                                                                                                    function Action.resources(color, resourceName, amount)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsResourceName(resourceName)
                                                                                                                                                        Types.assertIsInteger(amount)

                                                                                                                                                        local resource = PlayBoard.getResource(color, resourceName)
                                                                                                                                                        if resource:get() >= -amount then
                                                                                                                                                            if amount ~= 0 then
                                                                                                                                                                resource:change(amount)
                                                                                                                                                                Action.log(I18N(amount > 0 and "credit" or "debit", {
                                                                                                                                                                    what = I18N.agree(math.abs(amount), resourceName),
                                                                                                                                                                    amount = math.abs(amount),
                                                                                                                                                                }), color)
                                                                                                                                                            end
                                                                                                                                                            return true
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---@param color PlayerColor
                                                                                                                                                    ---@param resourceName ResourceName
                                                                                                                                                    ---@param amount integer
                                                                                                                                                    ---@return integer
                                                                                                                                                    function Action.bargain(color, resourceName, amount)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsResourceName(resourceName)
                                                                                                                                                        Types.assertIsInteger(amount)

                                                                                                                                                        return amount
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.drawImperiumCards(color, amount, forced)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        local playBoard = PlayBoard.getPlayBoard(color)
                                                                                                                                                        local continuation
                                                                                                                                                        if forced then
                                                                                                                                                            continuation = playBoard:drawCards(amount)
                                                                                                                                                        else
                                                                                                                                                            continuation = playBoard:tryToDrawCards(amount)
                                                                                                                                                        end
                                                                                                                                                        continuation.doAfter(function (dealCardCount)
                                                                                                                                                            if dealCardCount > 0 then
                                                                                                                                                                Action.log(I18N("drawObjects", {amount = dealCardCount, object = I18N.agree(dealCardCount, "imperiumCard")}), color)
                                                                                                                                                            end
                                                                                                                                                        end)
                                                                                                                                                        return continuation
                                                                                                                                                    end

                                                                                                                                                    ---@param color PlayerColor
                                                                                                                                                    ---@param faction Faction
                                                                                                                                                    ---@param amount integer
                                                                                                                                                    ---@return Continuation
                                                                                                                                                    function Action.influence(color, faction, amount)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsInteger(amount)
                                                                                                                                                        local continuation = Helper.createContinuation("Action.influence")
                                                                                                                                                        if faction then
                                                                                                                                                            InfluenceTrack.change(color, faction, amount).doAfter(function (realAmount)
                                                                                                                                                                Action.log(I18N(amount > 0 and "gainInfluence" or "loseInfluence", {
                                                                                                                                                                    withFaction = I18N(Helper.toCamelCase("with", faction)),
                                                                                                                                                                    amount = math.abs(amount),
                                                                                                                                                                }), color)
                                                                                                                                                                continuation.run(realAmount)
                                                                                                                                                            end)
                                                                                                                                                        else
                                                                                                                                                            continuation.run(0)
                                                                                                                                                        end
                                                                                                                                                        return continuation
                                                                                                                                                    end

                                                                                                                                                    ---@param color PlayerColor
                                                                                                                                                    ---@param from TroopLocation
                                                                                                                                                    ---@param to TroopLocation
                                                                                                                                                    ---@param baseCount integer
                                                                                                                                                    ---@return integer
                                                                                                                                                    function Action.troops(color, from, to, baseCount)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsTroopLocation(from)
                                                                                                                                                        Types.assertIsTroopLocation(to)
                                                                                                                                                        Types.assertIsInteger(baseCount)
                                                                                                                                                        local count = Park.transfert(baseCount, Action.getTroopPark(color, from), Action.getTroopPark(color, to))

                                                                                                                                                        if not Action.troopTransferCoalescentQueue then

                                                                                                                                                            local function coalesce(t1, t2)
                                                                                                                                                                if t1.color == t2.color then
                                                                                                                                                                    local t
                                                                                                                                                                    if t1.from == t2.from and t1.to == t2.to then
                                                                                                                                                                        t1.count = t1.count + t2.count
                                                                                                                                                                        t = t1
                                                                                                                                                                    elseif t1.from == t2.to and t1.to == t2.from then
                                                                                                                                                                        t1.count = t1.count - t2.count
                                                                                                                                                                        t = t1
                                                                                                                                                                    end
                                                                                                                                                                    if t then
                                                                                                                                                                        if t1.count < 0 then
                                                                                                                                                                            t1.count = -t1.count
                                                                                                                                                                            local tmp = t1.to
                                                                                                                                                                            t1.to = t1.from
                                                                                                                                                                            t1.from = tmp
                                                                                                                                                                        end
                                                                                                                                                                        return t
                                                                                                                                                                    end
                                                                                                                                                                end
                                                                                                                                                                return nil
                                                                                                                                                            end

                                                                                                                                                            local function handle(t)
                                                                                                                                                                if t.count ~= 0 then
                                                                                                                                                                    Action.log(I18N("transfer", {
                                                                                                                                                                        count = t.count,
                                                                                                                                                                        what = I18N.agree(t.count, "troop"),
                                                                                                                                                                        from = I18N(t.from .. "Park"),
                                                                                                                                                                        to = I18N(t.to .. "Park"),
                                                                                                                                                                    }), t.color)
                                                                                                                                                                end
                                                                                                                                                            end

                                                                                                                                                            Action.troopTransferCoalescentQueue = Helper.createCoalescentQueue("troop", 1, coalesce, handle)
                                                                                                                                                        end

                                                                                                                                                        Action.troopTransferCoalescentQueue.submit({
                                                                                                                                                            color = color,
                                                                                                                                                            count = count,
                                                                                                                                                            from = from,
                                                                                                                                                            to = to,
                                                                                                                                                        })

                                                                                                                                                        return count
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.getTroopPark(color, parkName)
                                                                                                                                                        if parkName == "supply" then
                                                                                                                                                            return PlayBoard.getSupplyPark(color)
                                                                                                                                                        elseif parkName == "garrison" then
                                                                                                                                                            return Combat.getGarrisonPark(color)
                                                                                                                                                        elseif parkName == "combat" then
                                                                                                                                                            return Combat.getBattlegroundPark()
                                                                                                                                                            -- bloodlines disable
                                                                                                                                                            -- elseif parkName == "negotiation" then
                                                                                                                                                            --     return TechMarket.getNegotiationPark(color)
                                                                                                                                                        elseif parkName == "tanks" then
                                                                                                                                                            return TleilaxuResearch.getTankPark(color)
                                                                                                                                                        else
                                                                                                                                                            error("Unknow park name: " .. tostring(parkName))
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.reserveImperiumCard(color, indexInRow)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsInRange(1, 5, indexInRow)
                                                                                                                                                        return ImperiumRow.reserveImperiumCard(indexInRow, color)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.acquireReservedImperiumCard(color)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        -- Do no return false by default, since an intrigue in Uprising allows any player to do the same thing as Helena Richese.
                                                                                                                                                        return ImperiumRow.acquireReservedImperiumCard(color)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.acquireImperiumCard(color, indexInRow)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsInRange(1, 5, indexInRow)
                                                                                                                                                        return ImperiumRow.acquireImperiumCard(indexInRow, color)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.acquireFoldspace(color)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        return Reserve.acquireFoldspace(color)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.acquirePrepareTheWay(color, toItsHand)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        return Reserve.acquirePrepareTheWay(color, toItsHand)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.acquireTheSpiceMustFlow(color)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        return Reserve.acquireTheSpiceMustFlow(color)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.acquireThroneCard(color, indexInRow)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        return ThroneRow.acquireThroneCard(color, indexInRow)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.advanceFreighter(color, positiveAmount)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsPositiveInteger(positiveAmount)
                                                                                                                                                        for _ = 1, positiveAmount do
                                                                                                                                                            if not ShippingTrack.freighterUp(color) then
                                                                                                                                                                return false
                                                                                                                                                            else
                                                                                                                                                                Action.log(I18N("advanceFreighter"), color)
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                        return true
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.recallFreighter(color)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        if ShippingTrack.freighterReset(color) then
                                                                                                                                                            Action.log(I18N("recallFreighter"), color)
                                                                                                                                                            return true
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.shipments(color, amount)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        return false
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.dreadnought(color, from, to, amount)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsDreadnoughtLocation(from)
                                                                                                                                                        Types.assertIsDreadnoughtLocation(to)
                                                                                                                                                        Types.assertIsInteger(amount)

                                                                                                                                                        local count = Park.transfert(amount, Action.getDreadnoughtPark(color, from), Action.getDreadnoughtPark(color, to))

                                                                                                                                                        if count > 0 then
                                                                                                                                                            Action.log(I18N("transfer", {
                                                                                                                                                                count = count,
                                                                                                                                                                what = I18N.agree(count, "dreadnought"),
                                                                                                                                                                from = I18N(from .. "Park"),
                                                                                                                                                                to = I18N(to .. "Park"),
                                                                                                                                                            }), color)
                                                                                                                                                        end

                                                                                                                                                        return count
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.getDreadnoughtPark(color, parkName)
                                                                                                                                                        if parkName == "supply" then
                                                                                                                                                            return PlayBoard.getDreadnoughtPark(color)
                                                                                                                                                        elseif parkName == "garrison" then
                                                                                                                                                            return Combat.getDreadnoughtPark(color)
                                                                                                                                                        elseif parkName == "combat" then
                                                                                                                                                            return Combat.getBattlegroundPark()
                                                                                                                                                        elseif parkName == "carthag" then
                                                                                                                                                            return nil
                                                                                                                                                        elseif parkName == "arrakeen" then
                                                                                                                                                            return nil
                                                                                                                                                        elseif parkName == "imperialBassin" then
                                                                                                                                                            return nil
                                                                                                                                                        else
                                                                                                                                                            error("Unknown park name: " .. tostring(parkName))
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.acquireTleilaxuCard(color, indexInRow)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsInRange(1, 3, indexInRow)
                                                                                                                                                        return TleilaxuRow.acquireTleilaxuCard(indexInRow, color)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.research(color, jump)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        return TleilaxuResearch.advanceResearch(color, jump).doAfter(function (finalJump)
                                                                                                                                                            if finalJump.x > 0 then
                                                                                                                                                                Action.log(I18N("researchAdvance", {count = jump}), color)
                                                                                                                                                            elseif finalJump.x < 0 then
                                                                                                                                                                Action.log(I18N("researchRollback"), color)
                                                                                                                                                            end
                                                                                                                                                        end)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.beetle(color, jump)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsInteger(jump)
                                                                                                                                                        TleilaxuResearch.advanceTleilax(color, jump).doAfter(function (finalJump)
                                                                                                                                                            if finalJump > 0 then
                                                                                                                                                                Action.log(I18N("beetleAdvance", {count = jump}), color)
                                                                                                                                                            elseif finalJump < 0 then
                                                                                                                                                                Action.log(I18N("beetleRollback", {count = math.abs(jump)}), color)
                                                                                                                                                            end
                                                                                                                                                        end)
                                                                                                                                                        return true
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.atomics(color)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        ImperiumRow.nuke(color)
                                                                                                                                                        Action.log(I18N("atomics"), color)
                                                                                                                                                        return true
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.drawIntrigues(color, amount)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsInteger(amount)
                                                                                                                                                        Intrigue.drawIntrigues(color, amount)
                                                                                                                                                        Action.log(I18N("drawObjects", {amount = amount, object = I18N.agree(amount, "intrigueCard")}), color)
                                                                                                                                                        return true
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.stealIntrigues(color, otherColor, amount)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        Types.assertIsPlayerColor(otherColor)
                                                                                                                                                        Types.assertIsInteger(amount)
                                                                                                                                                        Intrigue.stealIntrigues(color, otherColor, amount)
                                                                                                                                                        return true
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.signetRing(color)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        return false
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.gainVictoryPoint(color, name, count)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        if ScoreBoard.gainVictoryPoint(color, name, count) then
                                                                                                                                                            for _ = 1, (count or 1) do
                                                                                                                                                                Action.log(I18N("gainVictoryPoint", {name = I18N(name)}), color)
                                                                                                                                                            end
                                                                                                                                                            return true
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.gainObjective(color, objective)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        return PlayBoard.gainObjective(color, objective)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.control(color, spaceName)
                                                                                                                                                        MainBoard.occupy(MainBoard.findControlableSpace(spaceName), color)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.acquireTech(color, stackIndex, discount)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        if stackIndex then
                                                                                                                                                            TechMarket.acquireTech(stackIndex, color)
                                                                                                                                                            return true
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.pickContract(color, stackIndex)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        if stackIndex then
                                                                                                                                                            return ChoamContractMarket.acquireContract(stackIndex, color)
                                                                                                                                                        elseif not ChoamContractMarket.isEnabled() then
                                                                                                                                                            Action.resources(color, "solari", 2)
                                                                                                                                                            return true
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.pickSkill(color, stackIndex)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        if stackIndex then
                                                                                                                                                            return SardaukarSkillMarket.acquireSkill(stackIndex, color)
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.pickVoice(color)
                                                                                                                                                        Types.assertIsPlayerColor(color)
                                                                                                                                                        local voiceToken = ScoreBoard.getFreeVoiceToken()
                                                                                                                                                        if voiceToken then
                                                                                                                                                            return PlayBoard.acquireVoice(color, voiceToken)
                                                                                                                                                        else
                                                                                                                                                            return false
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.choose(color, topic)
                                                                                                                                                        return false
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function Action.decide(color, topic)
                                                                                                                                                        -- Any reason to disable this for human players,
                                                                                                                                                        -- since optional rewards are always desirable VPs?
                                                                                                                                                        return false
                                                                                                                                                    end

                                                                                                                                                    return Action

                                                                                                                                                end)
                                                                                                                                                __bundle_register("utils.XmlUI", function(require, _LOADED, __bundle_register, __bundle_modules)
                                                                                                                                                    local Helper = require("utils.Helper")
                                                                                                                                                    local I18N = require("utils.I18N")

                                                                                                                                                    local XmlUI = Helper.createClass(nil, {
                                                                                                                                                        DISABLED = {--[[ Disabled but visible ]]},
                                                                                                                                                        HIDDEN = {--[[ Disabled and hidden ]]},
                                                                                                                                                    sharedXml = {}})

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI.new(holder, id, fields)
                                                                                                                                                        --[[
        Important:
            UI.setXmlTable(xml)
            assert(UI.getXmlTable() == xml) -- Not Ok
            -- Wait at least 1 frame.
            assert(UI.getXmlTable() == xml) -- Ok

        Changes made  directly by the user (e.g. checking a box)
        won't be reflected in the retrieved XML though.
    ]]
                                                                                                                                                        assert(holder)
                                                                                                                                                        XmlUI.sharedXml[holder] = XmlUI.sharedXml[holder] or holder.UI.getXmlTable()
                                                                                                                                                        local xmlUI = Helper.createClassInstance(XmlUI, {
                                                                                                                                                            holder = holder,
                                                                                                                                                            id = id,
                                                                                                                                                            active = false,
                                                                                                                                                            fields = fields
                                                                                                                                                        })
                                                                                                                                                        xmlUI:toUI()
                                                                                                                                                        return xmlUI
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI:getXml()
                                                                                                                                                        assert(self.holder)
                                                                                                                                                        local xml = XmlUI.sharedXml[self.holder]
                                                                                                                                                        assert(xml)
                                                                                                                                                        return xml
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI:show()
                                                                                                                                                        self.active = true
                                                                                                                                                        self:toUI()
                                                                                                                                                        --self.holder.UI.show(self.id)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI:hide()
                                                                                                                                                        self.active = false
                                                                                                                                                        self:toUI()
                                                                                                                                                        --self.holder.UI.hide(self.id)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI:setButton(id, label, interactable)
                                                                                                                                                        local element = XmlUI._findXmlElement(self:getXml(), id)
                                                                                                                                                        assert(element, "Unknown id: " .. tostring(id))
                                                                                                                                                        XmlUI._setXmlButton(element, label)
                                                                                                                                                        XmlUI._setXmlInteractable(element, interactable)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI:setButtonI18N(id, key, interactable)
                                                                                                                                                        local element = XmlUI._findXmlElement(self:getXml(), id)
                                                                                                                                                        assert(element, "Unknown id: " .. tostring(id))
                                                                                                                                                        XmlUI._setXmlButtonI18N(element, key)
                                                                                                                                                        XmlUI._setXmlInteractable(element, interactable)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI:fromUI(player, value, id)
                                                                                                                                                        local values = self:_getEnumeration(id)
                                                                                                                                                        if values then
                                                                                                                                                            for key, knownValue in pairs(values) do
                                                                                                                                                                if value == I18N(knownValue) then
                                                                                                                                                                    self.fields[id] = key
                                                                                                                                                                    return
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        elseif value == "False" or value == "True" then
                                                                                                                                                            local on = value == "True"
                                                                                                                                                            self.fields[id] = on
                                                                                                                                                            return
                                                                                                                                                        else
                                                                                                                                                            self.fields[id] = value
                                                                                                                                                            return
                                                                                                                                                        end
                                                                                                                                                        error("Unknown value: " .. tostring(value))
                                                                                                                                                    end

                                                                                                                                                    function XmlUI:toUI()
                                                                                                                                                        if self.id then
                                                                                                                                                            local root = XmlUI._findXmlElement(self:getXml(), self.id)
                                                                                                                                                            assert(root, "Unknown id: " .. tostring(self.id))
                                                                                                                                                            root.attributes.active = self.active
                                                                                                                                                            for name, value in pairs(self.fields) do
                                                                                                                                                                if not XmlUI._isEnumeration(name) and not XmlUI._isRange(name) then
                                                                                                                                                                    local element = XmlUI._findXmlElement(self:getXml(), name)
                                                                                                                                                                    if element then
                                                                                                                                                                        local disabled = XmlUI.isDisabled(value)
                                                                                                                                                                        local hidden = XmlUI.isHidden(value)
                                                                                                                                                                        if not disabled and not hidden then
                                                                                                                                                                            local values = self:_getEnumeration(name)
                                                                                                                                                                            local range = self:_getRange(name)
                                                                                                                                                                            if values then
                                                                                                                                                                                XmlUI._setXmlDropdownOptions(element, values, value)
                                                                                                                                                                            elseif range then
                                                                                                                                                                                XmlUI._setXmlSlider(element, range, value)
                                                                                                                                                                            elseif element.tag == "Toggle" then
                                                                                                                                                                                XmlUI._setXmlToggle(element, value)
                                                                                                                                                                            elseif element.tag == "Text" then
                                                                                                                                                                                XmlUI._setXmlText(element, value)
                                                                                                                                                                            end
                                                                                                                                                                            XmlUI._setXmlActive(element, true)
                                                                                                                                                                            XmlUI._setXmlInteractable(element, true)
                                                                                                                                                                        else
                                                                                                                                                                            XmlUI._setXmlActive(element, not hidden)
                                                                                                                                                                            XmlUI._setXmlInteractable(element, false)
                                                                                                                                                                        end
                                                                                                                                                                    else
                                                                                                                                                                        --log("Unknown id: " .. tostring(name))
                                                                                                                                                                    end
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                        XmlUI._translateContent(self:getXml())
                                                                                                                                                        self.holder.UI.setXmlTable(self:getXml())
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._isEnumeration(name)
                                                                                                                                                        return name:sub(-4) == "_all"
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI:_getEnumeration(name)
                                                                                                                                                        return self.fields[name .. "_all"]
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._isRange(name)
                                                                                                                                                        return name:sub(-6) == "_range"
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI:_getRange(name)
                                                                                                                                                        return self.fields[name .. "_range"]
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI.isDisabled(value)
                                                                                                                                                        return value == XmlUI.DISABLED
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI.isHidden(value)
                                                                                                                                                        return value == XmlUI.HIDDEN
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._findXmlElement(xml, id)
                                                                                                                                                        for _, element in ipairs(xml) do
                                                                                                                                                            if element.attributes and element.attributes.id == id then
                                                                                                                                                                return element
                                                                                                                                                            elseif element.children then
                                                                                                                                                                local hit = XmlUI._findXmlElement(element.children, id)
                                                                                                                                                                if hit then
                                                                                                                                                                    return hit
                                                                                                                                                                end
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                        return nil
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._setXmlDropdownOptions(dropdown, optionValues, default)
                                                                                                                                                        assert(dropdown)
                                                                                                                                                        assert(dropdown.tag == "Dropdown", dropdown.tag)
                                                                                                                                                        assert(dropdown.children)
                                                                                                                                                        assert(#dropdown.children > 0)
                                                                                                                                                        local protoOption = dropdown.children[1]
                                                                                                                                                        dropdown.children = {}
                                                                                                                                                        for key, optionValue in pairs(optionValues) do
                                                                                                                                                            local option = Helper.deepCopy(protoOption)
                                                                                                                                                            option.attributes.selected = key == default
                                                                                                                                                            option.attributes.key = optionValue
                                                                                                                                                            option.value = I18N(optionValue)
                                                                                                                                                            table.insert(dropdown.children, option)
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._setXmlText(text, value)
                                                                                                                                                        assert(text)
                                                                                                                                                        assert(text.tag == "Text", text.tag)
                                                                                                                                                        text.value = value
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._setXmlToggle(toggle, on)
                                                                                                                                                        assert(toggle)
                                                                                                                                                        assert(toggle.tag == "Toggle", toggle.tag)
                                                                                                                                                        toggle.attributes.isOn = XmlUI._toBool(on)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._setXmlSlider(slider, range, value)
                                                                                                                                                        assert(slider)
                                                                                                                                                        assert(slider.tag == "Slider", slider.tag)
                                                                                                                                                        slider.attributes.minValue = range.min
                                                                                                                                                        slider.attributes.maxValue = range.max
                                                                                                                                                        slider.attributes.value = value
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._setXmlButton(button, label)
                                                                                                                                                        assert(button)
                                                                                                                                                        assert(button.tag == "Button", button.tag)
                                                                                                                                                        button.value = label
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._setXmlButtonI18N(button, key)
                                                                                                                                                        assert(button)
                                                                                                                                                        assert(button.tag == "Button", button.tag)
                                                                                                                                                        button.attributes.key = key
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._setXmlActive(xml, active)
                                                                                                                                                        assert(xml)
                                                                                                                                                        xml.attributes.active = XmlUI._toBool(active)
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._setXmlInteractable(xml, interactable)
                                                                                                                                                        assert(xml)
                                                                                                                                                        if xml.tag == "Dropdown" or xml.tag == "Slider" then
                                                                                                                                                            -- FIXME Bidouille esth??tique.
                                                                                                                                                            xml.attributes.active = XmlUI._toBool(interactable)
                                                                                                                                                        else
                                                                                                                                                            xml.attributes.interactable = XmlUI._toBool(interactable)
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._translateContent(xml)
                                                                                                                                                        for _, element in ipairs(xml) do
                                                                                                                                                            XmlUI._translate(element)
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._translate(node)
                                                                                                                                                        if node.attributes then
                                                                                                                                                            if node.attributes.key then
                                                                                                                                                                node.value = I18N(node.attributes.key)
                                                                                                                                                            end
                                                                                                                                                            -- Tooltip popups are disabled for now sice they tend
                                                                                                                                                            -- to hang around after their widget has been removed.
                                                                                                                                                            if node.attributes.tooltipKey and false then
                                                                                                                                                                node.attributes.tooltip = I18N(node.attributes.tooltipKey)
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                        if node.children then
                                                                                                                                                            for _, child in ipairs(node.children) do
                                                                                                                                                                XmlUI._translate(child)
                                                                                                                                                            end
                                                                                                                                                        end
                                                                                                                                                    end

                                                                                                                                                    ---
                                                                                                                                                    function XmlUI._toBool(value)
                                                                                                                                                        return value and "True" or "False"
                                                                                                                                                    end

                                                                                                                                                    return XmlUI

                                                                                                                                                end)
                                                                                                                                                return __bundle_require("__root")
